Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=1,
         lineno=1,
         tokens=134,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='cmake_minimum_required(VERSION 3.2)\n'
              'project(TASO LANGUAGES CXX CUDA)\n'
              '\n'
              'if (EXISTS ${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\n'
              '  include (${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\n'
              'else()\n'
              '  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n'
              '    include(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n'
              '  endif()\n'
              'endif()\n'
              '\n'
              '#include directories\n'
              'include_directories(${CMAKE_INCLUDE_PATH})\n'
              'include_directories(${CMAKE_BINARY_DIR}) # to include protobuf '
              'headeer files\n'
              'include_directories("include")\n'
              '#include_directories("build")\n'
              '#include_directories("src/core")\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=2,
         lineno=1,
         tokens=8,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /CMakeLists.txt\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=3,
         lineno=18,
         tokens=128,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '#initial variables\n'
              'set(TASO_LIBS "")\n'
              'set(TASO_LINK_LIBS ${CMAKE_DL_LIBS})\n'
              'set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n'
              '\n'
              '#Generate protobuf files\n'
              'find_package(Protobuf REQUIRED)\n'
              'message(STATUS "PROTOBUF=" ${PROTOBUF_LIBRARY})\n'
              'include_directories(${PROTOBUF_INCLUDE_DIR})\n'
              'protobuf_generate_cpp(PROTO_CPPS PROTO_HDRS '
              'src/core/rules.proto)\n'
              'list(APPEND TASO_LINK_LIBS ${PROTOBUF_LIBRARY})\n'
              '\n'
              'file(GLOB_RECURSE TASO_SRCS\n'
              '  src/core/*.cc\n'
              '  )\n'
              'list(APPEND TASO_SRCS ${PROTO_CPPS})\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=4,
         lineno=35,
         tokens=47,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'file(GLOB_RECURSE TASO_CUDA_SRCS\n'
              '  src/cudnn/*.cu\n'
              '  )\n'
              '\n'
              'file(GLOB_RECURSE TASO_DNNL_SRCS\n'
              '  src/dnnl/*.cc\n'
              '  )\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=5,
         lineno=43,
         tokens=146,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '#Generic compilation options\n'
              'include(CheckCXXCompilerFlag)\n'
              'check_cxx_compiler_flag("-std=c++11" SUPPORT_CXX11)\n'
              'if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")\n'
              '  message("Build in Debug mode")\n'
              '  set(CMAKE_CUDA_FLAGS "-O0 -g -Xcompiler=-fPIC '
              '${CMAKE_CUDA_FLAGS}")\n'
              '  set(CMAKE_CXX_FLAGS "-O0 -g -Wall -fPIC ${CMAKE_CXX_FLAGS}")\n'
              'else()\n'
              '  set(CMAKE_CUDA_FLAGS "-O2 -Xcompiler=-fPIC '
              '${CMAKE_CUDA_FLAGS}")\n'
              '  set(CMAKE_CXX_FLAGS "-O2 -Wall -fPIC ${CMAKE_CXX_FLAGS}")\n'
              'endif()\n'
              '\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=6,
         lineno=56,
         tokens=135,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#set CUDA\n'
              'if (NOT "${USE_CUDA}" STREQUAL "OFF")\n'
              '  include(cmake/FindCUDA.cmake)\n'
              '  find_cuda(${USE_CUDA})\n'
              '  if (CUDA_FOUND)\n'
              '    list(APPEND TASO_SRCS ${TASO_CUDA_SRCS})\n'
              '    include_directories(${CUDA_INCLUDE_DIRS})\n'
              '    message(STATUS "CUDA_INCLUDE_DIR=" ${CUDA_INCLUDE_DIRS})\n'
              '    add_definitions(-DUSE_CUDNN)\n'
              '    list(APPEND TASO_LINK_LIBS ${CUDA_CUDART_LIBRARY})\n'
              '    list(APPEND TASO_LINK_LIBS ${CUDA_CUDA_LIBRARY})\n'
              '    list(APPEND TASO_LINK_LIBS ${CUDA_CUDNN_LIBRARY})\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=7,
         lineno=68,
         tokens=44,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='    list(APPEND TASO_LINK_LIBS ${CUDA_CUBLAS_LIBRARY})\n'
              '  else()\n'
              '    message(FATAL_ERROR "Cannot find CUDA, USE_CUDA=" '
              '${USE_CUDA})\n'
              '  endif(CUDA_FOUND)\n'
              'endif()\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=8,
         lineno=73,
         tokens=138,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '#set DNNL\n'
              'if (NOT "${USE_DNNL}" STREQUAL "OFF")\n'
              '  if ("${USE_DNNL}" STREQUAL "ON")\n'
              '    message(FATAL_ERROR "Auto search DNNL is not supported yet; '
              'specify explicit DNNL path")\n'
              '  elseif(IS_DIRECTORY ${USE_DNNL})\n'
              '    list(APPEND TASO_SRCS ${TASO_DNNL_SRCS})\n'
              '    set(DNNL_PATH ${USE_DNNL})\n'
              '    find_package(OpenMP)\n'
              '    if (OPENMP_FOUND)\n'
              '      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} '
              '${OpenMP_CXX_FLAGS}")\n'
              '    else()\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=9,
         lineno=85,
         tokens=130,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='      message(FATAL_ERROR "OpenMP is not supported")\n'
              '    endif(OPENMP_FOUND)\n'
              '    set(DNNL_INCLUDE_DIRS ${DNNL_PATH}/include)\n'
              '    include_directories(${DNNL_INCLUDE_DIRS})\n'
              '    message(STATUS "DNNL_INCLUDE_DIRS=" ${DNNL_INCLUDE_DIRS})\n'
              '    find_library(DNNL_LIBRARY dnnl\n'
              '      ${DNNL_PATH}/lib)\n'
              '    message(STATUS "Found DNNL_LIBRARY=" ${DNNL_LIBRARY})\n'
              '    add_definitions(-DUSE_DNNL)\n'
              '    list(APPEND TASO_LINK_LIBS ${DNNL_LIBRARY})\n'
              '  endif()\n'
              'endif()\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=10,
         lineno=97,
         tokens=132,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'add_library(taso_runtime SHARED ${TASO_SRCS})\n'
              '\n'
              'set_target_properties(taso_runtime\n'
              '  PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\n'
              '\n'
              'target_compile_features(taso_runtime PUBLIC cxx_std_11)\n'
              '\n'
              'target_link_libraries(taso_runtime ${TASO_LINK_LIBS})\n'
              '\n'
              'target_include_directories(taso_runtime\n'
              '  PUBLIC ${PROJECT_SOURCE_DIR}/include)\n'
              '\n'
              'set_target_properties(taso_runtime\n'
              '                      PROPERTIES CUDA_SEPARABLE_COMPILATION '
              'ON)\n'
              '#install library\n'
              'install(TARGETS taso_runtime\n'
              '    LIBRARY DESTINATION lib)\n'
              '\n'
              'install (DIRECTORY ${PROJECT_SOURCE_DIR}/include\n'
              '    DESTINATION .)\n')

Fragment(document_cs='032004984345f00b12bb494e6e915c48b4813e54bde0221710db3e0328523550',
         id=11,
         lineno=118,
         tokens=120,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'if ("${BUILD_CPP_EXAMPLES}" STREQUAL "ON")\n'
              '  set(CPP_EXAMPLES_DIR cpp_examples)\n'
              '  set(CPP_EXAMPLES_BIN dnn)\n'
              '  file(GLOB CPP_EXAMPLES_SRCS ${CPP_EXAMPLES_DIR}/*.cc)\n'
              '  add_executable(${CPP_EXAMPLES_BIN} ${CPP_EXAMPLES_SRCS})\n'
              '  set_target_properties(${CPP_EXAMPLES_BIN}\n'
              '    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CPP_EXAMPLES_DIR})\n'
              '  target_link_libraries(${CPP_EXAMPLES_BIN} taso_runtime)\n'
              'endif()\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=12,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is dis')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=13,
         lineno=1,
         tokens=80,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/concat.cc\n'
              '  Functions: bitmask key\n'
              '  Methods: Concat::Concat Concat::collect_costs '
              'Concat::get_int_parameter Concat::~Concat ConcatKey::ConcatKey '
              'Graph::concat Model::get_or_create_concat\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Concat ConcatKey INVALID_OP collect_costs concat '
              'get_int_parameter get_or_create_concat\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=14,
         lineno=10,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::concat(int axis, int n, const TensorHandle* '
              '_inputs)\n'
              '{\n'
              '  Tensor inputTensors[MAX_NUM_INPUTS];\n'
              '  for (int i = 0; i < n; i++) {\n'
              '    inputTensors[i] = *_inputs[i];\n'
              '  }\n'
              '  bool needCopy[MAX_NUM_INPUTS];\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=15,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=16,
         lineno=19,
         tokens=190,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::concat',
         body='TensorHandle Graph::concat(int axis, int n, const TensorHandle* '
              '_inputs)\n'
              '{\n'
              '  Tensor inputTensors[MAX_NUM_INPUTS];\n'
              '  for (int i = 0; i < n; i++) {\n'
              '    inputTensors[i] = *_inputs[i];\n'
              '  }\n'
              '  bool needCopy[MAX_NUM_INPUTS];\n'
              '  for (int i = 0; i < n; i++)\n'
              '    needCopy[i] = true;\n'
              '  Op op = model->get_or_create_concat(axis, n, inputTensors, '
              'needCopy);\n'
              '  // Assert op must be valid\n'
              '  assert (op != Op::INVALID_OP);\n'
              '  for (int i = 0; i < n; i++) \n'
              '    add_edge(_inputs[i]->op, op, _inputs[i]->idx, i);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=17,
         lineno=26,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < n; i++)\n'
              '    needCopy[i] = true;\n'
              '  Op op = model->get_or_create_concat(axis, n, inputTensors, '
              'needCopy);\n'
              '  // Assert op must be valid\n'
              '  assert (op != Op::INVALID_OP);\n'
              '  for (int i = 0; i < n; i++) \n'
              '    add_edge(_inputs[i]->op, op, _inputs[i]->idx, i);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_concat(int axis, int n, Tensor* '
              '_inputs, bool* _needCo')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=18,
         lineno=38,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='py)\n'
              '{\n'
              '  // key ordering is:\n'
              '  // axis, n, bitmask(needCopy)\n'
              '  // inputs[0].dim[0], ..., inputs[0].dim[axis-1],\n'
              '  // inputs[0].dim[axis+1], ..., inputs[0].dim[nDims - 1]\n'
              '  // inputs[0].dim[axis], ..., inputs[n-1].dim[axis]\n'
              '  // Check validness\n'
              '  for (int i = 0; i < n; i++) {\n'
              '    if (_inputs[i].numDim != _inputs[0].numDim) {\n'
              '      return Op::INVALID_OP;\n'
              '    }\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=19,
         lineno=38,
         tokens=313,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_concat',
         body='Op Model::get_or_create_concat(int axis, int n, Tensor* '
              '_inputs, bool* _needCopy)\n'
              '{\n'
              '  // key ordering is:\n'
              '  // axis, n, bitmask(needCopy)\n'
              '  // inputs[0].dim[0], ..., inputs[0].dim[axis-1],\n'
              '  // inputs[0].dim[axis+1], ..., inputs[0].dim[nDims - 1]\n'
              '  // inputs[0].dim[axis], ..., inputs[n-1].dim[axis]\n'
              '  // Check validness\n'
              '  for (int i = 0; i < n; i++) {\n'
              '    if (_inputs[i].numDim != _inputs[0].numDim) {\n'
              '      return Op::INVALID_OP;\n'
              '    }\n'
              '    for (int j = 0; j < _inputs[0].numDim; j++)\n'
              '      if ((j != axis) && (_inputs[i].dim[j] != '
              '_inputs[0].dim[j])) {\n'
              '        return Op::INVALID_OP;\n'
              '      }\n'
              '  }\n'
              '  ConcatKey key(axis, n, _inputs, _needCopy);\n'
              '  Concat* concatOp;\n'
              '  if (concat.find(key) != concat.end()) {\n'
              '    concatOp = concat[key];\n'
              '  } else {\n'
              '    concatOp = new Concat(this, axis, n, _inputs, _needCopy);\n'
              '    measure_concat_cost(concatOp);\n'
              '    concat[key] = concatOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = concatOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=20,
         lineno=50,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < _inputs[0].numDim; j++)\n'
              '      if ((j != axis) && (_inputs[i].dim[j] != '
              '_inputs[0].dim[j])) {\n'
              '        return Op::INVALID_OP;\n'
              '      }\n'
              '  }\n'
              '  ConcatKey key(axis, n, _inputs, _needCopy);\n'
              '  Concat* concatOp;\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=21,
         lineno=55,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(axis, n, _inputs, _needCopy)')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=22,
         lineno=57,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (concat.find(key) != concat.end()) {\n'
              '    concatOp = concat[key];\n'
              '  } else {\n'
              '    concatOp = new Concat(this, axis, n, _inputs, _needCopy);\n'
              '    measure_concat_cost(concatOp);\n'
              '    concat[key] = concatOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = concatOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Concat::Concat(Model* _model, in')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=23,
         lineno=64,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=24,
         lineno=70,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t _axis, int n, Tensor* _inputs, bool* _needCopy)\n'
              '  : OpBase(n, _inputs, _model, OP_CONCAT), axis(_axis)\n'
              '{\n'
              '  //for (int i = 0; i < n; i++) {\n'
              '  //  printf("  concat2[%d]:", i);\n'
              '  //  for (int j = 0; j < _inputs[i].numDim; j++)\n'
              '  //    printf("%d, ", _inputs[i].dim[j]);\n'
              '  //  printf("\\n");\n'
              '  //}\n'
              '  assert(n <= MAX_NUM_INPUTS);\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=25,
         lineno=70,
         tokens=457,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::Concat',
         body='Concat::Concat(Model* _model, int _axis, int n, Tensor* '
              '_inputs, bool* _needCopy)\n'
              '  : OpBase(n, _inputs, _model, OP_CONCAT), axis(_axis)\n'
              '{\n'
              '  //for (int i = 0; i < n; i++) {\n'
              '  //  printf("  concat2[%d]:", i);\n'
              '  //  for (int j = 0; j < _inputs[i].numDim; j++)\n'
              '  //    printf("%d, ", _inputs[i].dim[j]);\n'
              '  //  printf("\\n");\n'
              '  //}\n'
              '  assert(n <= MAX_NUM_INPUTS);\n'
              '  for (int i = 0; i < n; i++)\n'
              '    needCopy[i] = _needCopy[i];\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = inputs[0].numDim;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputs[0].dim[i] = inputs[0].dim[i];\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    if (i != axis) {\n'
              '      outputs[0].split[i] = inputs[0].split[i];\n'
              '      for (int j = 1; j < n; j++)\n'
              '        outputs[0].split[i].combine(inputs[j].split[i]);\n'
              '    }\n'
              '  outputs[0].split[axis] = inputs[0].split[axis];\n'
              '  for (int i = 1; i < n; i++) {\n'
              '    outputs[0].split[axis].merge(outputs[0].dim[axis], '
              'inputs[i].split[axis]);\n'
              '    outputs[0].dim[axis] += inputs[i].dim[axis];\n'
              '  }\n'
              '  for (int i = outputs[0].numDim-1; i >= 0; i--) {\n'
              '    if (i == outputs[0].numDim-1)\n'
              '      outputs[0].stride[i] = 1;\n'
              '    else\n'
              '      outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=26,
         lineno=80,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < n; i++)\n'
              '    needCopy[i] = _needCopy[i];\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = inputs[0].numDim;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputs[0].dim[i] = inputs[0].dim[i];\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    if (i != axis) {\n'
              '      outputs[0].split[i] = inputs[0].split[i];\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=27,
         lineno=89,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 1; j < n; j++)\n'
              '        outputs[0].split[i].combine(inputs[j].split[i]);\n'
              '    }\n'
              '  outputs[0].split[axis] = inputs[0].split[axis];\n'
              '  for (int i = 1; i < n; i++) {\n'
              '    outputs[0].split[axis].merge(outputs[0].dim[axis], '
              'inputs[i].split[axis]);\n'
              '    outputs[0].dim[axis] += inputs[i].dim[axis];\n'
              '  }\n'
              '  for (int i = outputs[0].numDim-1; i >= 0; i--) {\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=28,
         lineno=98,
         tokens=26,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (i == outputs[0].numDim-1)\n'
              '      outputs[0].stride[i] = 1;\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=29,
         lineno=100,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    else\n'
              '      outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Concat::~Concat(void)\n'
              '{}\n'
              '\n'
              'bool Concat::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_AXIS:\n'
              '      *value = axis;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Concat::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=30,
         lineno=106,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::~Concat',
         body='Concat::~Concat(void)\n{}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=31,
         lineno=109,
         tokens=55,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::get_int_parameter',
         body='bool Concat::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_AXIS:\n'
              '      *value = axis;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=32,
         lineno=120,
         tokens=162,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::collect_costs',
         body='void Concat::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  for (int i = 0; i < numInputs; i++)\n'
              '    if (needCopy[i]) {\n'
              '      int inputSize = 1;\n'
              '      for (int j = 0; j < inputs[i].numDim; j++)\n'
              '        inputSize *= inputs[i].dim[j];\n'
              '      mem_acc += inputSize;\n'
              '    }\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += 0;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Concat]: numInputs(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         numInputs, runtime, exe_time);\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=33,
         lineno=123,
         tokens=32,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numInputs; i++)\n'
              '    if (needCopy[i]) {\n'
              '      int inputSize = 1;\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=34,
         lineno=126,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 0; j < inputs[i].numDim; j++)\n'
              '        inputSize *= inputs[i].dim[j];\n'
              '      mem_acc += inputSize;\n'
              '    }\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += 0;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Concat]: numInputs(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         numInputs, runtime, exe_time);\n'
              '}\n'
              '\n'
              'int bitmask(int n, bool* bits)\n'
              '{\n'
              '  int ret = 0;\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=35,
         lineno=138,
         tokens=57,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='bitmask',
         body='int bitmask(int n, bool* bits)\n'
              '{\n'
              '  int ret = 0;\n'
              '  for (int i = 0; i < n; i++)\n'
              '    ret = bits[i] ? ret * 2 + 1 : ret * 2;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=36,
         lineno=138,
         tokens=9,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='bitmask',
         body='bitmask(int n, bool* bits)')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=37,
         lineno=141,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < n; i++)\n'
              '    ret = bits[i] ? ret * 2 + 1 : ret * 2;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              '// key ordering is: axis, n, bitmask(needCopy), inputs[0], ..., '
              'inputs[n-1]\n'
              '//\n'
              '//\n'
              '// axis, n, bitmask(needCopy), inputs[0], inputs[n-1]\n'
              '// inputs[0].dim[0], ..., inputs[0].dim[axis-1],\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=38,
         lineno=151,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='// inputs[0].dim[axis+1], ..., inputs[0].dim[nDims - 1]\n'
              '// inputs[0].dim[axis], ..., inputs[n-1].dim[axis]\n'
              'ConcatKey::ConcatKey(int axis, int n, Tensor* _inputs, bool* '
              '_needCopy)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = axis;\n'
              '  keys[idx++] = n;\n'
              '  keys[idx++] = bitmask(n, _needCopy);\n'
              '  for (int i = 0; i < n; i++)\n'
              '    _inputs[i].serialize(keys, idx);\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=39,
         lineno=153,
         tokens=253,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ConcatKey::ConcatKey',
         body='ConcatKey::ConcatKey(int axis, int n, Tensor* _inputs, bool* '
              '_needCopy)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = axis;\n'
              '  keys[idx++] = n;\n'
              '  keys[idx++] = bitmask(n, _needCopy);\n'
              '  for (int i = 0; i < n; i++)\n'
              '    _inputs[i].serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '#ifdef DEADCODE\n'
              '  assert(_inputs[0].numDim + n + 2 <= KEY_LENGTH);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = axis;\n'
              '  keys[idx++] = n;\n'
              '  keys[idx++] = bitmask(n, _needCopy);\n'
              '  for (int i = 0; i < _inputs[0].numDim; i++)\n'
              '    if (i != axis)\n'
              '      keys[idx++] = _inputs[0].dim[i];\n'
              '  for (int i = 0; i < n; i++)\n'
              '    keys[idx++] = _inputs[i].dim[axis];\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '#endif\n'
              '}')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=40,
         lineno=161,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '#ifdef DEADCODE\n'
              '  assert(_inputs[0].numDim + n + 2 <= KEY_LENGTH);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = axis;\n'
              '  keys[idx++] = n;\n'
              '  keys[idx++] = bitmask(n, _needCopy);\n'
              '  for (int i = 0; i < _inputs[0].numDim; i++)\n'
              '    if (i != axis)\n'
              '      keys[idx++] = _inputs[0].dim[i];\n'
              '  for (int i = 0; i < n; i++)\n'
              '    keys[idx++] = _inputs[i].dim[axis];\n')

Fragment(document_cs='03a151db4c065333fca87768ae4230ff8528b410859a026b64e900d8a29c7be9',
         id=41,
         lineno=175,
         tokens=26,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '#endif\n'
              '}\n'
              '\n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=42,
         lineno=1,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=43,
         lineno=1,
         tokens=69,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/batchnorm_kernel.cu\n'
              '  Methods: BatchNorm::get_min_epsilon BatchNorm::map '
              'BatchNorm::unmap Model::measure_batchnorm_cost\n'
              '  Variables: milliseconds scalePtr\n'
              '  Using: taso\n'
              '  Usages: forward get_min_epsilon map measure_batchnorm_cost '
              'unmap\n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=44,
         lineno=10,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'float BatchNorm::get_min_epsilon(void)\n'
              '{\n'
              '  return CUDNN_BN_MIN_EPSILON;\n'
              '}\n'
              '\n'
              'void BatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=45,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=46,
         lineno=20,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::get_min_epsilon',
         body='float BatchNorm::get_min_epsilon(void)\n'
              '{\n'
              '  return CUDNN_BN_MIN_EPSILON;\n'
              '}')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=47,
         lineno=25,
         tokens=523,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::map',
         body='void BatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC = inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));\n'
              '#ifdef DO_TRAINING\n'
              '  checkCUDA(cudaMalloc(&runningMean, sizeof(DATATYPE) * '
              'inputC));\n'
              '  checkCUDA(cudaMalloc(&runningVar, sizeof(DATATYPE) * '
              'inputC));\n'
              '  checkCUDA(cudaMalloc(&saveMean, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&saveVar, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&biasPtr, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&scalePtr, sizeof(DATATYPE) * inputC));\n'
              '   initialize scale to ones and bias to zeros\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    scalePtr, inputC, 1.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    biasPtr, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningMean, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningVar, inputC, 0.0f);\n'
              '#endif\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=48,
         lineno=27,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='].numDim == 4);\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC = inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTenso')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=49,
         lineno=36,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r, CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));\n'
              '#ifdef DO_TRAINING\n'
              '  checkCUDA(cudaMalloc(&runningMean, sizeof(DATAT')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=50,
         lineno=43,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='YPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&runningVar, sizeof(DATATYPE) * '
              'inputC));\n'
              '  checkCUDA(cudaMalloc(&saveMean, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&saveVar, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&biasPtr, sizeof(DATATYPE) * inputC));\n'
              '  checkCUDA(cudaMalloc(&scalePtr, sizeof(DATATYPE) * inputC));\n'
              '   initialize scale to ones and bias to zeros\n'
              '  assign_kernel')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=51,
         lineno=49,
         tokens=117,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='scalePtr',
         body='initialize scale to ones and bias to zeros\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    scalePtr, inputC, 1.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    biasPtr, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningMean, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningVar, inputC, 0.0f);')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=52,
         lineno=50,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    scalePtr, inputC, 1.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    biasPtr, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningMean, inputC, 0.0f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    runningVar, inputC, 0.0f);\n'
              '#endif\n'
              '  size_t outputSize = sizeof(DATATYPE) * outp')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=53,
         lineno=59,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='uts[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void BatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '#ifdef DO_TRAINING\n'
              '  checkCUDA(cudaFree(runningMean));\n'
              '  checkCUDA(cudaFree(runningVar));\n'
              '  checkCUDA(cudaFree(sa')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=54,
         lineno=63,
         tokens=123,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::unmap',
         body='void BatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '#ifdef DO_TRAINING\n'
              '  checkCUDA(cudaFree(runningMean));\n'
              '  checkCUDA(cudaFree(runningVar));\n'
              '  checkCUDA(cudaFree(saveMean));\n'
              '  checkCUDA(cudaFree(saveVar));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '  checkCUDA(cudaFree(scalePtr));\n'
              '#endif\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=55,
         lineno=71,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='veMean));\n'
              '  checkCUDA(cudaFree(saveVar));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '  checkCUDA(cudaFree(scalePtr));\n'
              '#endif\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void BatchNorm::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  const float eps = epsilon;\n'
              '  cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;\n'
              '  //int inputC = inputs[0].dim[1];\n'
              '#ifdef DO_TRAINING \n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=56,
         lineno=87,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (model->isTraining) {\n'
              '    assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '      runningMean, inputC, 0.0f);\n'
              '    assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '      runningVar, inputC, 0.0f);\n'
              '    checkCUDNN(cudnnBatchNormalizationForwardTraining(\n'
              '      model->dnn, mode, &alpha, &beta, inputTensor, '
              'inputs[0].data_ptr,\n'
              '      outputTensor, outputs[0].data_ptr, biasTensor, scal')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=57,
         lineno=94,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ePtr, biasPtr,\n'
              '      1.0, runningMean, runningVar, eps, saveMean, saveVar));\n'
              '  } else {\n'
              '#endif\n'
              '    checkCUDNN(cudnnBatchNormalizationForwardInference(\n'
              '      model->dnn, mode, &alpha, &beta, inputTensor, '
              'inputs[0].data_ptr,\n'
              '      outputTensor, outputs[0].data_ptr, biasTensor, '
              'inputs[1].data_ptr, inputs[2].data_ptr,\n'
              '      inputs[3].data_ptr, inputs[4].data_ptr, eps));\n'
              '#ifdef DO_TRAINING \n'
              '  }\n'
              '#endif\n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=58,
         lineno=105,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_batchnorm_cost(BatchNorm* bn)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = bn->inputs[0].dim[0];\n'
              '  int inputC = bn->inputs[0].dim[1];\n'
              '  int inputH = bn-')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=59,
         lineno=109,
         tokens=663,
         depth=1,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_batchnorm_cost',
         body='void Model::measure_batchnorm_cost(BatchNorm* bn)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = bn->inputs[0].dim[0];\n'
              '  int inputC = bn->inputs[0].dim[1];\n'
              '  int inputH = bn->inputs[0].dim[2];\n'
              '  int inputW = bn->inputs[0].dim[3];\n'
              '  cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));\n'
              '#ifdef DO_TRAINING\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    scalePtr, inputC, 0.5f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    biasPtr, inputC, 0.5f);\n'
              '#endif\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '#ifdef DO_TRAINING\n'
              '    if (isTraining) {\n'
              '      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '        runningMean, inputC, 0.0f);\n'
              '      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '        runningVar, inputC, 0.0f);\n'
              '      checkCUDNN(cudnnBatchNormalizationForwardTraining(\n'
              '        dnn, mode, &alpha, &beta, inputTensor, inputPtr,\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, '
              'biasPtr,\n'
              '        1.0, runningMean, runningVar, CUDNN_BN_MIN_EPSILON,\n'
              '        saveMean, saveVar));\n'
              '    } else {\n'
              '#endif\n'
              '      checkCUDNN(cudnnBatchNormalizationForwardInference(\n'
              '        dnn, mode, &alpha, &beta, inputTensor, inputPtr,\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, '
              'biasPtr,\n'
              '        runningMean, runningVar, CUDNN_BN_MIN_EPSILON));\n'
              '#ifdef DO_TRAINING\n'
              '    }\n'
              '#endif\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  bn->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("measure[BatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf)\\n",\n'
              '           inputN, inputC, inputH, inputW, bn->runtime);\n'
              '}')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=60,
         lineno=115,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='>inputs[0].dim[2];\n'
              '  int inputW = bn->inputs[0].dim[3];\n'
              '  cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cu')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=61,
         lineno=120,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dnnSetTensor4dDescriptor(outputTensor, CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));\n'
              '#ifdef DO_TRAINING\n'
              '  assi')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=62,
         lineno=125,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='gn_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    scalePtr, inputC, 0.5f);\n'
              '  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '    biasPtr, inputC, 0.5f);\n'
              '#endif\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '#ifdef DO_TRAINING\n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=63,
         lineno=134,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (isTraining) {\n'
              '      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '        runningMean, inputC, 0.0f);\n'
              '      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(\n'
              '        runningVar, inputC, 0.0f);\n'
              '      checkCUDNN(cudnnBatchNormalizationForwardTraining(\n'
              '        dnn, mode, &alpha, &beta, inputTensor, inputPtr,\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, '
              'biasPtr,\n'
              '        1.0, runningMean, runningVar, CUDNN_BN_MIN_EPSILON,\n'
              '        saveMean, saveVar));\n'
              '    } els')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=64,
         lineno=144,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e {\n'
              '#endif\n'
              '      checkCUDNN(cudnnBatchNormalizationForwardInference(\n'
              '        dnn, mode, &alpha, &beta, inputTensor, inputPtr,\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, '
              'biasPtr,\n'
              '        runningMean, runningVar, CUDNN_BN_MIN_EPSILON));\n'
              '#ifdef DO_TRAINING\n'
              '    }\n'
              '#endif\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  bn->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=65,
         lineno=156,
         tokens=3,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='0711ef6c28363de6658e06ebd1c1554bb288b0dcce3086f8417cfa984c713abc',
         id=66,
         lineno=159,
         tokens=50,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("measure[BatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf)\\n",\n'
              '           inputN, inputC, inputH, inputW, bn->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=67,
         lineno=1,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the Lice')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=68,
         lineno=1,
         tokens=47,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/nasnet_a.h\n'
              '  Macros: _CPP_EXAMPLES_NASNET_A_H_\n'
              '  Functions: fit nasnet_a normal_cell reduction_cell '
              'separable_conv squeeze\n'
              '  Variables: outputs\n')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=69,
         lineno=12,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nse for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EXAMPLES_NASNET_A_H_\n'
              '#define _CPP_EXAMPLES_NASNET_A_H_\n'
              '\n'
              '#include <vector>\n'
              '\n'
              'TensorHandle squeeze(Graph* graph, const TensorHandle input, '
              'int outChannels) {\n'
              '  auto weight = new_random_weight(graph, { outChannels, '
              'input->dim[1], 1, 1 });\n'
              '  return graph->conv2d(input, weight, 1, 1, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '}\n'
              '\n'
              'TensorHandle fit(Graph* graph, const TensorHandle current, '
              'const TensorHandle input) {\n')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=70,
         lineno=17,
         tokens=12,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_NASNET_A_H_',
         body='#define _CPP_EXAMPLES_NASNET_A_H_')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=71,
         lineno=21,
         tokens=70,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='squeeze',
         body='TensorHandle squeeze(Graph* graph, const TensorHandle input, '
              'int outChannels) {\n'
              '  auto weight = new_random_weight(graph, { outChannels, '
              'input->dim[1], 1, 1 });\n'
              '  return graph->conv2d(input, weight, 1, 1, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '}')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=72,
         lineno=21,
         tokens=14,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='squeeze',
         body='squeeze(Graph* graph, const TensorHandle input, int outChannels)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=73,
         lineno=26,
         tokens=15,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='fit',
         body='fit(Graph* graph, const TensorHandle current, const '
              'TensorHandle input)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=74,
         lineno=26,
         tokens=106,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fit',
         body='TensorHandle fit(Graph* graph, const TensorHandle current, '
              'const TensorHandle input) {\n'
              '  if (input->dim[2] == current->dim[2]) {\n'
              '    return squeeze(graph, input, current->dim[1]);\n'
              '  }\n'
              '  auto weight = new_random_weight(graph, { current->dim[1], '
              'input->dim[1], 3, 3 });\n'
              '  return graph->conv2d(input, weight, 2, 2, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '}')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=75,
         lineno=27,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (input->dim[2] == current->dim[2]) {\n'
              '    return squeeze(graph, input, current->dim[1]);\n'
              '  }\n'
              '  auto weight = new_random_weight(graph, { current->dim[1], '
              'input->dim[1], 3, 3 });\n'
              '  return graph->conv2d(input, weight, 2, 2, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '}\n'
              '\n'
              'TensorHandle separable_conv(Graph* graph, const TensorHandle '
              'input, int outChannels,\n'
              '    int kernelH, int kernelW, int strideH, int strideW,\n'
              '    PaddingMode padding, ActiMode a')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=76,
         lineno=34,
         tokens=47,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='separable_conv',
         body='separable_conv(Graph* graph, const TensorHandle input, int '
              'outChannels,\n'
              '    int kernelH, int kernelW, int strideH, int strideW,\n'
              '    PaddingMode padding, ActiMode activation = AC_MODE_NONE)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=77,
         lineno=34,
         tokens=169,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='separable_conv',
         body='TensorHandle separable_conv(Graph* graph, const TensorHandle '
              'input, int outChannels,\n'
              '    int kernelH, int kernelW, int strideH, int strideW,\n'
              '    PaddingMode padding, ActiMode activation = AC_MODE_NONE) {\n'
              '  assert(input->dim[1] % outChannels == 0);\n'
              '  auto w1 = new_random_weight(graph, { outChannels, '
              'input->dim[1] / outChannels, kernelH, kernelW });\n'
              '  auto t = graph->conv2d(input, w1, strideH, strideW, '
              'padding);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  return graph->conv2d(t, w2, 1, 1, PD_MODE_SAME, activation);\n'
              '}')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=78,
         lineno=36,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ctivation = AC_MODE_NONE) {\n'
              '  assert(input->dim[1] % outChannels == 0);\n'
              '  auto w1 = new_random_weight(graph, { outChannels, '
              'input->dim[1] / outChannels, kernelH, kernelW });\n'
              '  auto t = graph->conv2d(input, w1, strideH, strideW, '
              'padding);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  return graph->conv2d(t, w2, 1, 1, PD_MODE_SAME, activation);\n'
              '}\n'
              '\n'
              'TensorHandle normal_cell(Graph* graph, TensorHandle prev, ')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=79,
         lineno=44,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TensorHandle cur, int outChannels) {\n'
              '  cur = squeeze(graph, cur, outChannels);\n'
              '  prev = fit(graph, cur, prev);\n'
              '  std::vector<TensorHandle> ts;\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 3, 3, 1, '
              '1, PD_MODE_SAME));\n'
              '  ts.push_back(cur);\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 3, 3, '
              '1, 1, PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 3, 3, 1, '
              '1, PD_MODE_SAME));\n'
              '  ts.push_back(graph')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=80,
         lineno=44,
         tokens=386,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='TensorHandle normal_cell(Graph* graph, TensorHandle prev, '
              'TensorHandle cur, int outChannels) {\n'
              '  cur = squeeze(graph, cur, outChannels);\n'
              '  prev = fit(graph, cur, prev);\n'
              '  std::vector<TensorHandle> ts;\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 3, 3, 1, '
              '1, PD_MODE_SAME));\n'
              '  ts.push_back(cur);\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 3, 3, '
              '1, 1, PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 3, 3, 1, '
              '1, PD_MODE_SAME));\n'
              '  ts.push_back(graph->pool2d_avg(cur, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(prev);\n'
              '  ts.push_back(graph->pool2d_avg(prev, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(graph->pool2d_avg(prev, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 3, 3, '
              '1, 1, PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 3, 3, '
              '1, 1, PD_MODE_SAME));\n'
              '  assert(ts.size() == 10);\n'
              '  std::vector<TensorHandle> outputs;\n'
              '  for (int i = 0; i < 5; i++) {\n'
              '    outputs.push_back(graph->element(OP_EW_ADD, ts[2 * i], ts[2 '
              '* i + 1]));\n'
              '  }\n'
              '  return graph->concat(1, outputs.size(), outputs.data());\n'
              '}')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=81,
         lineno=44,
         tokens=18,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='normal_cell(Graph* graph, TensorHandle prev, TensorHandle cur, '
              'int outChannels)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=82,
         lineno=52,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='->pool2d_avg(cur, 3, 3, 1, 1, PD_MODE_SAME));\n'
              '  ts.push_back(prev);\n'
              '  ts.push_back(graph->pool2d_avg(prev, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(graph->pool2d_avg(prev, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=83,
         lineno=56,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='separable_conv(graph, prev, outChannels, 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 3, 3, '
              '1, 1, PD_MODE_SAME));\n'
              '  assert(ts.size() == 10);\n'
              '  std::vector<TensorHandle> outputs;\n')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=84,
         lineno=59,
         tokens=9,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputs',
         body='std::vector<TensorHandle> outputs;')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=85,
         lineno=60,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 5; i++) {\n'
              '    outputs.push_back(graph->element(OP_EW_ADD, ts[2 * i], ts[2 '
              '* i + 1]));\n'
              '  }\n'
              '  return graph->concat(1, outputs.size(), outputs.data());\n'
              '}\n'
              '\n'
              'TensorHandle reduction_cell(Graph* graph, TensorHandle prev, '
              'TensorHandle cur, int outChannels) {\n'
              '  cur = squeeze(graph, cur, outChannels);\n'
              '  prev = fit(graph, cur, prev);\n'
              '  std::vector<TensorHandle> ts;\n'
              '  std::vector<TensorHandle> outputs;\n'
              '  ts.push_back(separable_conv(graph, prev, outChannel')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=86,
         lineno=66,
         tokens=460,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='TensorHandle reduction_cell(Graph* graph, TensorHandle prev, '
              'TensorHandle cur, int outChannels) {\n'
              '  cur = squeeze(graph, cur, outChannels);\n'
              '  prev = fit(graph, cur, prev);\n'
              '  std::vector<TensorHandle> ts;\n'
              '  std::vector<TensorHandle> outputs;\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 7, 7, '
              '2, 2, PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 5, 5, 2, '
              '2, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[0], ts[1]));\n'
              '  ts.push_back(graph->pool2d_max(cur, 3, 3, 2, 2, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 7, 7, '
              '2, 2, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[2], ts[3]));\n'
              '  ts.push_back(graph->pool2d_avg(cur, 3, 3, 2, 2, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 5, 5, '
              '2, 2, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[4], ts[5]));\n'
              '  ts.push_back(graph->pool2d_max(cur, 3, 3, 2, 2, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, outputs[0], outChannels, '
              '3, 3, 1, 1, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[6], ts[7]));\n'
              '  ts.push_back(graph->pool2d_avg(outputs[0], 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(outputs[1]);\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[8], ts[9]));\n'
              '  return graph->concat(1, outputs.size(), outputs.data());\n'
              '}')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=87,
         lineno=66,
         tokens=19,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='reduction_cell(Graph* graph, TensorHandle prev, TensorHandle '
              'cur, int outChannels)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=88,
         lineno=70,
         tokens=9,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputs',
         body='std::vector<TensorHandle> outputs;')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=89,
         lineno=71,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s, 7, 7, 2, 2, PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph, cur, outChannels, 5, 5, 2, '
              '2, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[0], ts[1]));\n'
              '  ts.push_back(graph->pool2d_max(cur, 3, 3, 2, 2, PD_MODE_')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=90,
         lineno=74,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='SAME));\n'
              '  ts.push_back(separable_conv(graph, prev, outChannels, 7, 7, '
              '2, 2, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[2], ts[3]));\n'
              '  ts.push_back(graph->pool2d_avg(cur, 3, 3, 2, 2, '
              'PD_MODE_SAME));\n'
              '  ts.push_back')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=91,
         lineno=78,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(separable_conv(graph, prev, outChannels, 5, 5, 2, 2, '
              'PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[4], ts[5]));\n'
              '  ts.push_back(graph->pool2d_max(cur, 3, 3, 2, 2, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(separable_conv(graph,')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=92,
         lineno=81,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' outputs[0], outChannels, 3, 3, 1, 1, PD_MODE_SAME));\n'
              '  outputs.push_back(graph->element(OP_EW_ADD, ts[6], ts[7]));\n'
              '  ts.push_back(graph->pool2d_avg(outputs[0], 3, 3, 1, 1, '
              'PD_MODE_SAME));\n'
              '  ts.push_back(outputs[1]);\n'
              '  outputs.push_ba')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=93,
         lineno=85,
         tokens=67,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ck(graph->element(OP_EW_ADD, ts[8], ts[9]));\n'
              '  return graph->concat(1, outputs.size(), outputs.data());\n'
              '}\n'
              '\n'
              'Graph* nasnet_a(float alpha, int budget, bool printSubst = '
              'false) {\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph,')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=94,
         lineno=89,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='nasnet_a',
         body='nasnet_a(float alpha, int budget, bool printSubst = false)')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=95,
         lineno=91,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' { 1, 3, 224, 224 });\n'
              '  auto weight = new_random_weight(graph, { 64, 3, 7, 7 });\n'
              '  inp = graph->conv2d(inp, weight, 2, 2, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  inp = graph->pool2d_max(inp, 3, 3, 2, 2, PD_MODE_SAME);\n'
              '  int outChannels = 128;\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    auto prev = inp;\n'
              '    auto cur = inp;\n')

Fragment(document_cs='0774fb4202d0689f9f6cb82503eb2105ee2d2d4ff02595d97b778c4429dcfb53',
         id=96,
         lineno=99,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < 5; j++) {\n'
              '      auto t = normal_cell(graph, prev, cur, outChannels);\n'
              '      prev = cur;\n'
              '      cur = t;\n'
              '    }\n'
              '    outChannels *= 2;\n'
              '    inp = reduction_cell(graph, prev, cur, outChannels);\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=97,
         lineno=1,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=98,
         lineno=1,
         tokens=633,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /include/taso/ops.h\n'
              '  Classes: Activation BatchNorm BroadcastAdd Cast Concat '
              'Constant Conv2D Element ElementWiseUnary Enlarge '
              'FuseConvBatchNorm FuseConvBatchNormAlphaVar '
              'FuseConvBatchNormBias Graph Matmul MergeGConv Model Mul NoOp '
              'OpBase Pad Pool2D Reduce Reshape Resize Shape Slice Split '
              'Squeeze TopK Transpose Unsqueeze Where\n'
              '  Structs: ActivationKey BLASGEMMParams BatchNormKey '
              'BroadcastAddKey CastKey ConcatKey ConstantKey Conv2DKey Edge '
              'EdgeCompare ElementKey ElementWiseUnaryKey EnlargeKey '
              'FuseConvBatchNormAlphaVarKey FuseConvBatchNormBiasKey '
              'FuseConvBatchNormKey GraphSubst KeyCompare MatmulKey '
              'MergeGConvKey MulKey NoopKey Op OpCompare PadKey Pool2DKey '
              'ReduceKey ReshapeKey ResizeKey ShapeKey SliceKey SplitInfo '
              'SplitKey SqueezeKey SrcEdge SrcEdgeCompare Tensor TopKKey '
              'TransposeKey UnsqueezeKey WhereKey\n'
              '  Enums: ActiMode DIMParameter DataType OpType PMParameter '
              'PaddingMode TNParameter\n'
              '  Typedefs: DATATYPE Tensor\n'
              '  Macros: DNNL_NO_MATMUL MAX_DIM MAX_NUM_INPUTS MAX_NUM_OUTPUTS '
              'MAX_NUM_SPLITS MAX_TENSOR_SIZE REPEAT_TIMES WARMUP_TIMES '
              '_CNN_OPS_H_\n'
              '  Functions: Activation ActivationKey BatchNorm BatchNormKey '
              'BroadcastAdd BroadcastAddKey Cast CastKey Concat ConcatKey '
              'Constant ConstantKey Conv2D Conv2DKey Edge Element ElementKey '
              'ElementWiseUnary ElementWiseUnaryKey Enlarge EnlargeKey '
              'FuseConvBatchNorm FuseConvBatchNormAlphaVar '
              'FuseConvBatchNormAlphaVarKey FuseConvBatchNormBias '
              'FuseConvBatchNormBiasKey FuseConvBatchNormKey Graph Matmul '
              'MatmulKey MergeGConv MergeGConvKey Model Mul MulKey NoOp '
              'NoopKey Op OpBase Pad PadKey Pool2D Pool2DKey Reduce ReduceKey '
              'Reshape ReshapeKey Resize ResizeKey Shape ShapeKey Slice '
              'SliceKey Split SplitInfo SplitKey Squeeze SqueezeKey SrcEdge '
              'Tensor TopK TopKKey Transpose TransposeKey Unsqueeze '
              'UnsqueezeKey Where WhereKey\n'
              '  Fields: INVALID_OP KEY_LENGTH MAGIC_NUMBER MAX_KEY_LENGTH '
              'NO_SPLIT actiDesc activation axes axis batch batchnorm blas '
              'broadcast_add cast concat constant conv2d convDesc count dnn '
              'element element_unary eng enlarge epsilon filterDesc '
              'fuse_conv_batchnorm fuse_conv_batchnorm_alpha_var '
              'fuse_conv_batchnorm_bias fwdAlgo global_unique_id guid idx '
              'in1Tensor inEdges inPlace inputTensor isTraining keepdims '
              'kernelH largest lda ldb ldc matmul merge_gconv mul net noop num '
              'numDim numInputs opDesc outputC outputTensor pad pad_before '
              'pad_value padding params permIdx pool2d poolDesc print_cost '
              'reduce reshape resize runtime scaleTensor shape shuffle sizes '
              'slice split squeeze srcIdx srcOp srcOps start startEvent '
              'strideH strm subst_history topk totalCost transA transB '
              'transpose type unsqueeze where workSpaceSize\n'
              '  Using: nvinfer1 std\n'
              '  Namespaces: taso\n'
              '  Usages: KEY_LENGTH MAX_KEY_LENGTH NO_SPLIT to_string\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=99,
         lineno=10,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '#ifndef _CNN_OPS_H_\n'
              '#define _CNN_OPS_H_\n'
              '\n'
              '#ifdef USE_CUDNN\n'
              '#include <cudnn.h>\n'
              '#include <cuda_runtime.h>\n'
              '#include <cublas_v2.h>\n'
              '#endif\n'
              '\n'
              '#ifdef TRT\n'
              '#include "NvInfer.h"\n'
              '#include "NvUtils.h"\n'
              '\n'
              'using namespace nvinfer1;\n'
              '#endif\n'
              '\n'
              '#ifdef USE_DNNL\n'
              '#include "dnnl.hpp"\n'
              '\n'
              '// FIXME: check DNNL_VERSION_MAJOR/MINOR\n'
              '#define DNNL_NO_MATMUL\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=100,
         lineno=16,
         tokens=7,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CNN_OPS_H_',
         body='#define _CNN_OPS_H_')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=101,
         lineno=28,
         tokens=7,
         depth=2,
         parent_id=None,
         category='using',
         summary=False,
         name='nvinfer1',
         body='using namespace nvinfer1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=102,
         lineno=35,
         tokens=8,
         depth=2,
         parent_id=None,
         category='macro',
         summary=False,
         name='DNNL_NO_MATMUL',
         body='#define DNNL_NO_MATMUL')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=103,
         lineno=36,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'using DNNLNet = std::vector<std::pair<dnnl::primitive, '
              'std::unordered_map<int, dnnl::memory>>>;\n'
              '#endif\n'
              '\n'
              '#include <cassert>\n'
              '#include <map>\n'
              '#include <array>\n'
              '#include <vector>\n'
              '#include <set>\n'
              '#include <list>\n'
              '#include <iostream>\n'
              '#include <fstream>\n'
              '#include <memory>\n'
              'using namespace std;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=104,
         lineno=49,
         tokens=4,
         depth=1,
         parent_id=None,
         category='using',
         summary=False,
         name='std',
         body='using namespace std;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=105,
         lineno=50,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'namespace taso {\n'
              '\n'
              '#define MAX_DIM 8\n'
              '#define MAX_NUM_SPLITS 32\n'
              '#define MAX_NUM_INPUTS 6\n'
              '#define MAX_NUM_OUTPUTS 6\n'
              '#define MAX_TENSOR_SIZE 512 * 1024 * 1024 // 512MB\n'
              '#define REPEAT_TIMES 32\n'
              '#define WARMUP_TIMES 8\n'
              'const size_t WORK_SPACE_SIZE = (size_t)2 * 1024 * 1024 * 1024; '
              '// 2GB\n'
              'typedef float DATATYPE;\n'
              '\n'
              'class Model;\n'
              'class OpBase;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=106,
         lineno=51,
         tokens=7,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='taso',
         body="namespace b'taso' {...}")

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=107,
         lineno=53,
         tokens=5,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_DIM',
         body='#define MAX_DIM 8')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=108,
         lineno=54,
         tokens=8,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_NUM_SPLITS',
         body='#define MAX_NUM_SPLITS 32')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=109,
         lineno=55,
         tokens=7,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_NUM_INPUTS',
         body='#define MAX_NUM_INPUTS 6')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=110,
         lineno=56,
         tokens=7,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_NUM_OUTPUTS',
         body='#define MAX_NUM_OUTPUTS 6')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=111,
         lineno=57,
         tokens=19,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_TENSOR_SIZE',
         body='#define MAX_TENSOR_SIZE 512 * 1024 * 1024 // 512MB')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=112,
         lineno=58,
         tokens=6,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='REPEAT_TIMES',
         body='#define REPEAT_TIMES 32')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=113,
         lineno=59,
         tokens=7,
         depth=3,
         parent_id=None,
         category='macro',
         summary=False,
         name='WARMUP_TIMES',
         body='#define WARMUP_TIMES 8')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=114,
         lineno=61,
         tokens=5,
         depth=3,
         parent_id=None,
         category='typedef',
         summary=False,
         name='DATATYPE',
         body='typedef float DATATYPE;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=115,
         lineno=63,
         tokens=2,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Model',
         body='class Model')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=116,
         lineno=64,
         tokens=3,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OpBase',
         body='class OpBase')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=117,
         lineno=65,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'enum {\n'
              '  GUID_INVALID = 0,\n'
              '  GUID_INPUT = 10,\n'
              '  GUID_WEIGHT = 11,\n'
              '  GUID_PRESERVED = 19,\n'
              '};\n'
              '\n'
              '//This must be consistent with python/taso/_cython/CCore.pxd\n'
              'enum OpType {\n'
              '  OP_INPUT,\n'
              '  OP_WEIGHT,\n'
              '  OP_ANY,\n'
              '  OP_CONV2D,\n'
              '  OP_DROPOUT,\n'
              '  OP_LINEAR,\n'
              '  OP_POOL2D_MAX,\n'
              '  OP_POOL2D_AVG,\n'
              '  OP_RELU,\n'
              '  OP_SIGMOID,\n'
              '  OP_TANH,\n'
              '  OP_BATCHNORM,\n'
              '  OP_CONCAT,\n'
              '  OP_SPLIT,\n'
              '  OP_RESHAPE,\n'
              '  OP_TRANSPOSE,\n'
              '  OP_EW_ADD,\n'
              ' ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=118,
         lineno=74,
         tokens=949,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='OpType',
         body='enum OpType {\n'
              '  OP_INPUT,\n'
              '  OP_WEIGHT,\n'
              '  OP_ANY,\n'
              '  OP_CONV2D,\n'
              '  OP_DROPOUT,\n'
              '  OP_LINEAR,\n'
              '  OP_POOL2D_MAX,\n'
              '  OP_POOL2D_AVG,\n'
              '  OP_RELU,\n'
              '  OP_SIGMOID,\n'
              '  OP_TANH,\n'
              '  OP_BATCHNORM,\n'
              '  OP_CONCAT,\n'
              '  OP_SPLIT,\n'
              '  OP_RESHAPE,\n'
              '  OP_TRANSPOSE,\n'
              '  OP_EW_ADD,\n'
              '  OP_EW_MUL,\n'
              '  OP_MATMUL,\n'
              '  OP_MUL,\n'
              '  OP_ENLARGE,\n'
              '  OP_MERGE_GCONV,\n'
              '  OP_CONSTANT_IMM,\n'
              '  OP_CONSTANT_ICONV,\n'
              '  OP_CONSTANT_ONE,\n'
              '  OP_CONSTANT_POOL,\n'
              '  OP_SQUEEZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Squeeze\n'
              '  OP_UNSQUEEZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Unsqueeze\n'
              '  OP_EW_SUB, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Sub\n'
              '  OP_EW_DIV, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Div\n'
              '  OP_EW_EQUAL, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Equal\n'
              '  OP_EW_GREATER, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Greater\n'
              '  OP_EW_LESS, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Less\n'
              '  OP_EW_MAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Max\n'
              '  OP_EW_MIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Min\n'
              '  OP_REDUCE_ARGMAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ArgMax\n'
              '  OP_REDUCE_ARGMIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ArgMin\n'
              '  OP_REDUCE_MAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMax\n'
              '  OP_REDUCE_MEAN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMean\n'
              '  OP_REDUCE_MIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMin\n'
              '  OP_REDUCE_PROD, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceProd\n'
              '  OP_REDUCE_SUM, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceSum\n'
              '  OP_PAD, '
              '//https://github.com/dmlc/tvm/blob/master/topi/python/topi/nn/pad.py\n'
              '  OP_SHAPE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Shape\n'
              '  OP_SIZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Size\n'
              '  OP_TOPK, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#TopK\n'
              '  OP_WHERE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Where\n'
              '  OP_CEIL, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Ceil\n'
              '  OP_CAST, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Cast\n'
              '  OP_EXP, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Exp\n'
              '  OP_ROUND, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Round\n'
              '  OP_LOG, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Log\n'
              '  OP_LOGICAL_NOT, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Not\n'
              '  OP_SQRT, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Sqrt\n'
              '  OP_LEAKYRELU,\n'
              '  OP_SLICE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Slice\n'
              '  OP_RESIZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Resize\n'
              '  OP_PRELU, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#PRelu\n'
              '  OP_FUSE_CONV_BATCHNORM,\n'
              '  OP_FUSE_CONV_BATCHNORM_ALPHA_VAR,\n'
              '  OP_FUSE_CONV_BATCHNORM_BIAS,\n'
              '  OP_BROADCAST_ADD\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=119,
         lineno=92,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' OP_EW_MUL,\n'
              '  OP_MATMUL,\n'
              '  OP_MUL,\n'
              '  OP_ENLARGE,\n'
              '  OP_MERGE_GCONV,\n'
              '  OP_CONSTANT_IMM,\n'
              '  OP_CONSTANT_ICONV,\n'
              '  OP_CONSTANT_ONE,\n'
              '  OP_CONSTANT_POOL,\n'
              '  OP_SQUEEZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Squeeze\n'
              '  OP_UNSQUEEZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Unsqueeze\n'
              '  OP_EW_SUB, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Sub\n'
              '  OP_E')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=120,
         lineno=104,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='W_DIV, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Div\n'
              '  OP_EW_EQUAL, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Equal\n'
              '  OP_EW_GREATER, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Greater\n'
              '  OP_EW_LESS, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Less\n'
              '  OP_EW_MAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Max\n'
              '  ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=121,
         lineno=109,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OP_EW_MIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Min\n'
              '  OP_REDUCE_ARGMAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ArgMax\n'
              '  OP_REDUCE_ARGMIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ArgMin\n'
              '  OP_REDUCE_MAX, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMax\n'
              '  OP_REDUCE_MEAN, //https://github.com/onnx/onnx/blob/master')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=122,
         lineno=113,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/docs/Operators.md#ReduceMean\n'
              '  OP_REDUCE_MIN, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMin\n'
              '  OP_REDUCE_PROD, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceProd\n'
              '  OP_REDUCE_SUM, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceSum\n'
              '  OP_PAD, '
              '//https://github.com/dmlc/tvm/blob/master/topi/python/topi/nn/pad.py\n'
              '  OP_SHAPE, //https://git')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=123,
         lineno=118,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='hub.com/onnx/onnx/blob/master/docs/Operators.md#Shape\n'
              '  OP_SIZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Size\n'
              '  OP_TOPK, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#TopK\n'
              '  OP_WHERE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Where\n'
              '  OP_CEIL, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Ceil\n'
              '  OP_CAST, //https://github.com/onnx')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=124,
         lineno=123,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/onnx/blob/master/docs/Operators.md#Cast\n'
              '  OP_EXP, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Exp\n'
              '  OP_ROUND, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Round\n'
              '  OP_LOG, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Log\n'
              '  OP_LOGICAL_NOT, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Not\n'
              '  OP_SQRT, //https://github.com/onnx/onnx/blob/')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=125,
         lineno=128,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='master/docs/Operators.md#Sqrt\n'
              '  OP_LEAKYRELU,\n'
              '  OP_SLICE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Slice\n'
              '  OP_RESIZE, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#Resize\n'
              '  OP_PRELU, '
              '//https://github.com/onnx/onnx/blob/master/docs/Operators.md#PRelu\n'
              '  OP_FUSE_CONV_BATCHNORM,\n'
              '  OP_FUSE_CONV_BATCHNORM_ALPHA_VAR,\n'
              '  OP_FUSE_CONV_BATCHNORM_BIAS,\n'
              '  OP_BROADCAST_ADD\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=126,
         lineno=138,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct Op {\n'
              '  Op(void);\n'
              '  Op(size_t _guid, OpBase* _ptr)\n'
              '  : guid(_guid), ptr(_ptr) {}\n'
              '  inline bool operator==(const Op& b) const {\n'
              '    if (guid != b.guid) return false;\n'
              '    if (ptr != b.ptr) return false;\n'
              '    return true;\n'
              '  }\n'
              '  inline bool operator!=(const Op& b) const {\n'
              '    if (guid != b.guid) return true;\n'
              '    if (ptr != b.ptr) return true;\n'
              '    return false;\n'
              '  }\n'
              '  inline bool operator<(const Op& b) const {\n'
              '    if (guid != b.guid) return guid < b.guid;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=127,
         lineno=139,
         tokens=277,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='Op',
         body='struct Op {\n'
              '  Op(void);\n'
              '  Op(size_t _guid, OpBase* _ptr)\n'
              '  : guid(_guid), ptr(_ptr) {}\n'
              '  inline bool operator==(const Op& b) const {\n'
              '    if (guid != b.guid) return false;\n'
              '    if (ptr != b.ptr) return false;\n'
              '    return true;\n'
              '  }\n'
              '  inline bool operator!=(const Op& b) const {\n'
              '    if (guid != b.guid) return true;\n'
              '    if (ptr != b.ptr) return true;\n'
              '    return false;\n'
              '  }\n'
              '  inline bool operator<(const Op& b) const {\n'
              '    if (guid != b.guid) return guid < b.guid;\n'
              '    if (ptr != b.ptr) return ptr < b.ptr;\n'
              '    return false;\n'
              '  }\n'
              '  Op& operator=(const Op& op)\n'
              '  {\n'
              '    guid = op.guid;\n'
              '    ptr = op.ptr;\n'
              '    return *this;\n'
              '  }\n'
              '  std::string op_to_string(const OpBase* ptr);\n'
              '  std::string to_string(void)\n'
              '  {\n'
              '    if (ptr != NULL) {\n'
              '      return op_to_string(ptr) + "_" + std::to_string(guid);\n'
              '    }\n'
              '    else {\n'
              '      return "UnmappedOp_" + std::to_string(guid);\n'
              '    }\n'
              '  }\n'
              '  static const Op INVALID_OP;\n'
              '  size_t guid;\n'
              '  OpBase* ptr;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=128,
         lineno=140,
         tokens=3,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Op',
         body='Op(void)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=129,
         lineno=141,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Op',
         body='Op(size_t _guid, OpBase* _ptr)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=130,
         lineno=141,
         tokens=23,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='Op',
         body='Op(size_t _guid, OpBase* _ptr)\n  : guid(_guid), ptr(_ptr) {}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=131,
         lineno=155,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (ptr != b.ptr) return ptr < b.ptr;\n'
              '    return false;\n'
              '  }\n'
              '  Op& operator=(const Op& op)\n'
              '  {\n'
              '    guid = op.guid;\n'
              '    ptr = op.ptr;\n'
              '    return *this;\n'
              '  }\n'
              '  std::string op_to_string(const OpBase* ptr);\n'
              '  std::string to_string(void)\n'
              '  {\n'
              '    if (ptr != NULL) {\n'
              '      return op_to_string(ptr) + "_" + std::to_string(guid);\n'
              '    }\n'
              '    else {\n'
              '      return "UnmappedOp_" + std::to_string(guid);\n'
              '    }\n'
              '  }\n'
              '  static const Op INVALID_OP;\n'
              '  size_t guid;\n'
              '  OpBase* ptr;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=132,
         lineno=174,
         tokens=6,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='INVALID_OP',
         body='static const Op INVALID_OP;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=133,
         lineno=175,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='guid',
         body='size_t guid;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=134,
         lineno=178,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct Edge {\n'
              '  Edge(void);\n'
              '  Edge(Op _srcOp, Op _dstOp, int _srcIdx, int _dstIdx);\n'
              '  Op srcOp, dstOp;\n'
              '  int srcIdx, dstIdx;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=135,
         lineno=179,
         tokens=46,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='Edge',
         body='struct Edge {\n'
              '  Edge(void);\n'
              '  Edge(Op _srcOp, Op _dstOp, int _srcIdx, int _dstIdx);\n'
              '  Op srcOp, dstOp;\n'
              '  int srcIdx, dstIdx;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=136,
         lineno=180,
         tokens=3,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Edge',
         body='Edge(void)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=137,
         lineno=181,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Edge',
         body='Edge(Op _srcOp, Op _dstOp, int _srcIdx, int _dstIdx)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=138,
         lineno=182,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srcOp',
         body='Op srcOp, dstOp;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=139,
         lineno=183,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srcIdx',
         body='int srcIdx, dstIdx;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=140,
         lineno=185,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct EdgeCompare {\n'
              '  bool operator()(const Edge& a, const Edge& b) const {\n'
              '    if (!(a.srcOp == b.srcOp)) return a.srcOp < b.srcOp;\n'
              '    if (!(a.dstOp == b.dstOp)) return a.dstOp < b.dstOp;\n'
              '    if (a.srcIdx != b.srcIdx) return a.srcIdx < b.srcIdx;\n'
              '    if (a.dstIdx != b.dstIdx) return a.dstIdx < b.dstIdx;\n'
              '    return false;\n'
              '  };\n'
              '};\n'
              '\n'
              'struct SrcEdge {\n'
              '  SrcEdge(int _idx, Op _op);\n'
              '  int idx;\n'
              '  Op op;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=141,
         lineno=186,
         tokens=107,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='EdgeCompare',
         body='struct EdgeCompare {\n'
              '  bool operator()(const Edge& a, const Edge& b) const {\n'
              '    if (!(a.srcOp == b.srcOp)) return a.srcOp < b.srcOp;\n'
              '    if (!(a.dstOp == b.dstOp)) return a.dstOp < b.dstOp;\n'
              '    if (a.srcIdx != b.srcIdx) return a.srcIdx < b.srcIdx;\n'
              '    if (a.dstIdx != b.dstIdx) return a.dstIdx < b.dstIdx;\n'
              '    return false;\n'
              '  };\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=142,
         lineno=196,
         tokens=24,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SrcEdge',
         body='struct SrcEdge {\n'
              '  SrcEdge(int _idx, Op _op);\n'
              '  int idx;\n'
              '  Op op;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=143,
         lineno=197,
         tokens=10,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SrcEdge',
         body='SrcEdge(int _idx, Op _op)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=144,
         lineno=198,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='idx',
         body='int idx;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=145,
         lineno=201,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct SrcEdgeCompare {\n'
              '  bool operator()(const SrcEdge& a, const SrcEdge& b) const {\n'
              '    if (!(a.op == b.op)) return a.op < b.op;\n'
              '    if (a.idx != b.idx) return a.idx < b.idx;\n'
              '    return false;\n'
              '  };\n'
              '};\n'
              '\n'
              'struct OpCompare {\n'
              '  bool operator()(const Op& a, const Op& b) const {\n'
              '    if (a.guid != b.guid) return a.guid < b.guid;\n'
              '    return a.ptr < b.ptr;\n'
              '  };\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=146,
         lineno=202,
         tokens=62,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SrcEdgeCompare',
         body='struct SrcEdgeCompare {\n'
              '  bool operator()(const SrcEdge& a, const SrcEdge& b) const {\n'
              '    if (!(a.op == b.op)) return a.op < b.op;\n'
              '    if (a.idx != b.idx) return a.idx < b.idx;\n'
              '    return false;\n'
              '  };\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=147,
         lineno=210,
         tokens=47,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='OpCompare',
         body='struct OpCompare {\n'
              '  bool operator()(const Op& a, const Op& b) const {\n'
              '    if (a.guid != b.guid) return a.guid < b.guid;\n'
              '    return a.ptr < b.ptr;\n'
              '  };\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=148,
         lineno=216,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct SplitInfo {\n'
              '  SplitInfo(void) {num = 0;}\n'
              '  inline bool operator==(const SplitInfo& rhs) const {\n'
              '    if (num != rhs.num) return false;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != rhs.pos[i])\n'
              '        return false;\n'
              '    return true;\n'
              '  }\n'
              '  void merge(int offset, const SplitInfo& next) {\n'
              '    if (num + 1 + next.num >= MAX_NUM_SPLITS) {\n'
              '      printf("num = %d, next.num = %d\\n", num, next.num);\n'
              '    }\n'
              '    assert(num + 1 + next.num < MAX_NUM_SPLITS);\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=149,
         lineno=217,
         tokens=527,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SplitInfo',
         body='struct SplitInfo {\n'
              '  SplitInfo(void) {num = 0;}\n'
              '  inline bool operator==(const SplitInfo& rhs) const {\n'
              '    if (num != rhs.num) return false;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != rhs.pos[i])\n'
              '        return false;\n'
              '    return true;\n'
              '  }\n'
              '  void merge(int offset, const SplitInfo& next) {\n'
              '    if (num + 1 + next.num >= MAX_NUM_SPLITS) {\n'
              '      printf("num = %d, next.num = %d\\n", num, next.num);\n'
              '    }\n'
              '    assert(num + 1 + next.num < MAX_NUM_SPLITS);\n'
              '    for (int i = 0; i < next.num; i++)\n'
              '      pos[num++] = offset + next.pos[i];\n'
              '    pos[num++] = offset;\n'
              '  }\n'
              '  inline bool operator!=(const SplitInfo& rhs) const\n'
              '  {\n'
              '    if (num != rhs.num) return true;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != rhs.pos[i]) return true;\n'
              '    return false;\n'
              '  }\n'
              '  SplitInfo& operator=(const SplitInfo& st)\n'
              '  {\n'
              '    num = st.num;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      pos[i] = st.pos[i];\n'
              '    return *this;\n'
              '  }\n'
              '  void divide(SplitInfo& left, SplitInfo& right, int &mid) {\n'
              '    assert(num > 0);\n'
              '    left.num = 0;\n'
              '    right.num = 0;\n'
              '    mid = pos[num - 1];\n'
              '    int idx = 0;\n'
              '    while (idx < num && pos[idx] < mid)\n'
              '      left.pos[left.num++] = pos[idx++];\n'
              '    while (idx < num - 1)\n'
              '      right.pos[right.num++] = pos[idx++] - mid;\n'
              '  }\n'
              '  void combine(const SplitInfo& next) {\n'
              '    if (num != next.num)\n'
              '      num = 0;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != next.pos[i]) {\n'
              '        num = 0;\n'
              '        return;\n'
              '      }\n'
              '  }\n'
              '  void serialize(int* keys, int& idx) const {\n'
              '    keys[idx++] = num;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      keys[idx++] = pos[i];\n'
              '  }\n'
              '  static const SplitInfo NO_SPLIT;\n'
              '  int num;\n'
              '  int pos[MAX_NUM_SPLITS];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=150,
         lineno=218,
         tokens=10,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitInfo',
         body='SplitInfo(void) {num = 0;}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=151,
         lineno=218,
         tokens=4,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitInfo',
         body='SplitInfo(void)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=152,
         lineno=231,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < next.num; i++)\n'
              '      pos[num++] = offset + next.pos[i];\n'
              '    pos[num++] = offset;\n'
              '  }\n'
              '  inline bool operator!=(const SplitInfo& rhs) const\n'
              '  {\n'
              '    if (num != rhs.num) return true;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != rhs.pos[i]) return true;\n'
              '    return false;\n'
              '  }\n'
              '  SplitInfo& operator=(const SplitInfo& st)\n'
              '  {\n'
              '    num = st.num;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=153,
         lineno=245,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < num; i++)\n'
              '      pos[i] = st.pos[i];\n'
              '    return *this;\n'
              '  }\n'
              '  void divide(SplitInfo& left, SplitInfo& right, int &mid) {\n'
              '    assert(num > 0);\n'
              '    left.num = 0;\n'
              '    right.num = 0;\n'
              '    mid = pos[num - 1];\n'
              '    int idx = 0;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=154,
         lineno=255,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    while (idx < num && pos[idx] < mid)\n'
              '      left.pos[left.num++] = pos[idx++];\n'
              '    while (idx < num - 1)\n'
              '      right.pos[right.num++] = pos[idx++] - mid;\n'
              '  }\n'
              '  void combine(const SplitInfo& next) {\n'
              '    if (num != next.num)\n'
              '      num = 0;\n'
              '    for (int i = 0; i < num; i++)\n'
              '      if (pos[i] != next.pos[i]) {\n'
              '        num = 0;\n'
              '        return;\n'
              '      }\n'
              '  }\n'
              '  void serialize(int* keys, int& idx) const {\n'
              '    keys[idx++] = num;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=155,
         lineno=271,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < num; i++)\n'
              '      keys[idx++] = pos[i];\n'
              '  }\n'
              '  static const SplitInfo NO_SPLIT;\n'
              '  int num;\n'
              '  int pos[MAX_NUM_SPLITS];\n'
              '};\n'
              '\n'
              'struct Tensor {\n'
              '  static const int MAX_KEY_LENGTH = (MAX_NUM_SPLITS + 2) * '
              'MAX_DIM + 2;\n'
              '  static const int MAGIC_NUMBER = 23333;\n'
              '  Tensor(void)\n'
              '  : numDim(0), idx(0), op(), data_ptr(NULL) {\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=156,
         lineno=274,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='NO_SPLIT',
         body='static const SplitInfo NO_SPLIT;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=157,
         lineno=275,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='num',
         body='int num;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=158,
         lineno=279,
         tokens=770,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='Tensor',
         body='struct Tensor {\n'
              '  static const int MAX_KEY_LENGTH = (MAX_NUM_SPLITS + 2) * '
              'MAX_DIM + 2;\n'
              '  static const int MAGIC_NUMBER = 23333;\n'
              '  Tensor(void)\n'
              '  : numDim(0), idx(0), op(), data_ptr(NULL) {\n'
              '    for (int i = 0; i < MAX_DIM; i++)\n'
              '      split[i].num = 0;\n'
              '  }\n'
              '  Tensor(int ndim, const int* dims, size_t guid, DATATYPE* data '
              '= NULL)\n'
              '  : numDim(ndim), idx(0), op(guid, NULL), data_ptr(data) {\n'
              '    assert(guid != GUID_INVALID);\n'
              '    assert(ndim <= MAX_DIM);\n'
              '    int count = 1;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      dim[i] = dims[i];\n'
              '      stride[i] = count;\n'
              '      count *= dim[i];\n'
              '      split[i]  = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '  }\n'
              '  Tensor& operator=(const Tensor& src) {\n'
              '    numDim = src.numDim;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      dim[i] = src.dim[i];\n'
              '      stride[i] = src.stride[i];\n'
              '      split[i] = src.split[i];\n'
              '    }\n'
              '    idx = src.idx;\n'
              '    op = src.op;\n'
              '    data_ptr = src.data_ptr;\n'
              '    return *this;\n'
              '  }\n'
              '  int volume(void) const {\n'
              '    int ret = 1;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      ret *= dim[i];\n'
              '    return ret;\n'
              '  }\n'
              '  std::string to_string(std::string name)\n'
              '  {\n'
              '    name = name + "(";\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      std::string suffix = (i == numDim -1) ? ")" : " ";\n'
              '      name = name + std::to_string(dim[i]) + ":"\n'
              '           + std::to_string(stride[i]) + suffix;\n'
              '    }\n'
              '    return name;\n'
              '  }\n'
              '  void serialize(int* keys, int& idx) const\n'
              '  {\n'
              '    keys[idx++] = MAGIC_NUMBER;\n'
              '    keys[idx++] = numDim;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      keys[idx++] = dim[i];\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      keys[idx++] = stride[i];\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      split[i].serialize(keys, idx);\n'
              '  }\n'
              '  bool has_same_shape_stride_split(const Tensor& tensor) const\n'
              '  {\n'
              '    if (numDim != tensor.numDim)\n'
              '      return false;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      if (dim[i] != tensor.dim[i])\n'
              '        return false;\n'
              '      if (stride[i] != tensor.stride[i])\n'
              '        return false;\n'
              '      if (split[i] != tensor.split[i])\n'
              '        return false;\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '  bool default_layout(void) const\n'
              '  {\n'
              '    int cnt = 1;\n'
              '    for (int i = numDim-1; i >= 0; i--) {\n'
              '      if (stride[i] != cnt) return false;\n'
              '      cnt *= dim[i];\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '\n'
              '  //bool operator==(const Tensor& b);\n'
              '  int numDim, dim[MAX_DIM], stride[MAX_DIM];\n'
              '  int idx; // idx is used for Ops with multiple outputs (e.g., '
              'split)\n'
              '  Op op;\n'
              '  void* data_ptr;\n'
              '  // Meta data for splits\n'
              '  SplitInfo split[MAX_DIM];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=159,
         lineno=280,
         tokens=24,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='MAX_KEY_LENGTH',
         body='static const int MAX_KEY_LENGTH = (MAX_NUM_SPLITS + 2) * '
              'MAX_DIM + 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=160,
         lineno=281,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='MAGIC_NUMBER',
         body='static const int MAGIC_NUMBER = 23333;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=161,
         lineno=282,
         tokens=48,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(void)\n'
              '  : numDim(0), idx(0), op(), data_ptr(NULL) {\n'
              '    for (int i = 0; i < MAX_DIM; i++)\n'
              '      split[i].num = 0;\n'
              '  }')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=162,
         lineno=282,
         tokens=3,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(void)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=163,
         lineno=284,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < MAX_DIM; i++)\n'
              '      split[i].num = 0;\n'
              '  }\n'
              '  Tensor(int ndim, const int* dims, size_t guid, DATATYPE* data '
              '= NULL)\n'
              '  : numDim(ndim), idx(0), op(guid, NULL), data_ptr(data) {\n'
              '    assert(guid != GUID_INVALID);\n'
              '    assert(ndim <= MAX_DIM);\n'
              '    int count = 1;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=164,
         lineno=287,
         tokens=120,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(int ndim, const int* dims, size_t guid, DATATYPE* data = '
              'NULL)\n'
              '  : numDim(ndim), idx(0), op(guid, NULL), data_ptr(data) {\n'
              '    assert(guid != GUID_INVALID);\n'
              '    assert(ndim <= MAX_DIM);\n'
              '    int count = 1;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      dim[i] = dims[i];\n'
              '      stride[i] = count;\n'
              '      count *= dim[i];\n'
              '      split[i]  = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '  }')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=165,
         lineno=287,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(int ndim, const int* dims, size_t guid, DATATYPE* data = '
              'NULL)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=166,
         lineno=292,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = ndim-1; i >= 0; i--) {\n'
              '      dim[i] = dims[i];\n'
              '      stride[i] = count;\n'
              '      count *= dim[i];\n'
              '      split[i]  = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '  }\n'
              '  Tensor& operator=(const Tensor& src) {\n'
              '    numDim = src.numDim;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=167,
         lineno=301,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      dim[i] = src.dim[i];\n'
              '      stride[i] = src.stride[i];\n'
              '      split[i] = src.split[i];\n'
              '    }\n'
              '    idx = src.idx;\n'
              '    op = src.op;\n'
              '    data_ptr = src.data_ptr;\n'
              '    return *this;\n'
              '  }\n'
              '  int volume(void) const {\n'
              '    int ret = 1;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      ret *= dim[i];\n'
              '    return ret;\n'
              '  }\n'
              '  std::string to_string(std::string name)\n'
              '  {\n'
              '    name = name + "(";\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=168,
         lineno=320,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      std::string suffix = (i == numDim -1) ? ")" : " ";\n'
              '      name = name + std::to_string(dim[i]) + ":"\n'
              '           + std::to_string(stride[i]) + suffix;\n'
              '    }\n'
              '    return name;\n'
              '  }\n'
              '  void serialize(int* keys, int& idx) const\n'
              '  {\n'
              '    keys[idx++] = MAGIC_NUMBER;\n'
              '    keys[idx++] = numDim;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      keys[idx++] = dim[i];\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=169,
         lineno=333,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++)\n'
              '      keys[idx++] = stride[i];\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      split[i].serialize(keys, idx);\n'
              '  }\n'
              '  bool has_same_shape_stride_split(const Tensor& tensor) const\n'
              '  {\n'
              '    if (numDim != tensor.numDim)\n'
              '      return false;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=170,
         lineno=342,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      if (dim[i] != tensor.dim[i])\n'
              '        return false;\n'
              '      if (stride[i] != tensor.stride[i])\n'
              '        return false;\n'
              '      if (split[i] != tensor.split[i])\n'
              '        return false;\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '  bool default_layout(void) const\n'
              '  {\n'
              '    int cnt = 1;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=171,
         lineno=355,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = numDim-1; i >= 0; i--) {\n'
              '      if (stride[i] != cnt) return false;\n'
              '      cnt *= dim[i];\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '\n'
              '  //bool operator==(const Tensor& b);\n'
              '  int numDim, dim[MAX_DIM], stride[MAX_DIM];\n'
              '  int idx; // idx is used for Ops with multiple outputs (e.g., '
              'split)\n'
              '  Op op;\n'
              '  void* data_ptr;\n'
              '  // Meta data for splits\n'
              '  SplitInfo split[MAX_DIM];\n'
              '};\n'
              '\n'
              '//typedef shared_ptr<Tensor> TensorHandle;\n'
              'typedef Tensor* TensorHandle;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=172,
         lineno=363,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='numDim',
         body='int numDim, dim[MAX_DIM], stride[MAX_DIM];')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=173,
         lineno=364,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='idx',
         body='int idx;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=174,
         lineno=372,
         tokens=6,
         depth=3,
         parent_id=None,
         category='typedef',
         summary=False,
         name='Tensor',
         body='typedef Tensor* TensorHandle;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=175,
         lineno=373,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'enum DataType {\n'
              '  DT_FLOAT = 111,\n'
              '  DT_DOUBLE = 222,\n'
              '  DT_HALF = 333,\n'
              '  DT_INT8 = 444,\n'
              '  DT_UINT8 = 555,\n'
              '  DT_INT32 = 666,\n'
              '  DT_INT64 = 777,\n'
              '  DT_BOOL = 888,\n'
              '};\n'
              '\n'
              '//This must be consistent with python/tas')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=176,
         lineno=374,
         tokens=64,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='DataType',
         body='enum DataType {\n'
              '  DT_FLOAT = 111,\n'
              '  DT_DOUBLE = 222,\n'
              '  DT_HALF = 333,\n'
              '  DT_INT8 = 444,\n'
              '  DT_UINT8 = 555,\n'
              '  DT_INT32 = 666,\n'
              '  DT_INT64 = 777,\n'
              '  DT_BOOL = 888,\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=177,
         lineno=385,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='o/_cython/CCore.pxd\n'
              'enum PMParameter {\n'
              '  PM_OP_TYPE,   \t// AnyOp\n'
              '  PM_NUM_INPUTS,\t// AnyOp\n'
              '  PM_NUM_OUTPUTS,\t// AnyOp\n'
              '  PM_GROUP,             // Conv2D\n'
              '  PM_KERNEL_H,\t\t// Conv2D, Pool2D\n'
              '  PM_KERNEL_W,\t\t// ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=178,
         lineno=386,
         tokens=242,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='PMParameter',
         body='enum PMParameter {\n'
              '  PM_OP_TYPE,   \t// AnyOp\n'
              '  PM_NUM_INPUTS,\t// AnyOp\n'
              '  PM_NUM_OUTPUTS,\t// AnyOp\n'
              '  PM_GROUP,             // Conv2D\n'
              '  PM_KERNEL_H,\t\t// Conv2D, Pool2D\n'
              '  PM_KERNEL_W,\t\t// Conv2D, Pool2D\n'
              '  PM_STRIDE_H,\t\t// Conv2D, Pool2D\n'
              '  PM_STRIDE_W,\t\t// Conv2D, Pool2D\n'
              '  PM_PAD,\t\t// Conv2D, Pool2D\n'
              '  PM_ACTI,\t\t// Conv2D, Pool2D\n'
              '  PM_NUMDIM,\t\t// Concat, Transpose\n'
              '  PM_AXIS,\t\t// Concat, Split\n'
              '  PM_PERM,\t\t// Transpose\n'
              '  PM_OUTSHUFFLE,\t// Transpose\n'
              '  PM_MERGE_GCONV_COUNT, // MergeGConv\n'
              '  PM_AXES,\t\t// Squeeze, Unsqueeze, Reduce*\n'
              '  PM_KEEP_DIMS,         // Reduce*\n'
              '  PM_EPSILON,   // BatchNorm\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=179,
         lineno=392,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Conv2D, Pool2D\n'
              '  PM_STRIDE_H,\t\t// Conv2D, Pool2D\n'
              '  PM_STRIDE_W,\t\t// Conv2D, Pool2D\n'
              '  PM_PAD,\t\t// Conv2D, Pool2D\n'
              '  PM_ACTI,\t\t// Conv2D, Pool2D\n'
              '  PM_NUMDIM,\t\t// Concat, Transpose\n'
              '  PM_AXIS,\t\t// Concat, Spli')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=180,
         lineno=398,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t\n'
              '  PM_PERM,\t\t// Transpose\n'
              '  PM_OUTSHUFFLE,\t// Transpose\n'
              '  PM_MERGE_GCONV_COUNT, // MergeGConv\n'
              '  PM_AXES,\t\t// Squeeze, Unsqueeze, Reduce*\n'
              '  PM_KEEP_DIMS,         // Reduce*\n'
              '  PM_EPSILON,   // BatchNorm\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=181,
         lineno=406,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'enum TNParameter {\n'
              '  IN_0 = 100,\n'
              '  IN_1 = 101,\n'
              '  IN_2 = 102,\n'
              '  IN_3 = 103,\n'
              '  IN_4 = 104,\n'
              '  IN_5 = 105,\n'
              '  OU_0 = 200,\n'
              '  OU_1 = 201,\n'
              '  OU_2 = 202,\n'
              '  OU_3 = 203,\n'
              '  OU_4 = 204,\n'
              '  OU_5 = 205,\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=182,
         lineno=407,
         tokens=101,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='TNParameter',
         body='enum TNParameter {\n'
              '  IN_0 = 100,\n'
              '  IN_1 = 101,\n'
              '  IN_2 = 102,\n'
              '  IN_3 = 103,\n'
              '  IN_4 = 104,\n'
              '  IN_5 = 105,\n'
              '  OU_0 = 200,\n'
              '  OU_1 = 201,\n'
              '  OU_2 = 202,\n'
              '  OU_3 = 203,\n'
              '  OU_4 = 204,\n'
              '  OU_5 = 205,\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=183,
         lineno=421,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'enum DIMParameter {\n'
              '  DIM_0 = 300,\n'
              '  DIM_1 = 301,\n'
              '  DIM_2 = 302,\n'
              '  DIM_3 = 303,\n'
              '  DIM_ND = 310,\n'
              '};\n'
              '\n'
              '//That this must be consistent with '
              'python/taso/_cython/CCore.pxd\n'
              'enum ActiMode {\n'
              '  AC_MODE_NONE,\n'
              '  AC_MODE_SIGMOID,\n'
              '  AC_MODE_RELU,\n'
              '  AC_MODE_TANH,\n'
              '};\n'
              '\n'
              '//That this must be consistent with python/taso/_cyt')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=184,
         lineno=422,
         tokens=45,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='DIMParameter',
         body='enum DIMParameter {\n'
              '  DIM_0 = 300,\n'
              '  DIM_1 = 301,\n'
              '  DIM_2 = 302,\n'
              '  DIM_3 = 303,\n'
              '  DIM_ND = 310,\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=185,
         lineno=431,
         tokens=31,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='ActiMode',
         body='enum ActiMode {\n'
              '  AC_MODE_NONE,\n'
              '  AC_MODE_SIGMOID,\n'
              '  AC_MODE_RELU,\n'
              '  AC_MODE_TANH,\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=186,
         lineno=438,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='hon/CCore.pxd\n'
              'enum PaddingMode {\n'
              '  PD_MODE_SAME,\n'
              '  PD_MODE_VALID,\n'
              '};\n'
              '\n'
              '//That this must be consistent with '
              'python/taso/_cython/CCore.pxd\n'
              '//enum ConstantMode {\n'
              '//  CN_MODE_IDENTITY,\n'
              '//  CN_MODE_ZEROS,\n'
              '//  CN_MODE_ONES,\n'
              '//  CN_MODE_ONES_SCALED_L1,\n'
              '//  CN_MODE_ONES_SCALED_L2,\n'
              '//  CN_MODE_ONES_SCALED_ALL,\n'
              '//};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=187,
         lineno=439,
         tokens=16,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='PaddingMode',
         body='enum PaddingMode {\n  PD_MODE_SAME,\n  PD_MODE_VALID,\n}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=188,
         lineno=453,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class OpBase {\n'
              'public:\n'
              '  OpBase(Model* _model, OpType _type); // No inputs\n'
              '  OpBase(const Tensor& input, Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         Model* _model, OpType _type);\n'
              '  ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=189,
         lineno=454,
         tokens=378,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OpBase',
         body='class OpBase {\n'
              'public:\n'
              '  OpBase(Model* _model, OpType _type); // No inputs\n'
              '  OpBase(const Tensor& input, Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         const Tensor& input3, Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         const Tensor& input2, const Tensor& input3,\n'
              '         const Tensor& input4, Model* _model, OpType _type);\n'
              '  OpBase(int n, Tensor* inputs, Model* _model, OpType _type);\n'
              '  virtual bool get_input_parameter(TNParameter, DIMParameter, '
              'int*);\n'
              '  virtual bool get_int_parameter(PMParameter, int*);\n'
              '  virtual bool get_float_parameter(PMParameter, float*);\n'
              '  //virtual bool get_ints_parameter(PMParameter, '
              'std::vector<int>*);\n'
              '  virtual void forward(bool block = false) = 0;\n'
              '  virtual void map(void) = 0;\n'
              '  virtual void unmap(void) = 0;\n'
              '  virtual void collect_costs(float& exe_time, float& flops,\n'
              '                             float& mem_acc, int& num_kernels) '
              '= 0;\n'
              'public:\n'
              '  Tensor inputs[MAX_NUM_INPUTS], outputs[MAX_NUM_OUTPUTS];\n'
              '  int numInputs, numOutputs;\n'
              '  Model *model;\n'
              '  OpType type;\n'
              '  float runtime;\n'
              '#ifdef USE_DNNL\n'
              '  DNNLNet net;\n'
              '#endif\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=190,
         lineno=456,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=191,
         lineno=457,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(const Tensor& input, Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=192,
         lineno=458,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=193,
         lineno=460,
         tokens=31,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=194,
         lineno=462,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         const Tensor& input3, Model* _model, OpType _type);\n'
              '  OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         const Tensor& input2, const Tensor& input3,\n'
              '         const Tensor& input4, Model* _model, OpType _type);\n'
              '  OpBase(int n, Tensor* inputs, Model* _mode')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=195,
         lineno=462,
         tokens=37,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(const Tensor& input0, const Tensor& input1, const '
              'Tensor& input2,\n'
              '         const Tensor& input3, Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=196,
         lineno=464,
         tokens=44,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(const Tensor& input0, const Tensor& input1,\n'
              '         const Tensor& input2, const Tensor& input3,\n'
              '         const Tensor& input4, Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=197,
         lineno=467,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l, OpType _type);\n'
              '  virtual bool get_input_parameter(TNParameter, DIMParameter, '
              'int*);\n'
              '  virtual bool get_int_parameter(PMParameter, int*);\n'
              '  virtual bool get_float_parameter(PMParameter, float*);\n'
              '  //virtual bool get_ints_parameter(PMParameter, '
              'std::vector<int>*);\n'
              '  virtual void forward(bool block = false) = 0;\n'
              '  virtual void map(void) = 0;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=198,
         lineno=467,
         tokens=19,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpBase',
         body='OpBase(int n, Tensor* inputs, Model* _model, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=199,
         lineno=474,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  virtual void unmap(void) = 0;\n'
              '  virtual void collect_costs(float& exe_time, float& flops,\n'
              '                             float& mem_acc, int& num_kernels) '
              '= 0;\n'
              'public:\n'
              '  Tensor inputs[MAX_NUM_INPUTS], outputs[MAX_NUM_OUTPUTS];\n'
              '  int numInputs, numOutputs;\n'
              '  Model *model;\n'
              '  OpType type;\n'
              '  float runtime;\n'
              '#ifdef USE_DNNL\n'
              '  DNNLNet net;\n'
              '#endif\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=200,
         lineno=479,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='numInputs',
         body='int numInputs, numOutputs;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=201,
         lineno=481,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='type',
         body='OpType type;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=202,
         lineno=482,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='runtime',
         body='float runtime;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=203,
         lineno=484,
         tokens=6,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='net',
         body='DNNLNet net;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=204,
         lineno=487,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Graph {\n'
              'public:\n'
              '  Graph();\n'
              '  TensorHandle new_input(int dim, const int* dims);\n'
              '  TensorHandle new_weight(int dim, const int* dims, const '
              'DATATYPE* data);\n'
              '  TensorHandle new_weight(const Tensor& input);\n'
              '  void add_edge(Op srcOp, Op dstOp, int srcIdx, int dstIdx);\n'
              '  void remove_edge(')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=205,
         lineno=488,
         tokens=1927,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Graph',
         body='class Graph {\n'
              'public:\n'
              '  Graph();\n'
              '  TensorHandle new_input(int dim, const int* dims);\n'
              '  TensorHandle new_weight(int dim, const int* dims, const '
              'DATATYPE* data);\n'
              '  TensorHandle new_weight(const Tensor& input);\n'
              '  void add_edge(Op srcOp, Op dstOp, int srcIdx, int dstIdx);\n'
              '  void remove_edge(Edge e);\n'
              '  bool has_edge(Op srcOp, Op dstOp, int srcIdx, int dstIdx);\n'
              '  void replace_node(Op oldOp, Op newOp);\n'
              '  void remove_node(Op oldOp);\n'
              '  void export_to_file(std::string file_name);\n'
              '  // This conv2ds will create a weight tensor\n'
              '  TensorHandle group_conv2d(int groups,\n'
              '                            const TensorHandle _input,\n'
              '                            int _outputC,\n'
              '                            int _kernelH, int _kernelW,\n'
              '                            int _strideH, int strideW,\n'
              '                            PaddingMode _padding,\n'
              '                            ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHandle batchnorm(const TensorHandle _input,\n'
              '                         const TensorHandle _scale,\n'
              '                         const TensorHandle _bias,\n'
              '                         const TensorHandle _mean,\n'
              '                         const TensorHandle _var,\n'
              '                         float _epsilon);\n'
              '  TensorHandle cast(const TensorHandle _input, DataType '
              '_datatype);\n'
              '  TensorHandle ceil(const TensorHandle _input);\n'
              '  TensorHandle concat(int axis, int n, const TensorHandle* '
              '_inputs);\n'
              '  TensorHandle constant(int ndim, int* dims, OpType _type);\n'
              '  TensorHandle conv2d(const TensorHandle _input,\n'
              '                      int _outputC,\n'
              '                      int _kernelH, int _kernelW,\n'
              '                      int _strideH, int _strideW,\n'
              '                      PaddingMode _padding,\n'
              '                      ActiMode _activation = AC_MODE_NONE);\n'
              '  TensorHandle conv2d(const TensorHandle _input,\n'
              '                      const TensorHandle _weight,\n'
              '                      int _strideH, int _strideW,\n'
              '                      PaddingMode _padding,\n'
              '                      ActiMode _activation = AC_MODE_NONE);\n'
              '  TensorHandle dropout(const TensorHandle _input);\n'
              '  TensorHandle element(OpType type,\n'
              '                       const TensorHandle _t1,\n'
              '                       const TensorHandle _t2);\n'
              '  TensorHandle elementwise_unary(const TensorHandle _input, '
              'OpType _type);\n'
              '  TensorHandle enlarge(const TensorHandle _w1, const '
              'TensorHandle _w2);\n'
              '  TensorHandle exp(const TensorHandle _input);\n'
              '  TensorHandle fc(const TensorHandle _input,\n'
              '                  int _outputC,\n'
              '                  ActiMode _actiMode = AC_MODE_NONE);\n'
              '  TensorHandle fuse_conv_batchnorm(const TensorHandle _conv_w,\n'
              '                                   const TensorHandle _scale,\n'
              '                                   const TensorHandle _bias,\n'
              '                                   const TensorHandle _mean,\n'
              '                                   const TensorHandle _var);\n'
              '  // TensorHandle fuse_conv_batchnorm_alpha_var(const '
              'TensorHandle _conv_w,\n'
              '  //                                  const TensorHandle '
              '_scale,\n'
              '  //                                  const TensorHandle '
              '_var);\n'
              '  TensorHandle fuse_conv_batchnorm_bias(const TensorHandle '
              '_scale,\n'
              '                                   const TensorHandle _bias,\n'
              '                                   const TensorHandle _mean,\n'
              '                                   const TensorHandle _var);\n'
              '  TensorHandle broadcast_add(const TensorHandle _data,\n'
              '                                   const TensorHandle _bias);\n'
              '\n'
              '  TensorHandle leakyrelu(const TensorHandle _input, float '
              '_alpha,\n'
              '                         bool _inplace=true);\n'
              '  TensorHandle log(const TensorHandle _input);\n'
              '  TensorHandle logical_not(const TensorHandle _input);\n'
              '  TensorHandle matmul(const TensorHandle _input,\n'
              '                      const TensorHandle _weight,\n'
              '                      ActiMode _actiMode = AC_MODE_NONE);\n'
              '  TensorHandle merge_gconv(const TensorHandle _weight, int '
              'count);\n'
              '  TensorHandle mul(const TensorHandle _x,\n'
              '                   const TensorHandle _y);\n'
              '  TensorHandle pad(const TensorHandle _input,\n'
              '                   const std::vector<int>& _pad_before,\n'
              '                   const std::vector<int>& _pad_after,\n'
              '                   float _pad_value);\n'
              '  TensorHandle pool2d_max(const TensorHandle _input,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHandle pool2d_avg(const TensorHandle _input,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHandle reduce(const TensorHandle _input,\n'
              '                      OpType _type,\n'
              '                      const std::vector<int>& axes,\n'
              '                      bool keepdims);\n'
              '  TensorHandle reduce_argmax(const TensorHandle _input,\n'
              '                             const std::vector<int>& axes,\n'
              '                             bool keepdims);\n'
              '  TensorHandle reduce_argmin(const TensorHandle _input,\n'
              '                             const std::vector<int>& axes,\n'
              '                             bool keepdims);\n'
              '  TensorHandle reduce_max(const TensorHandle _input,\n'
              '                          const std::vector<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle reduce_mean(const TensorHandle _input,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims);\n'
              '  TensorHandle reduce_min(const TensorHandle _input,\n'
              '                          const std::vector<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle reduce_prod(const TensorHandle _input,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims);\n'
              '  TensorHandle reduce_sum(const TensorHandle _input,\n'
              '                          const std::vector<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle relu(const TensorHandle _input,\n'
              '                    bool _inPlace = true);\n'
              '  TensorHandle reshape(const TensorHandle _input,\n'
              '                       const std::vector<int>& _shape);\n'
              '  TensorHandle resize(const TensorHandle _input,\n'
              '                      const std::vector<int>& _shape);\n'
              '  TensorHandle round(const TensorHandle _input);\n'
              '  TensorHandle shape(const TensorHandle _input,\n'
              '                     OpType _type);\n'
              '  TensorHandle slice(const TensorHandle _input,\n'
              '                     const std::vector<int>& _start,\n'
              '                     const std::vector<int>& _end,\n'
              '                     const std::vector<int>& _axes,\n'
              '                     const std::vector<int>& _steps);\n'
              '  TensorHandle sigmoid(const TensorHandle _input,\n'
              '                       bool _inPlace = true);\n'
              '  //void split(Tensor _input, int axis, int c1, int c2, Tensor* '
              'outputs);\n'
              '  //void split(Tensor _input, int axis, int num, const int* '
              'sizes, Tensor* outputs);\n'
              '  void split(const TensorHandle _input, int _axis,\n'
              '             const std::vector<int>& _sizes,\n'
              '             TensorHandle* _outputs);\n'
              '  void split_equal(const TensorHandle _input, int _axis,\n'
              '                   int _num, TensorHandle* _outputs);\n'
              '  TensorHandle sqrt(const TensorHandle _input);\n'
              '  TensorHandle squeeze(const TensorHandle input, const '
              'std::vector<int>& axes);\n'
              '  TensorHandle transpose(const TensorHandle _input,\n'
              '                         const std::vector<int>& _perm,\n'
              '                         bool _shuffle = false);\n'
              '  TensorHandle tanh(const TensorHandle _input,\n'
              '                    bool _inPlace = true);\n'
              '  void topk(const TensorHandle _input,\n'
              '            int _axis, int _numk,\n'
              '            bool _largest, bool _sorted,\n'
              '            Tensor* outputs);\n'
              '  TensorHandle unsqueeze(const TensorHandle input, const '
              'std::vector<int>& axes);\n'
              '  TensorHandle where(const TensorHandle _cond, const '
              'TensorHandle _x, const TensorHandle _y);\n'
              '  //void split(Tensor _input, int axis, int num, Tensor* '
              'outputs);\n'
              '\n'
              '  // Helper Functions for Cython\n'
              '  Op find_op_or_fail(size_t guid);\n'
              '  Graph* optimize(float alpha, int budget, bool print_subst);\n'
              '  Graph* preprocess_weights(void);\n'
              '  int get_operator_list(Op* opList, size_t maxNumOps);\n'
              '  int get_input_edges(Edge* opList, size_t guid);\n'
              '  OpType get_operator_type(size_t guid);\n'
              '  int get_operator_int_attr(size_t guid, PMParameter attr);\n'
              '  float get_operator_float_attr(size_t guid, PMParameter '
              'attr);\n'
              '  int get_num_outputs(size_t guid);\n'
              '  int get_input_dims(size_t guid, int* dims, int idx);\n'
              '  void get_weight_value(size_t guid, DATATYPE* value);\n'
              '  int get_output_dims(size_t guid, int* dims, int idx);\n'
              '  int get_split_lens(size_t guid, int* lens);\n'
              '  size_t num_in_edges(Op op);\n'
              '  size_t num_out_edges(Op op);\n'
              '  size_t hash(void);\n'
              '  void print(void);\n'
              '  bool check_correctness(void);\n'
              '  bool has_loop(void);\n'
              '  float total_cost(void);\n'
              '  float run();\n'
              '  void print_costs(void);\n'
              '  void print_measurements(void);\n'
              '#ifdef TRT\n'
              '  void buildTRTNetwork(INetworkDefinition *network);\n'
              'private:\n'
              '  void buildTRTNetworkHelper(INetworkDefinition *network, '
              'std::map<SrcEdge, ITensor *, SrcEdgeCompare>& outputs, Edge '
              'edge);\n'
              '#endif\n'
              '  void export_op(ofstream &file_stream, Op &op);\n'
              'private:\n'
              '  TensorHandle input_wrapper(const TensorHandle _input);\n'
              '  TensorHandle weight_wrapper(const TensorHandle _weight);\n'
              'public:\n'
              '  Model *model;\n'
              '  float totalCost;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, OpCompare> inEdges, '
              'outEdges;\n'
              '  struct GraphSubst {\n'
              '    std::vector<Op> srcOps, dstOps;\n'
              '  };\n'
              '  std::vector<GraphSubst> subst_history;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=206,
         lineno=490,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Graph',
         body='Graph()')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=207,
         lineno=495,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Edge e);\n'
              '  bool has_edge(Op srcOp, Op dstOp, int srcIdx, int dstIdx);\n'
              '  void replace_node(Op oldOp, Op newOp);\n'
              '  void remove_node(Op oldOp);\n'
              '  void export_to_file(std::string file_name);\n'
              '  // This conv2ds will create a weight tensor\n'
              '  TensorHandle group_conv2d(int groups,\n'
              '                 ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=208,
         lineno=502,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='           const TensorHandle _input,\n'
              '                            int _outputC,\n'
              '                            int _kernelH, int _kernelW,\n'
              '                            int _strideH, int strideW,\n'
              '                            PaddingMode _padding,\n'
              '                            ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHandle batchnorm(const TensorHandle _input,\n'
              '                         const TensorHandle _scale,\n'
              '                         const TensorHandle _bias,\n'
              '                         const TensorHandle _mean,\n'
              '                         const TensorHandle _var,\n'
              '                ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=209,
         lineno=513,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='         float _epsilon);\n'
              '  TensorHandle cast(const TensorHandle _input, DataType '
              '_datatype);\n'
              '  TensorHandle ceil(const TensorHandle _input);\n'
              '  TensorHandle concat(int axis, int n, const TensorHandle* '
              '_inputs);\n'
              '  TensorHandle constant(int ndim, int* dims, OpType _type);\n'
              '  TensorHandle conv2d(const TensorHandle _input,\n'
              '                      int _outputC,\n'
              '                      int _kernelH, int _kernelW,\n'
              '                      int _strideH, int _strideW,\n'
              '                      PaddingMode _padding,\n'
              '                      ActiMode _activation = AC_MODE_NONE);\n'
              '  TensorHandle conv')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=210,
         lineno=524,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='2d(const TensorHandle _input,\n'
              '                      const TensorHandle _weight,\n'
              '                      int _strideH, int _strideW,\n'
              '                      PaddingMode _padding,\n'
              '                      ActiMode _activation = AC_MODE_NONE);\n'
              '  TensorHandle dropout(const TensorHandle _input);\n'
              '  TensorHandle element(OpType type,\n'
              '                       const TensorHandle _t1,\n'
              '                       const TensorHandle _t2);\n'
              '  TensorHandle elementwise_unary(const TensorHandle _input, '
              'OpType _type);\n'
              '  TensorHandle enlarge(const TensorHandle _w1, const '
              'TensorHandle _w2);\n'
              '  TensorHandle ex')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=211,
         lineno=535,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p(const TensorHandle _input);\n'
              '  TensorHandle fc(const TensorHandle _input,\n'
              '                  int _outputC,\n'
              '                  ActiMode _actiMode = AC_MODE_NONE);\n'
              '  TensorHandle fuse_conv_batchnorm(const TensorHandle _conv_w,\n'
              '                                   const TensorHandle _scale,\n'
              '                                   const TensorHandle _bias,\n'
              '                                   const TensorHandle _mean,\n'
              '                                   const TensorHandle _var);\n'
              '  // TensorHandle fuse_conv_batchnorm_alpha_var(const '
              'TensorHandle _conv_w,\n'
              '  //                              ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=212,
         lineno=545,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    const TensorHandle _scale,\n'
              '  //                                  const TensorHandle '
              '_var);\n'
              '  TensorHandle fuse_conv_batchnorm_bias(const TensorHandle '
              '_scale,\n'
              '                                   const TensorHandle _bias,\n'
              '                                   const TensorHandle _mean,\n'
              '                                   const TensorHandle _var);\n'
              '  TensorHandle broadcast_add(const TensorHandle _data,\n'
              '                                   const TensorHandle _bias);\n'
              '\n'
              '  TensorHandle leakyrelu(const TensorHandle _input, float '
              '_alpha,\n'
              '                         bool _inplace=true);\n'
              '  Te')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=213,
         lineno=556,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsorHandle log(const TensorHandle _input);\n'
              '  TensorHandle logical_not(const TensorHandle _input);\n'
              '  TensorHandle matmul(const TensorHandle _input,\n'
              '                      const TensorHandle _weight,\n'
              '                      ActiMode _actiMode = AC_MODE_NONE);\n'
              '  TensorHandle merge_gconv(const TensorHandle _weight, int '
              'count);\n'
              '  TensorHandle mul(const TensorHandle _x,\n'
              '                   const TensorHandle _y);\n'
              '  TensorHandle pad(const TensorHandle _input,\n'
              '                   const std::vector<int>& _pad_before,\n'
              '                   const std::vector<int>& _pad_after,\n'
              '               ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=214,
         lineno=567,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    float _pad_value);\n'
              '  TensorHandle pool2d_max(const TensorHandle _input,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHandle pool2d_avg(const TensorHandle _input,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation = '
              'AC_MODE_NONE);\n'
              '  TensorHan')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=215,
         lineno=578,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dle reduce(const TensorHandle _input,\n'
              '                      OpType _type,\n'
              '                      const std::vector<int>& axes,\n'
              '                      bool keepdims);\n'
              '  TensorHandle reduce_argmax(const TensorHandle _input,\n'
              '                             const std::vector<int>& axes,\n'
              '                             bool keepdims);\n'
              '  TensorHandle reduce_argmin(const TensorHandle _input,\n'
              '                             const std::vector<int>& axes,\n'
              '                             bool keepdims);\n'
              '  TensorHandle reduce_max(const TensorHandle _input,\n'
              '                          const std::vecto')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=216,
         lineno=589,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle reduce_mean(const TensorHandle _input,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims);\n'
              '  TensorHandle reduce_min(const TensorHandle _input,\n'
              '                          const std::vector<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle reduce_prod(const TensorHandle _input,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims);\n'
              '  TensorHandle reduce_sum(const TensorHandle _input,\n'
              '           ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=217,
         lineno=601,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               const std::vector<int>& axes,\n'
              '                          bool keepdims);\n'
              '  TensorHandle relu(const TensorHandle _input,\n'
              '                    bool _inPlace = true);\n'
              '  TensorHandle reshape(const TensorHandle _input,\n'
              '                       const std::vector<int>& _shape);\n'
              '  TensorHandle resize(const TensorHandle _input,\n'
              '                      const std::vector<int>& _shape);\n'
              '  TensorHandle round(const TensorHandle _input);\n'
              '  TensorHandle shape(const TensorHandle _input,\n'
              '                     OpType _type);\n'
              '  TensorHandle slice(const TensorHandle _input,\n'
              '           ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=218,
         lineno=613,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          const std::vector<int>& _start,\n'
              '                     const std::vector<int>& _end,\n'
              '                     const std::vector<int>& _axes,\n'
              '                     const std::vector<int>& _steps);\n'
              '  TensorHandle sigmoid(const TensorHandle _input,\n'
              '                       bool _inPlace = true);\n'
              '  //void split(Tensor _input, int axis, int c1, int c2, Tensor* '
              'outputs);\n'
              '  //void split(Tensor _input, int axis, int num, const int* '
              'sizes, Tensor* outputs);\n'
              '  void split(const TensorHandle _input, int _axis,\n'
              '             const std::vector<int>& _sizes,\n'
              '             TensorHandle* _ou')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=219,
         lineno=623,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputs);\n'
              '  void split_equal(const TensorHandle _input, int _axis,\n'
              '                   int _num, TensorHandle* _outputs);\n'
              '  TensorHandle sqrt(const TensorHandle _input);\n'
              '  TensorHandle squeeze(const TensorHandle input, const '
              'std::vector<int>& axes);\n'
              '  TensorHandle transpose(const TensorHandle _input,\n'
              '                         const std::vector<int>& _perm,\n'
              '                         bool _shuffle = false);\n'
              '  TensorHandle tanh(const TensorHandle _input,\n'
              '                    bool _inPlace = true);\n'
              '  void topk(const TensorHandle _input,\n'
              '            int _axis, int _numk,\n'
              '            ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=220,
         lineno=635,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='bool _largest, bool _sorted,\n'
              '            Tensor* outputs);\n'
              '  TensorHandle unsqueeze(const TensorHandle input, const '
              'std::vector<int>& axes);\n'
              '  TensorHandle where(const TensorHandle _cond, const '
              'TensorHandle _x, const TensorHandle _y);\n'
              '  //void split(Tensor _input, int axis, int num, Tensor* '
              'outputs);\n'
              '\n'
              '  // Helper Functions for Cython\n'
              '  Op find_op_or_fail(size_t guid);\n'
              '  Graph* optimize(float alpha, int budget, bool print_subst);\n'
              '  Graph* preprocess_weights(void);\n'
              '  int get_operator_list(Op* opList, size_t maxNumOps);\n'
              '  int get_input_edges(Edge* opList, size_t guid);\n'
              '  OpTyp')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=221,
         lineno=647,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e get_operator_type(size_t guid);\n'
              '  int get_operator_int_attr(size_t guid, PMParameter attr);\n'
              '  float get_operator_float_attr(size_t guid, PMParameter '
              'attr);\n'
              '  int get_num_outputs(size_t guid);\n'
              '  int get_input_dims(size_t guid, int* dims, int idx);\n'
              '  void get_weight_value(size_t guid, DATATYPE* value);\n'
              '  int get_output_dims(size_t guid, int* dims, int idx);\n'
              '  int get_split_lens(size_t guid, int* lens);\n'
              '  size_t num_in_edges(Op op);\n'
              '  size_t num_out_edges(Op op);\n'
              '  size_t hash(void);\n'
              '  void print(void);\n'
              '  bool check_correctness(void);\n'
              '  bool has_loop(void);\n'
              '  float total_co')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=222,
         lineno=661,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='st(void);\n'
              '  float run();\n'
              '  void print_costs(void);\n'
              '  void print_measurements(void);\n'
              '#ifdef TRT\n'
              '  void buildTRTNetwork(INetworkDefinition *network);\n'
              'private:\n'
              '  void buildTRTNetworkHelper(INetworkDefinition *network, '
              'std::map<SrcEdge, ITensor *, SrcEdgeCompare>& outputs, Edge '
              'edge);\n'
              '#endif\n'
              '  void export_op(ofstream &file_stream, Op &op);\n'
              'private:\n'
              '  TensorHandle input_wrapper(const TensorHandle _input);\n'
              '  TensorHandle weight_wrapper(const TensorHandle _weight);\n'
              'public:\n'
              '  Model *model;\n'
              '  float totalCost;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, OpCompare> inEdges, '
              'outEdges;\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=223,
         lineno=676,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='totalCost',
         body='float totalCost;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=224,
         lineno=677,
         tokens=23,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='inEdges',
         body='std::map<Op, std::set<Edge, EdgeCompare>, OpCompare> inEdges, '
              'outEdges;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=225,
         lineno=678,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  struct GraphSubst {\n'
              '    std::vector<Op> srcOps, dstOps;\n'
              '  };\n'
              '  std::vector<GraphSubst> subst_history;\n'
              '};\n'
              '\n'
              'class Constant : public OpBase {\n'
              'public:\n'
              '  Constant(Model* _model, int ndim, int* dims, OpType _type);\n'
              '  ~Constant(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=226,
         lineno=678,
         tokens=20,
         depth=6,
         parent_id=None,
         category='struct',
         summary=False,
         name='GraphSubst',
         body='struct GraphSubst {\n    std::vector<Op> srcOps, dstOps;\n  }')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=227,
         lineno=679,
         tokens=12,
         depth=8,
         parent_id=None,
         category='field',
         summary=False,
         name='srcOps',
         body='std::vector<Op> srcOps, dstOps;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=228,
         lineno=681,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='subst_history',
         body='std::vector<GraphSubst> subst_history;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=229,
         lineno=684,
         tokens=89,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Constant',
         body='class Constant : public OpBase {\n'
              'public:\n'
              '  Constant(Model* _model, int ndim, int* dims, OpType _type);\n'
              '  ~Constant(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=230,
         lineno=686,
         tokens=19,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Constant',
         body='Constant(Model* _model, int ndim, int* dims, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=231,
         lineno=694,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Conv2D : public OpBase {\n'
              'public:\n'
              '  Conv2D(Model* _model, Tensor _input, Tensor _weight,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding,\n'
              '         ActiMode _activation);\n'
              '  ~Conv2D(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void get_padding(int* padH, int* padW);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=232,
         lineno=695,
         tokens=244,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Conv2D',
         body='class Conv2D : public OpBase {\n'
              'public:\n'
              '  Conv2D(Model* _model, Tensor _input, Tensor _weight,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding,\n'
              '         ActiMode _activation);\n'
              '  ~Conv2D(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void get_padding(int* padH, int* padW);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnConvolutionFwdAlgo_t selectForwardAlgorithm(void);\n'
              '#endif\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '  cudnnFilterDescriptor_t filterDesc;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnConvolutionDescriptor_t convDesc;\n'
              '  cudnnConvolutionFwdAlgo_t fwdAlgo;\n'
              '#endif\n'
              '  int strideH, strideW;\n'
              '  PaddingMode padding;\n'
              '  ActiMode activation;\n'
              '  void *biasPtr;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=233,
         lineno=697,
         tokens=40,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Conv2D',
         body='Conv2D(Model* _model, Tensor _input, Tensor _weight,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding,\n'
              '         ActiMode _activation)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=234,
         lineno=707,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='& num_kernels);\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnConvolutionFwdAlgo_t selectForwardAlgorithm(void);\n'
              '#endif\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '  cudnnFilterDescriptor_t filterDesc;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnConvolutionDescriptor_t convDesc;\n'
              '  cudnnConvolutionFwdAlgo_t fwdAlgo;\n'
              '#endif\n'
              '  int strideH, strideW;\n'
              '  PaddingMode padding;\n'
              '  ActiMode activation;\n'
              '  void *biasPtr;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=235,
         lineno=713,
         tokens=15,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='inputTensor',
         body='cudnnTensorDescriptor_t inputTensor, biasTensor, outputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=236,
         lineno=714,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='filterDesc',
         body='cudnnFilterDescriptor_t filterDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=237,
         lineno=715,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='actiDesc',
         body='cudnnActivationDescriptor_t actiDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=238,
         lineno=716,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='convDesc',
         body='cudnnConvolutionDescriptor_t convDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=239,
         lineno=717,
         tokens=14,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='fwdAlgo',
         body='cudnnConvolutionFwdAlgo_t fwdAlgo;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=240,
         lineno=719,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='strideH',
         body='int strideH, strideW;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=241,
         lineno=720,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='padding',
         body='PaddingMode padding;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=242,
         lineno=721,
         tokens=5,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='activation',
         body='ActiMode activation;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=243,
         lineno=724,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Matmul : public OpBase {\n'
              'public:\n'
              '  Matmul(Model* _model, Tensor _input, Tensor _weight,\n'
              '         ActiMode _actiMode);\n'
              '  ~Matmul(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void set_layout(voi')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=244,
         lineno=725,
         tokens=219,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Matmul',
         body='class Matmul : public OpBase {\n'
              'public:\n'
              '  Matmul(Model* _model, Tensor _input, Tensor _weight,\n'
              '         ActiMode _actiMode);\n'
              '  ~Matmul(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void set_layout(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int outputC;\n'
              '  ActiMode activation;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t outputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  struct BLASGEMMParams {\n'
              '    int batch;\n'
              '    int m;\n'
              '    int n;\n'
              '    int k;\n'
              '    char transA;\n'
              '    char transB;\n'
              '    int lda;\n'
              '    int ldb;\n'
              '    int ldc;\n'
              '  };\n'
              '  BLASGEMMParams params;\n'
              '#endif\n'
              '#endif\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=245,
         lineno=727,
         tokens=24,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Matmul',
         body='Matmul(Model* _model, Tensor _input, Tensor _weight,\n'
              '         ActiMode _actiMode)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=246,
         lineno=734,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int outputC;\n'
              '  ActiMode activation;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t outputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  struct BLASGEMMParams {\n'
              '    int batch;\n'
              '    int m;\n'
              '    int n;\n'
              '    int k;\n'
              '    char transA;\n'
              '    char transB;\n'
              '    int lda;\n'
              '    int ldb;\n'
              '    int ldc;\n'
              '  };\n'
              '  BLASGEMMParams params;\n'
              '#endif\n'
              '#endif\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=247,
         lineno=737,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='outputC',
         body='int outputC;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=248,
         lineno=738,
         tokens=5,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='activation',
         body='ActiMode activation;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=249,
         lineno=740,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='outputTensor',
         body='cudnnTensorDescriptor_t outputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=250,
         lineno=741,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='actiDesc',
         body='cudnnActivationDescriptor_t actiDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=251,
         lineno=745,
         tokens=48,
         depth=8,
         parent_id=None,
         category='struct',
         summary=False,
         name='BLASGEMMParams',
         body='struct BLASGEMMParams {\n'
              '    int batch;\n'
              '    int m;\n'
              '    int n;\n'
              '    int k;\n'
              '    char transA;\n'
              '    char transB;\n'
              '    int lda;\n'
              '    int ldb;\n'
              '    int ldc;\n'
              '  }')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=252,
         lineno=746,
         tokens=3,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='batch',
         body='int batch;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=253,
         lineno=750,
         tokens=4,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='transA',
         body='char transA;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=254,
         lineno=751,
         tokens=4,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='transB',
         body='char transB;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=255,
         lineno=752,
         tokens=3,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='lda',
         body='int lda;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=256,
         lineno=753,
         tokens=3,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='ldb',
         body='int ldb;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=257,
         lineno=754,
         tokens=3,
         depth=10,
         parent_id=None,
         category='field',
         summary=False,
         name='ldc',
         body='int ldc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=258,
         lineno=756,
         tokens=8,
         depth=7,
         parent_id=None,
         category='field',
         summary=False,
         name='params',
         body='BLASGEMMParams params;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=259,
         lineno=760,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Mul : public OpBase {\n'
              'public:\n'
              '  Mul(Model* _model, const Tensor& x, const Tensor& y);\n'
              '  ~Mul(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=260,
         lineno=761,
         tokens=86,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Mul',
         body='class Mul : public OpBase {\n'
              'public:\n'
              '  Mul(Model* _model, const Tensor& x, const Tensor& y);\n'
              '  ~Mul(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=261,
         lineno=763,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Mul',
         body='Mul(Model* _model, const Tensor& x, const Tensor& y)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=262,
         lineno=771,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Pool2D : public OpBase {\n'
              'public:\n'
              '  Pool2D(Model* _model, Tensor _input,\n'
              '         Tensor _weight, OpType _type,\n'
              '         int _kernelH, int _kernelW,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding, ActiMode _activation);\n'
              '  ~Pool2D(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void get_padding(int* padH, int* padW);\n'
              '  void forward(bool block')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=263,
         lineno=772,
         tokens=210,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Pool2D',
         body='class Pool2D : public OpBase {\n'
              'public:\n'
              '  Pool2D(Model* _model, Tensor _input,\n'
              '         Tensor _weight, OpType _type,\n'
              '         int _kernelH, int _kernelW,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding, ActiMode _activation);\n'
              '  ~Pool2D(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void get_padding(int* padH, int* padW);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, outputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnPoolingDescriptor_t poolDesc;\n'
              '#endif\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  PaddingMode padding;\n'
              '  ActiMode activation;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=264,
         lineno=774,
         tokens=56,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Pool2D',
         body='Pool2D(Model* _model, Tensor _input,\n'
              '         Tensor _weight, OpType _type,\n'
              '         int _kernelH, int _kernelW,\n'
              '         int _strideH, int _strideW,\n'
              '         PaddingMode _padding, ActiMode _activation)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=265,
         lineno=782,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, outputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnPoolingDescriptor_t poolDesc;\n'
              '#endif\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  PaddingMode padding;\n'
              '  ActiMode activation;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=266,
         lineno=788,
         tokens=12,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='inputTensor',
         body='cudnnTensorDescriptor_t inputTensor, outputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=267,
         lineno=789,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='actiDesc',
         body='cudnnActivationDescriptor_t actiDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=268,
         lineno=790,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='poolDesc',
         body='cudnnPoolingDescriptor_t poolDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=269,
         lineno=792,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kernelH',
         body='int kernelH, kernelW, strideH, strideW;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=270,
         lineno=793,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='padding',
         body='PaddingMode padding;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=271,
         lineno=794,
         tokens=5,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='activation',
         body='ActiMode activation;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=272,
         lineno=796,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Activation : public OpBase {\n'
              'public:\n'
              '  Activation(Model* _model, Tensor _input, OpType _type, bool '
              '_inPlace);\n'
              '  ~Activation(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '#endif\n'
              '  bool inPlace;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=273,
         lineno=797,
         tokens=124,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Activation',
         body='class Activation : public OpBase {\n'
              'public:\n'
              '  Activation(Model* _model, Tensor _input, OpType _type, bool '
              '_inPlace);\n'
              '  ~Activation(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor;\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '#endif\n'
              '  bool inPlace;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=274,
         lineno=799,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Activation',
         body='Activation(Model* _model, Tensor _input, OpType _type, bool '
              '_inPlace)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=275,
         lineno=808,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='inputTensor',
         body='cudnnTensorDescriptor_t inputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=276,
         lineno=809,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='actiDesc',
         body='cudnnActivationDescriptor_t actiDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=277,
         lineno=811,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='inPlace',
         body='bool inPlace;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=278,
         lineno=813,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class BatchNorm : public OpBase {\n'
              'public:\n'
              '  BatchNorm(Model* _model, const Tensor& _input, const Tensor& '
              '_scale,\n'
              '            const Tensor& _bias, const Tensor& _mean, const '
              'Tensor& _var,\n'
              '            const float _epsilon);\n'
              '  ~BatchNorm(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  bool get_float_parameter(PMParameter para, float*);\n'
              '  float get_min_epsilon(void);\n'
              '  void for')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=279,
         lineno=814,
         tokens=207,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='BatchNorm',
         body='class BatchNorm : public OpBase {\n'
              'public:\n'
              '  BatchNorm(Model* _model, const Tensor& _input, const Tensor& '
              '_scale,\n'
              '            const Tensor& _bias, const Tensor& _mean, const '
              'Tensor& _var,\n'
              '            const float _epsilon);\n'
              '  ~BatchNorm(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  bool get_float_parameter(PMParameter para, float*);\n'
              '  float get_min_epsilon(void);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  float epsilon;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '  void* scaleShiftPtr;\n'
              '#endif\n'
              '  //DATATYPE *biasPtr, *scalePtr, *runningMean, *runningVar, '
              '*saveMean, *saveVar;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=280,
         lineno=816,
         tokens=44,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='BatchNorm',
         body='BatchNorm(Model* _model, const Tensor& _input, const Tensor& '
              '_scale,\n'
              '            const Tensor& _bias, const Tensor& _mean, const '
              'Tensor& _var,\n'
              '            const float _epsilon)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=281,
         lineno=823,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  float epsilon;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '  void* scaleShiftPtr;\n'
              '#endif\n'
              '  //DATATYPE *biasPtr, *scalePtr, *runningMean, *runningVar, '
              '*saveMean, *saveVar;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=282,
         lineno=828,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='epsilon',
         body='float epsilon;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=283,
         lineno=830,
         tokens=15,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='inputTensor',
         body='cudnnTensorDescriptor_t inputTensor, biasTensor, outputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=284,
         lineno=837,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Cast : public OpBase {\n'
              'public:\n'
              '  Cast(Model* _model, const Tensor& _input, DataType '
              '_datatype);\n'
              '  ~Cast(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=285,
         lineno=838,
         tokens=86,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Cast',
         body='class Cast : public OpBase {\n'
              'public:\n'
              '  Cast(Model* _model, const Tensor& _input, DataType '
              '_datatype);\n'
              '  ~Cast(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=286,
         lineno=840,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Cast',
         body='Cast(Model* _model, const Tensor& _input, DataType _datatype)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=287,
         lineno=848,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Concat : public OpBase {\n'
              'public:\n'
              '  Concat(Model* _model, int _axis, int _n, Tensor* _inputs, '
              'bool* _needCopy);\n'
              '  ~Concat(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  bool needCopy[MAX_NUM_INPUTS];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=288,
         lineno=849,
         tokens=110,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Concat',
         body='class Concat : public OpBase {\n'
              'public:\n'
              '  Concat(Model* _model, int _axis, int _n, Tensor* _inputs, '
              'bool* _needCopy);\n'
              '  ~Concat(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  bool needCopy[MAX_NUM_INPUTS];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=289,
         lineno=851,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Concat',
         body='Concat(Model* _model, int _axis, int _n, Tensor* _inputs, bool* '
              '_needCopy)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=290,
         lineno=859,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axis',
         body='int axis;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=291,
         lineno=862,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Element : public OpBase {\n'
              'public:\n'
              '  Element(Model* _model, OpType _type, const Tensor& _t1, const '
              'Tensor& _t2);\n'
              '  ~Element(void);\n'
              '  bool use_kernel(void) const;\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t in1Tensor, in2Tensor, outTensor;\n'
              '  cudnnOpTensorDescriptor_t opDesc;\n'
              '#endif\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=292,
         lineno=863,
         tokens=140,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Element',
         body='class Element : public OpBase {\n'
              'public:\n'
              '  Element(Model* _model, OpType _type, const Tensor& _t1, const '
              'Tensor& _t2);\n'
              '  ~Element(void);\n'
              '  bool use_kernel(void) const;\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnTensorDescriptor_t in1Tensor, in2Tensor, outTensor;\n'
              '  cudnnOpTensorDescriptor_t opDesc;\n'
              '#endif\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=293,
         lineno=865,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Element',
         body='Element(Model* _model, OpType _type, const Tensor& _t1, const '
              'Tensor& _t2)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=294,
         lineno=875,
         tokens=17,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='in1Tensor',
         body='cudnnTensorDescriptor_t in1Tensor, in2Tensor, outTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=295,
         lineno=876,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='opDesc',
         body='cudnnOpTensorDescriptor_t opDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=296,
         lineno=879,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ElementWiseUnary : public OpBase {\n'
              'public:\n'
              '  ElementWiseUnary(Model* _model, const Tensor& _input, OpType '
              '_type);\n'
              '  ~ElementWiseUnary(void);\n'
              '  bool use_kernel(void) const;\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=297,
         lineno=880,
         tokens=104,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='ElementWiseUnary',
         body='class ElementWiseUnary : public OpBase {\n'
              'public:\n'
              '  ElementWiseUnary(Model* _model, const Tensor& _input, OpType '
              '_type);\n'
              '  ~ElementWiseUnary(void);\n'
              '  bool use_kernel(void) const;\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=298,
         lineno=882,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ElementWiseUnary',
         body='ElementWiseUnary(Model* _model, const Tensor& _input, OpType '
              '_type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=299,
         lineno=891,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Enlarge : public OpBase {\n'
              'public:\n'
              '  Enlarge(Model* _model, Tensor _w1, Tensor _w2);\n'
              '  ~Enlarge(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=300,
         lineno=892,
         tokens=88,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Enlarge',
         body='class Enlarge : public OpBase {\n'
              'public:\n'
              '  Enlarge(Model* _model, Tensor _w1, Tensor _w2);\n'
              '  ~Enlarge(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=301,
         lineno=894,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Enlarge',
         body='Enlarge(Model* _model, Tensor _w1, Tensor _w2)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=302,
         lineno=902,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class FuseConvBatchNorm : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNorm(Model* _model, const Tensor& _conv_w, const '
              'Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var);\n'
              '  ~FuseConvBatchNorm(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=303,
         lineno=903,
         tokens=117,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='FuseConvBatchNorm',
         body='class FuseConvBatchNorm : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNorm(Model* _model, const Tensor& _conv_w, const '
              'Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var);\n'
              '  ~FuseConvBatchNorm(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=304,
         lineno=905,
         tokens=41,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNorm',
         body='FuseConvBatchNorm(Model* _model, const Tensor& _conv_w, const '
              'Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=305,
         lineno=914,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class FuseConvBatchNormAlphaVar : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNormAlphaVar(Model* _model, const Tensor& '
              '_conv_w, const Tensor& _scale, const Tensor& _var);\n'
              '  ~FuseConvBatchNormAlphaVar(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=306,
         lineno=915,
         tokens=110,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='FuseConvBatchNormAlphaVar',
         body='class FuseConvBatchNormAlphaVar : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNormAlphaVar(Model* _model, const Tensor& '
              '_conv_w, const Tensor& _scale, const Tensor& _var);\n'
              '  ~FuseConvBatchNormAlphaVar(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=307,
         lineno=917,
         tokens=30,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNormAlphaVar',
         body='FuseConvBatchNormAlphaVar(Model* _model, const Tensor& _conv_w, '
              'const Tensor& _scale, const Tensor& _var)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=308,
         lineno=925,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class FuseConvBatchNormBias : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNormBias(Model* _model, const Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var);\n'
              '  ~FuseConvBatchNormBias(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=309,
         lineno=926,
         tokens=113,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='FuseConvBatchNormBias',
         body='class FuseConvBatchNormBias : public OpBase {\n'
              'public:\n'
              '  FuseConvBatchNormBias(Model* _model, const Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var);\n'
              '  ~FuseConvBatchNormBias(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=310,
         lineno=928,
         tokens=35,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNormBias',
         body='FuseConvBatchNormBias(Model* _model, const Tensor& _scale,\n'
              '                    const Tensor& _bias, const Tensor& _mean, '
              'const Tensor& _var)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=311,
         lineno=937,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class BroadcastAdd : public OpBase {\n'
              'public:\n'
              '  BroadcastAdd(Model* _model, const Tensor& _data, const '
              'Tensor& _bias);\n'
              '  ~BroadcastAdd(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=312,
         lineno=938,
         tokens=91,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='BroadcastAdd',
         body='class BroadcastAdd : public OpBase {\n'
              'public:\n'
              '  BroadcastAdd(Model* _model, const Tensor& _data, const '
              'Tensor& _bias);\n'
              '  ~BroadcastAdd(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=313,
         lineno=940,
         tokens=19,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='BroadcastAdd',
         body='BroadcastAdd(Model* _model, const Tensor& _data, const Tensor& '
              '_bias)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=314,
         lineno=948,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class MergeGConv : public OpBase {\n'
              'public:\n'
              '  MergeGConv(Model* _model, const Tensor& _weight, int count);\n'
              '  ~MergeGConv(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int count;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=315,
         lineno=949,
         tokens=97,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='MergeGConv',
         body='class MergeGConv : public OpBase {\n'
              'public:\n'
              '  MergeGConv(Model* _model, const Tensor& _weight, int count);\n'
              '  ~MergeGConv(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int count;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=316,
         lineno=951,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MergeGConv',
         body='MergeGConv(Model* _model, const Tensor& _weight, int count)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=317,
         lineno=959,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='count',
         body='int count;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=318,
         lineno=961,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class NoOp : public OpBase {\n'
              'public:\n'
              '  NoOp(Model* _model, Tensor _input, OpType _type);\n'
              '  ~NoOp(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=319,
         lineno=962,
         tokens=88,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='NoOp',
         body='class NoOp : public OpBase {\n'
              'public:\n'
              '  NoOp(Model* _model, Tensor _input, OpType _type);\n'
              '  ~NoOp(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=320,
         lineno=964,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='NoOp',
         body='NoOp(Model* _model, Tensor _input, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=321,
         lineno=972,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Pad : public OpBase {\n'
              'public:\n'
              '  Pad(Model* _model, const Tensor& _input,\n'
              '      const std::vector<int>& _pad_before,\n'
              '      const std::vector<int>& _pad_after,\n'
              '      float _pad_value);\n'
              '  ~Pad(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> pad_before, pad_after;\n'
              '  float pad_value;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=322,
         lineno=973,
         tokens=129,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Pad',
         body='class Pad : public OpBase {\n'
              'public:\n'
              '  Pad(Model* _model, const Tensor& _input,\n'
              '      const std::vector<int>& _pad_before,\n'
              '      const std::vector<int>& _pad_after,\n'
              '      float _pad_value);\n'
              '  ~Pad(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> pad_before, pad_after;\n'
              '  float pad_value;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=323,
         lineno=975,
         tokens=40,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Pad',
         body='Pad(Model* _model, const Tensor& _input,\n'
              '      const std::vector<int>& _pad_before,\n'
              '      const std::vector<int>& _pad_after,\n'
              '      float _pad_value)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=324,
         lineno=986,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='pad_before',
         body='std::vector<int> pad_before, pad_after;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=325,
         lineno=987,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='pad_value',
         body='float pad_value;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=326,
         lineno=989,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Reduce : public OpBase {\n'
              'public:\n'
              '  Reduce(Model* _model, const Tensor& _input, OpType _type,\n'
              '         const std::vector<int>& _axes, bool _keepdims);\n'
              '  ~Reduce(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  bool keepdims;\n'
              '  std::vector<int> axes;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=327,
         lineno=990,
         tokens=117,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Reduce',
         body='class Reduce : public OpBase {\n'
              'public:\n'
              '  Reduce(Model* _model, const Tensor& _input, OpType _type,\n'
              '         const std::vector<int>& _axes, bool _keepdims);\n'
              '  ~Reduce(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  bool keepdims;\n'
              '  std::vector<int> axes;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=328,
         lineno=992,
         tokens=32,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Reduce',
         body='Reduce(Model* _model, const Tensor& _input, OpType _type,\n'
              '         const std::vector<int>& _axes, bool _keepdims)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=329,
         lineno=1001,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='keepdims',
         body='bool keepdims;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=330,
         lineno=1002,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axes',
         body='std::vector<int> axes;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=331,
         lineno=1004,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Reshape : public OpBase {\n'
              'public:\n'
              '  Reshape(Model* _model, Tensor _input, const std::vector<int>& '
              'shape);\n'
              '  ~Reshape(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=332,
         lineno=1005,
         tokens=91,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Reshape',
         body='class Reshape : public OpBase {\n'
              'public:\n'
              '  Reshape(Model* _model, Tensor _input, const std::vector<int>& '
              'shape);\n'
              '  ~Reshape(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=333,
         lineno=1007,
         tokens=19,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Reshape',
         body='Reshape(Model* _model, Tensor _input, const std::vector<int>& '
              'shape)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=334,
         lineno=1015,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Resize : public OpBase {\n'
              'public:\n'
              '  Resize(Model* _model, const Tensor& _input, const '
              'std::vector<int>& _shape);\n'
              '  ~Resize(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> shape;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=335,
         lineno=1016,
         tokens=101,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Resize',
         body='class Resize : public OpBase {\n'
              'public:\n'
              '  Resize(Model* _model, const Tensor& _input, const '
              'std::vector<int>& _shape);\n'
              '  ~Resize(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> shape;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=336,
         lineno=1018,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Resize',
         body='Resize(Model* _model, const Tensor& _input, const '
              'std::vector<int>& _shape)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=337,
         lineno=1026,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='shape',
         body='std::vector<int> shape;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=338,
         lineno=1028,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Shape : public OpBase {\n'
              'public:\n'
              '  Shape(Model* _model, const Tensor& _input, OpType _type);\n'
              '  ~Shape(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=339,
         lineno=1029,
         tokens=87,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Shape',
         body='class Shape : public OpBase {\n'
              'public:\n'
              '  Shape(Model* _model, const Tensor& _input, OpType _type);\n'
              '  ~Shape(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=340,
         lineno=1031,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Shape',
         body='Shape(Model* _model, const Tensor& _input, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=341,
         lineno=1039,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Slice : public OpBase {\n'
              'public:\n'
              '  Slice(Model* _model, const Tensor& _input,\n'
              '        const std::vector<int>& _start,\n'
              '        const std::vector<int>& _end,\n'
              '        const std::vector<int>& _axes,\n'
              '        const std::vector<int>& _steps);\n'
              '  ~Slice(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> start, end, axes, steps;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=342,
         lineno=1040,
         tokens=138,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Slice',
         body='class Slice : public OpBase {\n'
              'public:\n'
              '  Slice(Model* _model, const Tensor& _input,\n'
              '        const std::vector<int>& _start,\n'
              '        const std::vector<int>& _end,\n'
              '        const std::vector<int>& _axes,\n'
              '        const std::vector<int>& _steps);\n'
              '  ~Slice(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> start, end, axes, steps;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=343,
         lineno=1042,
         tokens=52,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Slice',
         body='Slice(Model* _model, const Tensor& _input,\n'
              '        const std::vector<int>& _start,\n'
              '        const std::vector<int>& _end,\n'
              '        const std::vector<int>& _axes,\n'
              '        const std::vector<int>& _steps)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=344,
         lineno=1054,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='start',
         body='std::vector<int> start, end, axes, steps;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=345,
         lineno=1056,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Split : public OpBase {\n'
              'public:\n'
              '  Split(Model* _model, const Tensor& _input, int axis, const '
              'std::vector<int>& _sizes);\n'
              '  ~Split(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  std::vector<int> sizes;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=346,
         lineno=1057,
         tokens=108,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Split',
         body='class Split : public OpBase {\n'
              'public:\n'
              '  Split(Model* _model, const Tensor& _input, int axis, const '
              'std::vector<int>& _sizes);\n'
              '  ~Split(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  std::vector<int> sizes;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=347,
         lineno=1059,
         tokens=24,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Split',
         body='Split(Model* _model, const Tensor& _input, int axis, const '
              'std::vector<int>& _sizes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=348,
         lineno=1067,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axis',
         body='int axis;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=349,
         lineno=1068,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='sizes',
         body='std::vector<int> sizes;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=350,
         lineno=1070,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Squeeze : public OpBase {\n'
              'public:\n'
              '  Squeeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  ~Squeeze(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> axes;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=351,
         lineno=1071,
         tokens=102,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Squeeze',
         body='class Squeeze : public OpBase {\n'
              'public:\n'
              '  Squeeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  ~Squeeze(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> axes;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=352,
         lineno=1073,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Squeeze',
         body='Squeeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=353,
         lineno=1081,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axes',
         body='std::vector<int> axes;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=354,
         lineno=1083,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class TopK : public OpBase {\n'
              'public:\n'
              '  TopK(Model* _model, const Tensor& _input,\n'
              '       int _axis, int _numk,\n'
              '       bool _largest, bool _sorted);\n'
              '  ~TopK(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  bool largest, sorted;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=355,
         lineno=1084,
         tokens=117,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='TopK',
         body='class TopK : public OpBase {\n'
              'public:\n'
              '  TopK(Model* _model, const Tensor& _input,\n'
              '       int _axis, int _numk,\n'
              '       bool _largest, bool _sorted);\n'
              '  ~TopK(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int axis;\n'
              '  bool largest, sorted;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=356,
         lineno=1086,
         tokens=33,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TopK',
         body='TopK(Model* _model, const Tensor& _input,\n'
              '       int _axis, int _numk,\n'
              '       bool _largest, bool _sorted)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=357,
         lineno=1096,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axis',
         body='int axis;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=358,
         lineno=1097,
         tokens=5,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='largest',
         body='bool largest, sorted;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=359,
         lineno=1099,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Transpose : public OpBase {\n'
              'public:\n'
              '  Transpose(Model* _model, Tensor _input,\n'
              '            const std::vector<int>& perm,\n'
              '            bool _shuffle);\n'
              '  ~Transpose(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int permIdx;\n'
              '  bool shuffle;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=360,
         lineno=1100,
         tokens=107,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Transpose',
         body='class Transpose : public OpBase {\n'
              'public:\n'
              '  Transpose(Model* _model, Tensor _input,\n'
              '            const std::vector<int>& perm,\n'
              '            bool _shuffle);\n'
              '  ~Transpose(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  int permIdx;\n'
              '  bool shuffle;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=361,
         lineno=1102,
         tokens=24,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Transpose',
         body='Transpose(Model* _model, Tensor _input,\n'
              '            const std::vector<int>& perm,\n'
              '            bool _shuffle)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=362,
         lineno=1112,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='permIdx',
         body='int permIdx;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=363,
         lineno=1113,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='shuffle',
         body='bool shuffle;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=364,
         lineno=1115,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Unsqueeze : public OpBase {\n'
              'public:\n'
              '  Unsqueeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  ~Unsqueeze(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> axes;\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=365,
         lineno=1116,
         tokens=102,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Unsqueeze',
         body='class Unsqueeze : public OpBase {\n'
              'public:\n'
              '  Unsqueeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  ~Unsqueeze(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              'public:\n'
              '  std::vector<int> axes;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=366,
         lineno=1118,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Unsqueeze',
         body='Unsqueeze(Model* _model, const Tensor& input, const '
              'std::vector<int>& axes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=367,
         lineno=1126,
         tokens=7,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='axes',
         body='std::vector<int> axes;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=368,
         lineno=1128,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Where : public OpBase {\n'
              'public:\n'
              '  Where(Model* _model, const Tensor& _input, const Tensor& _x, '
              'const Tensor& _y);\n'
              '  ~Where(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '};\n'
              '\n'
              'template<typename T>\n'
              'struct KeyCompare {\n'
              '  bool operator()(const T& a, const T& b) const {\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=369,
         lineno=1129,
         tokens=94,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Where',
         body='class Where : public OpBase {\n'
              'public:\n'
              '  Where(Model* _model, const Tensor& _input, const Tensor& _x, '
              'const Tensor& _y);\n'
              '  ~Where(void);\n'
              '  bool get_int_parameter(PMParameter para, int*);\n'
              '  void forward(bool block);\n'
              '  void map(void);\n'
              '  void unmap(void);\n'
              '  void collect_costs(float& exe_time, float& flops, float& '
              'mem_acc, int& num_kernels);\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=370,
         lineno=1131,
         tokens=24,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Where',
         body='Where(Model* _model, const Tensor& _input, const Tensor& _x, '
              'const Tensor& _y)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=371,
         lineno=1141,
         tokens=68,
         depth=4,
         parent_id=None,
         category='struct',
         summary=False,
         name='KeyCompare',
         body='struct KeyCompare {\n'
              '  bool operator()(const T& a, const T& b) const {\n'
              '    for (int i = 0; i < T::KEY_LENGTH; i++)\n'
              '      if (a.keys[i] != b.keys[i])\n'
              '        return a.keys[i] < b.keys[i];\n'
              '    return false;\n'
              '  };\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=372,
         lineno=1143,
         tokens=48,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < T::KEY_LENGTH; i++)\n'
              '      if (a.keys[i] != b.keys[i])\n'
              '        return a.keys[i] < b.keys[i];\n'
              '    return false;\n'
              '  };\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=373,
         lineno=1149,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct ActivationKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;\n'
              '  ActivationKey(Tensor, OpType, bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '// key is (inputN, inputC, inputH, inputW)\n'
              'struct BatchNormKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  BatchNormKey(const Tensor& _input);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct CastKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  CastKey(const Tensor& _input, DataType _datatype);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=374,
         lineno=1150,
         tokens=39,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ActivationKey',
         body='struct ActivationKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;\n'
              '  ActivationKey(Tensor, OpType, bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=375,
         lineno=1151,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=376,
         lineno=1152,
         tokens=10,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ActivationKey',
         body='ActivationKey(Tensor, OpType, bool)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=377,
         lineno=1157,
         tokens=36,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='BatchNormKey',
         body='struct BatchNormKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  BatchNormKey(const Tensor& _input);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=378,
         lineno=1158,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=379,
         lineno=1159,
         tokens=9,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='BatchNormKey',
         body='BatchNormKey(const Tensor& _input)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=380,
         lineno=1163,
         tokens=41,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='CastKey',
         body='struct CastKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  CastKey(const Tensor& _input, DataType _datatype);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=381,
         lineno=1164,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=382,
         lineno=1165,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='CastKey',
         body='CastKey(const Tensor& _input, DataType _datatype)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=383,
         lineno=1168,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct ConcatKey {\n'
              '  static const int KEY_LENGTH = MAX_NUM_INPUTS * '
              'Tensor::MAX_KEY_LENGTH + 3;\n'
              '  ConcatKey(int, int, Tensor*, bool*);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '//keys are (ndim, dims[0..ndims-1], constant_mode\n'
              'struct ConstantKey {\n'
              '  static const int KEY_LENGTH = MAX_DIM + 2;\n'
              '  ConstantKey(in')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=384,
         lineno=1169,
         tokens=44,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ConcatKey',
         body='struct ConcatKey {\n'
              '  static const int KEY_LENGTH = MAX_NUM_INPUTS * '
              'Tensor::MAX_KEY_LENGTH + 3;\n'
              '  ConcatKey(int, int, Tensor*, bool*);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=385,
         lineno=1170,
         tokens=20,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = MAX_NUM_INPUTS * '
              'Tensor::MAX_KEY_LENGTH + 3;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=386,
         lineno=1171,
         tokens=10,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ConcatKey',
         body='ConcatKey(int, int, Tensor*, bool*)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=387,
         lineno=1176,
         tokens=35,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ConstantKey',
         body='struct ConstantKey {\n'
              '  static const int KEY_LENGTH = MAX_DIM + 2;\n'
              '  ConstantKey(int, int*, OpType);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=388,
         lineno=1177,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = MAX_DIM + 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=389,
         lineno=1178,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t, int*, OpType);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '// keys are (strideH, strideW, padding, activation, input, '
              'weight)\n'
              'struct Conv2DKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + '
              '4;\n'
              '  Conv2DKey(Tensor, Tensor, int, int,\n'
              '            PaddingMode, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct ElementKey {\n'
              '  static const int KEY_LENGTH = 2*Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ElementKey(const Tensor& t1, const Tensor& t2, OpType type);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=390,
         lineno=1178,
         tokens=9,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantKey',
         body='ConstantKey(int, int*, OpType)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=391,
         lineno=1183,
         tokens=55,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='Conv2DKey',
         body='struct Conv2DKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + '
              '4;\n'
              '  Conv2DKey(Tensor, Tensor, int, int,\n'
              '            PaddingMode, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=392,
         lineno=1184,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + 4;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=393,
         lineno=1185,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Conv2DKey',
         body='Conv2DKey(Tensor, Tensor, int, int,\n'
              '            PaddingMode, ActiMode)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=394,
         lineno=1190,
         tokens=50,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ElementKey',
         body='struct ElementKey {\n'
              '  static const int KEY_LENGTH = 2*Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ElementKey(const Tensor& t1, const Tensor& t2, OpType type);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=395,
         lineno=1191,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = 2*Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=396,
         lineno=1192,
         tokens=18,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ElementKey',
         body='ElementKey(const Tensor& t1, const Tensor& t2, OpType type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=397,
         lineno=1195,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct ElementWiseUnaryKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ElementWiseUnaryKey(const Tensor& _input, OpType _type);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct EnlargeKey {\n'
              '  static const int KEY_LENGTH = 2 * Tensor::MAX_KEY_LENGTH;\n'
              '  EnlargeKey(Tensor w1, Tensor w2);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct FuseConvBatchNormKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormKey(const Tensor& conv_w);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=398,
         lineno=1196,
         tokens=48,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ElementWiseUnaryKey',
         body='struct ElementWiseUnaryKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ElementWiseUnaryKey(const Tensor& _input, OpType _type);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=399,
         lineno=1197,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=400,
         lineno=1198,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ElementWiseUnaryKey',
         body='ElementWiseUnaryKey(const Tensor& _input, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=401,
         lineno=1202,
         tokens=42,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='EnlargeKey',
         body='struct EnlargeKey {\n'
              '  static const int KEY_LENGTH = 2 * Tensor::MAX_KEY_LENGTH;\n'
              '  EnlargeKey(Tensor w1, Tensor w2);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=402,
         lineno=1203,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = 2 * Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=403,
         lineno=1204,
         tokens=11,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='EnlargeKey',
         body='EnlargeKey(Tensor w1, Tensor w2)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=404,
         lineno=1208,
         tokens=40,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='FuseConvBatchNormKey',
         body='struct FuseConvBatchNormKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormKey(const Tensor& conv_w);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=405,
         lineno=1209,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=406,
         lineno=1210,
         tokens=11,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNormKey',
         body='FuseConvBatchNormKey(const Tensor& conv_w)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=407,
         lineno=1213,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct FuseConvBatchNormBiasKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormBiasKey(const Tensor& _scale);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct FuseConvBatchNormAlphaVarKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormAlphaVarKey(const Tensor& conv_w);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct BroadcastAddKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  BroadcastAddKey(const Tensor& data);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=408,
         lineno=1214,
         tokens=42,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='FuseConvBatchNormBiasKey',
         body='struct FuseConvBatchNormBiasKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormBiasKey(const Tensor& _scale);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=409,
         lineno=1215,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=410,
         lineno=1216,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNormBiasKey',
         body='FuseConvBatchNormBiasKey(const Tensor& _scale)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=411,
         lineno=1220,
         tokens=44,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='FuseConvBatchNormAlphaVarKey',
         body='struct FuseConvBatchNormAlphaVarKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  FuseConvBatchNormAlphaVarKey(const Tensor& conv_w);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=412,
         lineno=1221,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=413,
         lineno=1222,
         tokens=13,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='FuseConvBatchNormAlphaVarKey',
         body='FuseConvBatchNormAlphaVarKey(const Tensor& conv_w)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=414,
         lineno=1226,
         tokens=35,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='BroadcastAddKey',
         body='struct BroadcastAddKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;\n'
              '  BroadcastAddKey(const Tensor& data);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=415,
         lineno=1227,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=416,
         lineno=1228,
         tokens=8,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='BroadcastAddKey',
         body='BroadcastAddKey(const Tensor& data)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=417,
         lineno=1231,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct TopKKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 4;\n'
              '  TopKKey(const Tensor& _input, int _axis, int _numk, bool '
              '_largest, bool _sorted);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '// keys are (inputX, inputN, inputC, outputC, acti)\n'
              '//\n'
              'struct MatmulKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + '
              '1;\n'
              '  MatmulKey(Tensor, Tensor, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=418,
         lineno=1232,
         tokens=57,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TopKKey',
         body='struct TopKKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 4;\n'
              '  TopKKey(const Tensor& _input, int _axis, int _numk, bool '
              '_largest, bool _sorted);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=419,
         lineno=1233,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 4;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=420,
         lineno=1234,
         tokens=27,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TopKKey',
         body='TopKKey(const Tensor& _input, int _axis, int _numk, bool '
              '_largest, bool _sorted)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=421,
         lineno=1240,
         tokens=45,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='MatmulKey',
         body='struct MatmulKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + '
              '1;\n'
              '  MatmulKey(Tensor, Tensor, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=422,
         lineno=1241,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2 + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=423,
         lineno=1242,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MatmulKey',
         body='MatmulKey(Tensor, Tensor, ActiMode)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=424,
         lineno=1245,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct MergeGConvKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  MergeGConvKey(const Tensor& weight, int count);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '// keys are (inputX, inputN, inputC, outputC, acti)\n'
              'struct MulKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2;\n'
              '  MulKey(const Tensor&, const Tensor&);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct NoopKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  NoopKey(Tensor input, OpType typee);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=425,
         lineno=1246,
         tokens=43,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='MergeGConvKey',
         body='struct MergeGConvKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  MergeGConvKey(const Tensor& weight, int count);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=426,
         lineno=1247,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=427,
         lineno=1248,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MergeGConvKey',
         body='MergeGConvKey(const Tensor& weight, int count)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=428,
         lineno=1253,
         tokens=37,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='MulKey',
         body='struct MulKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2;\n'
              '  MulKey(const Tensor&, const Tensor&);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=429,
         lineno=1254,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH * 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=430,
         lineno=1255,
         tokens=8,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MulKey',
         body='MulKey(const Tensor&, const Tensor&)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=431,
         lineno=1259,
         tokens=42,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='NoopKey',
         body='struct NoopKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  NoopKey(Tensor input, OpType typee);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=432,
         lineno=1260,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=433,
         lineno=1261,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='NoopKey',
         body='NoopKey(Tensor input, OpType typee)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=434,
         lineno=1264,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct PadKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2 * '
              'MAX_DIM + 1;\n'
              '  PadKey(const Tensor& _input,\n'
              '         const std::vector<int>& _pad_before,\n'
              '         const std::vector<int>& _pad_after,\n'
              '         float _pad_value);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              '// keys are (inputN, inputC, inputH, inputW')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=435,
         lineno=1265,
         tokens=71,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='PadKey',
         body='struct PadKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2 * '
              'MAX_DIM + 1;\n'
              '  PadKey(const Tensor& _input,\n'
              '         const std::vector<int>& _pad_before,\n'
              '         const std::vector<int>& _pad_after,\n'
              '         float _pad_value);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=436,
         lineno=1266,
         tokens=21,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2 * '
              'MAX_DIM + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=437,
         lineno=1267,
         tokens=36,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='PadKey',
         body='PadKey(const Tensor& _input,\n'
              '         const std::vector<int>& _pad_before,\n'
              '         const std::vector<int>& _pad_after,\n'
              '         float _pad_value)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=438,
         lineno=1274,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', kernelH, kernelW,\n'
              '//           strideH, strideW, padding, activation, type,\n'
              '//           input.split[0], input.split[1]\n'
              'struct Pool2DKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 7;\n'
              '  Pool2DKey(Tensor, OpType, int, int, int, int,\n'
              '            PaddingMode, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct ReduceKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 3;\n'
              '  ReduceKey(const Tensor&, OpType, const std::vector<int>&, '
              'bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=439,
         lineno=1277,
         tokens=57,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='Pool2DKey',
         body='struct Pool2DKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 7;\n'
              '  Pool2DKey(Tensor, OpType, int, int, int, int,\n'
              '            PaddingMode, ActiMode);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=440,
         lineno=1278,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 7;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=441,
         lineno=1279,
         tokens=26,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Pool2DKey',
         body='Pool2DKey(Tensor, OpType, int, int, int, int,\n'
              '            PaddingMode, ActiMode)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=442,
         lineno=1284,
         tokens=49,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ReduceKey',
         body='struct ReduceKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 3;\n'
              '  ReduceKey(const Tensor&, OpType, const std::vector<int>&, '
              'bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=443,
         lineno=1285,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM '
              '+ 3;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=444,
         lineno=1286,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ReduceKey',
         body='ReduceKey(const Tensor&, OpType, const std::vector<int>&, bool)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=445,
         lineno=1289,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct ReshapeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 1;\n'
              '  ReshapeKey(Tensor, const std::vector<int>&);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct ResizeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 1;\n'
              '  ResizeKey(const Tensor&, const std::vector<int>&);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct ShapeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ShapeKey(const Tensor& _input, OpType _type);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=446,
         lineno=1290,
         tokens=46,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ReshapeKey',
         body='struct ReshapeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 1;\n'
              '  ReshapeKey(Tensor, const std::vector<int>&);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=447,
         lineno=1291,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM '
              '+ 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=448,
         lineno=1292,
         tokens=13,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ReshapeKey',
         body='ReshapeKey(Tensor, const std::vector<int>&)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=449,
         lineno=1296,
         tokens=44,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ResizeKey',
         body='struct ResizeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM + 1;\n'
              '  ResizeKey(const Tensor&, const std::vector<int>&);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=450,
         lineno=1297,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM '
              '+ 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=451,
         lineno=1298,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ResizeKey',
         body='ResizeKey(const Tensor&, const std::vector<int>&)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=452,
         lineno=1302,
         tokens=42,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='ShapeKey',
         body='struct ShapeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;\n'
              '  ShapeKey(const Tensor& _input, OpType _type);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=453,
         lineno=1303,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=454,
         lineno=1304,
         tokens=13,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='ShapeKey',
         body='ShapeKey(const Tensor& _input, OpType _type)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=455,
         lineno=1307,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct SliceKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM * 4 + 1;\n'
              '  SliceKey(const Tensor& _input,\n'
              '           const std::vector<int>& _start,\n'
              '           const std::vector<int>& _end,\n'
              '           const std::vector<int>& _axes,\n'
              '           const std::vector<int>& _steps);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct SqueezeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM;\n'
              '  SqueezeKey(const Tensor& input, const std::vector<int>& '
              'axes);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=456,
         lineno=1308,
         tokens=83,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SliceKey',
         body='struct SliceKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM * 4 + 1;\n'
              '  SliceKey(const Tensor& _input,\n'
              '           const std::vector<int>& _start,\n'
              '           const std::vector<int>& _end,\n'
              '           const std::vector<int>& _axes,\n'
              '           const std::vector<int>& _steps);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=457,
         lineno=1309,
         tokens=21,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM '
              '* 4 + 1;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=458,
         lineno=1310,
         tokens=48,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SliceKey',
         body='SliceKey(const Tensor& _input,\n'
              '           const std::vector<int>& _start,\n'
              '           const std::vector<int>& _end,\n'
              '           const std::vector<int>& _axes,\n'
              '           const std::vector<int>& _steps)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=459,
         lineno=1318,
         tokens=46,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SqueezeKey',
         body='struct SqueezeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM;\n'
              '  SqueezeKey(const Tensor& input, const std::vector<int>& '
              'axes);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=460,
         lineno=1319,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=461,
         lineno=1320,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SqueezeKey',
         body='SqueezeKey(const Tensor& input, const std::vector<int>& axes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=462,
         lineno=1323,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct SplitKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_NUM_OUTPUTS + 2;\n'
              '  SplitKey(const Tensor& _input, int _axis, const '
              'std::vector<int>& _sizes);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct TransposeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;\n'
              '  TransposeKey(Tensor, const std::vector<int>&, bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'struct UnsqueezeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM;\n'
              '  UnsqueezeKey(const Tensor& input, const std::vector<int>& '
              'axes);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=463,
         lineno=1324,
         tokens=55,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='SplitKey',
         body='struct SplitKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_NUM_OUTPUTS + 2;\n'
              '  SplitKey(const Tensor& _input, int _axis, const '
              'std::vector<int>& _sizes);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=464,
         lineno=1325,
         tokens=20,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_NUM_OUTPUTS + 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=465,
         lineno=1326,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitKey',
         body='SplitKey(const Tensor& _input, int _axis, const '
              'std::vector<int>& _sizes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=466,
         lineno=1330,
         tokens=45,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TransposeKey',
         body='struct TransposeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;\n'
              '  TransposeKey(Tensor, const std::vector<int>&, bool);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=467,
         lineno=1331,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + 2;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=468,
         lineno=1332,
         tokens=14,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TransposeKey',
         body='TransposeKey(Tensor, const std::vector<int>&, bool)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=469,
         lineno=1336,
         tokens=46,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='UnsqueezeKey',
         body='struct UnsqueezeKey {\n'
              '  static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + '
              'MAX_DIM;\n'
              '  UnsqueezeKey(const Tensor& input, const std::vector<int>& '
              'axes);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=470,
         lineno=1337,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = Tensor::MAX_KEY_LENGTH + MAX_DIM;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=471,
         lineno=1338,
         tokens=16,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='UnsqueezeKey',
         body='UnsqueezeKey(const Tensor& input, const std::vector<int>& axes)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=472,
         lineno=1341,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct WhereKey {\n'
              '  static const int KEY_LENGTH = 3 * Tensor::MAX_KEY_LENGTH;\n'
              '  WhereKey(const Tensor& _cond, const Tensor& _x, const Tensor& '
              '_y);\n'
              '  int keys[KEY_LENGTH];\n'
              '};\n'
              '\n'
              'class Model {\n'
              'public:\n'
              '  Model();\n'
              '  Op get_or_create_activation(Tensor _input, OpType _type,\n'
              '                              bool _inPlace);\n'
              '  Op get_or_create_batchnorm(const Tensor& _input,\n'
              '                             const Tensor& _scale,\n'
              '                             const Tensor& _bias,\n'
              '                             const Tensor& _mean,\n'
              '                             const Tensor& _var,\n'
              '                             const float _epsilon);\n'
              '  Op get_or_create_cast(const Tensor& _input, DataType '
              '_datatype);\n'
              '  Op get_or_create_concat')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=473,
         lineno=1342,
         tokens=49,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='WhereKey',
         body='struct WhereKey {\n'
              '  static const int KEY_LENGTH = 3 * Tensor::MAX_KEY_LENGTH;\n'
              '  WhereKey(const Tensor& _cond, const Tensor& _x, const Tensor& '
              '_y);\n'
              '  int keys[KEY_LENGTH];\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=474,
         lineno=1343,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='KEY_LENGTH',
         body='static const int KEY_LENGTH = 3 * Tensor::MAX_KEY_LENGTH;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=475,
         lineno=1344,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='WhereKey',
         body='WhereKey(const Tensor& _cond, const Tensor& _x, const Tensor& '
              '_y)')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=476,
         lineno=1348,
         tokens=2124,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Model',
         body='class Model {\n'
              'public:\n'
              '  Model();\n'
              '  Op get_or_create_activation(Tensor _input, OpType _type,\n'
              '                              bool _inPlace);\n'
              '  Op get_or_create_batchnorm(const Tensor& _input,\n'
              '                             const Tensor& _scale,\n'
              '                             const Tensor& _bias,\n'
              '                             const Tensor& _mean,\n'
              '                             const Tensor& _var,\n'
              '                             const float _epsilon);\n'
              '  Op get_or_create_cast(const Tensor& _input, DataType '
              '_datatype);\n'
              '  Op get_or_create_concat(int axis, int n, Tensor* _inputs, '
              'bool* _needCopy);\n'
              '  Op get_or_create_constant(int ndim, int* dims, OpType type);\n'
              '  Op get_or_create_conv2d(Tensor _input, Tensor _weight,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation);\n'
              '  Op get_or_create_element(OpType type, const Tensor& t1, const '
              'Tensor& t2);\n'
              '  Op get_or_create_elementwise_unary(const Tensor& _input, '
              'OpType _type);\n'
              '  Op get_or_create_enlarge(Tensor _w1, Tensor _w2);\n'
              '  Op get_or_create_fuse_conv_batchnorm(const Tensor& _conv_w,\n'
              '                                       const Tensor& _scale,\n'
              '                                       const Tensor& _bias,\n'
              '                                       const Tensor& _mean,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_fuse_conv_batchnorm_alpha_var(const Tensor& '
              '_conv_w,\n'
              '                                       const Tensor& _scale,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_fuse_conv_batchnorm_bias(const Tensor& '
              '_scale,\n'
              '                                       const Tensor& _bias,\n'
              '                                       const Tensor& _mean,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_broadcast_add(const Tensor& _data,\n'
              '                                 const Tensor& _bias);\n'
              '  Op get_or_create_matmul(Tensor _input, Tensor _weight,\n'
              '                          ActiMode _actimode);\n'
              '  Op get_or_create_mul(const Tensor& x,\n'
              '                       const Tensor& y);\n'
              '  Op get_or_create_pad(const Tensor& _input,\n'
              '                       const std::vector<int>& _pad_before,\n'
              '                       const std::vector<int>& _pad_after,\n'
              '                       float _pad_value);\n'
              '  Op get_or_create_pool2d(Tensor _input, Tensor _weight,\n'
              '                          OpType _type,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation);\n'
              '  Op get_or_create_reduce(const Tensor& _input, OpType _type,\n'
              '                          const std::vector<int>& _axes, bool '
              '_keepdims);\n'
              '  Op get_or_create_reshape(Tensor _input, const '
              'std::vector<int>& shape);\n'
              '  Op get_or_create_resize(const Tensor& _input,\n'
              '                          const std::vector<int>& _shape);\n'
              '  Op get_or_create_shape(const Tensor& _input, OpType _type);\n'
              '  Op get_or_create_slice(const Tensor& _input,\n'
              '                         const std::vector<int>& _start,\n'
              '                         const std::vector<int>& _end,\n'
              '                         const std::vector<int>& _axes,\n'
              '                         const std::vector<int>& _steps);\n'
              '  Op get_or_create_squeeze(const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  Op get_or_create_split(const Tensor& _input, int _axis, const '
              'std::vector<int>& _sizes);\n'
              '  Op get_or_create_split(const Tensor& _input, int axis, int '
              'n);\n'
              '  Op get_or_create_topk(const Tensor& _input, int _axis, int '
              '_numk,\n'
              '                        bool _largest, bool _sorted);\n'
              '  Op get_or_create_transpose(Tensor _input, const '
              'std::vector<int>& _perm,\n'
              '                             bool _shuffle);\n'
              '  Op get_or_create_transpose(Tensor _input, int permIdx,\n'
              '                             bool _shuffle);\n'
              '  Op get_or_create_noop(Tensor _input, OpType _type);\n'
              '  Op get_or_create_merge_gconv(const Tensor& _weight,\n'
              '                               int count);\n'
              '  Op get_or_create_unsqueeze(const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  Op get_or_create_where(const Tensor& _cond, const Tensor& _x, '
              'const Tensor& _y);\n'
              '  // Special API for creating weight and input operator\n'
              '  Op create_input(Tensor _input, OpType _type);\n'
              '  Op create_weight(Tensor _weight, OpType _type);\n'
              '  void measure_conv2d_cost(Conv2D*);\n'
              '  void measure_matmul_cost(Matmul*);\n'
              '  void measure_mul_cost(Mul*);\n'
              '  void measure_pad_cost(Pad*);\n'
              '  void measure_pool2d_cost(Pool2D*);\n'
              '  void measure_topk_cost(TopK*);\n'
              '  void measure_transpose_cost(Transpose*);\n'
              '  void measure_reduce_cost(Reduce*);\n'
              '  void measure_reshape_cost(Reshape*);\n'
              '  void measure_resize_cost(Resize*);\n'
              '  void measure_activation_cost(Activation*);\n'
              '  void measure_batchnorm_cost(BatchNorm*);\n'
              '  void measure_cast_cost(Cast*);\n'
              '  void measure_concat_cost(Concat*);\n'
              '  void measure_shape_cost(Shape*);\n'
              '  void measure_slice_cost(Slice*);\n'
              '  void measure_split_cost(Split*);\n'
              '  void measure_element_cost(Element*);\n'
              '  void measure_elementwise_unary_cost(ElementWiseUnary*);\n'
              '  void measure_enlarge_cost(Enlarge*);\n'
              '  void measure_squeeze_cost(Squeeze*);\n'
              '  void measure_unsqueeze_cost(Unsqueeze*);\n'
              '  void measure_where_cost(Where*);\n'
              '  void* allocate_memory(size_t size, const DATATYPE* '
              'initial_data= NULL);\n'
              '  bool copy_memory(DATATYPE* dst, const DATATYPE* src, size_t '
              'size);\n'
              '  float measure_oplist_runtime(const std::vector<OpBase*>& '
              'list);\n'
              '  bool broadcastable(const Tensor& t1, const Tensor& t2);\n'
              'public:\n'
              '  bool isTraining;\n'
              '  bool print_cost;\n'
              '  size_t global_unique_id;\n'
              '  size_t workSpaceSize;\n'
              '  void* workSpace;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnHandle_t dnn;\n'
              '  cublasHandle_t blas;\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '  cudnnFilterDescriptor_t filterDesc;\n'
              '  // Note that actiDesc is set when we construct Model since\n'
              '  // all relus are identical.\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnPoolingDescriptor_t poolDesc;\n'
              '  cudnnConvolutionDescriptor_t convDesc;\n'
              '  cudaEvent_t startEvent, endEvent;\n'
              '  // variables for batch norm\n'
              '  cudnnTensorDescriptor_t scaleTensor;\n'
              '  // variables for element wise\n'
              '  cudnnOpTensorDescriptor_t opDesc;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '  DNNLNet net;\n'
              '  dnnl::engine eng;\n'
              '  dnnl::stream strm;\n'
              '#endif\n'
              '  std::map<ActivationKey, Activation*, '
              'KeyCompare<ActivationKey> > activation;\n'
              '  std::map<BatchNormKey, BatchNorm*, KeyCompare<BatchNormKey> > '
              'batchnorm;\n'
              '  std::map<CastKey, Cast*, KeyCompare<CastKey> > cast;\n'
              '  std::map<ConcatKey, Concat*, KeyCompare<ConcatKey> > concat;\n'
              '  std::map<ConstantKey, Constant*, KeyCompare<ConstantKey> > '
              'constant;\n'
              '  std::map<Conv2DKey, Conv2D*, KeyCompare<Conv2DKey> > conv2d;\n'
              '  std::map<ElementKey, Element*, KeyCompare<ElementKey> > '
              'element;\n'
              '  std::map<ElementWiseUnaryKey, ElementWiseUnary*, '
              'KeyCompare<ElementWiseUnaryKey> > element_unary;\n'
              '  std::map<EnlargeKey, Enlarge*, KeyCompare<EnlargeKey> > '
              'enlarge;\n'
              '  std::map<FuseConvBatchNormKey, FuseConvBatchNorm*, '
              'KeyCompare<FuseConvBatchNormKey> > fuse_conv_batchnorm;\n'
              '  std::map<FuseConvBatchNormAlphaVarKey, '
              'FuseConvBatchNormAlphaVar*, '
              'KeyCompare<FuseConvBatchNormAlphaVarKey> > '
              'fuse_conv_batchnorm_alpha_var;\n'
              '  std::map<FuseConvBatchNormBiasKey, FuseConvBatchNormBias*, '
              'KeyCompare<FuseConvBatchNormBiasKey> > '
              'fuse_conv_batchnorm_bias;\n'
              '  std::map<BroadcastAddKey, BroadcastAdd*, '
              'KeyCompare<BroadcastAddKey> > broadcast_add;\n'
              '  std::map<MatmulKey, Matmul*, KeyCompare<MatmulKey> > matmul;\n'
              '  std::map<MergeGConvKey, MergeGConv*, '
              'KeyCompare<MergeGConvKey> > merge_gconv;\n'
              '  std::map<MulKey, Mul*, KeyCompare<MulKey> > mul;\n'
              '  std::map<NoopKey, NoOp*, KeyCompare<NoopKey> > noop;\n'
              '  std::map<PadKey, Pad*, KeyCompare<PadKey> > pad;\n'
              '  std::map<Pool2DKey, Pool2D*, KeyCompare<Pool2DKey> > pool2d;\n'
              '  std::map<ReduceKey, Reduce*, KeyCompare<ReduceKey> > reduce;\n'
              '  std::map<ReshapeKey, Reshape*, KeyCompare<ReshapeKey> > '
              'reshape;\n'
              '  std::map<ResizeKey, Resize*, KeyCompare<ResizeKey> > resize;\n'
              '  std::map<ShapeKey, Shape*, KeyCompare<ShapeKey> > shape;\n'
              '  std::map<SliceKey, Slice*, KeyCompare<SliceKey> > slice;\n'
              '  std::map<SplitKey, Split*, KeyCompare<SplitKey> > split;\n'
              '  std::map<SqueezeKey, Squeeze*, KeyCompare<SqueezeKey> > '
              'squeeze;\n'
              '  std::map<TopKKey, TopK*, KeyCompare<TopKKey> > topk;\n'
              '  std::map<TransposeKey, Transpose*, KeyCompare<TransposeKey> > '
              'transpose;\n'
              '  std::map<UnsqueezeKey, Unsqueeze*, KeyCompare<UnsqueezeKey> > '
              'unsqueeze;\n'
              '  std::map<WhereKey, Where*, KeyCompare<WhereKey> > where;\n'
              '  DATATYPE *inputPtr, *biasPtr, *outputPtr, *filterPtr;\n'
              '  // variables for batch norm\n'
              '  DATATYPE *scalePtr, *runningMean, *runningVar, *saveMean, '
              '*saveVar;\n'
              '}')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=477,
         lineno=1350,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Model',
         body='Model()')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=478,
         lineno=1360,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(int axis, int n, Tensor* _inputs, bool* _needCopy);\n'
              '  Op get_or_create_constant(int ndim, int* dims, OpType type);\n'
              '  Op get_or_create_conv2d(Tensor _input, Tensor _weight,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation);\n'
              '  Op get_or_create_element(OpType type, const Tensor& t1, const '
              'Tensor& t2);\n'
              '  Op get_or_create_elementwise_unary(const Tensor& _input, '
              'OpType _type);\n'
              '  Op get_or_create_enlarge(Tensor _w1, Tensor _w2);\n'
              '  Op get')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=479,
         lineno=1369,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_or_create_fuse_conv_batchnorm(const Tensor& _conv_w,\n'
              '                                       const Tensor& _scale,\n'
              '                                       const Tensor& _bias,\n'
              '                                       const Tensor& _mean,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_fuse_conv_batchnorm_alpha_var(const Tensor& '
              '_conv_w,\n'
              '                                       const Tensor& _scale,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_fuse_conv_batchnorm_bias(co')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=480,
         lineno=1377,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nst Tensor& _scale,\n'
              '                                       const Tensor& _bias,\n'
              '                                       const Tensor& _mean,\n'
              '                                       const Tensor& _var);\n'
              '  Op get_or_create_broadcast_add(const Tensor& _data,\n'
              '                                 const Tensor& _bias);\n'
              '  Op get_or_create_matmul(Tensor _input, Tensor _weight,\n'
              '                          ActiMode _actimode);\n'
              '  Op get_or_create_mul(const Tensor& x,\n'
              '                       const Tensor& y);\n'
              '  Op get_or_create_pad(const Tensor& _inp')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=481,
         lineno=1387,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ut,\n'
              '                       const std::vector<int>& _pad_before,\n'
              '                       const std::vector<int>& _pad_after,\n'
              '                       float _pad_value);\n'
              '  Op get_or_create_pool2d(Tensor _input, Tensor _weight,\n'
              '                          OpType _type,\n'
              '                          int _kernelH, int _kernelW,\n'
              '                          int _strideH, int _strideW,\n'
              '                          PaddingMode _padding,\n'
              '                          ActiMode _activation);\n'
              '  Op get_or_create_reduce(const Tensor& _input, OpType _type,\n'
              '     ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=482,
         lineno=1398,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                     const std::vector<int>& _axes, bool '
              '_keepdims);\n'
              '  Op get_or_create_reshape(Tensor _input, const '
              'std::vector<int>& shape);\n'
              '  Op get_or_create_resize(const Tensor& _input,\n'
              '                          const std::vector<int>& _shape);\n'
              '  Op get_or_create_shape(const Tensor& _input, OpType _type);\n'
              '  Op get_or_create_slice(const Tensor& _input,\n'
              '                         const std::vector<int>& _start,\n'
              '                         const std::vector<int>& _end,\n'
              '                         const std::vector<int>& _axes,\n'
              '        ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=483,
         lineno=1407,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                 const std::vector<int>& _steps);\n'
              '  Op get_or_create_squeeze(const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  Op get_or_create_split(const Tensor& _input, int _axis, const '
              'std::vector<int>& _sizes);\n'
              '  Op get_or_create_split(const Tensor& _input, int axis, int '
              'n);\n'
              '  Op get_or_create_topk(const Tensor& _input, int _axis, int '
              '_numk,\n'
              '                        bool _largest, bool _sorted);\n'
              '  Op get_or_create_transpose(Tensor _input, const '
              'std::vector<int>& _perm,\n'
              '                             bool _shuffle);\n'
              '  Op get')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=484,
         lineno=1415,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_or_create_transpose(Tensor _input, int permIdx,\n'
              '                             bool _shuffle);\n'
              '  Op get_or_create_noop(Tensor _input, OpType _type);\n'
              '  Op get_or_create_merge_gconv(const Tensor& _weight,\n'
              '                               int count);\n'
              '  Op get_or_create_unsqueeze(const Tensor& input, const '
              'std::vector<int>& axes);\n'
              '  Op get_or_create_where(const Tensor& _cond, const Tensor& _x, '
              'const Tensor& _y);\n'
              '  // Special API for creating weight and input operator\n'
              '  Op create_input(Tensor _input, OpType _type);\n'
              '  Op create_weight(Ten')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=485,
         lineno=1424,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sor _weight, OpType _type);\n'
              '  void measure_conv2d_cost(Conv2D*);\n'
              '  void measure_matmul_cost(Matmul*);\n'
              '  void measure_mul_cost(Mul*);\n'
              '  void measure_pad_cost(Pad*);\n'
              '  void measure_pool2d_cost(Pool2D*);\n'
              '  void measure_topk_cost(TopK*);\n'
              '  void measure_transpose_cost(Transpose*);\n'
              '  void measure_reduce_cost(Reduce*);\n'
              '  void measure_reshape_cost(Reshape*);\n'
              '  void measure_resize_cost(Resize*);\n'
              '  void measure_activation_cost(Activation*);\n'
              '  void measure_batchnorm_cost(BatchNorm*);\n'
              '  void measure_cast_cost(Cast*);\n'
              '  void measure_concat_c')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=486,
         lineno=1438,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ost(Concat*);\n'
              '  void measure_shape_cost(Shape*);\n'
              '  void measure_slice_cost(Slice*);\n'
              '  void measure_split_cost(Split*);\n'
              '  void measure_element_cost(Element*);\n'
              '  void measure_elementwise_unary_cost(ElementWiseUnary*);\n'
              '  void measure_enlarge_cost(Enlarge*);\n'
              '  void measure_squeeze_cost(Squeeze*);\n'
              '  void measure_unsqueeze_cost(Unsqueeze*);\n'
              '  void measure_where_cost(Where*);\n'
              '  void* allocate_memory(size_t size, const DATATYPE* '
              'initial_data= NULL);\n'
              '  bool copy_memory(DATATYPE* dst, const DATATYPE* src, size_t '
              'size);\n'
              '  float measure_opli')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=487,
         lineno=1450,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='st_runtime(const std::vector<OpBase*>& list);\n'
              '  bool broadcastable(const Tensor& t1, const Tensor& t2);\n'
              'public:\n'
              '  bool isTraining;\n'
              '  bool print_cost;\n'
              '  size_t global_unique_id;\n'
              '  size_t workSpaceSize;\n'
              '  void* workSpace;\n'
              '#ifdef USE_CUDNN\n'
              '  cudnnHandle_t dnn;\n'
              '  cublasHandle_t blas;\n'
              '  cudnnTensorDescriptor_t inputTensor, biasTensor, '
              'outputTensor;\n'
              '  cudnnFilterDescriptor_t filterDesc;\n'
              '  // Note that actiDesc is set when we construct Model since\n'
              '  // all relus are identical.\n'
              '  cudnnActivationDescriptor_t actiDesc;\n'
              '  cudnnPoolingDescri')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=488,
         lineno=1453,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='isTraining',
         body='bool isTraining;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=489,
         lineno=1454,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='print_cost',
         body='bool print_cost;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=490,
         lineno=1455,
         tokens=6,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='global_unique_id',
         body='size_t global_unique_id;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=491,
         lineno=1456,
         tokens=6,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='workSpaceSize',
         body='size_t workSpaceSize;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=492,
         lineno=1459,
         tokens=8,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='dnn',
         body='cudnnHandle_t dnn;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=493,
         lineno=1460,
         tokens=7,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='blas',
         body='cublasHandle_t blas;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=494,
         lineno=1461,
         tokens=15,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='inputTensor',
         body='cudnnTensorDescriptor_t inputTensor, biasTensor, outputTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=495,
         lineno=1462,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='filterDesc',
         body='cudnnFilterDescriptor_t filterDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=496,
         lineno=1465,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='actiDesc',
         body='cudnnActivationDescriptor_t actiDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=497,
         lineno=1466,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ptor_t poolDesc;\n'
              '  cudnnConvolutionDescriptor_t convDesc;\n'
              '  cudaEvent_t startEvent, endEvent;\n'
              '  // variables for batch norm\n'
              '  cudnnTensorDescriptor_t scaleTensor;\n'
              '  // variables for element wise\n'
              '  cudnnOpTensorDescriptor_t opDesc;\n'
              '#endif\n'
              '#ifdef USE_DNNL\n'
              '  DNNLNet net')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=498,
         lineno=1466,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='poolDesc',
         body='cudnnPoolingDescriptor_t poolDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=499,
         lineno=1467,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='convDesc',
         body='cudnnConvolutionDescriptor_t convDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=500,
         lineno=1468,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='startEvent',
         body='cudaEvent_t startEvent, endEvent;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=501,
         lineno=1470,
         tokens=9,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='scaleTensor',
         body='cudnnTensorDescriptor_t scaleTensor;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=502,
         lineno=1472,
         tokens=10,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='opDesc',
         body='cudnnOpTensorDescriptor_t opDesc;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=503,
         lineno=1475,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '  dnnl::engine eng;\n'
              '  dnnl::stream strm;\n'
              '#endif\n'
              '  std::map<ActivationKey, Activation*, '
              'KeyCompare<ActivationKey> > activation;\n'
              '  std::map<BatchNormKey, BatchNorm*, KeyCompare<BatchNormKey> > '
              'batchnorm;\n'
              '  std::map<CastKey, Cast*, KeyCompare<CastKey> > cast;\n'
              '  std::ma')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=504,
         lineno=1475,
         tokens=6,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='net',
         body='DNNLNet net;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=505,
         lineno=1476,
         tokens=7,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='eng',
         body='dnnl::engine eng;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=506,
         lineno=1477,
         tokens=7,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='strm',
         body='dnnl::stream strm;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=507,
         lineno=1479,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='activation',
         body='std::map<ActivationKey, Activation*, KeyCompare<ActivationKey> '
              '> activation;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=508,
         lineno=1480,
         tokens=22,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='batchnorm',
         body='std::map<BatchNormKey, BatchNorm*, KeyCompare<BatchNormKey> > '
              'batchnorm;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=509,
         lineno=1481,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='cast',
         body='std::map<CastKey, Cast*, KeyCompare<CastKey> > cast;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=510,
         lineno=1482,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p<ConcatKey, Concat*, KeyCompare<ConcatKey> > concat;\n'
              '  std::map<ConstantKey, Constant*, KeyCompare<ConstantKey> > '
              'constant;\n'
              '  std::map<Conv2DKey, Conv2D*, KeyCompare<Conv2DKey> > conv2d;\n'
              '  std::map<ElementKey, Element*, KeyCompare<ElementKey> > '
              'element;\n'
              '  std::map<E')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=511,
         lineno=1482,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='concat',
         body='std::map<ConcatKey, Concat*, KeyCompare<ConcatKey> > concat;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=512,
         lineno=1483,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='constant',
         body='std::map<ConstantKey, Constant*, KeyCompare<ConstantKey> > '
              'constant;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=513,
         lineno=1484,
         tokens=26,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='conv2d',
         body='std::map<Conv2DKey, Conv2D*, KeyCompare<Conv2DKey> > conv2d;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=514,
         lineno=1485,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='element',
         body='std::map<ElementKey, Element*, KeyCompare<ElementKey> > element;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=515,
         lineno=1486,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lementWiseUnaryKey, ElementWiseUnary*, '
              'KeyCompare<ElementWiseUnaryKey> > element_unary;\n'
              '  std::map<EnlargeKey, Enlarge*, KeyCompare<EnlargeKey> > '
              'enlarge;\n'
              '  std::map<FuseConvBatchNormKey, FuseConvBatchNorm*, '
              'KeyCompare<FuseConvBatchNormKey> > fuse_conv_batchnorm;\n'
              '  s')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=516,
         lineno=1486,
         tokens=27,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='element_unary',
         body='std::map<ElementWiseUnaryKey, ElementWiseUnary*, '
              'KeyCompare<ElementWiseUnaryKey> > element_unary;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=517,
         lineno=1487,
         tokens=19,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='enlarge',
         body='std::map<EnlargeKey, Enlarge*, KeyCompare<EnlargeKey> > enlarge;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=518,
         lineno=1488,
         tokens=30,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='fuse_conv_batchnorm',
         body='std::map<FuseConvBatchNormKey, FuseConvBatchNorm*, '
              'KeyCompare<FuseConvBatchNormKey> > fuse_conv_batchnorm;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=519,
         lineno=1489,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='td::map<FuseConvBatchNormAlphaVarKey, '
              'FuseConvBatchNormAlphaVar*, '
              'KeyCompare<FuseConvBatchNormAlphaVarKey> > '
              'fuse_conv_batchnorm_alpha_var;\n'
              '  std::map<FuseConvBatchNormBiasKey, FuseConvBatchNormBias*, '
              'KeyCompare<FuseConvBatchNormBiasKey> > '
              'fuse_conv_batchnorm_bias;\n'
              ' ')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=520,
         lineno=1489,
         tokens=38,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='fuse_conv_batchnorm_alpha_var',
         body='std::map<FuseConvBatchNormAlphaVarKey, '
              'FuseConvBatchNormAlphaVar*, '
              'KeyCompare<FuseConvBatchNormAlphaVarKey> > '
              'fuse_conv_batchnorm_alpha_var;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=521,
         lineno=1490,
         tokens=34,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='fuse_conv_batchnorm_bias',
         body='std::map<FuseConvBatchNormBiasKey, FuseConvBatchNormBias*, '
              'KeyCompare<FuseConvBatchNormBiasKey> > fuse_conv_batchnorm_bias;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=522,
         lineno=1491,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' std::map<BroadcastAddKey, BroadcastAdd*, '
              'KeyCompare<BroadcastAddKey> > broadcast_add;\n'
              '  std::map<MatmulKey, Matmul*, KeyCompare<MatmulKey> > matmul;\n'
              '  std::map<MergeGConvKey, MergeGConv*, '
              'KeyCompare<MergeGConvKey> > merge_gconv;\n'
              '  std::map<MulKey, Mul*, KeyCompare<Mu')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=523,
         lineno=1491,
         tokens=22,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='broadcast_add',
         body='std::map<BroadcastAddKey, BroadcastAdd*, '
              'KeyCompare<BroadcastAddKey> > broadcast_add;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=524,
         lineno=1492,
         tokens=22,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='matmul',
         body='std::map<MatmulKey, Matmul*, KeyCompare<MatmulKey> > matmul;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=525,
         lineno=1493,
         tokens=26,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='merge_gconv',
         body='std::map<MergeGConvKey, MergeGConv*, KeyCompare<MergeGConvKey> '
              '> merge_gconv;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=526,
         lineno=1494,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lKey> > mul;\n'
              '  std::map<NoopKey, NoOp*, KeyCompare<NoopKey> > noop;\n'
              '  std::map<PadKey, Pad*, KeyCompare<PadKey> > pad;\n'
              '  std::map<Pool2DKey, Pool2D*, KeyCompare<Pool2DKey> > pool2d;\n'
              '  std::map<ReduceKey, Reduce*, KeyCompare<ReduceKey> > reduce;\n'
              '  std::map<ReshapeKey,')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=527,
         lineno=1494,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mul',
         body='std::map<MulKey, Mul*, KeyCompare<MulKey> > mul;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=528,
         lineno=1495,
         tokens=21,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='noop',
         body='std::map<NoopKey, NoOp*, KeyCompare<NoopKey> > noop;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=529,
         lineno=1496,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='pad',
         body='std::map<PadKey, Pad*, KeyCompare<PadKey> > pad;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=530,
         lineno=1497,
         tokens=26,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='pool2d',
         body='std::map<Pool2DKey, Pool2D*, KeyCompare<Pool2DKey> > pool2d;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=531,
         lineno=1498,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='reduce',
         body='std::map<ReduceKey, Reduce*, KeyCompare<ReduceKey> > reduce;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=532,
         lineno=1499,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' Reshape*, KeyCompare<ReshapeKey> > reshape;\n'
              '  std::map<ResizeKey, Resize*, KeyCompare<ResizeKey> > resize;\n'
              '  std::map<ShapeKey, Shape*, KeyCompare<ShapeKey> > shape;\n'
              '  std::map<SliceKey, Slice*, KeyCompare<SliceKey> > slice;\n'
              '  std::map<SplitKey, Split*, KeyCompare<Sp')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=533,
         lineno=1499,
         tokens=21,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='reshape',
         body='std::map<ReshapeKey, Reshape*, KeyCompare<ReshapeKey> > reshape;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=534,
         lineno=1500,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='resize',
         body='std::map<ResizeKey, Resize*, KeyCompare<ResizeKey> > resize;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=535,
         lineno=1501,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='shape',
         body='std::map<ShapeKey, Shape*, KeyCompare<ShapeKey> > shape;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=536,
         lineno=1502,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='slice',
         body='std::map<SliceKey, Slice*, KeyCompare<SliceKey> > slice;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=537,
         lineno=1503,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='litKey> > split;\n'
              '  std::map<SqueezeKey, Squeeze*, KeyCompare<SqueezeKey> > '
              'squeeze;\n'
              '  std::map<TopKKey, TopK*, KeyCompare<TopKKey> > topk;\n'
              '  std::map<TransposeKey, Transpose*, KeyCompare<TransposeKey> > '
              'transpose;\n'
              '  std::map<UnsqueezeKey, Unsqueeze*, KeyCompare<Unsqu')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=538,
         lineno=1503,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='split',
         body='std::map<SplitKey, Split*, KeyCompare<SplitKey> > split;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=539,
         lineno=1504,
         tokens=19,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='squeeze',
         body='std::map<SqueezeKey, Squeeze*, KeyCompare<SqueezeKey> > squeeze;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=540,
         lineno=1505,
         tokens=22,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='topk',
         body='std::map<TopKKey, TopK*, KeyCompare<TopKKey> > topk;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=541,
         lineno=1506,
         tokens=19,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='transpose',
         body='std::map<TransposeKey, Transpose*, KeyCompare<TransposeKey> > '
              'transpose;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=542,
         lineno=1507,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eezeKey> > unsqueeze;\n'
              '  std::map<WhereKey, Where*, KeyCompare<WhereKey> > where;\n'
              '  DATATYPE *inputPtr, *biasPtr, *outputPtr, *filterPtr;\n'
              '  // variables for batch norm\n'
              '  DATATYPE *scalePtr, *runningMean, *runningVar, *saveMean, '
              '*saveVar;\n'
              '};\n'
              '\n'
              '} // namespace taso\n'
              '#endif\n')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=543,
         lineno=1507,
         tokens=22,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='unsqueeze',
         body='std::map<UnsqueezeKey, Unsqueeze*, KeyCompare<UnsqueezeKey> > '
              'unsqueeze;')

Fragment(document_cs='092990d6852c84f7ccfe18ea34ad1e5504907b8c2a91053ed1c308acf55e2c45',
         id=544,
         lineno=1508,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='where',
         body='std::map<WhereKey, Where*, KeyCompare<WhereKey> > where;')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=545,
         lineno=1,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='# Generated by the protocol buffer compiler.  DO NOT EDIT!\n'
              '# source: rules.proto\n'
              '\n'
              'import sys\n'
              '_b=sys.version_info[0]<3 and (lambda x:x) or (lambda '
              "x:x.encode('latin1'))\n"
              'from google.protobuf import descriptor as _descriptor\n'
              'from google.protobuf import message as _message\n'
              'from google.protobuf import reflection as _reflection\n'
              'from google.proto')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=546,
         lineno=1,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Generated by the protocol buffer compiler.  DO NOT EDIT!')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=547,
         lineno=1,
         tokens=142,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /verify/rules_pb2.py\n'
              '  Variables and usages: DESCRIPTOR Default Descriptor '
              'FieldDescriptor FileDescriptor GeneratedProtocolMessageType '
              'MapOutput Message Operator Parameter RegisterFileDescriptor '
              'RegisterMessage Rule RuleCollection Tensor _MAPOUTPUT _OPERATOR '
              '_PARAMETER _RULE _RULECOLLECTION _TENSOR _descriptor _message '
              '_reflection _sym_db _symbol_database containing_type cpp_type '
              'default_value descriptor descriptor_pb2 encode enum_type '
              'enum_types extension_ranges extension_scope extensions fields '
              'fields_by_name file filename full_name google has_default_value '
              'index is_extendable is_extension label message message_type '
              'message_types_by_name name nested_types number oneofs options '
              'package protobuf reflection serialized_end serialized_pb '
              'serialized_start symbol_database syntax type version_info\n')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=548,
         lineno=2,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# source: rules.proto')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=549,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=550,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=551,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=552,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=553,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=554,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=555,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=556,
         lineno=9,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='buf import symbol_database as _symbol_database\n'
              'from google.protobuf import descriptor_pb2\n'
              '# @@protoc_insertion_point(imports)\n'
              '\n'
              '_sym_db = _symbol_database.Default()\n'
              '\n'
              '\n'
              '\n'
              '\n'
              'DESCRIPTOR = _descriptor.FileDescriptor(\n'
              "  name='rules.proto',\n"
              "  package='GraphSubst',\n"
              "  syntax='proto2',\n"
              '  '
              'serialized_pb=_b(\'\\n\\x0brules.proto\\x12\\nGraphSubst\\"\\\'\\n\\tParame')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=557,
         lineno=9,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=558,
         lineno=9,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=559,
         lineno=10,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=560,
         lineno=10,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=561,
         lineno=11,
         tokens=10,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(imports)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=562,
         lineno=22,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ter\\x12\\x0b\\n\\x03key\\x18\\x01 '
              '\\x02(\\x05\\x12\\r\\n\\x05value\\x18\\x02 '
              '\\x02(\\x05\\"$\\n\\x06Tensor\\x12\\x0c\\n\\x04opId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0c\\n\\x04tsId\\x18\\x02 '
              '\\x02(\\x05\\"`\\n\\x08O')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=563,
         lineno=22,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='perator\\x12\\x0c\\n\\x04type\\x18\\x01 '
              '\\x02(\\x05\\x12!\\n\\x05input\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x12.GraphSubst.Tensor\\x12#\\n\\x04para\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.Parameter\\"O\\n\\')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=564,
         lineno=22,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tMapOutput\\x12\\x0f\\n\\x07srcOpId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stOpId\\x18\\x02 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07srcTsId\\x18\\x03 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stTsId\\x18\\x04 \\x02(\\x')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=565,
         lineno=22,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='05\\"}\\n\\x04Rule\\x12#\\n\\x05srcOp\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12#\\n\\x05\\x64stOp\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12+\\n\\x0cmappedOutput\\x18\\x')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=566,
         lineno=22,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.MapOutput\\"0\\n\\x0eRuleCollection\\x12\\x1e\\n\\x04rule\\x18\\x01 '
              "\\x03(\\x0b\\x32\\x10.GraphSubst.Rule')\n"
              ')\n'
              '\n'
              '\n'
              '\n'
              '\n'
              '_PARAMETER = _descriptor.Descriptor(\n'
              "  name='Parameter',\n"
              "  full_name='GraphSubst.Parameter',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              '      name=')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=567,
         lineno=22,
         tokens=104,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\\n\\x0brules.proto\\x12\\nGraphSubst\\"\\\'\\n\\tParameter\\x12\\x0b\\n\\x03key\\x18\\x01 '
              '\\x02(\\x05\\x12\\r\\n\\x05value\\x18\\x02 '
              '\\x02(\\x05\\"$\\n\\x06Tensor\\x12\\x0c\\n\\x04opId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0c\\n\\x04tsId\\x18\\x02 \\x02(\\x05\\"`\\n\\')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=568,
         lineno=22,
         tokens=95,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='x08Operator\\x12\\x0c\\n\\x04type\\x18\\x01 '
              '\\x02(\\x05\\x12!\\n\\x05input\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x12.GraphSubst.Tensor\\x12#\\n\\x04para\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.Parameter\\"O\\n\\tMapOutput\\x12\\x0f\\n\\x07srcOpId\\x18\\x0')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=569,
         lineno=22,
         tokens=109,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='1 \\x02(\\x05\\x12\\x0f\\n\\x07\\x64stOpId\\x18\\x02 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07srcTsId\\x18\\x03 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stTsId\\x18\\x04 '
              '\\x02(\\x05\\"}\\n\\x04Rule\\x12#\\n\\x05srcOp\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=570,
         lineno=22,
         tokens=92,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#\\n\\x05\\x64stOp\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12+\\n\\x0cmappedOutput\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.MapOutput\\"0\\n\\x0eRuleCollection\\x12\\x1e\\n\\x04rule\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x10.GraphSubst.Rule')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=571,
         lineno=30,
         tokens=4,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Parameter')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=572,
         lineno=36,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="'key', full_name='GraphSubst.Parameter.key', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='value', full_name")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=573,
         lineno=36,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Parameter.key')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=574,
         lineno=43,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="='GraphSubst.Parameter.value', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=No')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=575,
         lineno=43,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Parameter.value')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=576,
         lineno=55,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ne,\n'
              '  is_extendable=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=27,\n'
              '  serialized_end=66,\n'
              ')\n'
              '\n'
              '\n'
              '_TENSOR = _descriptor.Descriptor(\n'
              "  name='Tensor',\n"
              "  full_name='GraphSubst.Tensor',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='opId', fu")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=577,
         lineno=74,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ll_name='GraphSubst.Tensor.opId', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='tsId', full_name='GraphSubst")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=578,
         lineno=74,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Tensor.opId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=579,
         lineno=81,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=".Tensor.tsId', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extenda')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=580,
         lineno=81,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Tensor.tsId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=581,
         lineno=94,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ble=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=68,\n'
              '  serialized_end=104,\n'
              ')\n'
              '\n'
              '\n'
              '_OPERATOR = _descriptor.Descriptor(\n'
              "  name='Operator',\n"
              "  full_name='GraphSubst.Operator',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='type', full_name=")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=582,
         lineno=112,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="'GraphSubst.Operator.type', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='input', full_name='GraphSubst.Opera")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=583,
         lineno=112,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Operator.type')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=584,
         lineno=119,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="tor.input', index=1,\n"
              '      number=2, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='para', full_name='GraphSubst.Operator.para', in")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=585,
         lineno=119,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Operator.input')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=586,
         lineno=126,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dex=2,\n'
              '      number=3, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              '  s')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=587,
         lineno=126,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Operator.para')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=588,
         lineno=140,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="yntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=106,\n'
              '  serialized_end=202,\n'
              ')\n'
              '\n'
              '\n'
              '_MAPOUTPUT = _descriptor.Descriptor(\n'
              "  name='MapOutput',\n"
              "  full_name='GraphSubst.MapOutput',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcOpId', full_name='GraphS")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=589,
         lineno=151,
         tokens=5,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.MapOutput')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=590,
         lineno=157,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ubst.MapOutput.srcOpId', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstOpId', full_name='GraphSubst.MapOut")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=591,
         lineno=157,
         tokens=8,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.MapOutput.srcOpId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=592,
         lineno=164,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="put.dstOpId', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcTsId', full_name='GraphSubst.MapOutput.srcTsI")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=593,
         lineno=164,
         tokens=8,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.MapOutput.dstOpId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=594,
         lineno=171,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="d', index=2,\n"
              '      number=3, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstTsId', full_name='GraphSubst.MapOutput.dstTsId', "
              'index=')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=595,
         lineno=171,
         tokens=8,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.MapOutput.srcTsId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=596,
         lineno=178,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3,\n'
              '      number=4, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              "  syntax='")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=597,
         lineno=178,
         tokens=8,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.MapOutput.dstTsId')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=598,
         lineno=192,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=204,\n'
              '  serialized_end=283,\n'
              ')\n'
              '\n'
              '\n'
              '_RULE = _descriptor.Descriptor(\n'
              "  name='Rule',\n"
              "  full_name='GraphSubst.Rule',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcOp', full_name='GraphSubst.Rule.srcOp', index=")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=599,
         lineno=209,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0,\n'
              '      number=1, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstOp', full_name='GraphSubst.Rule.dstOp', "
              'index=1,\n'
              '      number=')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=600,
         lineno=209,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Rule.srcOp')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=601,
         lineno=216,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Rule.dstOp')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=602,
         lineno=217,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='2, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='mappedOutput', "
              "full_name='GraphSubst.Rule.mappedOutput', index=2,\n"
              '      number=3,')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=603,
         lineno=223,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.Rule.mappedOutput')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=604,
         lineno=224,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              "  syntax='proto2',\n"
              '  exte')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=605,
         lineno=238,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsion_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=285,\n'
              '  serialized_end=410,\n'
              ')\n'
              '\n'
              '\n'
              '_RULECOLLECTION = _descriptor.Descriptor(\n'
              "  name='RuleCollection',\n"
              "  full_name='GraphSubst.RuleCollection',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='rule', full_name='GraphSubst.RuleCo")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=606,
         lineno=248,
         tokens=5,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.RuleCollection')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=607,
         lineno=254,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="llection.rule', index=0,\n"
              '      number=1, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_ext')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=608,
         lineno=254,
         tokens=6,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GraphSubst.RuleCollection.rule')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=609,
         lineno=267,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='endable=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=412,\n'
              '  serialized_end=460,\n'
              ')\n'
              '\n'
              "_OPERATOR.fields_by_name['input'].message_type = _TENSOR\n"
              "_OPERATOR.fields_by_name['para'].message_type = _PARAMETER\n"
              "_RULE.fields_by_name['srcOp'].message_type = _OPERATOR\n"
              "_RULE.fields_by_name['dstOp'].message_type = _OP")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=610,
         lineno=279,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ERATOR\n'
              "_RULE.fields_by_name['mappedOutput'].message_type = _MAPOUTPUT\n"
              "_RULECOLLECTION.fields_by_name['rule'].message_type = _RULE\n"
              "DESCRIPTOR.message_types_by_name['Parameter'] = _PARAMETER\n"
              "DESCRIPTOR.message_types_by_name['Tensor'] = _TENSOR\n"
              "DESCRIPTOR.message_types_by_name['Operator'] = _OPERATOR\n"
              "DESCRIPTOR.message_types_by_name['MapOutpu")

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=611,
         lineno=285,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="t'] = _MAPOUTPUT\n"
              "DESCRIPTOR.message_types_by_name['Rule'] = _RULE\n"
              "DESCRIPTOR.message_types_by_name['RuleCollection'] = "
              '_RULECOLLECTION\n'
              '_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n'
              '\n'
              'Parameter = '
              "_reflection.GeneratedProtocolMessageType('Parameter', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _PARAMETER,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_ins')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=612,
         lineno=293,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ertion_point(class_scope:GraphSubst.Parameter)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Parameter)\n'
              '\n'
              "Tensor = _reflection.GeneratedProtocolMessageType('Tensor', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _TENSOR,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Tensor)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Tensor)\n'
              '\n'
              'Operator = _refle')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=613,
         lineno=293,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(class_scope:GraphSubst.Parameter)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=614,
         lineno=300,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(class_scope:GraphSubst.Tensor)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=615,
         lineno=304,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ction.GeneratedProtocolMessageType('Operator', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _OPERATOR,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Operator)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Operator)\n'
              '\n'
              'MapOutput = '
              "_reflection.GeneratedProtocolMessageType('MapOutput', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _MAP')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=616,
         lineno=307,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(class_scope:GraphSubst.Operator)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=617,
         lineno=312,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OUTPUT,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.MapOutput)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(MapOutput)\n'
              '\n'
              "Rule = _reflection.GeneratedProtocolMessageType('Rule', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _RULE,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Rule)\n'
              '  ))\n'
              '_sym_db')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=618,
         lineno=314,
         tokens=16,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(class_scope:GraphSubst.MapOutput)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=619,
         lineno=321,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(class_scope:GraphSubst.Rule)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=620,
         lineno=323,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='.RegisterMessage(Rule)\n'
              '\n'
              'RuleCollection = '
              "_reflection.GeneratedProtocolMessageType('RuleCollection', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _RULECOLLECTION,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(RuleCollection)\n'
              '\n'
              '\n'
              '# @@protoc_insertion_point(module_scope)\n')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=621,
         lineno=328,
         tokens=16,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)')

Fragment(document_cs='097bbc20916b65cabd186b6bc8d12458740cc2f88270b9258b8589019dfd0792',
         id=622,
         lineno=333,
         tokens=10,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# @@protoc_insertion_point(module_scope)')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=623,
         lineno=1,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitati')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=624,
         lineno=1,
         tokens=79,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/constant.cc\n'
              '  Functions: key\n'
              '  Methods: Constant::Constant Constant::collect_costs '
              'Constant::get_int_parameter Constant::~Constant '
              'ConstantKey::ConstantKey Graph::constant '
              'Model::get_or_create_constant\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Constant ConstantKey NO_SPLIT collect_costs constant '
              'get_int_parameter get_or_create_constant\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=625,
         lineno=13,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::constant(int ndim, int* dims, OpType type)\n'
              '{\n'
              '  Op op = model->get_or_create_constant(ndim, dims, type);\n'
              '  // NOTE that constant do not have any inputs\n'
              '  // we need to manually add op to th')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=626,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=627,
         lineno=19,
         tokens=102,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::constant',
         body='TensorHandle Graph::constant(int ndim, int* dims, OpType type)\n'
              '{\n'
              '  Op op = model->get_or_create_constant(ndim, dims, type);\n'
              '  // NOTE that constant do not have any inputs\n'
              '  // we need to manually add op to the inedges\n'
              '  assert(inEdges.find(op) == inEdges.end());\n'
              '  inEdges[op];\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=628,
         lineno=23,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e inedges\n'
              '  assert(inEdges.find(op) == inEdges.end());\n'
              '  inEdges[op];\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_constant(int ndim, int* dims, OpType '
              '_type)\n'
              '{\n'
              '  ConstantKey key(ndim, dims, _type);\n'
              '  Constant* constantOp;\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=629,
         lineno=31,
         tokens=124,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_constant',
         body='Op Model::get_or_create_constant(int ndim, int* dims, OpType '
              '_type)\n'
              '{\n'
              '  ConstantKey key(ndim, dims, _type);\n'
              '  Constant* constantOp;\n'
              '  if (constant.find(key) != constant.end()) {\n'
              '    constantOp = constant[key];\n'
              '  } else {\n'
              '    constantOp = new Constant(this, ndim, dims, _type);\n'
              '    constantOp->runtime = 0.0f;\n'
              '    constant[key] = constantOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = constantOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=630,
         lineno=33,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(ndim, dims, _type)')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=631,
         lineno=35,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (constant.find(key) != constant.end()) {\n'
              '    constantOp = constant[key];\n'
              '  } else {\n'
              '    constantOp = new Constant(this, ndim, dims, _type);\n'
              '    constantOp->runtime = 0.0f;\n'
              '    constant[key] = constantOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = constantOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Constant::Constant(Model* _model, int ndim, int* dims, OpType '
              '_type)\n'
              ': OpBase(_model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = ndim;\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=632,
         lineno=42,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=633,
         lineno=48,
         tokens=187,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::Constant',
         body='Constant::Constant(Model* _model, int ndim, int* dims, OpType '
              '_type)\n'
              ': OpBase(_model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = ndim;\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    outputs[0].dim[i] = dims[i];\n'
              '  outputs[0].stride[ndim-1] = 1;\n'
              '  for (int i = ndim-2; i >= 0; i--)\n'
              '    outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '  // Set SplitInfo\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=634,
         lineno=53,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    outputs[0].dim[i] = dims[i];\n'
              '  outputs[0].stride[ndim-1] = 1;\n'
              '  for (int i = ndim-2; i >= 0; i--)\n'
              '    outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '  // Set SplitInfo\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=635,
         lineno=59,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Constant::~Constant(void)\n'
              '{}\n'
              '\n'
              'bool Constant::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Constant::collect_costs(float& exe_time, float& flops,\n'
              '                             float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // TODO; implement\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'ConstantKey::ConstantKey(int ndim, int* dims, OpType type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = ndim;\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=636,
         lineno=64,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::~Constant',
         body='Constant::~Constant(void)\n{}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=637,
         lineno=67,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::get_int_parameter',
         body='bool Constant::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=638,
         lineno=72,
         tokens=39,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::collect_costs',
         body='void Constant::collect_costs(float& exe_time, float& flops,\n'
              '                             float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // TODO; implement\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=639,
         lineno=79,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ConstantKey::ConstantKey',
         body='ConstantKey::ConstantKey(int ndim, int* dims, OpType type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = ndim;\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    keys[idx++] = dims[i];\n'
              '  keys[idx++] = type;\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=640,
         lineno=83,
         tokens=31,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    keys[idx++] = dims[i];\n'
              '  keys[idx++] = type;\n')

Fragment(document_cs='0a94abb443a091b948fc4b6f687bd1068fdc209ceebfa92dd4e2b53c6c0e0bdd',
         id=641,
         lineno=86,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n'
              '\n')

Fragment(document_cs='0f0c02524e397b94278f37909cdb08d5b08ee320c03522802cc1c359613dd08c',
         id=642,
         lineno=1,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='set(USE_CUDA ON)\n'
              'set(USE_CUDNN ON)\n'
              'set(USE_DNNL OFF)\n'
              'set(BUILD_CPP_EXAMPLES OFF)\n')

Fragment(document_cs='0f0c02524e397b94278f37909cdb08d5b08ee320c03522802cc1c359613dd08c',
         id=643,
         lineno=1,
         tokens=7,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /config.cmake\n')

Fragment(document_cs='10dbd19bf7218cccf956a85a1944374ca6fc54086b674f5337c0b54d366ad520',
         id=644,
         lineno=1,
         tokens=135,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='syntax = "proto2";\n'
              '\n'
              'package GraphSubst;\n'
              '\n'
              'message Parameter {\n'
              '  required int32 key = 1;\n'
              '  required int32 value = 2;\n'
              '}\n'
              '\n'
              'message Tensor {\n'
              '  required int32 opId = 1;\n'
              '  required int32 tsId = 2;\n'
              '}\n'
              '\n'
              'message Operator {\n'
              '  required int32 type = 1;\n'
              '  repeated Tensor input = 2;\n'
              '  repeated Parameter para = 3;\n'
              '}\n'
              '\n'
              'message MapOutput {\n'
              '  required int32 srcOpId = 1;\n'
              '  required int32 dstOpId = 2;\n'
              '  required int32 srcTsId = 3;\n'
              '  required int32 dstTsId = 4;\n'
              '}\n')

Fragment(document_cs='10dbd19bf7218cccf956a85a1944374ca6fc54086b674f5337c0b54d366ad520',
         id=645,
         lineno=1,
         tokens=8,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /src/core/rules.proto\n')

Fragment(document_cs='10dbd19bf7218cccf956a85a1944374ca6fc54086b674f5337c0b54d366ad520',
         id=646,
         lineno=27,
         tokens=46,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'message Rule {\n'
              '  repeated Operator srcOp = 1;\n'
              '  repeated Operator dstOp = 2;\n'
              '  repeated MapOutput mappedOutput = 3;\n'
              '}\n'
              '\n'
              'message RuleCollection {\n'
              '  repeated Rule rule = 1;\n'
              '}\n')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=647,
         lineno=1,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or impli')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=648,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/mul_kernel.cu\n'
              '  Methods: Model::measure_mul_cost Mul::forward Mul::map '
              'Mul::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_mul_cost unmap\n')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=649,
         lineno=11,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ed.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Mul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Mul::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Mul::forward(bool block)\n'
              '{\n'
              '  assert(false);\n')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=650,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=651,
         lineno=20,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::map',
         body='void Mul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=652,
         lineno=27,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::unmap',
         body='void Mul::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=653,
         lineno=32,
         tokens=26,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::forward',
         body='void Mul::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=654,
         lineno=35,
         tokens=31,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_mul_cost(Mul* m)\n'
              '{\n'
              '  assert(false);\n'
              '}\n')

Fragment(document_cs='10fc12f171b37ab3e450a2641d970b2a119558e2c95ea508668ec5409ca09b5b',
         id=655,
         lineno=39,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_mul_cost',
         body='void Model::measure_mul_cost(Mul* m)\n{\n  assert(false);\n}')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=656,
         lineno=1,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitati')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=657,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/reduce_mkl.cc\n'
              '  Methods: Model::measure_reduce_cost Reduce::forward '
              'Reduce::map Reduce::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_reduce_cost unmap\n')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=658,
         lineno=13,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Reduce::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(out')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=659,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=660,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=661,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::map',
         body='void Reduce::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=662,
         lineno=25,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='putSize));\n'
              '}\n'
              '\n'
              'void Reduce::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Reduce::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_reduce_cost(Reduce* reduce)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=663,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::unmap',
         body='void Reduce::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=664,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::forward',
         body='void Reduce::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='111910ece6f065dee29f393953dfc723619b3952f5886e18a8c68385d5b49bcf',
         id=665,
         lineno=42,
         tokens=18,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_reduce_cost',
         body='void Model::measure_reduce_cost(Reduce* reduce)\n'
              '{\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=666,
         lineno=1,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the Li')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=667,
         lineno=1,
         tokens=78,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/elementwise_unary_kernel.cu\n'
              '  Methods: ElementWiseUnary::forward ElementWiseUnary::map '
              'ElementWiseUnary::unmap ElementWiseUnary::use_kernel '
              'Model::measure_elementwise_unary_cost\n'
              '  Using: taso\n'
              '  Usages: forward map measure_elementwise_unary_cost unmap '
              'use_kernel\n')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=668,
         lineno=12,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='cense for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'bool ElementWiseUnary::use_kernel(void) const\n'
              '{\n'
              '  return false;\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::forward(bool block)\n'
              '{\n')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=669,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=670,
         lineno=20,
         tokens=18,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::use_kernel',
         body='bool ElementWiseUnary::use_kernel(void) const\n'
              '{\n'
              '  return false;\n'
              '}')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=671,
         lineno=25,
         tokens=36,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::map',
         body='void ElementWiseUnary::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=672,
         lineno=30,
         tokens=24,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::unmap',
         body='void ElementWiseUnary::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=673,
         lineno=35,
         tokens=25,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::forward',
         body='void ElementWiseUnary::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=674,
         lineno=37,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_elementwise_unary_cost(ElementWiseUnary* '
              'unary)\n'
              '{\n'
              '  unary->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[ElementWiseUnary]: type(%d) '
              'cost(%.4lf)\\n",\n'
              '           unary->type, unary->runtime);\n'
              '}\n')

Fragment(document_cs='11581636df2a7cbed8671a4584aace2c5b1450f9acdbe63e7480cbb1e4dbfffb',
         id=675,
         lineno=41,
         tokens=64,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_elementwise_unary_cost',
         body='void Model::measure_elementwise_unary_cost(ElementWiseUnary* '
              'unary)\n'
              '{\n'
              '  unary->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[ElementWiseUnary]: type(%d) '
              'cost(%.4lf)\\n",\n'
              '           unary->type, unary->runtime);\n'
              '}')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=676,
         lineno=1,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or i')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=677,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/resize_kernel.cu\n'
              '  Methods: Model::measure_resize_cost Resize::forward '
              'Resize::map Resize::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_resize_cost unmap\n')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=678,
         lineno=11,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mplied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Resize::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Resize::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Resize::forward(bool block)\n'
              '{\n')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=679,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=680,
         lineno=20,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::map',
         body='void Resize::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=681,
         lineno=27,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::unmap',
         body='void Resize::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=682,
         lineno=32,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::forward',
         body='void Resize::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=683,
         lineno=34,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_resize_cost(Resize* resize)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  resize->runtime = 0;\n'
              '}\n')

Fragment(document_cs='1644a10cef826b6a0703a0f949ad5ab60f827ea02a60460d7ac74426f2fd7cbc',
         id=684,
         lineno=38,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_resize_cost',
         body='void Model::measure_resize_cost(Resize* resize)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  resize->runtime = 0;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=685,
         lineno=1,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KI')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=686,
         lineno=1,
         tokens=130,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/noop.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::dropout Graph::input_wrapper '
              'Graph::weight_wrapper Model::create_input Model::create_weight '
              'Model::get_or_create_noop NoOp::NoOp NoOp::collect_costs '
              'NoOp::forward NoOp::get_int_parameter NoOp::map NoOp::unmap '
              'NoOp::~NoOp NoopKey::NoopKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: NoOp NoopKey collect_costs create_input create_weight '
              'dropout forward get_int_parameter get_or_create_noop '
              'input_wrapper map unmap weight_wrapper\n')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=687,
         lineno=11,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::input_wrapper(const TensorHandle _input)\n'
              '{\n'
              '  // Always create new operator for input\n'
              '  Op op = model->create_input(*_input, OP_INPUT);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=688,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=689,
         lineno=19,
         tokens=81,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::input_wrapper',
         body='TensorHandle Graph::input_wrapper(const TensorHandle _input)\n'
              '{\n'
              '  // Always create new operator for input\n'
              '  Op op = model->create_input(*_input, OP_INPUT);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=690,
         lineno=25,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::weight_wrapper(const TensorHandle _weight)\n'
              '{\n'
              '  // Always create new operator for weight\n'
              '  Op op = model->create_weight(*_weight, OP_WEIGHT);\n'
              '  add_edge(_weight->op, op, _weight->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              '// TODO: we ignore dropout rate for inference\n'
              'TensorHandle Graph::dropout(const TensorHandle _input)\n'
              '{\n'
              '  Op op = model->get_or_create_noop(*_input')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=691,
         lineno=29,
         tokens=81,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::weight_wrapper',
         body='TensorHandle Graph::weight_wrapper(const TensorHandle _weight)\n'
              '{\n'
              '  // Always create new operator for weight\n'
              '  Op op = model->create_weight(*_weight, OP_WEIGHT);\n'
              '  add_edge(_weight->op, op, _weight->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=692,
         lineno=40,
         tokens=77,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::dropout',
         body='TensorHandle Graph::dropout(const TensorHandle _input)\n'
              '{\n'
              '  Op op = model->get_or_create_noop(*_input, OP_DROPOUT);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=693,
         lineno=42,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', OP_DROPOUT);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::create_input(Tensor _input, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_INPUT);\n'
              '  Op ret;\n'
              '  ret.ptr = new NoOp(this, _input, _type);\n'
              '  ret.guid = global_unique_id ++;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Op Model::create_weight(Tensor _weight, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_WEIGHT);\n'
              '  //assert(_weight.data_ptr != NULL);\n')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=694,
         lineno=49,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::create_input',
         body='Op Model::create_input(Tensor _input, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_INPUT);\n'
              '  Op ret;\n'
              '  ret.ptr = new NoOp(this, _input, _type);\n'
              '  ret.guid = global_unique_id ++;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=695,
         lineno=52,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=696,
         lineno=58,
         tokens=102,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::create_weight',
         body='Op Model::create_weight(Tensor _weight, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_WEIGHT);\n'
              '  //assert(_weight.data_ptr != NULL);\n'
              '  if (_weight.data_ptr == NULL) {\n'
              '    fprintf(stderr, "[%s:%d] Warning: Find uninitialized weight '
              'tensor.\\n", __FILE__, __LINE__);\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.ptr = new NoOp(this, _weight, _type);\n'
              '  ret.guid = global_unique_id ++;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=697,
         lineno=62,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (_weight.data_ptr == NULL) {\n'
              '    fprintf(stderr, "[%s:%d] Warning: Find uninitialized weight '
              'tensor.\\n", __FILE__, __LINE__);\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.ptr = new NoOp(this, _weight, _type);\n'
              '  ret.guid = global_unique_id ++;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_noop(Tensor _input, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_DROPOUT);\n'
              '  // key is (_type, _input)\n'
              '  NoopKey key(_input, _type);\n'
              '  NoOp* noOp;\n')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=698,
         lineno=65,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=699,
         lineno=71,
         tokens=142,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_noop',
         body='Op Model::get_or_create_noop(Tensor _input, OpType _type)\n'
              '{\n'
              '  assert(_type == OP_DROPOUT);\n'
              '  // key is (_type, _input)\n'
              '  NoopKey key(_input, _type);\n'
              '  NoOp* noOp;\n'
              '  if (noop.find(key) != noop.end()) {\n'
              '    noOp = noop[key];\n'
              '  } else {\n'
              '    noOp = new NoOp(this, _input, _type);\n'
              '    noOp->runtime = 0.0f;\n'
              '    noop[key] = noOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = noOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=700,
         lineno=75,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type)')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=701,
         lineno=77,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (noop.find(key) != noop.end()) {\n'
              '    noOp = noop[key];\n'
              '  } else {\n'
              '    noOp = new NoOp(this, _input, _type);\n'
              '    noOp->runtime = 0.0f;\n'
              '    noop[key] = noOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = noOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=702,
         lineno=84,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=703,
         lineno=88,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'NoOp::NoOp(Model* _model, Tensor _input, OpType type)\n'
              ': OpBase(_input, _model, type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'NoOp::~NoOp(void)\n'
              '{}\n'
              '\n'
              'bool NoOp::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  re')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=704,
         lineno=90,
         tokens=57,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::NoOp',
         body='NoOp::NoOp(Model* _model, Tensor _input, OpType type)\n'
              ': OpBase(_input, _model, type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=705,
         lineno=98,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::~NoOp',
         body='NoOp::~NoOp(void)\n{}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=706,
         lineno=101,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::get_int_parameter',
         body='bool NoOp::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=707,
         lineno=103,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='turn OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void NoOp::map(void)\n'
              '{}\n'
              '\n'
              'void NoOp::unmap(void)\n'
              '{}\n'
              '\n'
              'void NoOp::forward(bool block)\n'
              '{}\n'
              '\n'
              'void NoOp::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += 0;\n'
              '  flops += 0;\n'
              '  mem_acc += 0;\n'
              '  num_kernels += 0;\n'
              '}\n'
              '\n'
              '// key ordering: _type, input\n'
              'NoopKey::NoopKey(Tensor input, OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  input.serialize(keys, idx);\n')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=708,
         lineno=106,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::map',
         body='void NoOp::map(void)\n{}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=709,
         lineno=109,
         tokens=9,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::unmap',
         body='void NoOp::unmap(void)\n{}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=710,
         lineno=112,
         tokens=9,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::forward',
         body='void NoOp::forward(bool block)\n{}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=711,
         lineno=115,
         tokens=64,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoOp::collect_costs',
         body='void NoOp::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += 0;\n'
              '  flops += 0;\n'
              '  mem_acc += 0;\n'
              '  num_kernels += 0;\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=712,
         lineno=126,
         tokens=63,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='NoopKey::NoopKey',
         body='NoopKey::NoopKey(Tensor input, OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='1de30a7f9074faf8dab4f69b95fc2abc172214ee6cff367140d78f7c6412d5ea',
         id=713,
         lineno=131,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=714,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=715,
         lineno=1,
         tokens=69,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/fuse_conv_batchnorm_mkl.cc\n'
              '  Functions: fuse_conv_batchnorm_kernel\n'
              '  Methods: FuseConvBatchNorm::forward FuseConvBatchNorm::map '
              'FuseConvBatchNorm::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: abs forward map sqrt unmap\n')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=716,
         lineno=11,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void fuse_conv_batchnorm_kernel(int c_out, int c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=717,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=718,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=719,
         lineno=21,
         tokens=41,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_kernel',
         body='fuse_conv_batchnorm_kernel(int c_out, int c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var)')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=720,
         lineno=21,
         tokens=126,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_kernel',
         body='void fuse_conv_batchnorm_kernel(int c_out, int c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=721,
         lineno=25,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim ')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=722,
         lineno=31,
         tokens=62,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::map',
         body='void FuseConvBatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=723,
         lineno=33,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='== 4);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=724,
         lineno=39,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::unmap',
         body='void FuseConvBatchNorm::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=725,
         lineno=48,
         tokens=133,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::forward',
         body='void FuseConvBatchNorm::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  fuse_conv_batchnorm_kernel(c_out, c_in_h_w,\n'
              '      (DATATYPE*)outputs[0].data_ptr, conv_w_ptr, scale_ptr, '
              'var_ptr);\n'
              '}')

Fragment(document_cs='1fc9d7df915f3461dc207f7bf056b3304cc17281902069273daa3cab07fabc61',
         id=726,
         lineno=52,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  fuse_conv_batchnorm_kernel(c_out, c_in_h_w,\n'
              '      (DATATYPE*)outputs[0].data_ptr, conv_w_ptr, scale_ptr, '
              'var_ptr);\n'
              '}\n'
              '\n')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=727,
         lineno=1,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either ')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=728,
         lineno=1,
         tokens=57,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/broadcast_add_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP broadcast_add_kernel\n'
              '  Methods: BroadcastAdd::forward BroadcastAdd::map '
              'BroadcastAdd::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=729,
         lineno=11,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void broadcast_add_kernel(int batch,\n'
              '                          int channel,\n'
              '                          int h_w_size,\n'
              '                          DATATYPE* dst_ptr,\n'
              '                          DATATYPE* _data,\n'
              '                          DATATYPE* _bias')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=730,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=731,
         lineno=20,
         tokens=94,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='broadcast_add_kernel',
         body='__global__\n'
              'void broadcast_add_kernel(int batch,\n'
              '                          int channel,\n'
              '                          int h_w_size,\n'
              '                          DATATYPE* dst_ptr,\n'
              '                          DATATYPE* _data,\n'
              '                          DATATYPE* _bias)\n'
              '{\n'
              '  int volume = batch * channel * h_w_size;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=732,
         lineno=21,
         tokens=37,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='broadcast_add_kernel',
         body='broadcast_add_kernel(int batch,\n'
              '                          int channel,\n'
              '                          int h_w_size,\n'
              '                          DATATYPE* dst_ptr,\n'
              '                          DATATYPE* _data,\n'
              '                          DATATYPE* _bias)')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=733,
         lineno=26,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=')\n'
              '{\n'
              '  int volume = batch * channel * h_w_size;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}\n'
              '\n'
              'void BroadcastAdd::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void BroadcastAdd::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].dat')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=734,
         lineno=29,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=735,
         lineno=29,
         tokens=38,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=736,
         lineno=36,
         tokens=67,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::map',
         body='void BroadcastAdd::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=737,
         lineno=44,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::unmap',
         body='void BroadcastAdd::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=738,
         lineno=46,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='a_ptr));\n'
              '}\n'
              '\n'
              'void BroadcastAdd::forward(bool block)\n'
              '{\n'
              '  int batch = outputs[0].dim[0];\n'
              '  int channel = outputs[0].dim[1];\n'
              '  int h_w_size = outputs[0].dim[2] * outputs[0].dim[3];\n'
              '  DATATYPE* _data_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* _bias_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  broadcast_add_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      batch, channel, h_w_size, '
              '(DATATYPE*)outputs[0].data_ptr,\n'
              '      _data_ptr, _bias_ptr);\n')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=739,
         lineno=49,
         tokens=155,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::forward',
         body='void BroadcastAdd::forward(bool block)\n'
              '{\n'
              '  int batch = outputs[0].dim[0];\n'
              '  int channel = outputs[0].dim[1];\n'
              '  int h_w_size = outputs[0].dim[2] * outputs[0].dim[3];\n'
              '  DATATYPE* _data_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* _bias_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  broadcast_add_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      batch, channel, h_w_size, '
              '(DATATYPE*)outputs[0].data_ptr,\n'
              '      _data_ptr, _bias_ptr);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='203883d69ca779d71eb57dad44a1a26c849f5d670533196ea72318bfab186a7f',
         id=740,
         lineno=59,
         tokens=14,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n    checkCUDA(cudaDeviceSynchronize());\n}\n\n\n')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=741,
         lineno=1,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void assign_kernel(float* ptr, int size, float value)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    ptr[i] = value;\n'
              '  }\n'
              '}\n'
              '\n'
              '__global__\n'
              'void copy_kernel(float* dst, const float* src, int size)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    dst[i] = src[i];\n'
              '  }\n'
              '}\n'
              '\n'
              'cudnnActivationMode_t get_activation_mode(ActiMode activation)\n'
              '{\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      return CUDNN_ACTIVATION_SIGMOID;\n'
              '    case AC_MODE_RELU:\n'
              '      re')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=742,
         lineno=1,
         tokens=44,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/cuda_helper.cu\n'
              '  Functions: CUDA_KERNEL_LOOP assign_kernel copy_kernel '
              'get_activation_mode helperSetBroadcastableTensorDescriptor '
              'helperSetTensorDescriptor\n'
              '  Using: taso\n')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=743,
         lineno=2,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=744,
         lineno=4,
         tokens=37,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='__global__\n'
              'void assign_kernel(float* ptr, int size, float value)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    ptr[i] = value;\n'
              '  }\n'
              '}')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=745,
         lineno=5,
         tokens=12,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='assign_kernel(float* ptr, int size, float value)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=746,
         lineno=7,
         tokens=18,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, size)\n  {\n    ptr[i] = value;\n  }')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=747,
         lineno=7,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, size)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=748,
         lineno=13,
         tokens=40,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='__global__\n'
              'void copy_kernel(float* dst, const float* src, int size)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    dst[i] = src[i];\n'
              '  }\n'
              '}')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=749,
         lineno=14,
         tokens=14,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='copy_kernel(float* dst, const float* src, int size)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=750,
         lineno=16,
         tokens=19,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, size)\n  {\n    dst[i] = src[i];\n  }')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=751,
         lineno=16,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, size)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=752,
         lineno=22,
         tokens=105,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_mode',
         body='cudnnActivationMode_t get_activation_mode(ActiMode activation)\n'
              '{\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      return CUDNN_ACTIVATION_SIGMOID;\n'
              '    case AC_MODE_RELU:\n'
              '      return CUDNN_ACTIVATION_RELU;\n'
              '    case AC_MODE_TANH:\n'
              '      return CUDNN_ACTIVATION_TANH;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  // return RELU as default\n'
              '  return CUDNN_ACTIVATION_RELU;\n'
              '}')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=753,
         lineno=22,
         tokens=9,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_mode',
         body='get_activation_mode(ActiMode activation)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=754,
         lineno=28,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='turn CUDNN_ACTIVATION_RELU;\n'
              '    case AC_MODE_TANH:\n'
              '      return CUDNN_ACTIVATION_TANH;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  // return RELU as default\n'
              '  return CUDNN_ACTIVATION_RELU;\n'
              '}\n'
              '\n'
              'void helperSetTensorDescriptor(const Tensor& tensor,\n'
              '                               cudnnTensorDescriptor_t '
              'tensorDesc)\n'
              '{\n'
              '  switch(tensor.numDim) {\n'
              '    case 1:\n'
              '    {\n'
              '      int dims[] = {tensor.dim[0], 1, 1, 1};\n'
              '      int strides[] = {tensor.stride[0], 1, 1, 1};\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=755,
         lineno=38,
         tokens=244,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetTensorDescriptor',
         body='void helperSetTensorDescriptor(const Tensor& tensor,\n'
              '                               cudnnTensorDescriptor_t '
              'tensorDesc)\n'
              '{\n'
              '  switch(tensor.numDim) {\n'
              '    case 1:\n'
              '    {\n'
              '      int dims[] = {tensor.dim[0], 1, 1, 1};\n'
              '      int strides[] = {tensor.stride[0], 1, 1, 1};\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '                                            4, dims, '
              'strides));\n'
              '      break;\n'
              '    }\n'
              '    case 2:\n'
              '    {\n'
              '      int dims[] = {tensor.dim[0], tensor.dim[1], 1, 1};\n'
              '      int strides[] = {tensor.stride[0], tensor.stride[1], 1, '
              '1};\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '                                            4, dims, '
              'strides));\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '    {\n'
              '      assert(tensor.numDim >= 3);\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '          tensor.numDim, tensor.dim, tensor.stride));\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=756,
         lineno=38,
         tokens=18,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetTensorDescriptor',
         body='helperSetTensorDescriptor(const Tensor& tensor,\n'
              '                               cudnnTensorDescriptor_t '
              'tensorDesc)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=757,
         lineno=46,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tensorDesc, CUDNN_DATA_FLOAT,\n'
              '                                            4, dims, '
              'strides));\n'
              '      break;\n'
              '    }\n'
              '    case 2:\n'
              '    {\n'
              '      int dims[] = {tensor.dim[0], tensor.dim[1], 1, 1};\n'
              '      int strides[] = {tensor.stride[0], tensor.stride[1], 1, '
              '1};\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '                                            4, dims, '
              'strides));\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '    {\n'
              '      assert(tensor.numDim >= 3);\n'
              '      checkCUDNN(cudnnSetTenso')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=758,
         lineno=61,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rNdDescriptor(tensorDesc, CUDNN_DATA_FLOAT,\n'
              '          tensor.numDim, tensor.dim, tensor.stride));\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'void helperSetBroadcastableTensorDescriptor(const Tensor& '
              'input,\n'
              '                                            const Tensor& '
              'output,\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc)\n'
              '{\n'
              '  int dims[16], strides[16];\n'
              '  assert(output.numDim <= 16);\n'
              '  assert(input.numDim <= output.numDim);\n'
              '  assert(input.default_layout());\n'
              '  assert(output.default_layout());\n')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=759,
         lineno=67,
         tokens=379,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetBroadcastableTensorDescriptor',
         body='void helperSetBroadcastableTensorDescriptor(const Tensor& '
              'input,\n'
              '                                            const Tensor& '
              'output,\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc)\n'
              '{\n'
              '  int dims[16], strides[16];\n'
              '  assert(output.numDim <= 16);\n'
              '  assert(input.numDim <= output.numDim);\n'
              '  assert(input.default_layout());\n'
              '  assert(output.default_layout());\n'
              '  for (int i = 0; i < output.numDim; i++) {\n'
              '    if (i < input.numDim) {\n'
              '      strides[output.numDim-1-i] = '
              'input.stride[input.numDim-1-i];\n'
              '      dims[output.numDim-1-i] = input.dim[input.numDim-1-i];\n'
              '    } else {\n'
              '      strides[output.numDim-1-i] = input.stride[0];\n'
              '      dims[output.numDim-1-i] = 1;\n'
              '    }\n'
              '  }\n'
              '  int num_dim = output.numDim;\n'
              '  if (num_dim < 4) {\n'
              '    num_dim = 4;\n'
              '    for (int i = output.numDim; i < num_dim; i++) {\n'
              '      dims[i] = 1;\n'
              '      strides[i] = 1;\n'
              '    }\n'
              '  }\n'
              '  //for (int i = 0; i < num_dim; i++)\n'
              '  //  printf("dims[%d] = %d input.dim(%d) output.dim(%d)\\n", '
              'i, dims[i], input.dim[i], output.dim[i]);\n'
              '  //for (int i = 0; i < num_dim; i++)\n'
              '  //  printf("strides[%d] = %d input.stride(%d) '
              'output.stride(%d)\\n", i, strides[i], input.stride[i], '
              'output.stride[i]);\n'
              ' \n'
              '  checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      num_dim, dims, strides));\n'
              '}')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=760,
         lineno=67,
         tokens=26,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetBroadcastableTensorDescriptor',
         body='helperSetBroadcastableTensorDescriptor(const Tensor& input,\n'
              '                                            const Tensor& '
              'output,\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc)')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=761,
         lineno=76,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < output.numDim; i++) {\n'
              '    if (i < input.numDim) {\n'
              '      strides[output.numDim-1-i] = '
              'input.stride[input.numDim-1-i];\n'
              '      dims[output.numDim-1-i] = input.dim[input.numDim-1-i];\n'
              '    } else {\n'
              '      strides[output.numDim-1-i] = input.stride[0];\n'
              '      dims[output.numDim-1-i] = 1;\n'
              '    }\n'
              '  }\n'
              '  int num_dim = output.numDim;\n'
              '  if (num_dim < 4) {\n'
              '    num_dim = 4;\n')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=762,
         lineno=88,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = output.numDim; i < num_dim; i++) {\n'
              '      dims[i] = 1;\n'
              '      strides[i] = 1;\n'
              '    }\n'
              '  }\n'
              '  //for (int i = 0; i < num_dim; i++)\n'
              '  //  printf("dims[%d] = %d input.dim(%d) output.dim(%d)\\n", '
              'i, dims[i], input.dim[i], output.dim[i]);\n'
              '  //for (in')

Fragment(document_cs='22aed641dba4058e8ce057c1f071f21c88d5e9e3cb08c3cf3608c97902e0b6d6',
         id=763,
         lineno=95,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t i = 0; i < num_dim; i++)\n'
              '  //  printf("strides[%d] = %d input.stride(%d) '
              'output.stride(%d)\\n", i, strides[i], input.stride[i], '
              'output.stride[i]);\n'
              ' \n'
              '  checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      num_dim, dims, strides));\n'
              '}\n'
              '\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=764,
         lineno=1,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d\n'
              '\n'
              'def resnext_block(input, strides, out_channels, groups, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = tf.split(t, groups, axis=1, name=name+"_split")\n'
              '    assert(len(t) == groups)\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=765,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=766,
         lineno=1,
         tokens=114,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/resnext50.py\n'
              '  Functions: resnext_block\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args axis concat config default discard_iter '
              'filter_shape float32 format global_jit_level graph '
              'graph_options groups help input input_dictionary input_tensor '
              'iterations make_activation make_conv2d name numpy '
              'optimizer_options out_channels output output_nodes padding '
              'parse_args parser placeholder print print_tensorboard random '
              'random_sample range relu sess shape shared_functions split '
              'strides summary tensorflow time times total type value writer\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=767,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=768,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=769,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=770,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=771,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=772,
         lineno=7,
         tokens=94,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='def resnext_block(input, strides, out_channels, groups, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = tf.split(t, groups, axis=1, name=name+"_split")\n'
              '    assert(len(t) == groups)\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=773,
         lineno=11,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(groups):\n'
              '        t[i] = make_conv2d(input_tensor=t[i], '
              'filter_shape=(3,3,t[i].shape[1].value,out_channels//groups), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv2_".format(i))\n'
              '    output = tf.concat(t, axis=1, name=name+"_concat")\n'
              '    t = make_conv2d(input_tensor=output, '
              'filter_shape=(1,1,output.shape[1].value,2*out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=774,
         lineno=11,
         tokens=135,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='    for i in range(groups):\n'
              '        t[i] = make_conv2d(input_tensor=t[i], '
              'filter_shape=(3,3,t[i].shape[1].value,out_channels//groups), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv2_".format(i))\n'
              '    output = tf.concat(t, axis=1, name=name+"_concat")\n'
              '    t = make_conv2d(input_tensor=output, '
              'filter_shape=(1,1,output.shape[1].value,2*out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=775,
         lineno=15,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (strides[2]>1) or (input.shape[1].value != '
              'out_channels*2):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*2), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argument("--p')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=776,
         lineno=15,
         tokens=84,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='    if (strides[2]>1) or (input.shape[1].value != '
              'out_channels*2):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*2), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=777,
         lineno=20,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Whether to run with TensorFlowXLA optimizations')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=778,
         lineno=21,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rint_tensorboard", help="Name of folder to output the '
              'tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(1,64,56,56))\n'
              't = input\n'
              'for i in range(3):')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=779,
         lineno=21,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Name of folder to output the tensorboard information')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=780,
         lineno=22,
         tokens=13,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to average for timing (default 5000)')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=781,
         lineno=23,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to not time during warm up (default 1000)')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=782,
         lineno=28,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    t = resnext_block(t, (1,1,1,1), 128, 32, '
              '"resnet_block_1_{}".format(i))\n'
              'strides=(1,1,2,2)\n'
              'for i in range(4):\n'
              '    t = resnext_block(t, strides, 256, 32, '
              '"resnet_block_2_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=783,
         lineno=34,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',2)\n'
              'for i in range(6):\n'
              '    t = resnext_block(t, strides, 512, 32, '
              '"resnet_block_3_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2,2)\n'
              'for i in range(3):\n'
              '    t = resnext_block(t, strides, 1024, 32, '
              '"resnet_block_4_{}".form')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=784,
         lineno=40,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='at(i))\n'
              '    strides=(1,1,1,1)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input] = '
              'np.random.random_sample((1,64,56,56))\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=785,
         lineno=45,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA ON')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=786,
         lineno=48,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA OFF')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=787,
         lineno=54,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n'
              '    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=788,
         lineno=65,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(document_cs='22fe9ec31375b90cf82bcf7a56ab34cab2e1e603728c05762601b0bcfe63cc1e',
         id=789,
         lineno=68,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Average inference time of the last ')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=790,
         lineno=1,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=791,
         lineno=1,
         tokens=112,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/elementwise_unary_mkl.cc\n'
              '  Functions: create_net unary_kernel\n'
              '  Methods: ElementWiseUnary::forward ElementWiseUnary::map '
              'ElementWiseUnary::unmap ElementWiseUnary::use_kernel '
              'Model::measure_elementwise_unary_cost\n'
              '  Variables: inputMem ops_algo\n'
              '  Using: dnnl taso\n'
              '  Usages: ceil desc eltwise_exp eltwise_sqrt forward '
              'forward_inference log map measure_elementwise_unary_cost '
              'primitive_desc round unmap use_kernel\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=792,
         lineno=11,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              '#include <cmath>\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void unary_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty,\n'
              '    const DATATYPE* x, DATATYPE* y) {\n'
              '  int numDim = ty.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n'
              '  for (int yid = 0; yid < volume; yid++) {\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=793,
         lineno=19,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=794,
         lineno=20,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=795,
         lineno=22,
         tokens=283,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='unary_kernel',
         body='void unary_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty,\n'
              '    const DATATYPE* x, DATATYPE* y) {\n'
              '  int numDim = ty.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n'
              '  for (int yid = 0; yid < volume; yid++) {\n'
              '    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (yid / ty.stride[d]) % ty.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n'
              '    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_CEIL:\n'
              '        y[yid] = std::ceil(x[xid]);\n'
              '        break;\n'
              '      case OP_ROUND:\n'
              '        y[yid] = std::round(x[xid]);\n'
              '        break;\n'
              '      case OP_LOGICAL_NOT:\n'
              '        y[yid] = !x[xid];\n'
              '        break;\n'
              '      case OP_LOG:\n'
              '        y[yid] = std::log(x[xid]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=796,
         lineno=22,
         tokens=33,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='unary_kernel',
         body='unary_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty,\n'
              '    const DATATYPE* x, DATATYPE* y)')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=797,
         lineno=31,
         tokens=56,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (yid / ty.stride[d]) % ty.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=798,
         lineno=36,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_CEIL:\n'
              '        y[yid] = std::ceil(x[xid]);\n'
              '        break;\n'
              '      case OP_ROUND:\n'
              '        y[yid] = std::round(x[xid]);\n'
              '        break;\n'
              '      case OP_LOGICAL_NOT:\n'
              '        y[yid] = !x[xid];\n'
              '        break;\n'
              '      cas')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=799,
         lineno=50,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e OP_LOG:\n'
              '        y[yid] = std::log(x[xid]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'bool ElementWiseUnary::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EXP:\n'
              '    case OP_SQRT:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '\n'
              '  // dnnl::eltwise requires the same layout between input and '
              'output.\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=800,
         lineno=59,
         tokens=84,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::use_kernel',
         body='bool ElementWiseUnary::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EXP:\n'
              '    case OP_SQRT:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '\n'
              '  // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '  if (!outputs[0].has_same_shape_stride_split(inputs[0])) '
              'return false;\n'
              '\n'
              '  return true;\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=801,
         lineno=70,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!outputs[0].has_same_shape_stride_split(inputs[0])) '
              'return false;\n'
              '\n'
              '  return true;\n'
              '}\n'
              '\n'
              'static void create_net(ElementWiseUnary* unary, DNNLNet& net, '
              'engine& eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(unary->inputs[0].volume() == '
              'unary->outputs[0].volume());\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=802,
         lineno=75,
         tokens=46,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(ElementWiseUnary* unary, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr)')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=803,
         lineno=75,
         tokens=374,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(ElementWiseUnary* unary, DNNLNet& net, '
              'engine& eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(unary->inputs[0].volume() == '
              'unary->outputs[0].volume());\n'
              '  if (unary->use_kernel()) {\n'
              '    // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '    '
              'assert(unary->outputs[0].has_same_shape_stride_split(unary->inputs[0]));\n'
              '    // data descriptors.\n'
              '    auto memDesc = get_memory_desc(unary->outputs[0]);\n'
              '    // data memories.\n'
              '    inputMem = memory(memDesc, eng, inputPtr);\n'
              '    outputMem = memory(memDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo;\n'
              '    float ops_alpha = 0.0f;\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (unary->type) {\n'
              '      case OP_EXP:\n'
              '        ops_algo = algorithm::eltwise_exp;\n'
              '        break;\n'
              '      case OP_SQRT:\n'
              '        ops_algo = algorithm::eltwise_sqrt;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    auto unaryOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto unaryPrimDesc = '
              'eltwise_forward::primitive_desc(unaryOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({eltwise_forward(unaryPrimDesc),\n'
              '        {{DNNL_ARG_SRC, inputMem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=804,
         lineno=80,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (unary->use_kernel()) {\n'
              '    // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '    '
              'assert(unary->outputs[0].has_same_shape_stride_split(unary->inputs[0]));\n'
              '    // data descriptors.\n'
              '    auto memDesc = get_memory_desc(unary->outputs[0]);\n'
              '    // data memories.\n'
              '    inputMem = memory(memDesc, eng, inputPtr);\n'
              '    outputMem = memory(memDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo;\n'
              '  ')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=805,
         lineno=89,
         tokens=4,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='ops_algo',
         body='algorithm ops_algo;')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=806,
         lineno=90,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  float ops_alpha = 0.0f;\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (unary->type) {\n'
              '      case OP_EXP:\n'
              '        ops_algo = algorithm::eltwise_exp;\n'
              '        break;\n'
              '      case OP_SQRT:\n'
              '        ops_algo = algorithm::eltwise_sqrt;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    auto unaryOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto unaryPrimDesc = e')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=807,
         lineno=104,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ltwise_forward::primitive_desc(unaryOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({eltwise_forward(unaryPrimDesc),\n'
              '        {{DNNL_ARG_SRC, inputMem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(null')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=808,
         lineno=115,
         tokens=101,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::map',
         body='void ElementWiseUnary::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=809,
         lineno=119,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::forward(bool block)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    for (auto& p : net) p.first.execute(model->strm, '
              'p.second);\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=810,
         lineno=121,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=811,
         lineno=127,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::unmap',
         body='void ElementWiseUnary::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=812,
         lineno=136,
         tokens=100,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::forward',
         body='void ElementWiseUnary::forward(bool block)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    for (auto& p : net) p.first.execute(model->strm, '
              'p.second);\n'
              '    if (block) model->strm.wait();\n'
              '  } else {\n'
              '    unary_kernel(outputs[0].volume(), type,\n'
              '        inputs[0], outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr,\n'
              '        (DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=813,
         lineno=140,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (block) model->strm.wait();\n'
              '  } else {\n'
              '    unary_kernel(outputs[0].volume(), type,\n'
              '        inputs[0], outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr,\n'
              '        (DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Model::measure_elementwise_unary_cost(ElementWiseUnary* '
              'unary)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(unary, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, outputPtr);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=814,
         lineno=149,
         tokens=335,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_elementwise_unary_cost',
         body='void Model::measure_elementwise_unary_cost(ElementWiseUnary* '
              'unary)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(unary, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, outputPtr);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  if (unary->use_kernel()) {\n'
              '    assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(outputMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n'
              '\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      for (auto& p : net) {\n'
              '        p.first.execute(strm, p.second);\n'
              '      }\n'
              '      strm.wait();\n'
              '    }\n'
              '  } else {\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      unary_kernel(unary->outputs[0].volume(), unary->type,\n'
              '          unary->inputs[0], unary->outputs[0],\n'
              '          inputPtr, outputPtr);\n'
              '    }\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  unary->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[ElementWiseUnary]: type(%d) '
              'cost(%.4lf)\\n",\n'
              '           unary->type, unary->runtime);\n'
              '}')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=815,
         lineno=151,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=816,
         lineno=158,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (unary->use_kernel()) {\n'
              '    assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(outputMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=817,
         lineno=161,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      for (auto& p : net) {\n'
              '        p.first.execute(strm, p.second);\n'
              '      }\n'
              '      strm.wait();\n'
              '    }\n'
              '  } else {\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n')

Fragment(document_cs='25df49717512646b9b1cb5fb49dc96c2f89734d382309150e46474bc5809b5f6',
         id=818,
         lineno=173,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      unary_kernel(unary->outputs[0].volume(), unary->type,\n'
              '          unary->inputs[0], unary->outputs[0],\n'
              '          inputPtr, outputPtr);\n'
              '    }\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  unary->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[ElementWiseUnary]: type(%d) '
              'cost(%.4lf)\\n",\n'
              '           unary->type, unary->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=819,
         lineno=1,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=820,
         lineno=1,
         tokens=111,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/merge_gconv.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::merge_gconv MergeGConv::MergeGConv '
              'MergeGConv::collect_costs MergeGConv::get_int_parameter '
              'MergeGConv::~MergeGConv MergeGConvKey::MergeGConvKey '
              'Model::get_or_create_merge_gconv\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP MergeGConv MergeGConvKey NO_SPLIT '
              'collect_costs get_int_parameter get_or_create_merge_gconv '
              'merge_gconv\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=821,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=822,
         lineno=19,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='// Merge multiple group convs to a single group conv\n'
              'TensorHandle Graph::merge_gconv(const TensorHandle _weight,\n'
              '                                int count)\n'
              '{\n'
              '  // Currently the weight being merged must be 4D:\n'
              '  // Count, Cin, KernelH, KernelW\n'
              '  assert(_weight->numDim == 4);\n'
              '  Op op = model->get_or_create_merge_gconv(')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=823,
         lineno=20,
         tokens=125,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::merge_gconv',
         body='TensorHandle Graph::merge_gconv(const TensorHandle _weight,\n'
              '                                int count)\n'
              '{\n'
              '  // Currently the weight being merged must be 4D:\n'
              '  // Count, Cin, KernelH, KernelW\n'
              '  assert(_weight->numDim == 4);\n'
              '  Op op = model->get_or_create_merge_gconv(*_weight, count);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_weight->op, op, _weight->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=824,
         lineno=26,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='*_weight, count);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_weight->op, op, _weight->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_merge_gconv(const Tensor& _weight,\n'
              '                                    int count)\n'
              '{\n'
              '  // Check 1: weight must have 4D\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=825,
         lineno=34,
         tokens=202,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_merge_gconv',
         body='Op Model::get_or_create_merge_gconv(const Tensor& _weight,\n'
              '                                    int count)\n'
              '{\n'
              '  // Check 1: weight must have 4D\n'
              '  if (_weight.numDim != 4)\n'
              '    return Op::INVALID_OP;\n'
              '  // new group number must be an integer\n'
              '  //if (_input.dim[1] % (_weight.dim[1] * count) != 0)\n'
              '    //return Op::INVALID_OP;\n'
              '  MergeGConvKey key(_weight, count);\n'
              '  MergeGConv* mergeOp;\n'
              '  if (merge_gconv.find(key) != merge_gconv.end()) {\n'
              '    mergeOp = merge_gconv[key];\n'
              '  } else {\n'
              '    mergeOp = new MergeGConv(this, _weight, count);\n'
              '    mergeOp->runtime = 0.0f;\n'
              '    merge_gconv[key] = mergeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = mergeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=826,
         lineno=38,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (_weight.numDim != 4)\n'
              '    return Op::INVALID_OP;\n'
              '  // new group number must be an integer\n'
              '  //if (_input.dim[1] % (_weight.dim[1] * count) != 0)\n'
              '    //return Op::INVALID_OP;\n'
              '  MergeGConvKey key(_weight, count);\n'
              '  MergeGConv* mergeOp;\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=827,
         lineno=43,
         tokens=6,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_weight, count)')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=828,
         lineno=45,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (merge_gconv.find(key) != merge_gconv.end()) {\n'
              '    mergeOp = merge_gconv[key];\n'
              '  } else {\n'
              '    mergeOp = new MergeGConv(this, _weight, count);\n'
              '    mergeOp->runtime = 0.0f;\n'
              '    merge_gconv[key] = mergeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = mergeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'MergeGConv::MergeGConv(Model* _model,\n'
              '                       const Tensor& _weight,\n'
              '                       int _count)\n'
              ': OpBase(_weight, _model, OP_MERGE_GCONV), count(_count)\n'
              '{\n'
              '  assert(_weight.numDim == 4);')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=829,
         lineno=52,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=830,
         lineno=58,
         tokens=327,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::MergeGConv',
         body='MergeGConv::MergeGConv(Model* _model,\n'
              '                       const Tensor& _weight,\n'
              '                       int _count)\n'
              ': OpBase(_weight, _model, OP_MERGE_GCONV), count(_count)\n'
              '{\n'
              '  assert(_weight.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _weight.numDim;\n'
              '  outputs[0].dim[0] = _weight.dim[0];\n'
              '  outputs[0].dim[1] = _weight.dim[1] * count;\n'
              '  outputs[0].dim[2] = _weight.dim[2];\n'
              '  outputs[0].dim[3] = _weight.dim[3];\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _weight.split[0];\n'
              '  outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].split[2] = _weight.split[2];\n'
              '  outputs[0].split[3] = _weight.split[3];\n'
              '  outputs[0].idx = 0;\n'
              '  // assume that group number is an integer\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=831,
         lineno=63,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _weight.numDim;\n'
              '  outputs[0].dim[0] = _weight.dim[0];\n'
              '  outputs[0].dim[1] = _weight.dim[1] * count;\n'
              '  outputs[0].dim[2] = _weight.dim[2];\n'
              '  outputs[0].dim[3] = _weight.dim[3];\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outp')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=832,
         lineno=71,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='uts[0].stride[2] = outputs[0].stride[3] * outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _weight.split')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=833,
         lineno=75,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='[0];\n'
              '  outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].split[2] = _weight.split[2];\n'
              '  outputs[0].split[3] = _weight.split[3];\n'
              '  outputs[0].idx = 0;\n'
              '  // assume that group number is an integer\n'
              '}\n'
              '\n'
              'MergeGConv::~MergeGConv(void)\n'
              '{}\n'
              '\n'
              'bool MergeGCon')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=834,
         lineno=83,
         tokens=10,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::~MergeGConv',
         body='MergeGConv::~MergeGConv(void)\n{}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=835,
         lineno=86,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='v::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_MERGE_GCONV_COUNT:\n'
              '      *value = count;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void MergeGConv::collect_costs(floa')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=836,
         lineno=86,
         tokens=62,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::get_int_parameter',
         body='bool MergeGConv::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_MERGE_GCONV_COUNT:\n'
              '      *value = count;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=837,
         lineno=97,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t& exe_time, float& flops,\n'
              '                               float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = outputs[0].volume();\n'
              '  int inputSize = inputs[0].volume();\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize;\n'
              '  num_kernels += 1;\n'
              '}\n'
              '\n'
              '// keys are (count, _weight)\n'
              'MergeGConvKey::MergeGConvKey(const Tensor& _weight,\n'
              '                             int count)\n'
              '{\n'
              '  assert(_weight.numDim == 4);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = count;\n'
              '  _weight.serialize(keys, idx);\n')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=838,
         lineno=97,
         tokens=84,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::collect_costs',
         body='void MergeGConv::collect_costs(float& exe_time, float& flops,\n'
              '                               float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = outputs[0].volume();\n'
              '  int inputSize = inputs[0].volume();\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize;\n'
              '  num_kernels += 1;\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=839,
         lineno=109,
         tokens=76,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConvKey::MergeGConvKey',
         body='MergeGConvKey::MergeGConvKey(const Tensor& _weight,\n'
              '                             int count)\n'
              '{\n'
              '  assert(_weight.numDim == 4);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = count;\n'
              '  _weight.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='27916aa35e555f7713cbe69b98e36eaaee92e38a3d4aba33576cc3ef1aaf0c24',
         id=840,
         lineno=116,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=841,
         lineno=1,
         tokens=150,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0|0 1|5 0 0|4 1 0 1|1 1 0 0 0|4 0 1 0 0 1|2 0 0 1 1 1 1|4 0 1 1 '
              '1 0 0 1|4 0 0 0 0 0 1 0 1|2 0 0 1 1 0 1 0 1 0|4 1 0 1 0 1 1 0 0 '
              '0 1|0 0 0 1 1 0 0 1 1 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=842,
         lineno=1,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 1\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=843,
         lineno=1,
         tokens=10,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /examples/enas_arcs.txt\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=844,
         lineno=2,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='4|3 1|0 0 0|0 0 0 0|5 0 0 0 0|4 0 0 0 0 0|5 0 0 1 1 0 0|4 0 0 1 '
              '0 0 1 0|1 0 0 0 0 1 1 0 1|2 1 0 0 0 1 0 0 1 1|4 1 0 0 0 0 0 0 0 '
              '1 0|2 0 1 1 0 1 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=845,
         lineno=2,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='1 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=846,
         lineno=3,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0|5 0|4 0 0|0 1 0 0|1 0 0 0 0|3 1 0 0 1 1|3 1 0 0 0 0 1|2 0 1 1 '
              '1 1 0 0|5 0 0 1 0 0 1 1 1|0 0 0 1 0 0 1 0 0 0|2 0 1 1 0 0 0 0 1 '
              '0 1|2 0 0 0 0 0 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=847,
         lineno=3,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=848,
         lineno=4,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0|5 0|1 0 0|2 1 0 1|1 0 0 0 0|1 1 0 0 0 0|2 0 0 0 1 0 0|0 1 1 1 '
              '0 0 0 0|0 0 1 0 1 0 0 0 0|3 0 0 0 0 0 0 1 0 0|2 1 0 1 0 1 1 0 0 '
              '0 0|5 1 1 0 0 1 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=849,
         lineno=4,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='1 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=850,
         lineno=5,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='4|0 0|2 0 0|1 0 0 0|2 0 0 0 0|4 1 0 0 1 0|0 0 1 0 0 1 1|3 0 0 0 '
              '1 1 0 0|0 0 0 0 0 0 0 0 0|2 0 1 0 1 1 0 0 1 1|0 0 0 1 1 1 0 0 0 '
              '0 0|4 0 0 0 0 0 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=851,
         lineno=5,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 1\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=852,
         lineno=6,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0|0 1|2 0 0|4 0 0 1|4 0 0 0 0|4 0 0 0 1 0|4 0 1 0 1 0 0|5 0 0 0 '
              '0 1 0 0|3 0 1 0 0 0 0 1 0|4 0 0 1 1 0 0 0 0 1|0 1 0 1 0 0 0 1 0 '
              '0 0|2 1 0 0 1 0 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=853,
         lineno=6,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=854,
         lineno=7,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0|0 0|2 1 0|5 0 0 0|4 1 0 0 0|5 1 0 1 1 0|0 1 0 1 0 1 0|2 1 1 0 '
              '0 0 0 0|0 1 1 1 1 0 0 0 0|2 0 0 0 0 1 0 1 0 1|2 0 1 0 0 0 0 1 0 '
              '0 1|4 0 1 0 1 0 1 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=855,
         lineno=7,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=856,
         lineno=8,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='4|2 0|0 0 0|2 0 0 0|1 0 0 0 1|1 1 0 0 1 1|2 0 0 0 0 1 0|4 1 0 0 '
              '0 1 0 1|3 0 0 1 0 0 0 1 1|2 1 1 0 1 1 1 0 1 1|4 0 0 0 0 0 0 1 0 '
              '1 1|0 1 0 1 0 1 1 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=857,
         lineno=8,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='1 0 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=858,
         lineno=9,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='2|0 0|4 0 0|4 0 0 0|0 1 0 1 0|4 0 0 0 0 1|3 1 0 1 0 1 1|0 0 0 1 '
              '1 0 0 0|3 0 0 1 0 0 1 1 0|4 1 0 1 0 0 0 0 0 0|1 1 0 1 0 1 0 0 1 '
              '0 0|3 0 0 0 0 1 0 0 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=859,
         lineno=9,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 1 0\n')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=860,
         lineno=10,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='5|0 1|4 0 0|4 0 0 1|3 1 0 0 0|1 1 0 0 0 0|5 1 0 1 1 0 0|4 0 0 1 '
              '1 0 0 0|5 0 0 1 0 0 0 0 0|2 1 1 1 0 0 0 0 1 1|0 1 0 0 0 0 0 0 0 '
              '0 0|4 0 0 0 1 1 0 1 0 ')

Fragment(document_cs='28c28d037a3454987546128ccb083f739981a60f38ca1fb0cb7915daad06e805',
         id=861,
         lineno=10,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='0 0 1\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=862,
         lineno=1,
         tokens=134,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              '\n'
              '#ccore.pxd\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=863,
         lineno=1,
         tokens=15,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /python/taso/_cython/CCore.pxd\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=864,
         lineno=17,
         tokens=128,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'from libcpp.memory cimport shared_ptr\n'
              'from libcpp.vector cimport vector\n'
              'from libcpp cimport bool\n'
              '\n'
              'cdef extern from "taso/ops.h" namespace "taso":\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum DataType:\n'
              '        DT_FLOAT  = 111,\n'
              '        DT_DOUBLE = 222,\n'
              '        DT_HALF   = 333,\n'
              '        DT_INT8   = 444,\n'
              '        DT_UINT8  = 555,\n'
              '        DT_INT32  = 666,\n'
              '        DT_INT64  = 777,\n'
              '        DT_BOOL   = 888,\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=865,
         lineno=33,
         tokens=146,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum OpType:\n'
              '        OP_INPUT\n'
              '        OP_WEIGHT\n'
              '        OP_ANY\n'
              '        OP_CONV2D\n'
              '        OP_DROPOUT\n'
              '        OP_LINEAR\n'
              '        OP_POOL2D_MAX\n'
              '        OP_POOL2D_AVG\n'
              '        OP_RELU\n'
              '        OP_SIGMOID\n'
              '        OP_TANH\n'
              '        OP_BATCHNORM\n'
              '        OP_CONCAT\n'
              '        OP_SPLIT\n'
              '        OP_RESHAPE\n'
              '        OP_TRANSPOSE\n'
              '        # RNN operators\n'
              '        OP_EW_ADD\n'
              '        OP_EW_MUL\n'
              '        OP_MATMUL\n'
              '        OP_SCALARMUL\n'
              '        OP_ENLARGE\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=866,
         lineno=58,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        OP_MERGE_GCONV\n'
              '        OP_CONSTANT_IMM,\n'
              '        OP_CONSTANT_ICONV,\n'
              '        OP_CONSTANT_ONE,\n'
              '        OP_CONSTANT_POOL,\n'
              '        OP_SQUEEZE,\n'
              '        OP_UNSQUEEZE,\n'
              '        OP_EW_SUB,\n'
              '        OP_EW_DIV,\n'
              '        OP_EW_EQUAL,\n'
              '        OP_EW_GREATER,\n'
              '        OP_EW_LESS,\n'
              '        OP_EW_MAX,\n'
              '        OP_EW_MIN,\n'
              '        OP_REDUCE_ARGMAX,\n'
              '        OP_REDUCE_ARGMIN,\n'
              '        OP_REDUCE_MAX,\n'
              '        OP_REDUCE_MEAN,\n'
              '        OP_REDUCE_MIN,\n'
              '        OP_REDUCE_PROD,\n'
              '        OP_REDUCE_SUM,\n'
              '        OP_PAD,\n'
              '        OP_SHAPE,\n'
              '        OP_SIZE,\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=867,
         lineno=82,
         tokens=103,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        OP_TOPK,\n'
              '        OP_WHERE,\n'
              '        OP_CEIL,\n'
              '        OP_CAST,\n'
              '        OP_EXP,\n'
              '        OP_ROUND,\n'
              '        OP_LOG,\n'
              '        OP_LOGICAL_NOT,\n'
              '        OP_SQRT,\n'
              '        OP_LEAKYRELU,\n'
              '        OP_SLICE,\n'
              '        OP_RESIZE,\n'
              '        OP_PRELU,\n'
              '        OP_FUSE_CONV_BATCHNORM,\n'
              '        OP_FUSE_CONV_BATCHNORM_ALPHA_VAR,\n'
              '        OP_FUSE_CONV_BATCHNORM_BIAS,\n'
              '        OP_BROADCAST_ADD\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=868,
         lineno=99,
         tokens=114,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum PMParameter:\n'
              '        PM_OP_TYPE\n'
              '        PM_NUM_INPUTS\n'
              '        PM_NUM_OUTPUTS\n'
              '        PM_GROUP\n'
              '        PM_KERNEL_H\n'
              '        PM_KERNEL_W\n'
              '        PM_STRIDE_H\n'
              '        PM_STRIDE_W\n'
              '        PM_PAD\n'
              '        PM_ACTI\n'
              '        PM_NUMDIM\n'
              '        PM_AXIS\n'
              '        PM_PERM\n'
              '        PM_OUTSHUFFLE\n'
              '        PM_MERGE_GCONV_COUNT\n'
              '        PM_AXES\n'
              '        PM_EPSILON\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=869,
         lineno=119,
         tokens=80,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum ActiMode:\n'
              '        AC_MODE_NONE\n'
              '        AC_MODE_SIGMOID\n'
              '        AC_MODE_RELU\n'
              '        AC_MODE_TANH\n'
              '\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum PaddingMode:\n'
              '        PD_MODE_SAME\n'
              '        PD_MODE_VALID\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=870,
         lineno=131,
         tokens=134,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum ConstantMode:\n'
              '        CN_MODE_IDENTITY\n'
              '        CN_MODE_ZEROS\n'
              '        CN_MODE_ONES\n'
              '        CN_MODE_ONES_SCALED_L1\n'
              '        CN_MODE_ONES_SCALED_L2\n'
              '        CN_MODE_ONES_SCALED_ALL\n'
              '\n'
              '    cdef cppclass Model:\n'
              '        Model()\n'
              '\n'
              '#    ctypedef struct SplitInfo:\n'
              '#        int num\n'
              '#        int pos[MAX_NUM_SPLITS]\n'
              '#\n'
              '#    ctypedef cppclass OpBase:\n'
              '#        pass\n'
              '\n'
              '    ctypedef struct Op:\n'
              '        size_t guid\n'
              '        pass\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=871,
         lineno=154,
         tokens=147,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    ctypedef struct Edge:\n'
              '        Op srcOp\n'
              '        Op dstOp\n'
              '        int srcIdx\n'
              '        int dstIdx    \n'
              '\n'
              '    ctypedef struct Tensor:\n'
              '        int numDim\n'
              '        int dim[4]\n'
              '        int stride[4] # NOTE: this must be consistent with the '
              'C++ header\n'
              '        pass\n'
              '#        int idx\n'
              '#        Op op\n'
              '#        void* ptr\n'
              '#        SplitInfo split[MAX_DIM]\n'
              '\n'
              '    ctypedef Tensor* TensorHandle\n'
              '\n'
              '    cdef cppclass Graph:\n'
              '        Graph()\n'
              '        TensorHandle batchnorm(const TensorHandle input,\n'
              '                               const TensorHandle scale,\n'
              '                               const TensorHandle bias,\n'
              '                               const TensorHandle mean,\n'
              '                               const TensorHandle var,\n'
              '                               const float epsilon)\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=872,
         lineno=181,
         tokens=146,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        TensorHandle cast(const TensorHandle input, DataType '
              'datatype)\n'
              '        TensorHandle ceil(const TensorHandle input)\n'
              '        TensorHandle concat(int axis, int n,\n'
              '                            const TensorHandle* inputs)\n'
              '        TensorHandle conv2d(const TensorHandle input,\n'
              '                            const TensorHandle weight,\n'
              '                            int strideH, int strideW,\n'
              '                            PaddingMode _padding,\n'
              '                            ActiMode _activation)\n'
              '        TensorHandle dropout(const TensorHandle input)\n'
              '        TensorHandle element(OpType type,\n'
              '                             const TensorHandle x,\n'
              '                             const TensorHandle y)\n'
              '        TensorHandle exp(const TensorHandle input)\n'
              '        TensorHandle log(const TensorHandle input)\n'
              '        TensorHandle logical_not(const TensorHandle input)\n'
              '        TensorHandle pool2d_max(const TensorHandle input,\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=873,
         lineno=198,
         tokens=148,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='                                int kernelH, int kernelW,\n'
              '                                int strideH, int strideW,\n'
              '                                PaddingMode padding,\n'
              '                                ActiMode activation)\n'
              '        TensorHandle pool2d_avg(const TensorHandle input,\n'
              '                                int kernelH, int kernelW,\n'
              '                                int strideH, int strideW,\n'
              '                                PaddingMode padding,\n'
              '                                ActiMode activation)\n'
              '        TensorHandle matmul(const TensorHandle input,\n'
              '                            const TensorHandle weight,\n'
              '                            ActiMode activation)\n'
              '        TensorHandle reduce_argmax(const TensorHandle input,\n'
              '                                   const vector[int] axes,\n'
              '                                   bool keepdims)\n'
              '        TensorHandle reduce_argmin(const TensorHandle input,\n'
              '                                   const vector[int] axes,\n'
              '                                   bool keepdims)\n'
              '        TensorHandle reduce_max(const TensorHandle input,\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=874,
         lineno=217,
         tokens=145,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='                                const vector[int] axes,\n'
              '                                bool keepdims)\n'
              '        TensorHandle reduce_mean(const TensorHandle input,\n'
              '                                 const vector[int] axes,\n'
              '                                 bool keepdims)\n'
              '        TensorHandle reduce_min(const TensorHandle input,\n'
              '                                const vector[int] axes,\n'
              '                                bool keepdims)\n'
              '        TensorHandle reduce_prod(const TensorHandle input,\n'
              '                                 const vector[int] axes,\n'
              '                                 bool keepdims)\n'
              '        TensorHandle reduce_sum(const TensorHandle input,\n'
              '                                const vector[int] axes,\n'
              '                                bool keepdims)\n'
              '        TensorHandle reshape(const TensorHandle input,\n'
              '                             const vector[int] shape)\n'
              '        TensorHandle leakyrelu(const TensorHandle input,\n'
              '                               float alpha, bool _inplace)\n'
              '        TensorHandle relu(const TensorHandle input,\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=875,
         lineno=236,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='                          bool _inplace)\n'
              '        TensorHandle round(const TensorHandle input)\n'
              '        TensorHandle shape(const TensorHandle input, OpType '
              'type)\n'
              '        TensorHandle sigmoid(const TensorHandle input,\n'
              '                            bool _inplace)\n'
              '        TensorHandle slice(const TensorHandle input,\n'
              '                           const vector[int] start,\n'
              '                           const vector[int] end,\n'
              '                           const vector[int] axse,\n'
              '                           const vector[int] steps)\n'
              '        void split(const TensorHandle input, int axis,\n'
              '                   const vector[int] sizes, TensorHandle* '
              'outputs)\n'
              '        void split_equal(const TensorHandle input, int axis,\n'
              '                         int num, TensorHandle* outputs)\n'
              '        TensorHandle sqrt(const TensorHandle input)\n'
              '        TensorHandle squeeze(const TensorHandle input,\n'
              '                              const vector[int] axes)\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=876,
         lineno=253,
         tokens=140,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        TensorHandle tanh(const TensorHandle input,\n'
              '                          bool _inplace)\n'
              '        TensorHandle transpose(const TensorHandle input,\n'
              '                               const vector[int] perm,\n'
              '                               bool shuffle)\n'
              '        TensorHandle unsqueeze(const TensorHandle input,\n'
              '                               const vector[int] axes)\n'
              '        TensorHandle new_input(int ndim, const int* dims)\n'
              '        TensorHandle new_weight(int ndim, const int* dims, '
              'const float* data)\n'
              '        Graph* optimize(float alpha, int budget, bool '
              'print_subst)\n'
              '        int get_operator_list(Op* ops, size_t maxNumOps)\n'
              '        int get_input_edges(Edge* edges, size_t guid)\n'
              '        OpType get_operator_type(size_t guid)\n')

Fragment(document_cs='29a3bca922f3801b378b6487414f9f94e7cc21f7e26ce5d7b379425a8ef0a579',
         id=877,
         lineno=266,
         tokens=110,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        int get_operator_int_attr(size_t guid, PMParameter '
              'attr)\n'
              '        float get_operator_float_attr(size_t guid, PMParameter '
              'attr)\n'
              '        int get_num_outputs(size_t guid)\n'
              '        int get_input_dims(size_t guid, int* dims, int idx)\n'
              '        void get_weight_value(size_t guid, float* data)\n'
              '        int get_split_lens(size_t guid, int* lens)\n'
              '        int get_output_dims(size_t guid, int* dims, int idx)\n'
              '        void print_measurements()\n'
              '        float total_cost()\n'
              '        float run()\n')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=878,
         lineno=1,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso as ts\n'
              'import onnx\n'
              '\n'
              'def resnext_block(graph, input, strides, out_channels, '
              'groups):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=879,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=880,
         lineno=1,
         tokens=66,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/resnext50.py\n'
              '  Functions: resnext_block\n'
              '  Variables and usages: activation alpha budget check_model '
              'checker conv2d dims export_onnx graph groups input kernels '
              'maxpool2d new_graph new_input new_weight onnx onnx_model '
              'optimize out_channels padding range relu save strides taso '
              'weight\n')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=881,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=882,
         lineno=4,
         tokens=80,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='def resnext_block(graph, input, strides, out_channels, '
              'groups):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=883,
         lineno=9,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='.dim(1)//groups,3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(2*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=884,
         lineno=9,
         tokens=86,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='.dim(1)//groups,3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(2*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=885,
         lineno=16,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (strides[0]>1) or (input.dim(1) != out_channels*2):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*2,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=886,
         lineno=16,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='    if (strides[0]>1) or (input.dim(1) != out_channels*2):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*2,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=887,
         lineno=21,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' graph.relu(graph.add(input, t))\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,3,224,224))\n'
              'weight = graph.new_weight(dims=(64,3,7,7))\n'
              't = graph.conv2d(input=input, weight=weight, strides=(2,2),\n'
              '                 padding="SAME", activation="RELU")\n'
              't = graph.maxpool2d(input=t, kernels=(3,3')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=888,
         lineno=28,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='), strides=(2,2), padding="SAME")\n'
              'for i in range(3):\n'
              '    t = resnext_block(graph, t, (1,1), 128, 32)\n'
              'strides = (2,2)\n'
              'for i in range(4):\n'
              '    t = resnext_block(graph, t, strides, 256, 32)\n'
              '    strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(6):\n'
              '    t = resnext_block(graph, t, strides, 512, 32)\n'
              '    st')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=889,
         lineno=38,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(3):\n'
              '    t = resnext_block(graph, t, strides, 1024, 32)\n'
              '    strides = (1,1)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = ts.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "resnext50_xflow.onnx")\n')

Fragment(document_cs='2ac5d81de5fa1cd0b87f632ca39880ed32fb68c7e13b44e32889789c75d7e22e',
         id=890,
         lineno=47,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='resnext50_xflow.onnx')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=891,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d, '
              'make_seperable_conv2d, make_avgpool2d, make_maxpool2d\n'
              '\n'
              'def squeeze(out_channels, input):\n'
              '    return make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name="squeeze")\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=892,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=893,
         lineno=1,
         tokens=136,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/nasnet_a.py\n'
              '  Functions: fit normal_cell reduction_cell squeeze\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args axis concat config current default '
              'discard_iter filter_shape float32 global_jit_level graph '
              'graph_options help input input0 input_dictionary input_tensor '
              'iterations kernels make_activation make_avgpool2d make_conv2d '
              'make_maxpool2d make_seperable_conv2d name numpy '
              'optimizer_options out_channels output_nodes outputs padding '
              'parse_args parser placeholder prev print print_tensorboard '
              'random random_sample range sess shape shared_functions strides '
              'summary tensorflow time times total type value writer\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=894,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=895,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=896,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=897,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=898,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=899,
         lineno=7,
         tokens=57,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='squeeze',
         body='def squeeze(out_channels, input):\n'
              '    return make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name="squeeze")')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=900,
         lineno=9,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def fit(current, input):\n'
              '    if (input.shape[2].value == current.shape[2].value):\n'
              '        return squeeze(current.shape[1].value, input)\n'
              '    else:\n'
              '        return make_conv2d(input_tensor=input, '
              'filter_shape=(3,3,input.shape[1].value,current.shape[1].value), '
              'strides=(1,1,2,2), padding="SAME", actimode="RELU", '
              'name="fit")\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=901,
         lineno=10,
         tokens=92,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fit',
         body='def fit(current, input):\n'
              '    if (input.shape[2].value == current.shape[2].value):\n'
              '        return squeeze(current.shape[1].value, input)\n'
              '    else:\n'
              '        return make_conv2d(input_tensor=input, '
              'filter_shape=(3,3,input.shape[1].value,current.shape[1].value), '
              'strides=(1,1,2,2), padding="SAME", actimode="RELU", name="fit")')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=902,
         lineno=15,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def normal_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.append(make_se')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=903,
         lineno=16,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='def normal_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.append(make_se')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=904,
         lineno=22,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='perable_conv2d(input_tensor=prev, out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, ker')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=905,
         lineno=22,
         tokens=89,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='perable_conv2d(input_tensor=prev, out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, ker')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=906,
         lineno=24,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(ma')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=907,
         lineno=24,
         tokens=108,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='nels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(ma')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=908,
         lineno=28,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ke_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    assert len(ts) == 10\n'
              '    outputs=list()\n'
              '    for i in range(5):\n'
              '        outputs.append(tf.add(ts[2*i], ts[2*i+1]))\n'
              '    return tf.concat(outputs, axis=1, name="concat1")\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=909,
         lineno=28,
         tokens=130,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='ke_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    assert len(ts) == 10\n'
              '    outputs=list()\n'
              '    for i in range(5):\n'
              '        outputs.append(tf.add(ts[2*i], ts[2*i+1]))\n'
              '    return tf.concat(outputs, axis=1, name="concat1")')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=910,
         lineno=35,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def reduction_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=911,
         lineno=36,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='def reduction_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(5,5), stri')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=912,
         lineno=41,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[0], ts[1]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), pa')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=913,
         lineno=42,
         tokens=126,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='des=(1,1,2,2), padding="SAME"))\n'
              '    outputs.append(tf.add(ts[0], ts[1]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[2], ts[3]))\n'
              '    ts.append(make_avgpool2d(i')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=914,
         lineno=44,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[2], ts[3]))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=915,
         lineno=47,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[4], ts[5]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=916,
         lineno=47,
         tokens=128,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='nput_tensor=cur, kernels=(1,1,3,3), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[4], ts[5]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_c')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=917,
         lineno=50,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=outputs[0], '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[6], ts[7]))\n'
              '    ts.append(make_avgpool2d(input_tensor=outputs[0], kernels')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=918,
         lineno=51,
         tokens=123,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='onv2d(input_tensor=outputs[0], out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    outputs.append(tf.add(ts[6], ts[7]))\n'
              '    ts.append(make_avgpool2d(input_tensor=outputs[0], '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(tf.add(ts[8], ts[9]))\n'
              '    return tf.concat(outputs, axis=1, name="concat2")')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=919,
         lineno=53,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(tf.add(ts[8], ts[9]))\n'
              '    return tf.concat(outputs, axis=1, name="concat2")\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlow')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=920,
         lineno=59,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='XLA optimizations", action="store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input0 = tf.placeholder(tf.float32, shape=(1,128,56,56))\n'
              'input = input0\n'
              'out_channels = 128\n'
              'for i in range(3):\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=921,
         lineno=59,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Whether to run with TensorFlowXLA optimizations')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=922,
         lineno=60,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Name of folder to output the tensorboard information')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=923,
         lineno=61,
         tokens=13,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to average for timing (default 5000)')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=924,
         lineno=62,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to not time during warm up (default 1000)')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=925,
         lineno=69,
         tokens=29,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if i > 0:\n'
              '        input = reduction_cell(prev, cur, out_channels)\n'
              '    prev = input\n'
              '    cur = input\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=926,
         lineno=73,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for j in range(10):\n'
              '        t = normal_cell(prev, cur, out_channels)\n'
              '        prev = cur\n'
              '        cur = t\n'
              '    out_channels *= 2\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input0] = '
              'np.random.random_sample((1,128,56,56))\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=927,
         lineno=81,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA ON')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=928,
         lineno=84,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA OFF')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=929,
         lineno=90,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n'
              '    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=930,
         lineno=101,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(document_cs='2bc2676971fe4e468866de5bfd6ef4b52d03dd58c59763db9917770be6835b2d',
         id=931,
         lineno=104,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Average inference time of the last ')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=932,
         lineno=1,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitati')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=933,
         lineno=1,
         tokens=65,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/enlarge_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP enlarge_kernel\n'
              '  Methods: Enlarge::forward Enlarge::map Enlarge::unmap '
              'Model::measure_enlarge_cost\n'
              '  Using: taso\n'
              '  Usages: forward map measure_enlarge_cost unmap\n')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=934,
         lineno=13,
         tokens=59,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void enlarge_kernel(DATATYPE* dst_ptr,\n'
              '                    const DATATYPE* src_ptr,\n'
              '                    int volume,\n'
              '                    int dst_h,\n'
              '                    ')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=935,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=936,
         lineno=20,
         tokens=219,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_kernel',
         body='__global__\n'
              'void enlarge_kernel(DATATYPE* dst_ptr,\n'
              '                    const DATATYPE* src_ptr,\n'
              '                    int volume,\n'
              '                    int dst_h,\n'
              '                    int dst_w,\n'
              '                    int src_h,\n'
              '                    int src_w)\n'
              '{\n'
              '  int off_h = (dst_h - src_h) / 2;\n'
              '  int off_w = (dst_w - src_w) / 2;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int h = (i % (dst_h * dst_w)) / dst_w - off_h;\n'
              '    int w = (i % (dst_h * dst_w)) % dst_w - off_w;\n'
              '    if ((h < 0) || (h >= src_h) || (w < 0) || (w >= src_w))\n'
              '      dst_ptr[i] = 0.0f;\n'
              '    else {\n'
              '      int offset = (i / (dst_h * dst_w)) * (src_h * src_w) + h '
              '* src_w + w;\n'
              '      dst_ptr[i] = src_ptr[offset];\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=937,
         lineno=21,
         tokens=42,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_kernel',
         body='enlarge_kernel(DATATYPE* dst_ptr,\n'
              '                    const DATATYPE* src_ptr,\n'
              '                    int volume,\n'
              '                    int dst_h,\n'
              '                    int dst_w,\n'
              '                    int src_h,\n'
              '                    int src_w)')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=938,
         lineno=25,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='int dst_w,\n'
              '                    int src_h,\n'
              '                    int src_w)\n'
              '{\n'
              '  int off_h = (dst_h - src_h) / 2;\n'
              '  int off_w = (dst_w - src_w) / 2;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int h = (i % (dst_h * dst_w)) / dst_w - off_h;\n'
              '    int w = (i % (dst_h * dst_w)) % dst_w - off_w;\n'
              '    if ((h < 0) || (h >= src_h) || (w < 0) || (w >= src_w))\n'
              '      dst_ptr[i] = 0.0f;\n')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=939,
         lineno=31,
         tokens=139,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int h = (i % (dst_h * dst_w)) / dst_w - off_h;\n'
              '    int w = (i % (dst_h * dst_w)) % dst_w - off_w;\n'
              '    if ((h < 0) || (h >= src_h) || (w < 0) || (w >= src_w))\n'
              '      dst_ptr[i] = 0.0f;\n'
              '    else {\n'
              '      int offset = (i / (dst_h * dst_w)) * (src_h * src_w) + h '
              '* src_w + w;\n'
              '      dst_ptr[i] = src_ptr[offset];\n'
              '    }\n'
              '  }')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=940,
         lineno=31,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=941,
         lineno=37,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    else {\n'
              '      int offset = (i / (dst_h * dst_w)) * (src_h * src_w) + h '
              '* src_w + w;\n'
              '      dst_ptr[i] = src_ptr[offset];\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'void Enlarge::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Enlarge::unmap(void)\n'
              '{\n'
              '  chec')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=942,
         lineno=44,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::map',
         body='void Enlarge::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=943,
         lineno=50,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::unmap',
         body='void Enlarge::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=944,
         lineno=52,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='kCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Enlarge::forward(bool block)\n'
              '{\n'
              '  enlarge_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume(),\n'
              '      outputs[0].dim[2], outputs[0].dim[3], inputs[0].dim[2], '
              'inputs[0].dim[3]);\n')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=945,
         lineno=55,
         tokens=102,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::forward',
         body='void Enlarge::forward(bool block)\n'
              '{\n'
              '  enlarge_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume(),\n'
              '      outputs[0].dim[2], outputs[0].dim[3], inputs[0].dim[2], '
              'inputs[0].dim[3]);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=946,
         lineno=60,
         tokens=41,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_enlarge_cost(Enlarge* enl)\n'
              '{\n'
              '  enl->runtime = 0.0f;\n'
              '}\n')

Fragment(document_cs='2fd5370046960cab696952881cfea0b7337b53a47c4def97f4320eccc4233482',
         id=947,
         lineno=64,
         tokens=27,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_enlarge_cost',
         body='void Model::measure_enlarge_cost(Enlarge* enl)\n'
              '{\n'
              '  enl->runtime = 0.0f;\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=948,
         lineno=1,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS ')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=949,
         lineno=1,
         tokens=81,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/where.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::where Model::get_or_create_where Where::Where '
              'Where::collect_costs Where::get_int_parameter Where::~Where '
              'WhereKey::WhereKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Where WhereKey collect_costs '
              'get_int_parameter get_or_create_where where\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=950,
         lineno=10,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::where(const TensorHandle _cond,\n'
              '                          const TensorHandle _x,\n'
              '                          const TensorHandle _y)\n'
              '{\n'
              '  if (!model->broadcastable(*_cond, *_x)) {\n'
              '    fprintf(stderr, "Error: cond and x could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=951,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=952,
         lineno=19,
         tokens=258,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::where',
         body='TensorHandle Graph::where(const TensorHandle _cond,\n'
              '                          const TensorHandle _x,\n'
              '                          const TensorHandle _y)\n'
              '{\n'
              '  if (!model->broadcastable(*_cond, *_x)) {\n'
              '    fprintf(stderr, "Error: cond and x could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  if (!model->broadcastable(*_cond, *_y)) {\n'
              '    fprintf(stderr, "Error: cond and y could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  if (!model->broadcastable(*_x, *_y)) {\n'
              '    fprintf(stderr, "Error: x and y could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  Op op = model->get_or_create_where(*_cond, *_x, *_y);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_cond->op, op, _cond->idx, 0);\n'
              '  add_edge(_x->op, op, _x->idx, 1);\n'
              '  add_edge(_y->op, op, _y->idx, 2);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=953,
         lineno=28,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!model->broadcastable(*_cond, *_y)) {\n'
              '    fprintf(stderr, "Error: cond and y could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  if (!model->broadcastable(*_x, *_y)) {\n'
              '    fprintf(stderr, "Error: x and y could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  Op op = model->get_or_create_where(*_cond, *_x, *_y);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_cond->op, op, _cond->idx, 0);\n'
              '  add_edg')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=954,
         lineno=41,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e(_x->op, op, _x->idx, 1);\n'
              '  add_edge(_y->op, op, _y->idx, 2);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_where(const Tensor& _cond,\n'
              '                              const Tensor& _x,\n'
              '                              const Tensor& _y)\n'
              '{\n'
              '  if (!broadcastable(_cond, _x)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  if (!broadcastable(_cond, _y)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=955,
         lineno=48,
         tokens=191,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_where',
         body='Op Model::get_or_create_where(const Tensor& _cond,\n'
              '                              const Tensor& _x,\n'
              '                              const Tensor& _y)\n'
              '{\n'
              '  if (!broadcastable(_cond, _x)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  if (!broadcastable(_cond, _y)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  if (!broadcastable(_x, _y)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  WhereKey key(_cond, _x, _y);\n'
              '  Where* whereOp;\n'
              '  if (where.find(key) != where.end()) {\n'
              '    whereOp = where[key];\n'
              '  } else {\n'
              '    whereOp = new Where(this, _cond, _x, _y);\n'
              '    measure_where_cost(whereOp);\n'
              '    where[key] = whereOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = whereOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=956,
         lineno=58,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!broadcastable(_x, _y)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  WhereKey key(_cond, _x, _y);\n'
              '  Where* whereOp;\n'
              '  if (where.find(key) != where.end()) {\n'
              '    whereOp = where[key];\n'
              '  } else {\n'
              '    whereOp = new Where(this, _cond, _x, _y);\n'
              '    measure_where_cost(whereOp);\n'
              '    where[key] = whereOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = whereOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Where::Where(Model* _model, const Tensor& _cond,')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=957,
         lineno=61,
         tokens=10,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_cond, _x, _y)')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=958,
         lineno=70,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=959,
         lineno=76,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '             const Tensor& _x, const Tensor& _y)\n'
              ': OpBase(_cond, _x, _y, _model, OP_WHERE)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  assert(model->broadcastable(_cond, _x));\n'
              '  assert(model->broadcastable(_cond, _y));\n'
              '  assert(model->broadcastable(_x, _y));\n'
              '  int num_dim = max(_cond.numDim, max(_x.numDim, _y.numDim));\n'
              '  int total = 1;\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=960,
         lineno=76,
         tokens=550,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::Where',
         body='Where::Where(Model* _model, const Tensor& _cond,\n'
              '             const Tensor& _x, const Tensor& _y)\n'
              ': OpBase(_cond, _x, _y, _model, OP_WHERE)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  assert(model->broadcastable(_cond, _x));\n'
              '  assert(model->broadcastable(_cond, _y));\n'
              '  assert(model->broadcastable(_x, _y));\n'
              '  int num_dim = max(_cond.numDim, max(_x.numDim, _y.numDim));\n'
              '  int total = 1;\n'
              '  for (int i = 0; i < num_dim; i++) {\n'
              '    int cond_idx = _cond.numDim-1-i;\n'
              '    int x_idx = _x.numDim-1-i;\n'
              '    int y_idx = _y.numDim-1-i;\n'
              '    int out_idx = num_dim-1-i;\n'
              '    int dim_size = 1;\n'
              '    if (cond_idx >= 0)\n'
              '      dim_size = max(dim_size, _cond.dim[cond_idx]);\n'
              '    if (x_idx >= 0)\n'
              '      dim_size = max(dim_size, _x.dim[x_idx]);\n'
              '    if (y_idx >= 0)\n'
              '      dim_size = max(dim_size, _y.dim[y_idx]);\n'
              '    outputs[0].dim[out_idx] = dim_size;\n'
              '    outputs[0].stride[out_idx] = total;\n'
              '    total *= outputs[0].dim[out_idx];\n'
              '    outputs[0].split[out_idx] = SplitInfo::NO_SPLIT;\n'
              '    if (cond_idx >= 0 && _cond.dim[cond_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _cond.split[cond_idx];\n'
              '      if (x_idx >= 0 && _x.dim[x_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_x.split[x_idx]);\n'
              '      if (y_idx >= 0 && _y.dim[y_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_y.split[y_idx]);\n'
              '    } else if (x_idx >= 0 && _x.dim[x_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _x.split[x_idx];\n'
              '      if (y_idx >= 0 && _y.dim[y_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_y.split[y_idx]);\n'
              '    } else if (y_idx >= 0 && _y.dim[y_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _y.split[y_idx];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=961,
         lineno=86,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < num_dim; i++) {\n'
              '    int cond_idx = _cond.numDim-1-i;\n'
              '    int x_idx = _x.numDim-1-i;\n'
              '    int y_idx = _y.numDim-1-i;\n'
              '    int out_idx = num_dim-1-i;\n'
              '    int dim_size = 1;\n'
              '    if (cond_idx >= 0)\n'
              '      dim_size = max(dim_size, _cond.dim[cond_idx]);\n'
              '    if (x_idx >= 0)\n'
              '      dim_size = max(dim_size, _x.dim[x_idx]);\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=962,
         lineno=96,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (y_idx >= 0)\n'
              '      dim_size = max(dim_size, _y.dim[y_idx]);\n'
              '    outputs[0].dim[out_idx] = dim_size;\n'
              '    outputs[0].stride[out_idx] = total;\n'
              '    total *= outputs[0].dim[out_idx];\n'
              '    outputs[0].split[out_idx] = SplitInfo::NO_SPLIT;\n'
              '    if (cond_idx >= 0 && _cond.dim[cond_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _cond.split[cond_idx];\n'
              '      if (x_idx >= 0 && _x.dim[x_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_x.split[x_idx]);\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=963,
         lineno=106,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (y_idx >= 0 && _y.dim[y_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_y.split[y_idx]);\n'
              '    } else if (x_idx >= 0 && _x.dim[x_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _x.split[x_idx];\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=964,
         lineno=110,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (y_idx >= 0 && _y.dim[y_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_y.split[y_idx]);\n'
              '    } else if (y_idx >= 0 && _y.dim[y_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _y.split[y_idx];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Where::~Where(void)\n'
              '{}\n'
              '\n'
              'bool Where::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Where::collect_costs(float& exe_time, float& flops,\n'
              '                          float')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=965,
         lineno=119,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::~Where',
         body='Where::~Where(void)\n{}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=966,
         lineno=122,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::get_int_parameter',
         body='bool Where::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=967,
         lineno=127,
         tokens=99,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::collect_costs',
         body='void Where::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += 4 * outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Where]: cost(%.4lf) '
              'total_cost(%.4lf)\\n", runtime, exe_time);\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=968,
         lineno=128,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += 4 * outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Where]: cost(%.4lf) '
              'total_cost(%.4lf)\\n", runtime, exe_time);\n'
              '}\n'
              '\n'
              'WhereKey::WhereKey(const Tensor& _cond,\n'
              '                   const Tensor& _x,\n'
              '                   const Tensor& _y)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _cond.serialize(keys, idx);\n'
              '  _x.serialize(keys, idx);\n'
              '  _y.serialize(keys, idx);\n')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=969,
         lineno=138,
         tokens=81,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='WhereKey::WhereKey',
         body='WhereKey::WhereKey(const Tensor& _cond,\n'
              '                   const Tensor& _x,\n'
              '                   const Tensor& _y)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _cond.serialize(keys, idx);\n'
              '  _x.serialize(keys, idx);\n'
              '  _y.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='30aad08f082a09d852d1c24b70bf4ebd39db05159664eb19c87cf344fc8c4209',
         id=970,
         lineno=146,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=971,
         lineno=1,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing per')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=972,
         lineno=1,
         tokens=60,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /include/taso/dnnl_helper.h\n'
              '  Macros: CHECK_EQ CHECK_NE STR _DNNL_HELPER_H_ _ERROR_HEAD '
              '_STR\n'
              '  Functions: assign_kernel copy_kernel get_activation_attr '
              'get_memory_desc microsecond_timer\n'
              '  Usages: any f32 now\n')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=973,
         lineno=12,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='missions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _DNNL_HELPER_H_\n'
              '#define _DNNL_HELPER_H_\n'
              '\n'
              '#include <sstream>\n'
              '#include <iostream>\n'
              '#include <algorithm>\n'
              '#include <cfloat>\n'
              '#include <chrono>\n'
              '#include <cstring>\n'
              '#include "taso/ops.h"\n'
              '#include "dnnl.hpp"\n'
              '\n'
              '#define _STR(x) #x\n'
              '#define STR(x) _STR(x)\n'
              '\n'
              '#define _ERROR_HEAD \\\n'
              '  std::cerr << "[" << __FILE__ << ":" << __LINE__ << "] "\n'
              '\n'
              '#define CHECK_EQ(expect, actual) if ((expect) != (actual)) '
              '{            \\\n'
              '  _ERROR_HEAD << "value != " << STR(expect) << '
              'std::endl;               \\\n'
              '  exit(1);        ')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=974,
         lineno=17,
         tokens=8,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_DNNL_HELPER_H_',
         body='#define _DNNL_HELPER_H_')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=975,
         lineno=28,
         tokens=7,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_STR',
         body='#define _STR(x) #x')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=976,
         lineno=29,
         tokens=8,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='STR',
         body='#define STR(x) _STR(x)')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=977,
         lineno=31,
         tokens=24,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_ERROR_HEAD',
         body='#define _ERROR_HEAD \\\n'
              '  std::cerr << "[" << __FILE__ << ":" << __LINE__ << "] "')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=978,
         lineno=34,
         tokens=46,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='CHECK_EQ',
         body='#define CHECK_EQ(expect, actual) if ((expect) != (actual)) '
              '{            \\\n'
              '  _ERROR_HEAD << "value != " << STR(expect) << '
              'std::endl;               \\\n'
              '  '
              'exit(1);                                                              '
              '\\\n'
              '}')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=979,
         lineno=36,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                                                      \\\n'
              '}\n'
              '\n'
              '#define CHECK_NE(notExpect, actual) if ((notExpect) == '
              '(actual)) {      \\\n'
              '  _ERROR_HEAD << "value == " << STR(notExpect) << '
              'std::endl;            \\\n'
              '  '
              'exit(1);                                                              '
              '\\\n'
              '}\n'
              '\n'
              'static constexpr taso::DATATYPE BN_MIN_EPSILON = FLT_EPSILON;\n'
              '\n'
              'inline uint64_t microsecond_timer() {\n'
              '  auto t = std::chrono::steady_clock::now();\n'
              '  return '
              'std::chrono::duration_cast<std::chrono::microseconds>(t.time_since_epoch()).count();\n'
              '}\n'
              '\n'
              'static constexpr dnnl')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=980,
         lineno=39,
         tokens=49,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='CHECK_NE',
         body='#define CHECK_NE(notExpect, actual) if ((notExpect) == '
              '(actual)) {      \\\n'
              '  _ERROR_HEAD << "value == " << STR(notExpect) << '
              'std::endl;            \\\n'
              '  '
              'exit(1);                                                              '
              '\\\n'
              '}')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=981,
         lineno=46,
         tokens=45,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='microsecond_timer',
         body='inline uint64_t microsecond_timer() {\n'
              '  auto t = std::chrono::steady_clock::now();\n'
              '  return '
              'std::chrono::duration_cast<std::chrono::microseconds>(t.time_since_epoch()).count();\n'
              '}')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=982,
         lineno=46,
         tokens=4,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='microsecond_timer',
         body='microsecond_timer()')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=983,
         lineno=51,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::memory::data_type DNNL_DEF_DTYPE = '
              'dnnl::memory::data_type::f32;\n'
              'static constexpr dnnl::memory::format_tag DNNL_FMT_ANY = '
              'dnnl::memory::format_tag::any;\n'
              '\n'
              'void assign_kernel(taso::DATATYPE* ptr, int size, '
              'taso::DATATYPE value);\n'
              'void copy_kernel(taso::DATATYPE* dst, const t')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=984,
         lineno=54,
         tokens=20,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='assign_kernel(taso::DATATYPE* ptr, int size, taso::DATATYPE '
              'value)')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=985,
         lineno=55,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='aso::DATATYPE* src, int size);\n'
              '\n'
              'dnnl::primitive_attr get_activation_attr(taso::ActiMode '
              'activation);\n'
              '\n'
              '// if numDim is given to support broadcast, it must be no less '
              'than the tensor dimension.\n'
              'dnnl::memory::desc get_memory_desc(const taso::Tensor& t, int '
              'numDim = 0);\n'
              '\n'
              '#endif\n')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=986,
         lineno=55,
         tokens=22,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='copy_kernel(taso::DATATYPE* dst, const taso::DATATYPE* src, int '
              'size)')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=987,
         lineno=57,
         tokens=11,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_attr',
         body='get_activation_attr(taso::ActiMode activation)')

Fragment(document_cs='315490860a5c150742c2244d84ce722f5b450ba956af6e4380a9b7f8a967156f',
         id=988,
         lineno=60,
         tokens=18,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='get_memory_desc',
         body='get_memory_desc(const taso::Tensor& t, int numDim = 0)')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=989,
         lineno=1,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the speci')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=990,
         lineno=1,
         tokens=6,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=991,
         lineno=1,
         tokens=78,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /python/setup.py\n'
              '  Functions: config_cython\n'
              '  Variables and usages: Build Cython Extension ImportError '
              'append argv compiler_directives core cythonize description '
              'distutils endswith ext_modules extension extra_compile_args '
              'extra_link_args find_packages get_config_var include_dirs '
              'install_requires language libraries listdir name packages path '
              'print setup setup_args setuptools sys_cflags sysconfig version '
              'zip_safe\n')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=992,
         lineno=3,
         tokens=17,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Licensed under the Apache License, Version 2.0 (the '
              '"License");')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=993,
         lineno=4,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# you may not use this file except in compliance with the '
              'License.')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=994,
         lineno=5,
         tokens=10,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# You may obtain a copy of the License at')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=995,
         lineno=7,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     http://www.apache.org/licenses/LICENSE-2.0')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=996,
         lineno=9,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Unless required by applicable law or agreed to in writing, '
              'software')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=997,
         lineno=10,
         tokens=15,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# distributed under the License is distributed on an "AS IS" '
              'BASIS,')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=998,
         lineno=11,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=999,
         lineno=12,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='fic language governing permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              'import os\n'
              'import sys\n'
              'import sysconfig\n'
              'from setuptools import find_packages\n'
              '\n'
              '# need to use distutils.core for correct placement of cython '
              'dll           \n'
              'if "--inplace" in '
              'sys.argv:                                                \n'
              '    from distutils.core import setup\n'
              '    from distutils.extension import '
              'Extension                              \n'
              'else:\n'
              '    from setuptools import setup\n'
              '    from setuptools.extension import Extension\n'
              '\n'
              'def config_cython():\n'
              '    sys_cflags = sysconfig.get_config_var("CFLAGS")\n'
              '    try:\n'
              '        from Cython.Build import cythonize\n'
              '        ret = []\n'
              '        path = "taso/_cython"\n'
              '        for fn in os.listdir(path):\n')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1000,
         lineno=12,
         tokens=11,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# See the License for the specific language governing '
              'permissions and')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1001,
         lineno=13,
         tokens=6,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# limitations under the License.')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1002,
         lineno=15,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1003,
         lineno=16,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1004,
         lineno=17,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1005,
         lineno=18,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1006,
         lineno=18,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1007,
         lineno=20,
         tokens=15,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# need to use distutils.core for correct placement of cython '
              'dll           ')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1008,
         lineno=22,
         tokens=1,
         depth=3,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1009,
         lineno=22,
         tokens=1,
         depth=3,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1010,
         lineno=23,
         tokens=1,
         depth=3,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1011,
         lineno=23,
         tokens=1,
         depth=3,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1012,
         lineno=25,
         tokens=1,
         depth=4,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1013,
         lineno=25,
         tokens=1,
         depth=4,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1014,
         lineno=26,
         tokens=1,
         depth=4,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1015,
         lineno=26,
         tokens=1,
         depth=4,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1016,
         lineno=28,
         tokens=46,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='config_cython',
         body='def config_cython():\n'
              '    sys_cflags = sysconfig.get_config_var("CFLAGS")\n'
              '    try:\n'
              '        from Cython.Build import cythonize\n'
              '        ret = []\n'
              '        path = "taso/_cython"\n')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1017,
         lineno=31,
         tokens=1,
         depth=5,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1018,
         lineno=31,
         tokens=1,
         depth=5,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1019,
         lineno=34,
         tokens=138,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='config_cython',
         body='        for fn in os.listdir(path):\n'
              '            if not fn.endswith(".pyx"):\n'
              '                continue\n'
              '            ret.append(Extension(\n'
              '                "taso.%s" % fn[:-4],\n'
              '                ["%s/%s" % (path, fn)],\n'
              '                include_dirs=["../include", '
              '"/usr/local/cuda/include"],\n'
              '                libraries=["taso_runtime"],\n'
              '                extra_compile_args=["-DUSE_CUDNN", '
              '"-std=c++11"],\n'
              '                extra_link_args=[],\n'
              '                language="c++"))\n'
              '        return cythonize(ret, '
              'compiler_directives={"language_level" : 3})\n'
              '    except ImportError:\n'
              '        print("WARNING: cython is not installed!!!")\n'
              '        return []')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1020,
         lineno=35,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if not fn.endswith(".pyx"):\n'
              '                continue\n'
              '            ret.append(Extension(\n'
              '                "taso.%s" % fn[:-4],\n'
              '                ["%s/%s" % (path, fn)],\n'
              '                include_dirs=["../include", '
              '"/usr/local/cuda/include"],\n'
              '                libraries=["taso_runtime"],\n'
              '                extra_compile_args=["-DUSE_CUDNN", '
              '"-std=c++11"],\n'
              '                extra_link_args=[],\n'
              '                language="c++"))\n'
              '        return cythonize(ret, '
              'compiler_directives={"language_level" : 3})\n'
              '    except ImportError:\n'
              '        print("WARNING: cython is not installed!!!")\n'
              '        return []\n'
              '\n'
              'setup_args = {}\n'
              '\n'
              '#if not ')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1021,
         lineno=40,
         tokens=5,
         depth=14,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='/usr/local/cuda/include')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1022,
         lineno=47,
         tokens=8,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='WARNING: cython is not installed!!!')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1023,
         lineno=52,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="os.getenv('CONDA_BUILD'):\n"
              '#    curr_path = '
              'os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))\n'
              '#    for i, path in enumerate(LIB_LIST):\n'
              '#    LIB_LIST[i] = os.path.relpath(path, curr_path)\n'
              '#    setup_args = {\n'
              '#        "include_package_data": True,\n'
              '#        "data_files": [(\'taso\', LIB_LIST)]\n'
              '#    }\n'
              '\n'
              's')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1024,
         lineno=52,
         tokens=9,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="#if not os.getenv('CONDA_BUILD'):")

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1025,
         lineno=53,
         tokens=19,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    curr_path = '
              'os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1026,
         lineno=54,
         tokens=12,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    for i, path in enumerate(LIB_LIST):')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1027,
         lineno=55,
         tokens=16,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    LIB_LIST[i] = os.path.relpath(path, curr_path)')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1028,
         lineno=57,
         tokens=9,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        "include_package_data": True,')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1029,
         lineno=58,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        "data_files": [(\'taso\', LIB_LIST)]')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1030,
         lineno=61,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="etup(name='taso',\n"
              '      version="0.1.0",\n'
              '      description="TASO: A Tensor Algebra SuperOptimizer for '
              'Deep Learning",\n'
              '      zip_safe=False,\n'
              '      install_requires=[],\n'
              '      packages=find_packages(),\n'
              "      url='https://github.com/jiazhihao/taso',\n"
              '      ext_modules=config_cython(),\n'
              '      #**setup_args,\n'
              '      )\n'
              '\n')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1031,
         lineno=63,
         tokens=12,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='TASO: A Tensor Algebra SuperOptimizer for Deep Learning')

Fragment(document_cs='3265ffbbb2613ebe221151363cf310a6c37b2db2e9798da0da7d5c2d0ea26b2e',
         id=1032,
         lineno=67,
         tokens=11,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='https://github.com/jiazhihao/taso')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1033,
         lineno=1,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_matmul\n'
              '\n'
              'hidden_size = 512\n'
              'length = 5\n'
              '\n'
              'def combine(x, h):\n'
              '    w1 = make_matmul(x, hidden_size)\n'
              '    w2 = make_matmul(h, hidden_size)\n'
              '    return tf.add(tf.nn.relu(w1), tf.nn.relu(w2))\n'
              '\n'
              'def nas_node(input, x):\n'
              '    t = list()\n')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1034,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1035,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/nasrnn.py\n'
              '  Functions: combine nas_node\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session action add_argument append '
              'argparse args config constant default discard_iter dtype '
              'float32 global_jit_level graph graph_options help hidden_size '
              'input input_dictionary iterations length make_matmul midt '
              'multiply numpy optimizer_options output_nodes parse_args parser '
              'placeholder print print_tensorboard random random_sample range '
              'relu sess shape shared_functions sigmoid state summary tanh '
              'tensorflow time times total type writer\n')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1036,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1037,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1038,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1039,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1040,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1041,
         lineno=10,
         tokens=46,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='combine',
         body='def combine(x, h):\n'
              '    w1 = make_matmul(x, hidden_size)\n'
              '    w2 = make_matmul(h, hidden_size)\n'
              '    return tf.add(tf.nn.relu(w1), tf.nn.relu(w2))')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1042,
         lineno=15,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='def nas_node(input, x):\n'
              '    t = list()\n'
              '    for i in range(8):\n'
              '        t.append(combine(x, input))\n'
              '    midt = list()\n'
              '    midt.append(tf.add(tf.nn.relu(t[0]), tf.nn.sigmoid(t[3])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(t[1]), tf.nn.tanh(t[2])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[4]), '
              'tf.nn.tanh(t[5])))\n'
              '    midt.append(tf.')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1043,
         lineno=17,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(8):\n'
              '        t.append(combine(x, input))\n'
              '    midt = list()\n'
              '    midt.append(tf.add(tf.nn.relu(t[0]), tf.nn.sigmoid(t[3])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(t[1]), tf.nn.tanh(t[2])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[4]), '
              'tf.nn.tanh(t[5])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[6]), '
              'tf.nn.relu(t[7])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(midt[1]), '
              'tf.nn.tanh(midt[2])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1044,
         lineno=23,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='multiply(tf.nn.sigmoid(t[6]), tf.nn.relu(t[7])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(midt[1]), '
              'tf.nn.tanh(midt[2])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[0]), '
              'tf.nn.tanh(midt[3])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[4]), '
              'tf.nn.tanh(midt[5])))\n'
              '    return tf.nn.tanh(midt[6])')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1045,
         lineno=25,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0]), tf.nn.tanh(midt[3])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[4]), '
              'tf.nn.tanh(midt[5])))\n'
              '    return tf.nn.tanh(midt[6])\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for t')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1046,
         lineno=30,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Whether to run with TensorFlowXLA optimizations')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1047,
         lineno=31,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Name of folder to output the tensorboard information')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1048,
         lineno=32,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='iming (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input_dictionary = {}\n'
              'xs = list()\n'
              'output_nodes = []\n'
              'for i in range(length):\n'
              '    xs.append(tf.placeholder(tf.float32, shape=(1, '
              'hidden_size)))\n'
              '    input_dictionary[xs[i]] = np.random.random_sample((1, '
              'hidden_size))\n'
              'state = tf.constant(np.random.r')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1049,
         lineno=32,
         tokens=13,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to average for timing (default 5000)')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1050,
         lineno=33,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to not time during warm up (default 1000)')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1051,
         lineno=42,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='andom_sample((1, hidden_size)), dtype=tf.float32)\n'
              'for i in range(length):\n'
              '    state = nas_node(state, xs[i])\n'
              '    output_nodes.append(state)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1052,
         lineno=49,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA ON')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1053,
         lineno=52,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA OFF')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1054,
         lineno=59,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n'
              '    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(document_cs='3365f4079c2b3aac9321d27832e6b51434a359e541db56c19563a13589fef31c',
         id=1055,
         lineno=68,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Average inference time of the last ')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1056,
         lineno=1,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#incl')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1057,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/unsqueeze_mkl.cc\n'
              '  Methods: Model::measure_unsqueeze_cost Unsqueeze::forward '
              'Unsqueeze::map Unsqueeze::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_unsqueeze_cost unmap\n')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1058,
         lineno=17,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ude "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Unsqueeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Unsqueeze::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear()')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1059,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1060,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1061,
         lineno=21,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::map',
         body='void Unsqueeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1062,
         lineno=28,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::unmap',
         body='void Unsqueeze::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1063,
         lineno=31,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Unsqueeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume());\n'
              '}\n'
              '\n'
              'void Model::measure_unsqueeze_cost(Unsqueeze* unsqz)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1064,
         lineno=37,
         tokens=41,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::forward',
         body='void Unsqueeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume());\n'
              '}')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1065,
         lineno=42,
         tokens=156,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_unsqueeze_cost',
         body='void Model::measure_unsqueeze_cost(Unsqueeze* unsqz)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    copy_kernel(outputPtr, inputPtr, '
              'unsqz->outputs[0].volume());\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  unsqz->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Unsqueeze]: cost(%.4lf)\\n", '
              'unsqz->runtime);\n'
              '}')

Fragment(document_cs='34eb1da6ca4050f252e3eea55e8c35aa751930f08674328ed01315f407b5ce02',
         id=1066,
         lineno=46,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    copy_kernel(outputPtr, inputPtr, '
              'unsqz->outputs[0].volume());\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  unsqz->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Unsqueeze]: cost(%.4lf)\\n", '
              'unsqz->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1067,
         lineno=1,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1068,
         lineno=1,
         tokens=74,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/pool2d_kernel.cu\n'
              '  Methods: Model::measure_pool2d_cost Pool2D::forward '
              'Pool2D::map Pool2D::unmap\n'
              '  Variables: milliseconds mode padH totalPadH\n'
              '  Using: taso\n'
              '  Usages: forward map measure_pool2d_cost unmap\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1069,
         lineno=17,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Pool2D::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC ')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1070,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1071,
         lineno=20,
         tokens=523,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::map',
         body='void Pool2D::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC = inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int padH, padW;\n'
              '  get_padding(&padH, &padW);\n'
              '  // set descriptors\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  cudnnPoolingMode_t mode;\n'
              '  if (type == OP_POOL2D_MAX)\n'
              '    mode = CUDNN_POOLING_MAX;\n'
              '  else if (type == OP_POOL2D_AVG)\n'
              '    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;\n'
              '  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode, '
              'CUDNN_PROPAGATE_NAN,\n'
              '      kernelH, kernelW, padH, padW, strideH, strideW));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetPooling2dForwardOutputDim(poolDesc, \n'
              '      inputTensor, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == inputC);\n'
              '  assert(outputs[0].dim[2] == h);\n'
              '  assert(outputs[0].dim[3] == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1072,
         lineno=27,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='= inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int padH, padW;\n'
              '  get_padding(&padH, &padW);\n'
              '  // set descriptors\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  cudnnPoolingMode_t mode;\n'
              '  if (type == OP_POOL2D_MAX)\n'
              '    mode = CUDNN_POOLING_MAX;\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1073,
         lineno=30,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1074,
         lineno=35,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnPoolingMode_t mode;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1075,
         lineno=38,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  else if (type == OP_POOL2D_AVG)\n'
              '    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;\n'
              '  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode, '
              'CUDNN_PROPAGATE_NAN,\n'
              '      kernelH, kernelW, padH, padW, strideH, strideW));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetPooling2dForwardOu')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1076,
         lineno=43,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputDim(poolDesc, \n'
              '      inputTensor, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == inputC);\n'
              '  assert(outputs[0].dim[2] == h);\n'
              '  assert(outputs[0].dim[3] == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1077,
         lineno=51,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t output')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1078,
         lineno=58,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Size = sizeof(DATATYPE) * n * c * h * w;\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Pool2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyPoolingDescriptor(poolDesc));\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1079,
         lineno=62,
         tokens=97,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::unmap',
         body='void Pool2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyPoolingDescriptor(poolDesc));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1080,
         lineno=67,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Pool2D::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  checkCUDNN(cudnnPoolingForward(model->dnn, poolDesc,\n'
              '      &alpha, inputTensor, inputs[0].data_ptr,\n'
              '      &beta, outputTensor, outputs[0].data_ptr));\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1081,
         lineno=74,
         tokens=151,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::forward',
         body='void Pool2D::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  checkCUDNN(cudnnPoolingForward(model->dnn, poolDesc,\n'
              '      &alpha, inputTensor, inputs[0].data_ptr,\n'
              '      &beta, outputTensor, outputs[0].data_ptr));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n'
              '  }\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1082,
         lineno=81,
         tokens=59,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n'
              '  }\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1083,
         lineno=86,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_pool2d_cost(Pool2D* pool)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = pool->inputs[0].dim[0];\n'
              '  int inputC = pool->inputs[0].dim[1];\n'
              '  int inputH = pool->inputs[0].dim[2];\n'
              '  int inpu')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1084,
         lineno=90,
         tokens=1039,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_pool2d_cost',
         body='void Model::measure_pool2d_cost(Pool2D* pool)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = pool->inputs[0].dim[0];\n'
              '  int inputC = pool->inputs[0].dim[1];\n'
              '  int inputH = pool->inputs[0].dim[2];\n'
              '  int inputW = pool->inputs[0].dim[3];\n'
              '  int outputH = pool->outputs[0].dim[2];\n'
              '  int outputW = pool->outputs[0].dim[3];\n'
              '  int padH, padW;\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (pool->padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n'
              '      if (inputH % pool->strideH == 0)\n'
              '        totalPadH = max(pool->kernelH - pool->strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(pool->kernelH - (inputH % '
              'pool->strideH), 0);\n'
              '      if (inputW % pool->strideW == 0)\n'
              '        totalPadW = max(pool->kernelW - pool->strideW, 0);\n'
              '      else\n'
              '        totalPadW = max(pool->kernelW - (inputW % '
              'pool->strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      padH = (totalPadH + 1) / 2;\n'
              '      padW = (totalPadW + 1)/ 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      padH = 0;\n'
              '      padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  cudnnPoolingMode_t mode;\n'
              '  if (pool->type == OP_POOL2D_MAX)\n'
              '    mode = CUDNN_POOLING_MAX;\n'
              '  else if (pool->type == OP_POOL2D_AVG)\n'
              '    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;\n'
              '  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode,\n'
              '      CUDNN_PROPAGATE_NAN, pool->kernelH, pool->kernelW, padH, '
              'padW,\n'
              '      pool->strideH, pool->strideW));\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetPooling2dForwardOutputDim(poolDesc,\n'
              '      inputTensor, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == inputC);\n'
              '  assert(outputH == h);\n'
              '  assert(outputW == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN * inputC * '
              'inputH * inputW;\n'
              '  size_t outputSize = sizeof(DATATYPE) * inputN * inputC * '
              'outputH * outputW;\n'
              '  assert(inputSize < MAX_TENSOR_SIZE);\n'
              '  assert(outputSize < MAX_TENSOR_SIZE);\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n'
              '    }\n'
              '    checkCUDNN(cudnnPoolingForward(dnn, poolDesc,\n'
              '        &alpha, inputTensor, inputPtr,\n'
              '        &beta, outputTensor, outputPtr));\n'
              '    if (pool->activation != AC_MODE_NONE) {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, outputTensor, outputPtr,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  pool->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d %d) '
              'p(%d %d) cost(%.4lf)\\n",\n'
              '           inputN, inputC, inputH, inputW, pool->kernelH, '
              'pool->kernelW,\n'
              '           pool->strideH, pool->strideW, padH, padW, '
              'pool->runtime);\n'
              '}')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1085,
         lineno=97,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tW = pool->inputs[0].dim[3];\n'
              '  int outputH = pool->outputs[0].dim[2];\n'
              '  int outputW = pool->outputs[0].dim[3];\n'
              '  int padH, padW;\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (pool->padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1086,
         lineno=100,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1087,
         lineno=104,
         tokens=9,
         depth=5,
         parent_id=None,
         category='variable',
         summary=False,
         name='totalPadH',
         body='int totalPadH, totalPadW;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1088,
         lineno=105,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (inputH % pool->strideH == 0)\n'
              '        totalPadH = max(pool->kernelH - pool->strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(pool->kernelH - (inputH % '
              'pool->strideH), 0);\n'
              '      if (inputW % pool->strideW == 0)\n'
              '        totalPadW = max(pool->kernelW - pool->strideW, 0);\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1089,
         lineno=111,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      else\n'
              '        totalPadW = max(pool->kernelW - (inputW % '
              'pool->strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      padH = (totalPadH + 1) / 2;\n'
              '      padW = (totalPadW + 1)/ 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      ')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1090,
         lineno=118,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='padH = 0;\n'
              '      padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  cudnnPoolingMode_t mode;\n'
              '  if (pool->type == OP_POOL2D_MAX)\n'
              '    mode = CUDNN_POOLING_MAX;\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1091,
         lineno=126,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnPoolingMode_t mode;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1092,
         lineno=129,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  else if (pool->type == OP_POOL2D_AVG)\n'
              '    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;\n'
              '  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode,\n'
              '      CUDNN_PROPAGATE_NAN, pool->kernelH, pool->kernelW, padH, '
              'padW,\n'
              '      pool->stride')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1093,
         lineno=133,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='H, pool->strideW));\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetPooling2dForwardOutputDim(poolDesc,\n'
              '      inputTensor, &n, &c, &h, ')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1094,
         lineno=138,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='&w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == inputC);\n'
              '  assert(outputH == h);\n'
              '  assert(outputW == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN * inputC * '
              'inputH * inputW;\n'
              '  size_t outputSize = sizeof(DATATYPE) * inputN * inputC * '
              'outputH * outputW;\n'
              '  assert(inputSize < MAX_TENSOR_SIZE);\n'
              '  assert(outputSize < MAX_TENSOR_SIZE);\n'
              '  checkCUDA(cudaDeviceSynchronize());\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1095,
         lineno=150,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n'
              '    }\n'
              '    checkCUDNN(cudnnPoolingForward(dnn, poolDesc,\n'
              '        &alpha, inputTensor, inputPtr,\n'
              '        &beta, outputTensor, outputPtr));\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1096,
         lineno=157,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (pool->activation != AC_MODE_NONE) {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, outputTensor, outputPtr,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  pool->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1097,
         lineno=165,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='3a71578ac6599d5986efe0731ccf196693ed6532e024cbd52eed54a22c2d2142',
         id=1098,
         lineno=168,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d %d) '
              'p(%d %d) cost(%.4lf)\\n",\n'
              '           inputN, inputC, inputH, inputW, pool->kernelH, '
              'pool->kernelW,\n'
              '           pool->strideH, pool->strideW, padH, padW, '
              'pool->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1099,
         lineno=1,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either ex')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1100,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/reduce_kernel.cu\n'
              '  Methods: Model::measure_reduce_cost Reduce::forward '
              'Reduce::map Reduce::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_reduce_cost unmap\n')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1101,
         lineno=11,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='press or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Reduce::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void Reduce::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Reduce::forward(bool block)\n'
              '{\n')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1102,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1103,
         lineno=20,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::map',
         body='void Reduce::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1104,
         lineno=26,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::unmap',
         body='void Reduce::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1105,
         lineno=31,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::forward',
         body='void Reduce::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1106,
         lineno=33,
         tokens=46,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_reduce_cost(Reduce* reduce)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  reduce->runtime = 0;\n'
              '}\n')

Fragment(document_cs='3cc3fee779f168fa93b88d7e71ffdf5a6a9a1e635fde1c4d578beb60e552070f',
         id=1107,
         lineno=37,
         tokens=32,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_reduce_cost',
         body='void Model::measure_reduce_cost(Reduce* reduce)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  reduce->runtime = 0;\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1108,
         lineno=1,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::grou')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1109,
         lineno=1,
         tokens=135,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/conv2d.cc\n'
              '  Functions: key\n'
              '  Methods: Conv2D::Conv2D Conv2D::collect_costs '
              'Conv2D::get_int_parameter Conv2D::get_padding Conv2D::~Conv2D '
              'Conv2DKey::Conv2DKey Graph::conv2d Graph::group_conv2d '
              'Model::get_or_create_conv2d\n'
              '  Variables: outputH ret totalPadH\n'
              '  Using: taso\n'
              '  Usages: Conv2D Conv2DKey INVALID_OP NO_SPLIT collect_costs '
              'conv2d get_int_parameter get_or_create_conv2d get_padding '
              'group_conv2d rand\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1110,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1111,
         lineno=19,
         tokens=49,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p_conv2d(int groups,\n'
              '                                 const TensorHandle _input,\n'
              '                                 int _outputC,\n'
              '                                 int _kernelH, int _kernelW,\n'
              '                                 int _strideH, int _strideW,\n'
              '                                 PaddingMode _padding,\n'
              '                         ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1112,
         lineno=19,
         tokens=389,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::group_conv2d',
         body='TensorHandle Graph::group_conv2d(int groups,\n'
              '                                 const TensorHandle _input,\n'
              '                                 int _outputC,\n'
              '                                 int _kernelH, int _kernelW,\n'
              '                                 int _strideH, int _strideW,\n'
              '                                 PaddingMode _padding,\n'
              '                                 ActiMode _activation)\n'
              '{\n'
              '  assert(_input->dim[1] % groups == 0);\n'
              '  assert(_outputC % groups == 0);\n'
              '  int dims[4] = {_outputC, _input->dim[1] / groups, _kernelH, '
              '_kernelW};\n'
              '  int total = dims[0] * dims[1] * dims[2] * dims[3];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n'
              '  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(4, dims, data);\n'
              '  free(data);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _outputC;\n'
              '  weight.dim[1] = _input.dim[1] / groups;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  return conv2d(_input, weight, _strideH, _strideW, _padding, '
              '_activation);\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1113,
         lineno=25,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        ActiMode _activation)\n'
              '{\n'
              '  assert(_input->dim[1] % groups == 0);\n'
              '  assert(_outputC % groups == 0);\n'
              '  int dims[4] = {_outputC, _input->dim[1] / groups, _kernelH, '
              '_kernelW};\n'
              '  int total = dims[0] * dims[1] * dims[2] * dims[3];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1114,
         lineno=33,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(4, dims, data);\n'
              '  free(data);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _outputC;\n'
              '  weight.dim[1] = _input.dim[1] / groups;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              ' ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1115,
         lineno=43,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  return ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1116,
         lineno=52,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='conv2d(_input, weight, _strideH, _strideW, _padding, '
              '_activation);\n'
              '}\n'
              '\n'
              '\n'
              'TensorHandle Graph::conv2d(const TensorHandle _input,\n'
              '                           int _outputC,\n'
              '                           int _kernelH, int _kernelW,\n'
              '                           int _strideH, int _strideW,\n'
              '                      ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1117,
         lineno=56,
         tokens=354,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::conv2d',
         body='TensorHandle Graph::conv2d(const TensorHandle _input,\n'
              '                           int _outputC,\n'
              '                           int _kernelH, int _kernelW,\n'
              '                           int _strideH, int _strideW,\n'
              '                           PaddingMode _padding,\n'
              '                           ActiMode _activation)\n'
              '{\n'
              '  const int dims[4] = {_outputC, _input->dim[1], _kernelH, '
              '_kernelW};\n'
              '  int total = dims[0] * dims[1] * dims[2] * dims[3];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n'
              '  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(4, dims, data);\n'
              '  free(data);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _outputC;\n'
              '  weight.dim[1] = _input.dim[1];\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  return conv2d(_input, weight, _strideH, _strideW,\n'
              '                _padding, _activation);\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1118,
         lineno=60,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='     PaddingMode _padding,\n'
              '                           ActiMode _activation)\n'
              '{\n'
              '  const int dims[4] = {_outputC, _input->dim[1], _kernelH, '
              '_kernelW};\n'
              '  int total = dims[0] * dims[1] * dims[2] * dims[3];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1119,
         lineno=67,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(4, dims, data);\n'
              '  free(data);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _outputC;\n'
              '  weight.dim[1] = _input.dim[1];\n'
              '  weight.dim[2] ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1120,
         lineno=75,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='= _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1121,
         lineno=81,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  return conv2d(_input, weight, _strideH, _strideW,\n'
              '                _padding, _activation);\n'
              '}\n'
              '\n'
              '/*\n'
              'Tensor Graph::conv2d(Tensor _input, Tensor _weight,\n'
              '                     int _strideH, int _strideW,\n'
              '                     PaddingMode _padding,\n'
              '                     ActiMode _activation)\n'
              '{\n'
              '  Op op = model->get_or_create_conv2d(_input, _weight, '
              '_strideH, _strideW,\n'
              '                                      _padding, _act')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1122,
         lineno=97,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ivation);\n'
              '  add_edge(_input.op, op, _input.idx, 0);\n'
              '  add_edge(_weight.op, op, _weight.idx, 1);\n'
              '  Tensor t = op.ptr->outputs[0];\n'
              '  t.op = op;\n'
              '  return t;\n'
              '}\n'
              '*/\n'
              '\n'
              'TensorHandle Graph::conv2d(const TensorHandle _input,\n'
              '                           const TensorHandle _weight,\n'
              '                           int _strideH, int _strideW,\n'
              '                           PaddingMode _padding,\n'
              '                           ActiMode _activation)\n'
              '{\n'
              '  Op op = model->get_or_create_conv2d(*_input, *_weight, '
              '_strideH, _strid')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1123,
         lineno=106,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::conv2d',
         body='TensorHandle Graph::conv2d(const TensorHandle _input,\n'
              '                           const TensorHandle _weight,\n'
              '                           int _strideH, int _strideW,\n'
              '                           PaddingMode _padding,\n'
              '                           ActiMode _activation)\n'
              '{\n'
              '  Op op = model->get_or_create_conv2d(*_input, *_weight, '
              '_strideH, _strideW,\n'
              '                                      _padding, _activation);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_weight->op, op, _weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1124,
         lineno=112,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eW,\n'
              '                                      _padding, _activation);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_weight->op, op, _weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_conv2d(Tensor _input, Tensor _weight,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1125,
         lineno=122,
         tokens=247,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_conv2d',
         body='Op Model::get_or_create_conv2d(Tensor _input, Tensor _weight,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n'
              '  if (_input.dim[1] % _weight.dim[1] != 0)\n'
              '    return Op::INVALID_OP;\n'
              '  // key is (inputN, inputC, inputH, inputW, outputC, kernelH, '
              'kernelW,\n'
              '  //         strideH, strideW, padding, activation)\n'
              '  Conv2DKey key(_input, _weight, _strideH, _strideW, _padding, '
              '_activation);\n'
              '  Conv2D* convOp;\n'
              '  if (conv2d.find(key) != conv2d.end()) {\n'
              '    convOp = conv2d[key];\n'
              '  } else {\n'
              '    convOp = new Conv2D(this, _input, _weight, _strideH, '
              '_strideW,\n'
              '                        _padding, _activation);\n'
              '    measure_conv2d_cost(convOp);\n'
              '    conv2d[key] = convOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = convOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1126,
         lineno=127,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (_input.dim[1] % _weight.dim[1] != 0)\n'
              '    return Op::INVALID_OP;\n'
              '  // key is (inputN, inputC, inputH, inputW, outputC, kernelH, '
              'kernelW,\n'
              '  //         strideH, strideW, padding, activation)\n'
              '  Conv2DKey key(_input, _weight, _strideH, _strideW, _padding, '
              '_activation);\n'
              '  Conv2D* convOp;\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1127,
         lineno=131,
         tokens=21,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _weight, _strideH, _strideW, _padding, _activation)')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1128,
         lineno=133,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (conv2d.find(key) != conv2d.end()) {\n'
              '    convOp = conv2d[key];\n'
              '  } else {\n'
              '    convOp = new Conv2D(this, _input, _weight, _strideH, '
              '_strideW,\n'
              '                        _padding, _activation);\n'
              '    measure_conv2d_cost(convOp);\n'
              '    conv2d[key] = convOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = convOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Conv2D::Conv2D(Model* _model, Tensor _input, Tensor _weight,\n'
              '               int _strideH, int _strideW,\n'
              '       ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1129,
         lineno=141,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1130,
         lineno=147,
         tokens=747,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::Conv2D',
         body='Conv2D::Conv2D(Model* _model, Tensor _input, Tensor _weight,\n'
              '               int _strideH, int _strideW,\n'
              '               PaddingMode _padding,\n'
              '               ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, OP_CONV2D),\n'
              '  strideH(_strideH), strideW(_strideW),\n'
              '  padding(_padding), activation(_activation)\n'
              '{\n'
              '  assert(_input.numDim == 4);\n'
              '  assert(_weight.numDim == 4);\n'
              '  //assert(_input.dim[1] == _weight.dim[1]);\n'
              '  assert(_input.dim[1] % _weight.dim[1] == 0);\n'
              '  int groups = _input.dim[1] / _weight.dim[1];\n'
              '  assert(_weight.dim[0] % groups == 0);\n'
              '  //printf("k(%d %d) pad(%d %d) stride(%d %d)\\n",\n'
              '  //       kernelH, kernelW, padH, padW, strideH, strideW);\n'
              '  int inputH = _input.dim[2];\n'
              '  int inputW = _input.dim[3];\n'
              '  int kernelH = _weight.dim[2];\n'
              '  int kernelW = _weight.dim[3];\n'
              '  int outputH, outputW;\n'
              '  switch (padding)\n'
              '  {\n'
              '    case PD_MODE_SAME:\n'
              '      outputH = (inputH + strideH - 1) / strideH;\n'
              '      outputW = (inputW + strideW - 1) / strideW;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      outputH = (inputH - kernelH) / strideH + 1;\n'
              '      outputW = (inputW - kernelW) / strideW + 1;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  //int outputH = 1 + (inputH + 2 * padH - kernelH) / strideH;\n'
              '  //int outputW = 1 + (inputW + 2 * padW - kernelW) / strideW;\n'
              '  // Set dims and strides\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 4;\n'
              '  outputs[0].dim[0] = _input.dim[0];\n'
              '  outputs[0].dim[1] = _weight.dim[0];\n'
              '  outputs[0].dim[2] = outputH;\n'
              '  outputs[0].dim[3] = outputW;\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _input.split[0];\n'
              '  outputs[0].split[1] = _weight.split[0];\n'
              '  outputs[0].split[2] = _input.split[2];\n'
              '  outputs[0].split[3] = _input.split[3];\n'
              '  // Assume we cannot split the H and W dimension,\n'
              '  // otherwise we need to extend Conv2DKey to include their '
              'SplitInfo\n'
              '  assert(outputs[0].split[2] == SplitInfo::NO_SPLIT);\n'
              '  assert(outputs[0].split[3] == SplitInfo::NO_SPLIT);\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1131,
         lineno=149,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        PaddingMode _padding,\n'
              '               ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, OP_CONV2D),\n'
              '  strideH(_strideH), strideW(_strideW),\n'
              '  padding(_padding), activation(_activation)\n'
              '{\n'
              '  assert(_input.numDim == 4);\n'
              '  assert(_weight.numDim == 4);\n'
              '  //assert(_input.dim[1] == _weight.dim[1]);\n'
              '  assert(_input.dim[1] % _weight.dim[1] == 0);\n'
              '  int groups = _input.dim[1] / _weight.dim[1];\n'
              '  assert(_weight.dim[0] % groups == 0);\n'
              '  //printf')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1132,
         lineno=161,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='("k(%d %d) pad(%d %d) stride(%d %d)\\n",\n'
              '  //       kernelH, kernelW, padH, padW, strideH, strideW);\n'
              '  int inputH = _input.dim[2];\n'
              '  int inputW = _input.dim[3];\n'
              '  int kernelH = _weight.dim[2];\n'
              '  int kernelW = _weight.dim[3];\n'
              ' ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1133,
         lineno=167,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' int outputH, outputW;\n'
              '  switch (padding)\n'
              '  {\n'
              '    case PD_MODE_SAME:\n'
              '      outputH = (inputH + strideH - 1) / strideH;\n'
              '      outputW = (inputW + strideW - 1) / strideW;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      outputH = (in')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1134,
         lineno=167,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputH',
         body='int outputH, outputW;')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1135,
         lineno=175,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='putH - kernelH) / strideH + 1;\n'
              '      outputW = (inputW - kernelW) / strideW + 1;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  //int outputH = 1 + (inputH + 2 * padH - kernelH) / strideH;\n'
              '  //int outputW = 1 + (inputW ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1136,
         lineno=182,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='+ 2 * padW - kernelW) / strideW;\n'
              '  // Set dims and strides\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 4;\n'
              '  outputs[0].dim[0] = _input.dim[0];\n'
              '  outputs[0].dim[1] = _weight.dim[0];\n'
              '  outputs[0].dim[2] = outputH;\n'
              '  outputs[0].dim[')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1137,
         lineno=189,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3] = outputW;\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1138,
         lineno=193,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='outputs[0].dim[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _input.split[0];\n'
              '  outputs[0].split[1] = _weight.split[0];\n'
              '  outputs[0].split[2] = _input.split[2];\n'
              '  outputs[0].split[3] = _input.split[3];\n'
              '  // Assume we cannot ')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1139,
         lineno=199,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='split the H and W dimension,\n'
              '  // otherwise we need to extend Conv2DKey to include their '
              'SplitInfo\n'
              '  assert(outputs[0].split[2] == SplitInfo::NO_SPLIT);\n'
              '  assert(outputs[0].split[3] == SplitInfo::NO_SPLIT);\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Conv2D::~Conv2D(void)\n'
              '{}\n'
              '\n'
              'bool Conv2D::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_GROUP:\n'
              '    {\n'
              '      int inputC = inputs[0].dim[1];\n'
              '      int weightC = inputs[1].dim[1];\n'
              '      asser')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1140,
         lineno=206,
         tokens=10,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::~Conv2D',
         body='Conv2D::~Conv2D(void)\n{}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1141,
         lineno=209,
         tokens=216,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::get_int_parameter',
         body='bool Conv2D::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_GROUP:\n'
              '    {\n'
              '      int inputC = inputs[0].dim[1];\n'
              '      int weightC = inputs[1].dim[1];\n'
              '      assert(inputC % weightC == 0);\n'
              '      *value = inputC / weightC;\n'
              '      return true;\n'
              '    }\n'
              '    case PM_KERNEL_H:\n'
              '      *value = inputs[1].dim[2];\n'
              '      return true;\n'
              '    case PM_KERNEL_W:\n'
              '      *value = inputs[1].dim[3];\n'
              '      return true;\n'
              '    case PM_STRIDE_H:\n'
              '      *value = strideH;\n'
              '      return true;\n'
              '    case PM_STRIDE_W:\n'
              '      *value = strideW;\n'
              '      return true;\n'
              '    case PM_PAD:\n'
              '      *value = padding;\n'
              '      return true;\n'
              '    case PM_ACTI:\n'
              '      *value = (int) activation;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1142,
         lineno=216,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t(inputC % weightC == 0);\n'
              '      *value = inputC / weightC;\n'
              '      return true;\n'
              '    }\n'
              '    case PM_KERNEL_H:\n'
              '      *value = inputs[1].dim[2];\n'
              '      return true;\n'
              '    case PM_KERNEL_W:\n'
              '      *value = inputs[1].dim[3];\n'
              '      return true;\n'
              '    case PM_STRIDE_H:\n'
              '      *value = strideH;\n'
              '      return true;\n'
              '    case PM_STRIDE_W:\n'
              '      *value = strideW;\n'
              '      return true;\n'
              '    case PM_PAD:\n'
              '      *value = padding;\n'
              '      return true;\n'
              '    case PM_ACTI:\n'
              '      *val')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1143,
         lineno=236,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ue = (int) activation;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Conv2D::get_padding(int* padH, int* padW) {\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int kernelH = inputs[1].dim[2];\n'
              '  int kernelW = inputs[1].dim[3];\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1144,
         lineno=243,
         tokens=292,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::get_padding',
         body='void Conv2D::get_padding(int* padH, int* padW) {\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int kernelH = inputs[1].dim[2];\n'
              '  int kernelW = inputs[1].dim[3];\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n'
              '      if (inputH % strideH == 0)\n'
              '        totalPadH = max(kernelH - strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % strideH), 0);\n'
              '      if (inputW % strideW == 0)\n'
              '        totalPadW = max(kernelW - strideW, 0);\n'
              '      else\n'
              '        totalPadW = max(kernelW - (inputW % strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      *padH = (totalPadH + 1) / 2;\n'
              '      *padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      *padH = 0;\n'
              '      *padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1145,
         lineno=251,
         tokens=9,
         depth=5,
         parent_id=None,
         category='variable',
         summary=False,
         name='totalPadH',
         body='int totalPadH, totalPadW;')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1146,
         lineno=252,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (inputH % strideH == 0)\n'
              '        totalPadH = max(kernelH - strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % strideH), 0);\n'
              '      if (inputW % strideW == 0)\n'
              '        totalPadW = max(kernelW - strideW, 0);\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1147,
         lineno=258,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      else\n'
              '        totalPadW = max(kernelW - (inputW % strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      *padH = (totalPadH + 1) / 2;\n'
              '      *padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      *padH = 0;\n'
              '      *padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Conv2D::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_ac')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1148,
         lineno=273,
         tokens=327,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::collect_costs',
         body='void Conv2D::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  size_t outputSize = outputs[0].volume() * sizeof(DATATYPE);\n'
              '  size_t inputSize = inputs[0].volume() * sizeof(DATATYPE);\n'
              '  size_t weightSize = inputs[1].volume() * sizeof(DATATYPE);\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  int kernelH = inputs[1].dim[2];\n'
              '  int kernelW = inputs[1].dim[3];\n'
              '  int inputC = inputs[1].dim[1];\n'
              '  flops += outputSize * (kernelH * kernelW * inputC + 1);\n'
              '  if (activation != AC_MODE_NONE)\n'
              '    flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize + weightSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          inputs[1].dim[0], inputs[1].dim[1], inputs[1].dim[2], '
              'inputs[1].dim[3],\n'
              '          strideH, strideW, padding, runtime, exe_time);\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1149,
         lineno=274,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='c, int& num_kernels)\n'
              '{\n'
              '  size_t outputSize = outputs[0].volume() * sizeof(DATATYPE);\n'
              '  size_t inputSize = inputs[0].volume() * sizeof(DATATYPE);\n'
              '  size_t weightSize = inputs[1].volume() * sizeof(DATATYPE);\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  int kernelH = inputs[1].dim[2];\n'
              '  int kernelW = inputs[1].dim[3];\n'
              '  int inputC = inputs[1].dim[1];\n'
              '  flops += outputSize * (kernelH * kernelW * inputC + 1);\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1150,
         lineno=285,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE)\n'
              '    flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize + weightSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1],')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1151,
         lineno=290,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' inputs[0].dim[2], inputs[0].dim[3],\n'
              '          inputs[1].dim[0], inputs[1].dim[1], inputs[1].dim[2], '
              'inputs[1].dim[3],\n'
              '          strideH, strideW, padding, runtime, exe_time);\n'
              '}\n'
              '\n'
              '// keys are (inputN, inputC, inputH, inputW, outputC, kernelH, '
              'kernelW,\n'
              '//           strideH, strideW, padd')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1152,
         lineno=296,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ing, acitvation,\n'
              '//           input.split[0], weight.split[0])\n'
              'Conv2DKey::Conv2DKey(Tensor _input, Tensor _weight,\n'
              '                     int _strideH, int _strideW,\n'
              '                     PaddingMode _padding,\n'
              '                     ActiMode _activation)\n'
              '{\n'
              '  assert(_input.dim[1] % _weight.')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1153,
         lineno=298,
         tokens=174,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2DKey::Conv2DKey',
         body='Conv2DKey::Conv2DKey(Tensor _input, Tensor _weight,\n'
              '                     int _strideH, int _strideW,\n'
              '                     PaddingMode _padding,\n'
              '                     ActiMode _activation)\n'
              '{\n'
              '  assert(_input.dim[1] % _weight.dim[1] == 0);\n'
              '  int groups = _input.dim[1] / _weight.dim[1];\n'
              '  assert(_weight.dim[0] % groups == 0);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _strideH;\n'
              '  keys[idx++] = _strideW;\n'
              '  keys[idx++] = _padding;\n'
              '  keys[idx++] = _activation;\n'
              '  _input.serialize(keys, idx);\n'
              '  _weight.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1154,
         lineno=303,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dim[1] == 0);\n'
              '  int groups = _input.dim[1] / _weight.dim[1];\n'
              '  assert(_weight.dim[0] % groups == 0);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _strideH;\n'
              '  keys[idx++] = _strideW;\n'
              '  keys[idx++] = _padding;\n'
              '  keys[idx++] = _activation;\n'
              '  _input.serialize(keys, idx);\n'
              '  _weight.serialize(keys, idx);\n')

Fragment(document_cs='3debbc49ec751f53ddb93ccc28e4fcc383456387d7377fd25626bf70d53bbd6a',
         id=1155,
         lineno=313,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n'
              '\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1156,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distr')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1157,
         lineno=1,
         tokens=81,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/pad.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::pad Model::get_or_create_pad Pad::Pad '
              'Pad::collect_costs Pad::get_int_parameter Pad::~Pad '
              'PadKey::PadKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Pad PadKey collect_costs '
              'get_int_parameter get_or_create_pad pad\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1158,
         lineno=10,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ibuted on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::pad(const TensorHandle _input,\n'
              '                        const std::vector<int>& _pad_before,\n'
              '     ')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1159,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1160,
         lineno=19,
         tokens=153,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::pad',
         body='TensorHandle Graph::pad(const TensorHandle _input,\n'
              '                        const std::vector<int>& _pad_before,\n'
              '                        const std::vector<int>& _pad_after,\n'
              '                        float _pad_value)\n'
              '{\n'
              '  assert(_pad_before.size() == (size_t)(_input->numDim));\n'
              '  assert(_pad_after.size() == (size_t)(_input->numDim));\n'
              '  Op op = model->get_or_create_pad(*_input, _pad_before, '
              '_pad_after, _pad_value);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1161,
         lineno=21,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                   const std::vector<int>& _pad_after,\n'
              '                        float _pad_value)\n'
              '{\n'
              '  assert(_pad_before.size() == (size_t)(_input->numDim));\n'
              '  assert(_pad_after.size() == (size_t)(_input->numDim));\n'
              '  Op op = model->get_or_create_pad(*_input, _pad_before, '
              '_pad_after, _pad_value);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  Te')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1162,
         lineno=29,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_pad(const Tensor& _input,\n'
              '                            const std::vector<int>& '
              '_pad_before,\n'
              '                            const std::vector<int>& '
              '_pad_after,\n'
              '                            float _pad_value)\n'
              '{\n'
              '  PadKey key(_input, _pad_before, _pad_after, _pad_value);\n'
              '  Pad* padOp;\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1163,
         lineno=34,
         tokens=154,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_pad',
         body='Op Model::get_or_create_pad(const Tensor& _input,\n'
              '                            const std::vector<int>& '
              '_pad_before,\n'
              '                            const std::vector<int>& '
              '_pad_after,\n'
              '                            float _pad_value)\n'
              '{\n'
              '  PadKey key(_input, _pad_before, _pad_after, _pad_value);\n'
              '  Pad* padOp;\n'
              '  if (pad.find(key) != pad.end()) {\n'
              '    padOp = pad[key];\n'
              '  } else {\n'
              '    padOp = new Pad(this, _input, _pad_before, _pad_after, '
              '_pad_value);\n'
              '    measure_pad_cost(padOp);\n'
              '    pad[key] = padOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = padOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1164,
         lineno=39,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _pad_before, _pad_after, _pad_value)')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1165,
         lineno=41,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (pad.find(key) != pad.end()) {\n'
              '    padOp = pad[key];\n'
              '  } else {\n'
              '    padOp = new Pad(this, _input, _pad_before, _pad_after, '
              '_pad_value);\n'
              '    measure_pad_cost(padOp);\n'
              '    pad[key] = padOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = padOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Pad::Pad(Model* _model, const Tensor& _input,\n'
              '         const std::vector<in')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1166,
         lineno=48,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1167,
         lineno=54,
         tokens=213,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::Pad',
         body='Pad::Pad(Model* _model, const Tensor& _input,\n'
              '         const std::vector<int>& _pad_before,\n'
              '         const std::vector<int>& _pad_after,\n'
              '         float _pad_value)\n'
              ': OpBase(_input, _model, OP_PAD), pad_before(_pad_before),\n'
              'pad_after(_pad_after), pad_value(_pad_value)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  // Pad currently only support the defacult layout\n'
              '  assert(_input.default_layout());\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  int cnt = 1;\n'
              '  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _input.dim[i] + pad_before[i] + '
              'pad_after[i];\n'
              '    outputs[0].stride[i] = cnt;\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    cnt *= outputs[0].dim[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1168,
         lineno=55,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t>& _pad_before,\n'
              '         const std::vector<int>& _pad_after,\n'
              '         float _pad_value)\n'
              ': OpBase(_input, _model, OP_PAD), pad_before(_pad_before),\n'
              'pad_after(_pad_after), pad_value(_pad_value)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  // Pad currently only support the defacult layout\n'
              '  assert(_input.default_layout());\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  int cnt = 1;\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1169,
         lineno=66,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _input.dim[i] + pad_before[i] + '
              'pad_after[i];\n'
              '    outputs[0].stride[i] = cnt;\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    cnt *= outputs[0].dim[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1170,
         lineno=73,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='}\n'
              '\n'
              'Pad::~Pad(void)\n'
              '{\n'
              '}\n'
              '\n'
              'bool Pad::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Pad::collect_costs(float& exe_time, float& flops,\n'
              '                        float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  ')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1171,
         lineno=75,
         tokens=7,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::~Pad',
         body='Pad::~Pad(void)\n{\n}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1172,
         lineno=79,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::get_int_parameter',
         body='bool Pad::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1173,
         lineno=84,
         tokens=99,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::collect_costs',
         body='void Pad::collect_costs(float& exe_time, float& flops,\n'
              '                        float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  flops += inputs[0].volume();\n'
              '  mem_acc += inputs[0].volume() + outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Pad]: cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1174,
         lineno=87,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='exe_time += runtime;\n'
              '  flops += inputs[0].volume();\n'
              '  mem_acc += inputs[0].volume() + outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Pad]: cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'PadKey::PadKey(const Tensor& _input,\n'
              '               const std::vector<int>& _pad_before,\n'
              '               const std::vector<int>& _pad_after,\n'
              '               float _pad_value)\n'
              '{\n'
              '  //TODO: currently we do not include pad_value in the hash\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _pad_before.size();\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1175,
         lineno=95,
         tokens=162,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='PadKey::PadKey',
         body='PadKey::PadKey(const Tensor& _input,\n'
              '               const std::vector<int>& _pad_before,\n'
              '               const std::vector<int>& _pad_after,\n'
              '               float _pad_value)\n'
              '{\n'
              '  //TODO: currently we do not include pad_value in the hash\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _pad_before.size();\n'
              '  for (size_t j = 0; j < _pad_before.size(); j++)\n'
              '    keys[idx++] = _pad_before[j];\n'
              '  for (size_t j = 0; j < _pad_after.size(); j++)\n'
              '    keys[idx++] = _pad_after[j];\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1176,
         lineno=103,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t j = 0; j < _pad_before.size(); j++)\n'
              '    keys[idx++] = _pad_before[j];\n'
              '  for (size_t j = 0; j < _pad_after.size(); j++)\n'
              '    keys[idx++] = _pad_after[j];\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='3e2b002142edcf332e387db3c7ea2d933abd0f1b26b15667401b4878fd47b40b',
         id=1177,
         lineno=108,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1178,
         lineno=1,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# W')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1179,
         lineno=1,
         tokens=6,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1180,
         lineno=1,
         tokens=603,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /python/taso/_cython/core.pyx\n'
              '  Functions: __cinit__(self, tensor) __set__ '
              'get_activation_mode get_data_type get_padding_mode\n'
              '  Classes: PyGraph PyModel PyTensor\n'
              '  Methods: __cinit__ __dealloc__ add avgpool2d batchnorm cast '
              'ceil concat conv2d cost div dropout equal exp get_input_dims '
              'get_input_edges get_num_outputs get_operator_attr '
              'get_operator_list get_operator_type get_output_dims '
              'get_split_lens get_weight_value greater identity leakyrelu less '
              'log logical_not matmul max maxpool2d min mul new_input '
              'new_weight optimize prelu print_measurements reduce_argmax '
              'reduce_argmin reduce_max reduce_mean reduce_min reduce_prod '
              'reduce_sum relu reshape round run_time shape sigmoid size slice '
              'split sqrt squeeze sub tanh transpose unsqueeze\n'
              '  Variables and usages: AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH CCore DT_BOOL DT_DOUBLE DT_FLOAT '
              'DT_HALF DT_INT32 DT_INT64 DT_INT8 DT_UINT8 Edge Graph Model '
              'NULL OP_BATCHNORM OP_BROADCAST_ADD OP_CAST OP_CEIL OP_CONCAT '
              'OP_CONV2D OP_DROPOUT OP_EW_ADD OP_EW_DIV OP_EW_EQUAL '
              'OP_EW_GREATER OP_EW_LESS OP_EW_MAX OP_EW_MIN OP_EW_MUL '
              'OP_EW_SUB OP_EXP OP_INPUT OP_LOG OP_LOGICAL_NOT OP_MATMUL '
              'OP_PAD OP_POOL2D_AVG OP_POOL2D_MAX OP_PRELU OP_REDUCE_ARGMAX '
              'OP_REDUCE_ARGMIN OP_REDUCE_MAX OP_REDUCE_MEAN OP_REDUCE_MIN '
              'OP_REDUCE_PROD OP_REDUCE_SUM OP_RELU OP_RESHAPE OP_RESIZE '
              'OP_ROUND OP_SHAPE OP_SIGMOID OP_SIZE OP_SLICE OP_SPLIT OP_SQRT '
              'OP_SQUEEZE OP_TANH OP_TOPK OP_TRANSPOSE OP_UNSQUEEZE OP_WEIGHT '
              'OP_WHERE Op OpType PD_MODE_SAME PD_MODE_VALID PM_AXIS '
              'PM_EPSILON PM_GROUP PM_KERNEL_H PM_KERNEL_W PM_PAD PM_PERM '
              'PM_STRIDE_H PM_STRIDE_W PaddingMode Tensor TensorHandle '
              '_set_tensor activation alpha append array as_floats attrname '
              'axes axis bias budget c_void_p caxes cdef cend cimport cinputs '
              'coutputs cperm cpython cshape csizes cstart csteps ctensor '
              'ctypes data datatype dim_array dimlist dims edges element else '
              'epsilon flatten format from get_operator_float_attr '
              'get_operator_int_attr graph guid handle inEdges inline inplace '
              'input inputH inputW inputs keepdims kernels lenlist lens long '
              'mean nDim ndarray ndim ndims new_graph numDim numEdges numOps '
              'numpy numsplits opList op_table outputs p_graph p_model padH '
              'padW padding perIdx perm pool2d_avg pool2d_max print_subst '
              'property rand random range rate resize return scale shuffle '
              'sizes slope split_equal start steps strides tensor tolist '
              'total_cost tuple type unsigned value vector weight zeros\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1181,
         lineno=3,
         tokens=17,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Licensed under the Apache License, Version 2.0 (the '
              '"License");')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1182,
         lineno=4,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# you may not use this file except in compliance with the '
              'License.')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1183,
         lineno=5,
         tokens=10,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# You may obtain a copy of the License at')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1184,
         lineno=7,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     http://www.apache.org/licenses/LICENSE-2.0')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1185,
         lineno=9,
         tokens=13,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Unless required by applicable law or agreed to in writing, '
              'software')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1186,
         lineno=10,
         tokens=15,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# distributed under the License is distributed on an "AS IS" '
              'BASIS,')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1187,
         lineno=11,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              '\n'
              'from CCore cimport Model\n'
              'from CCore cimport Graph\n'
              'from CCore cimport Tensor\n'
              'from CCore cimport *\n'
              'from cpython cimport array\n'
              'import ctypes\n'
              'import array\n'
              'import numpy as np\n'
              '\n'
              '#helper function\n'
              'def get_padding_mode(padding):\n'
              '    if (padding == "SAME"):\n'
              '        return PD_MODE_SAME\n'
              '    elif (padding == "VALID"):\n'
              '        return PD_MODE_VALID\n'
              '    else:\n'
              '        assert(False)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1188,
         lineno=11,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1189,
         lineno=12,
         tokens=11,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# See the License for the specific language governing '
              'permissions and')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1190,
         lineno=13,
         tokens=6,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# limitations under the License.')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1191,
         lineno=16,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1192,
         lineno=17,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1193,
         lineno=18,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1194,
         lineno=21,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1195,
         lineno=22,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1196,
         lineno=23,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1197,
         lineno=26,
         tokens=42,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_padding_mode',
         body='def get_padding_mode(padding):\n'
              '    if (padding == "SAME"):\n'
              '        return PD_MODE_SAME\n'
              '    elif (padding == "VALID"):\n'
              '        return PD_MODE_VALID\n'
              '    else:\n'
              '        assert(False)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1198,
         lineno=33,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def get_data_type(datatype):\n'
              '    if datatype == "FLOAT":\n'
              '        return DT_FLOAT\n'
              '    elif datatype == "DOUBLE":\n'
              '        return DT_DOUBLE\n'
              '    elif datatype == "FLOAT16":\n'
              '        return DT_HALF\n'
              '    elif datatype == "INT8":\n'
              '        return DT_INT8\n'
              '    elif datatype == "UINT8":\n'
              '        return DT_UINT8\n'
              '    elif datatype == "INT32":\n'
              '        return DT_INT32\n'
              '    elif datatype == "INT64":\n'
              '        return DT_INT64\n'
              '    elif datatype == "BOOL":\n'
              '        return DT_BOOL\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1199,
         lineno=34,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_data_type',
         body='def get_data_type(datatype):\n'
              '    if datatype == "FLOAT":\n'
              '        return DT_FLOAT\n'
              '    elif datatype == "DOUBLE":\n'
              '        return DT_DOUBLE\n'
              '    elif datatype == "FLOAT16":\n'
              '        return DT_HALF\n'
              '    elif datatype == "INT8":\n'
              '        return DT_INT8\n'
              '    elif datatype == "UINT8":\n'
              '        return DT_UINT8\n'
              '    elif datatype == "INT32":\n'
              '        return DT_INT32\n'
              '    elif datatype == "INT64":\n'
              '        return DT_INT64\n'
              '    elif datatype == "BOOL":\n'
              '        return DT_BOOL')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1200,
         lineno=51,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def get_activation_mode(activation):\n'
              '    if (activation == "NONE"):\n'
              '        return AC_MODE_NONE\n'
              '    elif (activation == "SIGMOID"):\n'
              '        return AC_MODE_SIGMOID\n'
              '    elif (activation == "RELU"):\n'
              '        return AC_MODE_RELU\n'
              '    elif (activation == "TANH"):\n'
              '        return AC_MODE_TANH\n'
              '    else:\n'
              '        assert(False)\n'
              '\n'
              'cdef class PyModel:\n'
              '    cdef Model *p_model # Hold a Model instance\n'
              '\n'
              '    def __cinit__(self):\n'
              '        self.p_model = new Model()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1201,
         lineno=52,
         tokens=80,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_mode',
         body='def get_activation_mode(activation):\n'
              '    if (activation == "NONE"):\n'
              '        return AC_MODE_NONE\n'
              '    elif (activation == "SIGMOID"):\n'
              '        return AC_MODE_SIGMOID\n'
              '    elif (activation == "RELU"):\n'
              '        return AC_MODE_RELU\n'
              '    elif (activation == "TANH"):\n'
              '        return AC_MODE_TANH\n'
              '    else:\n'
              '        assert(False)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1202,
         lineno=64,
         tokens=45,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyModel',
         body='class PyModel:\n'
              '    cdef Model *p_model # Hold a Model instance\n'
              '\n'
              '    def __cinit__(self):\n'
              '        self.p_model = new Model()\n'
              '\n'
              '    def __dealloc__(self):\n'
              '        del self.p_model')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1203,
         lineno=65,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Hold a Model instance')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1204,
         lineno=67,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__cinit__',
         body='def __cinit__(self):\n        self.p_model = new Model()')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1205,
         lineno=69,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def __dealloc__(self):\n'
              '        del self.p_model\n'
              '\n'
              'cdef class PyTensor:\n'
              '    cdef TensorHandle ctensor # Hold a Tensor instance\n'
              '\n'
              '    cdef inline _set_tensor(self, tensor):\n'
              '        cdef unsigned long long ptr\n'
              '        if tensor is None:\n'
              '            self.ctensor = <TensorHandle>(NULL)\n'
              '        else:\n'
              '            ptr = ctypes.cast(tensor, ctypes.c_void_p).value\n'
              '            self.ctensor = <TensorHandle>(ptr)\n'
              '\n'
              '    property tensor:\n'
              '        def __get__(self):\n'
              '            if self.ctensor == NULL:\n'
              '                return None\n'
              '            else:\n'
              '                return ctypes.cast(<unsigned long '
              'long>self.ctensor, ctypes.c_void_p)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1206,
         lineno=70,
         tokens=11,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__dealloc__',
         body='def __dealloc__(self):\n        del self.p_model')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1207,
         lineno=73,
         tokens=81,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyTensor',
         body='class PyTensor:\n'
              '    cdef TensorHandle ctensor # Hold a Tensor instance\n'
              '\n'
              '    cdef inline _set_tensor(self, tensor):\n'
              '        cdef unsigned long long ptr\n'
              '        if tensor is None:\n'
              '            self.ctensor = <TensorHandle>(NULL)\n'
              '        else:\n'
              '            ptr = ctypes.cast(tensor, ctypes.c_void_p).value\n'
              '            self.ctensor = <TensorHandle>(ptr)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1208,
         lineno=74,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Hold a Tensor instance')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1209,
         lineno=90,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        \n'
              '        def __set__(self, value):\n'
              '            self._set_tensor(value)\n'
              '\n'
              '    property nDim:\n'
              '        def __get__(self):\n'
              '            if self.ctensor == NULL:\n'
              '                return None\n'
              '            else:\n'
              '                return self.ctensor.numDim\n'
              '\n'
              '    def __cinit__(self, tensor):\n'
              '        self._set_tensor(tensor)\n'
              '\n'
              '    def dim(self, int idx):\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1210,
         lineno=91,
         tokens=15,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='__set__',
         body='def __set__(self, value):\n            self._set_tensor(value)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1211,
         lineno=101,
         tokens=11,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='__cinit__(self, tensor)',
         body='\n\n    def __cinit__(self, tensor):')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1212,
         lineno=105,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (idx < self.ctensor.numDim):\n'
              '            return self.ctensor.dim[idx]\n'
              '        else:\n'
              '            assert False , "Error: index out of range"\n'
              '            return None\n'
              '\n'
              '# Construct operator table\n'
              'op_table = dict()\n'
              'op_table[OP_INPUT] = "Input"\n'
              'op_table[OP_WEIGHT] = "Weight"\n'
              'op_table[OP_CONV2D] = "Conv"\n'
              'op_table[OP_DROPOUT] = "Dropout"\n'
              'op_table[OP_POOL2D_MAX] = "MaxPool"\n'
              'op_table[OP_POOL2D_AVG] = "AveragePool"\n'
              'op_table[OP_RELU] = "Relu"\n'
              'op_table[OP_SIGMOID')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1213,
         lineno=108,
         tokens=6,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Error: index out of range')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1214,
         lineno=111,
         tokens=4,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Construct operator table')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1215,
         lineno=120,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='] = "Sigmoid"\n'
              'op_table[OP_TANH] = "Tanh"\n'
              'op_table[OP_BATCHNORM] = "BatchNormalization"\n'
              'op_table[OP_CONCAT] = "Concat"\n'
              'op_table[OP_SPLIT] = "Split"\n'
              'op_table[OP_RESHAPE] = "Reshape"\n'
              'op_table[OP_TRANSPOSE] = "Transpose"\n'
              'op_table[OP_EW_')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1216,
         lineno=127,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ADD] = "Add"\n'
              'op_table[OP_EW_MUL] = "Mul"\n'
              'op_table[OP_MATMUL] = "MatMul"\n'
              'op_table[OP_SQUEEZE] = "Squeeze"\n'
              'op_table[OP_UNSQUEEZE] = "Unsqueeze"\n'
              'op_table[OP_EW_SUB] = "Sub"\n'
              'op_table[OP_EW_DIV] = "Div"\n'
              'op_table[OP_EW_EQUAL] = "Equal"\n'
              'op')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1217,
         lineno=135,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_table[OP_EW_GREATER] = "Greater"\n'
              'op_table[OP_EW_LESS] = "Less"\n'
              'op_table[OP_EW_MAX] = "Max"\n'
              'op_table[OP_EW_MIN] = "Min"\n'
              'op_table[OP_REDUCE_ARGMAX] = "ArgMax"\n'
              'op_table[OP_REDUCE_ARGMIN] = "ArgMin"\n'
              'op_table[OP_REDUCE_MAX] = "ReduceMax')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1218,
         lineno=141,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='"\n'
              'op_table[OP_REDUCE_MEAN] = "ReduceMean"\n'
              'op_table[OP_REDUCE_MIN] = "ReduceMin"\n'
              'op_table[OP_REDUCE_PROD] = "ReduceProd"\n'
              'op_table[OP_REDUCE_SUM] = "ReduceSum"\n'
              'op_table[OP_PAD] = "Pad"\n'
              'op_table[OP_SHAPE] = "Shape"\n'
              'op_table[OP_SIZE] = ')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1219,
         lineno=148,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='"Size"\n'
              'op_table[OP_TOPK] = "TopK"\n'
              'op_table[OP_WHERE] = "Where"\n'
              'op_table[OP_CEIL] = "Ceil"\n'
              'op_table[OP_CAST] = "Cast"\n'
              'op_table[OP_EXP] = "Exp"\n'
              'op_table[OP_ROUND] = "Round"\n'
              'op_table[OP_LOG] = "Log"\n'
              'op_table[OP_LOGICAL_NOT] = "Not"\n'
              'op_')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1220,
         lineno=157,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='table[OP_SQRT] = "Sqrt"\n'
              'op_table[OP_SLICE] = "Slice"\n'
              'op_table[OP_RESIZE] = "Resize"\n'
              '# op_table[OP_BROADCAST_ADD] = "BroadcastAdd"\n'
              'op_table[OP_BROADCAST_ADD] = "Add"\n'
              '\n'
              'cdef class PyGraph:\n'
              '    cdef Graph *p_graph #Hold a Graph instance\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1221,
         lineno=160,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# op_table[OP_BROADCAST_ADD] = "BroadcastAdd"')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1222,
         lineno=163,
         tokens=106,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='class PyGraph:\n'
              '    cdef Graph *p_graph #Hold a Graph instance\n'
              '\n'
              '    def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)\n'
              '    def print_measurements(self):\n'
              '        self.p_graph.print_measurements()\n'
              '\n'
              '    def run_time(self):\n'
              '        return self.p_graph.run()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1223,
         lineno=164,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#Hold a Graph instance')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1224,
         lineno=165,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)\n'
              '    def print_measurements(self):\n'
              '        self.p_graph.print_measurements()\n'
              '\n'
              '    def run_time(self):\n'
              '        return self.p_graph.run()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1225,
         lineno=166,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__cinit__',
         body='def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1226,
         lineno=173,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='print_measurements',
         body='def print_measurements(self):\n'
              '        self.p_graph.print_measurements()')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1227,
         lineno=176,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='run_time',
         body='def run_time(self):\n        return self.p_graph.run()')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1228,
         lineno=178,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def cost(self):\n'
              '        return self.p_graph.total_cost()\n'
              '\n'
              '    #def __dealloc__(self):\n'
              '        #t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)\n'
              '        #print(t)\n'
              '        #del self.p_graph\n'
              '\n'
              '    # element-wise addition\n'
              '    def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1229,
         lineno=178,
         tokens=120,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def cost(self):\n'
              '        return self.p_graph.total_cost()\n'
              '\n'
              '    #def __dealloc__(self):\n'
              '        #t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)\n'
              '        #print(t)\n'
              '        #del self.p_graph\n'
              '\n'
              '    # element-wise addition\n'
              '    def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1230,
         lineno=179,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='cost',
         body='def cost(self):\n        return self.p_graph.total_cost()')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1231,
         lineno=182,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#def __dealloc__(self):')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1232,
         lineno=183,
         tokens=19,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1233,
         lineno=187,
         tokens=4,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# element-wise addition')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1234,
         lineno=188,
         tokens=59,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='add',
         body='def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1235,
         lineno=192,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def batchnorm(self, PyTensor input, PyTensor scale, '
              'PyTensor bias, PyTensor mean, PyTensor var, float epsilon = '
              '-1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1236,
         lineno=192,
         tokens=91,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def batchnorm(self, PyTensor input, PyTensor scale, '
              'PyTensor bias, PyTensor mean, PyTensor var, float epsilon = '
              '-1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1237,
         lineno=193,
         tokens=89,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='batchnorm',
         body='def batchnorm(self, PyTensor input, PyTensor scale, PyTensor '
              'bias, PyTensor mean, PyTensor var, float epsilon = -1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1238,
         lineno=198,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)    \n'
              '\n'
              '    def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1239,
         lineno=198,
         tokens=111,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)    \n'
              '\n'
              '    def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1240,
         lineno=199,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='cast',
         body='def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1241,
         lineno=205,
         tokens=47,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ceil',
         body='def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1242,
         lineno=209,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1243,
         lineno=209,
         tokens=138,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1244,
         lineno=210,
         tokens=136,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='concat',
         body='def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1245,
         lineno=222,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def conv2d(self, *, PyTensor input, PyTensor weight, '
              'strides, padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1246,
         lineno=222,
         tokens=109,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def conv2d(self, *, PyTensor input, PyTensor weight, '
              'strides, padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1247,
         lineno=223,
         tokens=107,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d',
         body='def conv2d(self, *, PyTensor input, PyTensor weight, strides, '
              'padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1248,
         lineno=230,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1249,
         lineno=230,
         tokens=124,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1250,
         lineno=231,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='div',
         body='def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1251,
         lineno=236,
         tokens=61,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='dropout',
         body='def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1252,
         lineno=237,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# We ignore dropout rate for inference')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1253,
         lineno=241,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1254,
         lineno=241,
         tokens=110,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1255,
         lineno=242,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='equal',
         body='def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1256,
         lineno=247,
         tokens=47,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='exp',
         body='def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1257,
         lineno=251,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1258,
         lineno=251,
         tokens=119,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1259,
         lineno=252,
         tokens=61,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='greater',
         body='def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1260,
         lineno=257,
         tokens=55,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='identity',
         body='def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1261,
         lineno=258,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# We ignore dropout rate for inference')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1262,
         lineno=262,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def leakyrelu(self, PyTensor input, float alpha, bool '
              'inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1263,
         lineno=262,
         tokens=125,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def leakyrelu(self, PyTensor input, float alpha, bool '
              'inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1264,
         lineno=263,
         tokens=62,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='leakyrelu',
         body='def leakyrelu(self, PyTensor input, float alpha, bool inplace = '
              'False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1265,
         lineno=268,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='less',
         body='def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1266,
         lineno=272,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1267,
         lineno=272,
         tokens=99,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1268,
         lineno=273,
         tokens=47,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='log',
         body='def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1269,
         lineno=278,
         tokens=49,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='logical_not',
         body='def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1270,
         lineno=282,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def matmul(self, PyTensor input, PyTensor weight, '
              'activation = "NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1271,
         lineno=282,
         tokens=142,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def matmul(self, PyTensor input, PyTensor weight, '
              'activation = "NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1272,
         lineno=283,
         tokens=80,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='matmul',
         body='def matmul(self, PyTensor input, PyTensor weight, activation = '
              '"NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1273,
         lineno=290,
         tokens=59,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='max',
         body='def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1274,
         lineno=294,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    # element-wise multiplication\n'
              '    def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1275,
         lineno=294,
         tokens=127,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    # element-wise multiplication\n'
              '    def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1276,
         lineno=295,
         tokens=59,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='min',
         body='def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1277,
         lineno=300,
         tokens=4,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# element-wise multiplication')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1278,
         lineno=301,
         tokens=59,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='mul',
         body='def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1279,
         lineno=305,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def maxpool2d(self, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1280,
         lineno=305,
         tokens=102,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def maxpool2d(self, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1281,
         lineno=306,
         tokens=100,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='maxpool2d',
         body='def maxpool2d(self, PyTensor input, kernels, strides, padding, '
              'activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1282,
         lineno=312,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1283,
         lineno=312,
         tokens=103,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1284,
         lineno=313,
         tokens=101,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='avgpool2d',
         body='def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1285,
         lineno=319,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1286,
         lineno=319,
         tokens=62,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1287,
         lineno=320,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='prelu',
         body='def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1288,
         lineno=324,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1289,
         lineno=324,
         tokens=103,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1290,
         lineno=325,
         tokens=101,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_argmax',
         body='def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1291,
         lineno=333,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1292,
         lineno=333,
         tokens=103,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1293,
         lineno=334,
         tokens=101,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_argmin',
         body='def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1294,
         lineno=342,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1295,
         lineno=342,
         tokens=101,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1296,
         lineno=343,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_max',
         body='def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1297,
         lineno=351,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1298,
         lineno=351,
         tokens=101,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1299,
         lineno=352,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_mean',
         body='def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1300,
         lineno=360,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1301,
         lineno=360,
         tokens=101,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1302,
         lineno=361,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_min',
         body='def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1303,
         lineno=369,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1304,
         lineno=369,
         tokens=101,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1305,
         lineno=370,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_prod',
         body='def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1306,
         lineno=378,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1307,
         lineno=378,
         tokens=101,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1308,
         lineno=379,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reduce_sum',
         body='def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1309,
         lineno=387,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1310,
         lineno=387,
         tokens=141,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1311,
         lineno=388,
         tokens=85,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='reshape',
         body='def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1312,
         lineno=397,
         tokens=53,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='relu',
         body='def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1313,
         lineno=401,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1314,
         lineno=401,
         tokens=98,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1315,
         lineno=402,
         tokens=46,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='round',
         body='def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1316,
         lineno=407,
         tokens=49,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='shape',
         body='def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1317,
         lineno=411,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1318,
         lineno=411,
         tokens=106,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1319,
         lineno=412,
         tokens=53,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='sigmoid',
         body='def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1320,
         lineno=417,
         tokens=50,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='size',
         body='def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1321,
         lineno=421,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n'
              '        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n'
              '        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n'
              '            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1322,
         lineno=421,
         tokens=143,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n'
              '        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n'
              '        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n'
              '            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1323,
         lineno=422,
         tokens=141,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='slice',
         body='def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n'
              '        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n'
              '        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n'
              '            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1324,
         lineno=439,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n'
              '            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n'
              '            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1325,
         lineno=439,
         tokens=121,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n'
              '            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n'
              '            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1326,
         lineno=439,
         tokens=121,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='slice',
         body='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n'
              '            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n'
              '            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1327,
         lineno=452,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n'
              '            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1328,
         lineno=452,
         tokens=128,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n'
              '            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1329,
         lineno=453,
         tokens=126,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='split',
         body='def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n'
              '            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1330,
         lineno=463,
         tokens=5,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# sizes is an integer')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1331,
         lineno=466,
         tokens=38,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1332,
         lineno=466,
         tokens=38,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1333,
         lineno=466,
         tokens=37,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='split',
         body='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1334,
         lineno=470,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1335,
         lineno=470,
         tokens=138,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1336,
         lineno=471,
         tokens=47,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='sqrt',
         body='def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1337,
         lineno=476,
         tokens=88,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='squeeze',
         body='def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1338,
         lineno=484,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1339,
         lineno=484,
         tokens=118,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1340,
         lineno=485,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='sub',
         body='def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1341,
         lineno=490,
         tokens=55,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='tanh',
         body='def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1342,
         lineno=494,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def transpose(self, PyTensor input, tuple perm, bool '
              'shuffle = False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1343,
         lineno=494,
         tokens=96,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def transpose(self, PyTensor input, tuple perm, bool '
              'shuffle = False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1344,
         lineno=495,
         tokens=94,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='transpose',
         body='def transpose(self, PyTensor input, tuple perm, bool shuffle = '
              'False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1345,
         lineno=503,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1346,
         lineno=503,
         tokens=90,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1347,
         lineno=504,
         tokens=88,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='unsqueeze',
         body='def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1348,
         lineno=512,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1349,
         lineno=512,
         tokens=102,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1350,
         lineno=513,
         tokens=100,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='new_input',
         body='def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1351,
         lineno=522,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1352,
         lineno=522,
         tokens=107,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1353,
         lineno=523,
         tokens=105,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='new_weight',
         body='def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1354,
         lineno=535,
         tokens=68,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1355,
         lineno=535,
         tokens=68,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1356,
         lineno=535,
         tokens=68,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='new_weight',
         body='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1357,
         lineno=540,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def optimize(self, float alpha, int budget, bool '
              'print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)\n'
              '\n'
              '    def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1358,
         lineno=540,
         tokens=133,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def optimize(self, float alpha, int budget, bool '
              'print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)\n'
              '\n'
              '    def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1359,
         lineno=541,
         tokens=59,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='optimize',
         body='def optimize(self, float alpha, int budget, bool print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1360,
         lineno=546,
         tokens=70,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_list',
         body='def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1361,
         lineno=554,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges\n'
              '\n'
              '    def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1362,
         lineno=554,
         tokens=131,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges\n'
              '\n'
              '    def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1363,
         lineno=555,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_input_edges',
         body='def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1364,
         lineno=563,
         tokens=66,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_input_dims',
         body='def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1365,
         lineno=570,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val\n'
              '\n'
              '    def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1366,
         lineno=570,
         tokens=137,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val\n'
              '\n'
              '    def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1367,
         lineno=571,
         tokens=71,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_weight_value',
         body='def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1368,
         lineno=579,
         tokens=61,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_split_lens',
         body='def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1369,
         lineno=586,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n'
              '\n'
              '    def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1370,
         lineno=586,
         tokens=90,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n'
              '\n'
              '    def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1371,
         lineno=587,
         tokens=66,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_output_dims',
         body='def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1372,
         lineno=595,
         tokens=20,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_num_outputs',
         body='def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1373,
         lineno=597,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"\n'
              '\n'
              '    def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1374,
         lineno=597,
         tokens=92,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='\n'
              '    def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"\n'
              '\n'
              '    def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1375,
         lineno=598,
         tokens=58,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_type',
         body='def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1376,
         lineno=606,
         tokens=31,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body='def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1377,
         lineno=609,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1378,
         lineno=609,
         tokens=131,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1379,
         lineno=609,
         tokens=131,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1380,
         lineno=619,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1381,
         lineno=619,
         tokens=78,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1382,
         lineno=619,
         tokens=78,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1383,
         lineno=623,
         tokens=10,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='input tensor must be 4 dim for pads attribute')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1384,
         lineno=624,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n'
              '            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1385,
         lineno=624,
         tokens=118,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n'
              '            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1386,
         lineno=624,
         tokens=118,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n'
              '            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1387,
         lineno=634,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n'
              '            if padH % 2 == 1:\n'
              '                padH += 1\n'
              '            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n'
              "        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1388,
         lineno=634,
         tokens=145,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n'
              '            if padH % 2 == 1:\n'
              '                padH += 1\n'
              '            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n'
              "        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1389,
         lineno=634,
         tokens=145,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n'
              '            if padH % 2 == 1:\n'
              '                padH += 1\n'
              '            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n'
              "        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1390,
         lineno=638,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Ensure padding is same on both sides')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1391,
         lineno=646,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n'
              "        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n'
              "        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1392,
         lineno=646,
         tokens=77,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n'
              "        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n'
              "        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1393,
         lineno=646,
         tokens=77,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n'
              "        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n'
              "        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1394,
         lineno=653,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)\n")

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1395,
         lineno=653,
         tokens=108,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='PyGraph',
         body='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)")

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1396,
         lineno=653,
         tokens=108,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='get_operator_attr',
         body='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)")

Fragment(document_cs='3f15110151615521ed19c7012c3ae14da56cb295b82dbf4410bd59c958786e2d',
         id=1397,
         lineno=664,
         tokens=6,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Internal error: unknow attribute {}')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1398,
         lineno=1,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso as ts\n'
              '\n'
              'seq_length = 64\n'
              'hidden_dims = 1024\n'
              'batch_size = 16\n'
              '\n'
              'def attention(graph, input, heads):\n'
              '    d_model = input.dim(1)\n'
              '    d_k = d_model // heads\n'
              '    assert input.dim(1) % heads == 0\n'
              '    weights = list()\n')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1399,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1400,
         lineno=1,
         tokens=57,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/bert.py\n'
              '  Functions: attention\n'
              '  Variables and usages: alpha append batch_size budget d_model '
              'dims graph heads hidden_dims input linear logits matmul '
              'new_graph new_input new_weight optimize output perm range relu '
              'reshape seq_length shape shuffle taso transpose weights\n')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1401,
         lineno=7,
         tokens=117,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='def attention(graph, input, heads):\n'
              '    d_model = input.dim(1)\n'
              '    d_k = d_model // heads\n'
              '    assert input.dim(1) % heads == 0\n'
              '    weights = list()\n'
              '    for i in range(3):\n'
              '        weights.append(graph.new_weight(dims=(d_model, '
              'd_model)))\n'
              '    # compute query, key, value tensors\n'
              '    q = graph.matmul(input, weights[0])\n'
              '    k = graph.matmul(input, weights[1])\n'
              '    v = graph.matmul(input, weights[2])\n'
              '    # reshape query, key,')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1402,
         lineno=12,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(3):\n'
              '        weights.append(graph.new_weight(dims=(d_model, '
              'd_model)))\n'
              '    # compute query, key, value tensors\n'
              '    q = graph.matmul(input, weights[0])\n'
              '    k = graph.matmul(input, weights[1])\n'
              '    v = graph.matmul(input, weights[2])\n'
              '    # reshape query, key, value to multiple heads\n'
              '    q = graph.reshape(q, shape=(ba')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1403,
         lineno=14,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# compute query, key, value tensors')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1404,
         lineno=18,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body=' value to multiple heads\n'
              '    q = graph.reshape(q, shape=(batch_size, 64,16,64))\n'
              '    k = graph.reshape(k, shape=(batch_size, 64,16,64))\n'
              '    v = graph.reshape(v, shape=(batch_size, 64,16,64))\n'
              '    # transpose query, key, value for batched matmul\n'
              '    q = graph.transpose(q, perm=')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1405,
         lineno=18,
         tokens=10,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# reshape query, key, value to multiple heads')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1406,
         lineno=19,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tch_size, 64,16,64))\n'
              '    k = graph.reshape(k, shape=(batch_size, 64,16,64))\n'
              '    v = graph.reshape(v, shape=(batch_size, 64,16,64))\n'
              '    # transpose query, key, value for batched matmul\n'
              '    q = graph.transpose(q, perm=(0,2,1,3), shuffle=True)\n'
              '    k = graph.transpose(k, perm=(0,2,1,3), shuffle=True)\n'
              '    v = graph.transpose(v, perm=(0,2')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1407,
         lineno=22,
         tokens=12,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# transpose query, key, value for batched matmul')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1408,
         lineno=23,
         tokens=83,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='(0,2,1,3), shuffle=True)\n'
              '    k = graph.transpose(k, perm=(0,2,1,3), shuffle=True)\n'
              '    v = graph.transpose(v, perm=(0,2,1,3), shuffle=True)\n'
              '    # perform matrix multiplications\n'
              '    logits = graph.matmul(q, k)\n'
              '    output = graph.matmul(logits, v)\n'
              '    # transpose the output bac')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1409,
         lineno=25,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',1,3), shuffle=True)\n'
              '    # perform matrix multiplications\n'
              '    logits = graph.matmul(q, k)\n'
              '    output = graph.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = graph.transpose(output,perm=(0,2,1,3), '
              'shuffle=True)\n'
              '    output = graph.reshape(output, shape=(batch_size * 64, '
              '1024))\n'
              '\n'
              '    # a final linear layer\n'
              '    linear = gr')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1410,
         lineno=26,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# perform matrix multiplications')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1411,
         lineno=29,
         tokens=75,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='k\n'
              '    output = graph.transpose(output,perm=(0,2,1,3), '
              'shuffle=True)\n'
              '    output = graph.reshape(output, shape=(batch_size * 64, '
              '1024))\n'
              '\n'
              '    # a final linear layer\n'
              '    linear = graph.new_weight(dims=(d_model, d_model))\n'
              '    output = graph.matmul(input, linear)\n'
              '    return output')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1412,
         lineno=29,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# transpose the output back')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1413,
         lineno=33,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# a final linear layer')

Fragment(document_cs='3f4bc967713c03dc34a9e197c6622ed4356bb72d0d35c381aa437d14df75bdd8',
         id=1414,
         lineno=34,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='aph.new_weight(dims=(d_model, d_model))\n'
              '    output = graph.matmul(input, linear)\n'
              '    return output\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(batch_size * seq_length, '
              'hidden_dims))\n'
              'input = graph.relu(input)\n'
              't = input\n'
              'for i in range(8):\n'
              '    t = attention(graph, t, 16)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1415,
         lineno=1,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1416,
         lineno=1,
         tokens=58,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/ops_cudnn.cu\n'
              '  Methods: Model::Model Model::copy_memory '
              'Model::measure_oplist_runtime\n'
              '  Variables: milliseconds\n'
              '  Using: taso\n'
              '  Usages: Model allocate_memory copy_memory '
              'measure_oplist_runtime\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1417,
         lineno=16,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'Model::Model()\n'
              ': isTraining(false), print_cost(false)\n'
              '{\n'
              '  //int* a = (int*) malloc(sizeof(int) * 8);\n'
              '  checkCUDA(cudaSetDevice(0));\n'
              '  checkCUDNN(cudnnCreate(&dnn));\n'
              '  checkCUDA(cublasCreate(&blas));\n'
              '  workSpaceSize = WOR')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1418,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1419,
         lineno=20,
         tokens=423,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::Model',
         body='Model::Model()\n'
              ': isTraining(false), print_cost(false)\n'
              '{\n'
              '  //int* a = (int*) malloc(sizeof(int) * 8);\n'
              '  checkCUDA(cudaSetDevice(0));\n'
              '  checkCUDNN(cudnnCreate(&dnn));\n'
              '  checkCUDA(cublasCreate(&blas));\n'
              '  workSpaceSize = WORK_SPACE_SIZE;\n'
              '  global_unique_id = 100;\n'
              '  checkCUDA(cudaMalloc(&workSpace, workSpaceSize));\n'
              '  // printf("handle.workSpace = 0x%x\\n", workSpace);\n'
              '  // create all descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&scaleTensor));\n'
              '  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));\n'
              '  checkCUDNN(cudnnCreateConvolutionDescriptor(&convDesc));\n'
              '  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));\n'
              '  checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '  checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));\n'
              '  // allocate tensors for measuring performance\n'
              '  checkCUDA(cudaMalloc(&inputPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&biasPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&outputPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&filterPtr, MAX_TENSOR_SIZE));\n'
              '  // create tensors for batch norm\n'
              '  checkCUDA(cudaMalloc(&scalePtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&runningMean, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&runningVar, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&saveMean, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&saveVar, MAX_TENSOR_SIZE));\n'
              '  // create cuda events\n'
              '  checkCUDA(cudaEventCreate(&startEvent));\n'
              '  checkCUDA(cudaEventCreate(&endEvent));\n'
              '}')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1420,
         lineno=27,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='K_SPACE_SIZE;\n'
              '  global_unique_id = 100;\n'
              '  checkCUDA(cudaMalloc(&workSpace, workSpaceSize));\n'
              '  // printf("handle.workSpace = 0x%x\\n", workSpace);\n'
              '  // create all descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUD')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1421,
         lineno=34,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='NN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&scaleTensor));\n'
              '  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));\n'
              '  checkCUDNN(cudnnCreateConvolutionDescriptor(&convDesc));\n'
              '  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));\n'
              '  checkCUDNN(cudnnCr')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1422,
         lineno=39,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eateActivationDescriptor(&actiDesc));\n'
              '  checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));\n'
              '  // allocate tensors for measuring performance\n'
              '  checkCUDA(cudaMalloc(&inputPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&biasPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&outputPtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&filterPtr, MAX_TENSOR_SIZE));\n'
              '  // create tensors for batch norm\n'
              '  checkCUDA(cudaMalloc(&scalePtr, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&runningMean, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&runningVar, MAX_TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&saveMean, MAX_')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1423,
         lineno=50,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TENSOR_SIZE));\n'
              '  checkCUDA(cudaMalloc(&saveVar, MAX_TENSOR_SIZE));\n'
              '  // create cuda events\n'
              '  checkCUDA(cudaEventCreate(&startEvent));\n'
              '  checkCUDA(cudaEventCreate(&endEvent));\n'
              '}\n'
              '\n'
              'float Model::measure_oplist_runtime(const std::vector<OpBase*>& '
              'opBaseList)\n'
              '{\n'
              '  const int num_runs = 100;\n'
              '  // warmup\n'
              '  for (int times = 0; times < num_runs; times++)\n'
              '    for (int i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  // measure runtime\n'
              '  // checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1424,
         lineno=57,
         tokens=188,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_oplist_runtime',
         body='float Model::measure_oplist_runtime(const std::vector<OpBase*>& '
              'opBaseList)\n'
              '{\n'
              '  const int num_runs = 100;\n'
              '  // warmup\n'
              '  for (int times = 0; times < num_runs; times++)\n'
              '    for (int i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  // measure runtime\n'
              '  // checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int times = 0; times < num_runs; times++) {\n'
              '    for (int i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  return milliseconds / num_runs;\n'
              '}')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1425,
         lineno=67,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int times = 0; times < num_runs; times++) {\n'
              '    for (int i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  return milliseconds / num_runs;\n'
              '}\n'
              '\n'
              'void* Model::allocate_memory(size_t size, const DATATYPE* '
              'data_initial)\n'
              '{\n'
              '  void* ptr;\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1426,
         lineno=73,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1427,
         lineno=81,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (size == 0) {\n'
              '    // Note: Special value for zero-sized tensor\n'
              '    ptr = (void*) 0x1;\n'
              '  } else {\n'
              '    checkCUDA(cudaMalloc(&ptr, size));\n'
              '  }\n'
              '  if (data_initial != NULL) {\n'
              '    checkCUDA(cudaMemcpy(ptr, data_initial, size, '
              'cudaMemcpyDefault));\n'
              '  }\n'
              '  return ptr;\n'
              '}\n'
              '\n'
              'bool Model::copy_memory(DATATYPE* dst, const DATATYPE* src, '
              'size_t size)\n'
              '{\n'
              '  checkCUDA(cudaMemcpy(dst, src, size, cudaMemcpyDefault));\n'
              '  return true;\n'
              '}\n')

Fragment(document_cs='436d0b891ab03b6f9a8304107ca5e198ccdb1e100e800f3be64bacd6feeb64f6',
         id=1428,
         lineno=93,
         tokens=41,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::copy_memory',
         body='bool Model::copy_memory(DATATYPE* dst, const DATATYPE* src, '
              'size_t size)\n'
              '{\n'
              '  checkCUDA(cudaMemcpy(dst, src, size, cudaMemcpyDefault));\n'
              '  return true;\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1429,
         lineno=1,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIO')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1430,
         lineno=1,
         tokens=150,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/elementwise_unary.cc\n'
              '  Functions: key\n'
              '  Methods: ElementWiseUnary::ElementWiseUnary '
              'ElementWiseUnary::collect_costs '
              'ElementWiseUnary::get_int_parameter '
              'ElementWiseUnary::~ElementWiseUnary '
              'ElementWiseUnaryKey::ElementWiseUnaryKey Graph::ceil '
              'Graph::elementwise_unary Graph::exp Graph::log '
              'Graph::logical_not Graph::round Graph::sqrt '
              'Model::get_or_create_elementwise_unary\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: ElementWiseUnary ElementWiseUnaryKey INVALID_OP ceil '
              'collect_costs elementwise_unary exp get_int_parameter '
              'get_or_create_elementwise_unary log logical_not round sqrt\n')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1431,
         lineno=11,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='NS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::ceil(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_CEIL);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::exp(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_EXP);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::round(const Tensor')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1432,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1433,
         lineno=19,
         tokens=26,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::ceil',
         body='TensorHandle Graph::ceil(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_CEIL);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1434,
         lineno=24,
         tokens=25,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::exp',
         body='TensorHandle Graph::exp(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_EXP);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1435,
         lineno=29,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Handle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_ROUND);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::log(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_LOG);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::logical_not(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_LOGICAL_NOT);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::sqrt(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_SQRT);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::elementwise_unary(const TensorHand')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1436,
         lineno=29,
         tokens=25,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::round',
         body='TensorHandle Graph::round(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_ROUND);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1437,
         lineno=34,
         tokens=25,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::log',
         body='TensorHandle Graph::log(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_LOG);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1438,
         lineno=39,
         tokens=28,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::logical_not',
         body='TensorHandle Graph::logical_not(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_LOGICAL_NOT);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1439,
         lineno=44,
         tokens=27,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::sqrt',
         body='TensorHandle Graph::sqrt(const TensorHandle _input)\n'
              '{\n'
              '  return elementwise_unary(_input, OP_SQRT);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1440,
         lineno=49,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='le _input,\n'
              '                                      OpType _type)\n'
              '{\n'
              '  Op op = model->get_or_create_elementwise_unary(*_input, '
              '_type);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_elementwise_unary(const Tensor& _input, '
              'OpType _type)\n'
              '{\n'
              '  ElementWiseUnaryKey key(_input, _type);\n'
              '  ElementWiseUnary* unaryOp;\n')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1441,
         lineno=49,
         tokens=94,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::elementwise_unary',
         body='TensorHandle Graph::elementwise_unary(const TensorHandle '
              '_input,\n'
              '                                      OpType _type)\n'
              '{\n'
              '  Op op = model->get_or_create_elementwise_unary(*_input, '
              '_type);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1442,
         lineno=60,
         tokens=137,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_elementwise_unary',
         body='Op Model::get_or_create_elementwise_unary(const Tensor& _input, '
              'OpType _type)\n'
              '{\n'
              '  ElementWiseUnaryKey key(_input, _type);\n'
              '  ElementWiseUnary* unaryOp;\n'
              '  if (element_unary.find(key) != element_unary.end()) {\n'
              '    unaryOp = element_unary[key];\n'
              '  } else {\n'
              '    unaryOp = new ElementWiseUnary(this, _input, _type);\n'
              '    measure_elementwise_unary_cost(unaryOp);\n'
              '    element_unary[key] = unaryOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = unaryOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1443,
         lineno=62,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type)')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1444,
         lineno=64,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (element_unary.find(key) != element_unary.end()) {\n'
              '    unaryOp = element_unary[key];\n'
              '  } else {\n'
              '    unaryOp = new ElementWiseUnary(this, _input, _type);\n'
              '    measure_elementwise_unary_cost(unaryOp);\n'
              '    element_unary[key] = unaryOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = unaryOp;\n'
              '  retur')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1445,
         lineno=71,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1446,
         lineno=74,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='n ret;\n'
              '}\n'
              '\n'
              'ElementWiseUnary::ElementWiseUnary(Model* _model, const Tensor& '
              '_input,\n'
              '                                   OpType _type)\n'
              ': OpBase(_input, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'ElementWiseUnary::~ElementWiseUnary(void)\n'
              '{}\n'
              '\n'
              'bool ElementWiseUnary::get_int_param')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1447,
         lineno=77,
         tokens=66,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::ElementWiseUnary',
         body='ElementWiseUnary::ElementWiseUnary(Model* _model, const Tensor& '
              '_input,\n'
              '                                   OpType _type)\n'
              ': OpBase(_input, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1448,
         lineno=86,
         tokens=12,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::~ElementWiseUnary',
         body='ElementWiseUnary::~ElementWiseUnary(void)\n{}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1449,
         lineno=89,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void ElementWiseUnary::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                     float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc ')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1450,
         lineno=89,
         tokens=32,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::get_int_parameter',
         body='bool ElementWiseUnary::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1451,
         lineno=94,
         tokens=109,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnary::collect_costs',
         body='void ElementWiseUnary::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                     float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += inputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[ElementWiseUnary]: mode(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         type, runtime, exe_time);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1452,
         lineno=100,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='+= inputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[ElementWiseUnary]: mode(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         type, runtime, exe_time);\n'
              '}\n'
              '\n'
              'ElementWiseUnaryKey::ElementWiseUnaryKey(const Tensor& _input, '
              'OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1453,
         lineno=106,
         tokens=70,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementWiseUnaryKey::ElementWiseUnaryKey',
         body='ElementWiseUnaryKey::ElementWiseUnaryKey(const Tensor& _input, '
              'OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='438ec3ea75cafe17f67dacc163315d931010b2cfd0a7a5ff9cba9ae491ae3f56',
         id=1454,
         lineno=111,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1455,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distr')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1456,
         lineno=1,
         tokens=61,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/squeeze_kernel.cu\n'
              '  Methods: Model::measure_squeeze_cost Squeeze::forward '
              'Squeeze::map Squeeze::unmap\n'
              '  Variables: milliseconds\n'
              '  Using: taso\n'
              '  Usages: forward map measure_squeeze_cost unmap\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1457,
         lineno=10,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ibuted on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Squeeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1458,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1459,
         lineno=20,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::map',
         body='void Squeeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1460,
         lineno=24,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Squeeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Squeeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1461,
         lineno=29,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::unmap',
         body='void Squeeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1462,
         lineno=34,
         tokens=67,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::forward',
         body='void Squeeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1463,
         lineno=38,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_squeeze_cost(Squeeze* sqz)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1464,
         lineno=42,
         tokens=165,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_squeeze_cost',
         body='void Model::measure_squeeze_cost(Squeeze* sqz)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    copy_kernel<<<GET_BLOCKS(sqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputPtr, inputPtr, sqz->outputs[0].volume());\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  sqz->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", '
              'sqz->runtime);\n'
              '}')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1465,
         lineno=46,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    copy_kernel<<<GET_BLOCKS(sqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputPtr, inputPtr, sqz->outputs[0].volume());\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  sqz->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", '
              'sqz->runtime);\n'
              '}\n')

Fragment(document_cs='449f21072b4a4263005dfc57b4ddf33b3185e7b237282f61f69cb6519843be4d',
         id=1466,
         lineno=52,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1467,
         lineno=1,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1468,
         lineno=1,
         tokens=57,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/activation_kernel.cu\n'
              '  Methods: Activation::forward Activation::map '
              'Activation::unmap Model::measure_activation_cost\n'
              '  Variables: milliseconds mode\n'
              '  Using: taso\n'
              '  Usages: forward map measure_activation_cost unmap\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1469,
         lineno=18,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='amespace taso;\n'
              '\n'
              'void Activation::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  helperSetTensorDescriptor(inputs[0], inputTensor);\n'
              '  checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '  cudnnActivationMode_t mode;\n'
              '  switch (type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1470,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1471,
         lineno=20,
         tokens=271,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::map',
         body='void Activation::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  helperSetTensorDescriptor(inputs[0], inputTensor);\n'
              '  checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '  cudnnActivationMode_t mode;\n'
              '  switch (type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      mode = CUDNN_ACTIVATION_RELU;\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      mode = CUDNN_ACTIVATION_TANH;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '      CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  if (!inPlace) {\n'
              '    size_t outputSize = sizeof(DATATYPE);\n'
              '    for (int i = 0; i < inputs[0].numDim; i++)\n'
              '      outputSize *= inputs[0].dim[i];\n'
              '    checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '  } else {\n'
              '    outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '  }\n'
              '}')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1472,
         lineno=26,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnActivationMode_t mode;')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1473,
         lineno=29,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=':\n'
              '      mode = CUDNN_ACTIVATION_RELU;\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      mode = CUDNN_ACTIVATION_TANH;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '      CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  if (!inPlace) {\n'
              '    size_t outputSize = sizeof(DATATYPE);\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1474,
         lineno=45,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < inputs[0].numDim; i++)\n'
              '      outputSize *= inputs[0].dim[i];\n'
              '    checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '  } else {\n'
              '    outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Activation::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1475,
         lineno=53,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::unmap',
         body='void Activation::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  if (!inPlace) {\n'
              '    checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  }\n'
              '}')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1476,
         lineno=57,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!inPlace) {\n'
              '    checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  }\n'
              '}\n'
              '\n'
              'void Activation::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '      &alpha, inputTensor, inputs[0].data_ptr,\n'
              '      &beta, inputTensor, outputs[0].data_ptr));\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1477,
         lineno=62,
         tokens=91,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::forward',
         body='void Activation::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '      &alpha, inputTensor, inputs[0].data_ptr,\n'
              '      &beta, inputTensor, outputs[0].data_ptr));\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1478,
         lineno=69,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_activation_cost(Activation* act)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  helperSetTensorDescriptor(act->inputs[0], inputTensor);\n'
              '  cudnnActivationMode_t mode;\n'
              '  switch (act->type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      mode = CUDNN_ACTIVATION_RELU;\n'
              '      ')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1479,
         lineno=73,
         tokens=439,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_activation_cost',
         body='void Model::measure_activation_cost(Activation* act)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  helperSetTensorDescriptor(act->inputs[0], inputTensor);\n'
              '  cudnnActivationMode_t mode;\n'
              '  switch (act->type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      mode = CUDNN_ACTIVATION_RELU;\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      mode = CUDNN_ACTIVATION_TANH;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '      CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    if (act->inPlace) {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, inputTensor, inputPtr,\n'
              '          &beta, inputTensor, inputPtr));\n'
              '    } else {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, inputTensor, inputPtr,\n'
              '          &beta, inputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  act->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Activation]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           act->inputs[0].dim[0], act->inputs[0].dim[1], '
              'act->inputs[0].dim[2],\n'
              '           act->inputs[0].dim[3], act->type, act->runtime);\n'
              '}')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1480,
         lineno=78,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnActivationMode_t mode;')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1481,
         lineno=83,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='break;\n'
              '    case OP_SIGMOID:\n'
              '      mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      mode = CUDNN_ACTIVATION_TANH;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '      CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1482,
         lineno=98,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (act->inPlace) {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, inputTensor, inputPtr,\n'
              '          &beta, inputTensor, inputPtr));\n'
              '    } else {\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, inputTensor, inputPtr,\n'
              '          &beta, inputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  act->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1483,
         lineno=110,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='45198c1a4d99df31d654a00bdb5c155d76cb8ed37d96416f3f4032377495f3c4',
         id=1484,
         lineno=113,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Activation]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           act->inputs[0].dim[0], act->inputs[0].dim[1], '
              'act->inputs[0].dim[2],\n'
              '           act->inputs[0].dim[3], act->type, act->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1485,
         lineno=1,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOU')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1486,
         lineno=1,
         tokens=139,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/fuse_conv_batchnorm_bias.cc\n'
              '  Functions: key\n'
              '  Methods: FuseConvBatchNormBias::FuseConvBatchNormBias '
              'FuseConvBatchNormBias::collect_costs '
              'FuseConvBatchNormBias::get_int_parameter '
              'FuseConvBatchNormBias::~FuseConvBatchNormBias '
              'FuseConvBatchNormBiasKey::FuseConvBatchNormBiasKey '
              'Graph::fuse_conv_batchnorm_bias '
              'Model::get_or_create_fuse_conv_batchnorm_bias\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: FuseConvBatchNormBias FuseConvBatchNormBiasKey '
              'collect_costs fuse_conv_batchnorm_bias get_int_parameter '
              'get_or_create_fuse_conv_batchnorm_bias\n')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1487,
         lineno=11,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='T WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              '// Preproccessing weights to merge conv and batchnorm\n'
              'TensorHandle Graph::fuse_conv_batchnorm_bias(const TensorHandle '
              '_scale,\n'
              '                                        const TensorHandle '
              '_bias,')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1488,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1489,
         lineno=20,
         tokens=164,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::fuse_conv_batchnorm_bias',
         body='TensorHandle Graph::fuse_conv_batchnorm_bias(const TensorHandle '
              '_scale,\n'
              '                                        const TensorHandle '
              '_bias,\n'
              '                                        const TensorHandle '
              '_mean,\n'
              '                                        const TensorHandle '
              '_var)\n'
              '{\n'
              '  Op op = model->get_or_create_fuse_conv_batchnorm_bias(\n'
              '      *_scale, *_bias, *_mean, *_var);\n'
              '  add_edge(_scale->op, op, _scale->idx, 0);\n'
              '  add_edge(_bias->op, op, _bias->idx, 1);\n'
              '  add_edge(_mean->op, op, _mean->idx, 2);\n'
              '  add_edge(_var->op, op, _var->idx, 3);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1490,
         lineno=21,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '                                        const TensorHandle '
              '_mean,\n'
              '                                        const TensorHandle '
              '_var)\n'
              '{\n'
              '  Op op = model->get_or_create_fuse_conv_batchnorm_bias(\n'
              '      *_scale, *_bias, *_mean, *_var);\n'
              '  add_edge(_scale->op, op, _scale->idx, 0);\n'
              '  add_edge(_bias->op, op, _bias->idx, 1);\n'
              '  add_edge(_mean->op, op, _mean->idx, 2);\n'
              '  add_edge(_var->op, op, _var->idx, 3);\n'
              '  TensorHandle ')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1491,
         lineno=31,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_fuse_conv_batchnorm_bias(const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_bias,\n'
              '                                            const Tensor& '
              '_mean,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormBiasKey key(_scale); // to do\n'
              '  FuseConvBatchNormBias* fuseOp;\n')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1492,
         lineno=36,
         tokens=200,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_fuse_conv_batchnorm_bias',
         body='Op Model::get_or_create_fuse_conv_batchnorm_bias(const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_bias,\n'
              '                                            const Tensor& '
              '_mean,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormBiasKey key(_scale); // to do\n'
              '  FuseConvBatchNormBias* fuseOp;\n'
              '  if (fuse_conv_batchnorm_bias.find(key) != '
              'fuse_conv_batchnorm_bias.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm_bias[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNormBias(this, _scale, _bias, '
              '_mean, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm_bias[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1493,
         lineno=41,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_scale)')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1494,
         lineno=43,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (fuse_conv_batchnorm_bias.find(key) != '
              'fuse_conv_batchnorm_bias.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm_bias[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNormBias(this, _scale, _bias, '
              '_mean, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm_bias[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_uniqu')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1495,
         lineno=52,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1496,
         lineno=53,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'FuseConvBatchNormBias::FuseConvBatchNormBias(Model* _model,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _bias,\n'
              '                                     const Tensor& _mean,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_scale, _bias, _mean, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM_BIAS)\n'
              '{\n'
              '  asser')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1497,
         lineno=58,
         tokens=110,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::FuseConvBatchNormBias',
         body='FuseConvBatchNormBias::FuseConvBatchNormBias(Model* _model,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _bias,\n'
              '                                     const Tensor& _mean,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_scale, _bias, _mean, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM_BIAS)\n'
              '{\n'
              '  assert(_scale.numDim == 1);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _scale;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1498,
         lineno=65,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t(_scale.numDim == 1);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _scale;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'FuseConvBatchNormBias::~FuseConvBatchNormBias(void)\n'
              '{}\n'
              '\n'
              'bool FuseConvBatchNormBias::get_int_parameter(PMParameter para, '
              'int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::collect_costs(float& exe_time, '
              'float& flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1499,
         lineno=71,
         tokens=14,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::~FuseConvBatchNormBias',
         body='FuseConvBatchNormBias::~FuseConvBatchNormBias(void)\n{}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1500,
         lineno=74,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::get_int_parameter',
         body='bool FuseConvBatchNormBias::get_int_parameter(PMParameter para, '
              'int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1501,
         lineno=79,
         tokens=122,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::collect_costs',
         body='void FuseConvBatchNormBias::collect_costs(float& exe_time, '
              'float& flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNormBias]: i(%d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0],\n'
              '          runtime, exe_time);\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1502,
         lineno=81,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNormBias]: i(%d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0],\n'
              '          runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (_conv_w)\n'
              'FuseConvBatchNormBiasKey::FuseConvBatchNormBiasKey(const '
              'Tensor& _scale)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _scale.serialize(keys, idx);\n')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1503,
         lineno=93,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBiasKey::FuseConvBatchNormBiasKey',
         body='FuseConvBatchNormBiasKey::FuseConvBatchNormBiasKey(const '
              'Tensor& _scale)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _scale.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='45aace4f82198e1244ce5c468b68dd32168938559c0e362046d830e755025477',
         id=1504,
         lineno=97,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1505,
         lineno=1,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1506,
         lineno=1,
         tokens=281,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/generator/generator.cc\n'
              '  Classes: ActivationTemp ConcatTemp ConstantIConvTemp '
              'ConstantIMMTemp ConstantOneTemp ConstantPoolTemp ConstantTemp '
              'Conv2DTemp ElementTemp EnlargeConvTemp MatmulTemp OpTemp '
              'Pool2DTemp ScalarMulTemp SplitTemp TransposeTemp\n'
              '  Structs: GraphOp GraphTemp TensorTemp TensorTempList '
              'TransferTemp\n'
              '  Typedefs: TYPE\n'
              '  Macros: BATCHSIZE MAX_NUM_OPS MAX_NUM_TENSORS MAX_SIZE '
              'NO_SAME_INPUTS\n'
              '  Functions: ActivationTemp ConcatTemp ConstantIConvTemp '
              'ConstantIMMTemp ConstantOneTemp ConstantPoolTemp ConstantTemp '
              'Conv2DTemp ElementTemp EnlargeConvTemp MatmulTemp OpTemp '
              'Pool2DTemp ScalarMulTemp SplitTemp TransposeTemp dfs '
              'find_same_subgraph find_same_supergraph init_graph_temp '
              'init_tensor_temp main pass_checks pb_fill_op pb_fill_parameter '
              'pb_fill_rule relu_function same_via_subst variable_ordering\n'
              '  Fields: accAxis axis fstGraph idx isDuplicate kernelH mode '
              'myNumDim ndim numDim numInputs numOps numTensor opIdx relu '
              'samePad shuffle type\n'
              '  Variables: collection curPos graph hashmap inputs left name '
              'operator_names ops padT transfers ttl variable_names '
              'variable_subst\n'
              '  Using: XFlow\n'
              '  Namespaces: std\n'
              '  Usages: NO_SPLIT ShutdownProtobufLibrary out rand to_string '
              'trunc\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1507,
         lineno=10,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include <unordered_map>\n'
              '#include "xflow/ops.h"\n'
              '#include "rules.pb.h"\n'
              'typedef int TYPE;\n'
              '#define MAX_SIZE 512\n'
              '#define MAX_NUM_OPS 8\n'
              '#define MAX_NUM_TENSORS 8\n'
              '#define BATCHSIZE 2\n'
              '#define NO_SAME_INPUTS\n'
              '\n'
              'using namespace XFlow;\n'
              'const SplitInfo SplitInfo::NO_SPLIT = SplitInfo();\n'
              '\n'
              'TYPE relu_function(TYPE input)\n'
              '{\n'
              '  return input * (input + 1) + 1;\n'
              '}\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1508,
         lineno=19,
         tokens=4,
         depth=0,
         parent_id=None,
         category='typedef',
         summary=False,
         name='TYPE',
         body='typedef int TYPE;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1509,
         lineno=20,
         tokens=5,
         depth=0,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_SIZE',
         body='#define MAX_SIZE 512')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1510,
         lineno=21,
         tokens=7,
         depth=0,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_NUM_OPS',
         body='#define MAX_NUM_OPS 8')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1511,
         lineno=22,
         tokens=8,
         depth=0,
         parent_id=None,
         category='macro',
         summary=False,
         name='MAX_NUM_TENSORS',
         body='#define MAX_NUM_TENSORS 8')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1512,
         lineno=23,
         tokens=5,
         depth=0,
         parent_id=None,
         category='macro',
         summary=False,
         name='BATCHSIZE',
         body='#define BATCHSIZE 2')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1513,
         lineno=24,
         tokens=6,
         depth=0,
         parent_id=None,
         category='macro',
         summary=False,
         name='NO_SAME_INPUTS',
         body='#define NO_SAME_INPUTS')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1514,
         lineno=26,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='XFlow',
         body='using namespace XFlow;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1515,
         lineno=29,
         tokens=5,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='relu_function',
         body='relu_function(TYPE input)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1516,
         lineno=29,
         tokens=22,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='relu_function',
         body='TYPE relu_function(TYPE input)\n'
              '{\n'
              '  return input * (input + 1) + 1;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1517,
         lineno=33,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct TensorTemp {\n'
              '  int numDim, dim[MAX_DIM], stride[MAX_DIM];\n'
              '  SplitInfo split[MAX_DIM];\n'
              '  TYPE data[MAX_SIZE];\n'
              '  // Do not compare the following metadata for equation checks\n'
              '  int opIdx, tsIdx;\n'
              '  inline bool operator==(const TensorTemp& tt) const {\n'
              '    if (tt.numDim != numDim) return false;\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1518,
         lineno=34,
         tokens=898,
         depth=0,
         parent_id=None,
         category='struct',
         summary=False,
         name='TensorTemp',
         body='struct TensorTemp {\n'
              '  int numDim, dim[MAX_DIM], stride[MAX_DIM];\n'
              '  SplitInfo split[MAX_DIM];\n'
              '  TYPE data[MAX_SIZE];\n'
              '  // Do not compare the following metadata for equation checks\n'
              '  int opIdx, tsIdx;\n'
              '  inline bool operator==(const TensorTemp& tt) const {\n'
              '    if (tt.numDim != numDim) return false;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      if (dim[i] != tt.dim[i]) return false;\n'
              '      if (stride[i] != tt.stride[i]) return false;\n'
              '      if (split[i] != tt.split[i]) return false;\n'
              '      total *= dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      if (data[i] != tt.data[i]) return false;\n'
              '    return true;\n'
              '  }\n'
              '  TensorTemp& operator=(const TensorTemp& tt)\n'
              '  {\n'
              '    numDim = tt.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      dim[i] = tt.dim[i];\n'
              '      total *= dim[i];\n'
              '      stride[i] = tt.stride[i];\n'
              '      split[i] = tt.split[i];\n'
              '    }\n'
              '    assert(total <= MAX_SIZE);\n'
              '    for (int i = 0; i < total; i++)\n'
              '      data[i] = tt.data[i];\n'
              '    opIdx = tt.opIdx;\n'
              '    tsIdx = tt.tsIdx;\n'
              '    return *this;\n'
              '  }\n'
              '  int size(void)\n'
              '  {\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      total *= dim[i];\n'
              '    return total;\n'
              '  }\n'
              '  inline TYPE get_value(int n, int c, int h, int w) const\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline TYPE get_value(int n, int c) const\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline void set_value(int n, int c, int h, int w, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n'
              '    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d %d %d}\\n", dim[0], dim[1], dim[2], '
              'dim[3]);\n'
              '      printf("n = %d c = %d h = %d w = %d\\n", n, c, h, w);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  inline void set_value(int n, int c, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n'
              '    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d}\\n", dim[0], dim[1]);\n'
              '      printf("n = %d c = %d\\n", n, c);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  void print(std::string name)\n'
              '  {\n'
              '    printf("%s:\\n", name.c_str());\n'
              '    printf("dim[%d] = {%d, %d, %d, %d}\\n", numDim, dim[0], '
              'dim[1], dim[2], dim[3]);\n'
              '    printf("stride[%d] = {%d, %d, %d, %d}\\n", numDim, '
              'stride[0], stride[1], stride[2], stride[3]);\n'
              '    for (int i = 0; i < size(); i++)\n'
              '      printf("%d ", data[i]);\n'
              '    printf("\\n");\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1519,
         lineno=35,
         tokens=12,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='numDim',
         body='int numDim, dim[MAX_DIM], stride[MAX_DIM];')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1520,
         lineno=39,
         tokens=7,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='opIdx',
         body='int opIdx, tsIdx;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1521,
         lineno=43,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      if (dim[i] != tt.dim[i]) return false;\n'
              '      if (stride[i] != tt.stride[i]) return false;\n'
              '      if (split[i] != tt.split[i]) return false;\n'
              '      total *= dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      if (data[i] != tt.data[i]) return false;\n'
              '    return true;\n'
              '  }\n'
              '  TensorTemp& operator=(const TensorTemp& tt)\n'
              '  {\n'
              '    numDim = tt.numDim;\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1522,
         lineno=57,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      dim[i] = tt.dim[i];\n'
              '      total *= dim[i];\n'
              '      stride[i] = tt.stride[i];\n'
              '      split[i] = tt.split[i];\n'
              '    }\n'
              '    assert(total <= MAX_SIZE);\n'
              '    for (int i = 0; i < total; i++)\n'
              '      data[i] = tt.data[i];\n'
              '    opIdx = tt.opIdx;\n'
              '    tsIdx = tt.tsIdx;\n'
              '    return *this;\n'
              '  }\n'
              '  int size(void)\n'
              '  {\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1523,
         lineno=73,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++)\n'
              '      total *= dim[i];\n'
              '    return total;\n'
              '  }\n'
              '  inline TYPE get_value(int n, int c, int h, int w) const\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline TYPE get_val')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1524,
         lineno=84,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ue(int n, int c) const\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline void set_value(int n, int c, int h, int w, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1525,
         lineno=95,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d %d %d}\\n", dim[0], dim[1], dim[2], '
              'dim[3]);\n'
              '      printf("n = %d c = %d h = %d w = %d\\n", n, c, h, w);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  inline void set_value(int n, int c, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1526,
         lineno=106,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d}\\n", dim[0], dim[1]);\n'
              '      printf("n = %d c = %d\\n", n, c);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  void print(std::string na')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1527,
         lineno=113,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='me)\n'
              '  {\n'
              '    printf("%s:\\n", name.c_str());\n'
              '    printf("dim[%d] = {%d, %d, %d, %d}\\n", numDim, dim[0], '
              'dim[1], dim[2], dim[3]);\n'
              '    printf("stride[%d] = {%d, %d, %d, %d}\\n", numDim, '
              'stride[0], stride[1], stride[2], stride[3]);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1528,
         lineno=118,
         tokens=31,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < size(); i++)\n'
              '      printf("%d ", data[i]);\n'
              '    printf("\\n");\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1529,
         lineno=123,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct TensorTempList {\n'
              '  int numTensor;\n'
              '  TensorTemp tensors[MAX_NUM_TENSORS];\n'
              '  bool operator==(const TensorTempList& ttl) const\n'
              '  {\n'
              '    if (numTensor != ttl.numTensor) return false;\n'
              '    for (int i = 0; i < numTensor; i++)\n'
              '      if (!(tensors[i] == ttl.tensors[i])) return false;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1530,
         lineno=124,
         tokens=87,
         depth=0,
         parent_id=None,
         category='struct',
         summary=False,
         name='TensorTempList',
         body='struct TensorTempList {\n'
              '  int numTensor;\n'
              '  TensorTemp tensors[MAX_NUM_TENSORS];\n'
              '  bool operator==(const TensorTempList& ttl) const\n'
              '  {\n'
              '    if (numTensor != ttl.numTensor) return false;\n'
              '    for (int i = 0; i < numTensor; i++)\n'
              '      if (!(tensors[i] == ttl.tensors[i])) return false;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1531,
         lineno=125,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='numTensor',
         body='int numTensor;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1532,
         lineno=135,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class OpTemp {\n'
              'public:\n'
              '  OpTemp(int _inputs, int _outputs, OpType _type)\n'
              '  : numInputs(_inputs), numOutputs(_outputs), type(_type) {}\n'
              '  virtual bool compute(int n, TensorTemp* inputs, int opIdx) = '
              '0;\n'
              '  virtual bool compute(const TensorTemp& x, int opIdx) = 0;\n'
              '  vir')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1533,
         lineno=136,
         tokens=126,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='OpTemp',
         body='class OpTemp {\n'
              'public:\n'
              '  OpTemp(int _inputs, int _outputs, OpType _type)\n'
              '  : numInputs(_inputs), numOutputs(_outputs), type(_type) {}\n'
              '  virtual bool compute(int n, TensorTemp* inputs, int opIdx) = '
              '0;\n'
              '  virtual bool compute(const TensorTemp& x, int opIdx) = 0;\n'
              '  virtual bool compute(const TensorTemp& x, const TensorTemp& '
              'y, int opIdx) = 0;\n'
              'public:\n'
              '  OpType type;\n'
              '  int numInputs, numOutputs;\n'
              '  TensorTemp outputs[MAX_NUM_OUTPUTS];\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1534,
         lineno=138,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='OpTemp',
         body='OpTemp(int _inputs, int _outputs, OpType _type)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1535,
         lineno=138,
         tokens=32,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='OpTemp',
         body='OpTemp(int _inputs, int _outputs, OpType _type)\n'
              '  : numInputs(_inputs), numOutputs(_outputs), type(_type) {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1536,
         lineno=142,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tual bool compute(const TensorTemp& x, const TensorTemp& y, int '
              'opIdx) = 0;\n'
              'public:\n'
              '  OpType type;\n'
              '  int numInputs, numOutputs;\n'
              '  TensorTemp outputs[MAX_NUM_OUTPUTS];\n'
              '};\n'
              '\n'
              'std::map<int, std::string> variable_names;\n'
              'std::map<const OpTemp*, std::string> operator_names;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1537,
         lineno=144,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='type',
         body='OpType type;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1538,
         lineno=145,
         tokens=7,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='numInputs',
         body='int numInputs, numOutputs;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1539,
         lineno=149,
         tokens=12,
         depth=0,
         parent_id=None,
         category='variable',
         summary=False,
         name='variable_names',
         body='std::map<int, std::string> variable_names;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1540,
         lineno=150,
         tokens=14,
         depth=0,
         parent_id=None,
         category='variable',
         summary=False,
         name='operator_names',
         body='std::map<const OpTemp*, std::string> operator_names;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1541,
         lineno=151,
         tokens=63,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct GraphTemp {\n'
              '  struct GraphOp {\n'
              '    const OpTemp* opTemp;\n'
              '    int opIdx[MAX_NUM_INPUTS], tsIdx[MAX_NUM_INPUTS];\n'
              '    bool operator==(const GraphOp& gop) const\n'
              '    {\n'
              '      if (opTemp != gop.opTemp) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1542,
         lineno=152,
         tokens=1283,
         depth=0,
         parent_id=None,
         category='struct',
         summary=False,
         name='GraphTemp',
         body='struct GraphTemp {\n'
              '  struct GraphOp {\n'
              '    const OpTemp* opTemp;\n'
              '    int opIdx[MAX_NUM_INPUTS], tsIdx[MAX_NUM_INPUTS];\n'
              '    bool operator==(const GraphOp& gop) const\n'
              '    {\n'
              '      if (opTemp != gop.opTemp) return false;\n'
              '      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        if ((opIdx[i] != gop.opIdx[i]) || (tsIdx[i] != '
              'gop.tsIdx[i]))\n'
              '          return false;\n'
              '      }\n'
              '      return true;\n'
              '    }\n'
              '  };\n'
              '  int numOps;\n'
              '  GraphOp op[MAX_NUM_OPS];\n'
              '  int mapped_outputs(int* opIdxs, int* tsIdxs) const\n'
              '  {\n'
              '    int mappedOutputs = 0;\n'
              '    for (int op1 = 0; op1 < numOps; op1++)\n'
              '      for (int ts1 = 0; ts1 < op[op1].opTemp->numOutputs; '
              'ts1++) {\n'
              '        bool found = false;\n'
              '        for (int op2 = op1 + 1; op2 < numOps; op2++)\n'
              '          for (int ts2 = 0; ts2 < op[op2].opTemp->numInputs; '
              'ts2++)\n'
              '            if (op[op2].opIdx[ts2] == op1 && op[op2].tsIdx[ts2] '
              '== ts1)\n'
              '              found = true;\n'
              '        if (!found) {\n'
              '          opIdxs[mappedOutputs] = op1;\n'
              '          tsIdxs[mappedOutputs] = ts1;\n'
              '          mappedOutputs ++;\n'
              '        }\n'
              '      }\n'
              '    return mappedOutputs;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 0);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, const TensorTemp& tt0)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 1);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, const TensorTemp& tt0, '
              'const TensorTemp& tt1)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 2);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    op[numOps].opIdx[1] = tt1.opIdx; op[numOps].tsIdx[1] = '
              'tt1.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void pop_op(void)\n'
              '  {\n'
              '    numOps --;\n'
              '  }\n'
              '  std::string to_string(void)\n'
              '  {\n'
              '    //for (int i = 0; i < numOps; i++)\n'
              '      //printf("[%d] op(%d) input1(%d %d) input2(%d %d)\\n", i, '
              'op[i].opTemp->type, op[i].opIdx[0], op[i].tsIdx[0], '
              'op[i].opIdx[1], op[i].tsIdx[1]);\n'
              '    std::string name;\n'
              '    for (int i = numOps - 1; i >= 0; i--)\n'
              '      for (int j = op[i].opTemp->numOutputs - 1; j >= 0; j--) '
              '{\n'
              '        bool found = false;\n'
              '        for (int k = i + 1; k < numOps; k++)\n'
              '          for (int l = 0; l < op[k].opTemp->numInputs; l++)\n'
              '            if (op[k].opIdx[l] == i && op[k].tsIdx[l] == j)\n'
              '              found = true;\n'
              '        if (!found) {\n'
              '          name = name + to_string(i, j) + " | ";\n'
              '        }\n'
              '      }\n'
              '    return name;\n'
              '  }\n'
              '  std::string to_string(int opIdx, int tsIdx)\n'
              '  {\n'
              '    if (opIdx < 0) {\n'
              '      assert(tsIdx == 0);\n'
              '      assert(variable_names.find(opIdx) != '
              'variable_names.end());\n'
              '      return variable_names[opIdx];\n'
              '    } else {\n'
              '      const OpTemp* opTemp = op[opIdx].opTemp;\n'
              '      assert(operator_names.find(opTemp) != '
              'operator_names.end());\n'
              '      std::string name = operator_names[opTemp] + "["\n'
              '                       + std::to_string(tsIdx) + "]{";\n'
              '      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        name = name + "input" + std::to_string(i) + "("\n'
              '             + to_string(op[opIdx].opIdx[i], '
              'op[opIdx].tsIdx[i]) + ")";\n'
              '      }\n'
              '      return name + "}";\n'
              '    }\n'
              '  }\n'
              '  int find(std::string name) const\n'
              '  {\n'
              '    int idx = 0;\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n'
              '      for (int j = 0; j < opTemp->numInputs; j++) {\n'
              '        if (op[i].opIdx[j] < 0) {\n'
              '          assert(variable_names.find(op[i].opIdx[j]) != '
              'variable_names.end());\n'
              '          if (variable_names[op[i].opIdx[j]] == name)\n'
              '            return idx;\n'
              '        }\n'
              '        idx ++;\n'
              '      }\n'
              '    }\n'
              '    return idx;\n'
              '  }\n'
              '  void print(std::string prefix)\n'
              '  {\n'
              '    printf("%s\\n", prefix.c_str());\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n'
              '      printf("[%d]  ", opTemp->type);\n'
              '      for (int j = 0; j < opTemp->numInputs; j++)\n'
              '        printf("(%d %d) ", op[i].opIdx[j], op[i].tsIdx[j]);\n'
              '      printf("\\n");\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1543,
         lineno=153,
         tokens=118,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='GraphOp',
         body='struct GraphOp {\n'
              '    const OpTemp* opTemp;\n'
              '    int opIdx[MAX_NUM_INPUTS], tsIdx[MAX_NUM_INPUTS];\n'
              '    bool operator==(const GraphOp& gop) const\n'
              '    {\n'
              '      if (opTemp != gop.opTemp) return false;\n'
              '      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        if ((opIdx[i] != gop.opIdx[i]) || (tsIdx[i] != '
              'gop.tsIdx[i]))\n'
              '          return false;\n'
              '      }\n'
              '      return true;\n'
              '    }\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1544,
         lineno=159,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        if ((opIdx[i] != gop.opIdx[i]) || (tsIdx[i] != '
              'gop.tsIdx[i]))\n'
              '          return false;\n'
              '      }\n'
              '      return true;\n'
              '    }\n'
              '  };\n'
              '  int numOps;\n'
              '  GraphOp op[MAX_NUM_OPS];\n'
              '  int mapped_outputs(int* opIdxs, int* tsIdxs) const\n'
              '  {\n'
              '    int mappedOutputs = 0;\n'
              '    for (int op1 = 0; op1 < numOps; op1++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1545,
         lineno=166,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='numOps',
         body='int numOps;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1546,
         lineno=172,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int ts1 = 0; ts1 < op[op1].opTemp->numOutputs; '
              'ts1++) {\n'
              '        bool found = false;\n'
              '        for (int op2 = op1 + 1; op2 < numOps; op2++)\n'
              '          for (int ts2 = 0; ts2 < op[op2].opTemp->numInputs; '
              'ts2++)\n'
              '            if (op[op2].opIdx[ts2] == op1 && op[op2].tsIdx[ts2] '
              '== ts1)\n'
              '              found = true;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1547,
         lineno=178,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (!found) {\n'
              '          opIdxs[mappedOutputs] = op1;\n'
              '          tsIdxs[mappedOutputs] = ts1;\n'
              '          mappedOutputs ++;\n'
              '        }\n'
              '      }\n'
              '    return mappedOutputs;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 0);\n'
              '    op[numOps].opTemp = opTe')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1548,
         lineno=189,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mp;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, const TensorTemp& tt0)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 1);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1549,
         lineno=199,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='const TensorTemp& tt0, const TensorTemp& tt1)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 2);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    op[numOps].opIdx[1] = tt1.opIdx; op[numOps].tsIdx[1] = '
              'tt1.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  vo')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1550,
         lineno=207,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='id pop_op(void)\n'
              '  {\n'
              '    numOps --;\n'
              '  }\n'
              '  std::string to_string(void)\n'
              '  {\n'
              '    //for (int i = 0; i < numOps; i++)\n'
              '      //printf("[%d] op(%d) input1(%d %d) input2(%d %d)\\n", i, '
              'op[i].opTemp->type, op[i].opIdx[0], op[i].tsIdx[0], '
              'op[i].opIdx[1], op[i].tsIdx[1]);\n'
              '    std::string name;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1551,
         lineno=215,
         tokens=5,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='name',
         body='std::string name;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1552,
         lineno=216,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = numOps - 1; i >= 0; i--)\n'
              '      for (int j = op[i].opTemp->numOutputs - 1; j >= 0; j--) '
              '{\n'
              '        bool found = false;\n'
              '        for (int k = i + 1; k < numOps; k++)\n'
              '          for (int l = 0; l < op[k].opTemp->numInputs; l++)\n'
              '            if (op[k].opIdx[l] == i && op[k].tsIdx[l] == j)\n'
              '              found = true;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1553,
         lineno=223,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (!found) {\n'
              '          name = name + to_string(i, j) + " | ";\n'
              '        }\n'
              '      }\n'
              '    return name;\n'
              '  }\n'
              '  std::string to_string(int opIdx, int tsIdx)\n'
              '  {\n'
              '    if (opIdx < 0) {\n'
              '      assert(tsIdx == 0);\n'
              '      assert(variable_names.find(opIdx) != '
              'variable_names.end());\n'
              '      return variable_names[opIdx];\n'
              '    } else {\n'
              '      const OpTemp* opTemp = op[opIdx].opTemp;\n'
              '      assert(operator_names.find(opTemp) != '
              'operator_names.end());\n'
              '      std::string name = operator_names[opTemp] + "["\n'
              '                       + std::to_string(tsIdx) + "]{";\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1554,
         lineno=240,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        name = name + "input" + std::to_string(i) + "("\n'
              '             + to_string(op[opIdx].opIdx[i], '
              'op[opIdx].tsIdx[i]) + ")";\n'
              '      }\n'
              '      return name + "}";\n'
              '    }\n'
              '  }\n'
              '  int find(std::string name) const\n'
              '  {\n'
              '    int idx = 0;\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1555,
         lineno=252,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 0; j < opTemp->numInputs; j++) {\n'
              '        if (op[i].opIdx[j] < 0) {\n'
              '          assert(variable_names.find(op[i].opIdx[j]) != '
              'variable_names.end());\n'
              '          if (variable_names[op[i].opIdx[j]] == name)\n'
              '            return idx;\n'
              '        }\n'
              '        idx ++;\n'
              '      }\n'
              '    }\n'
              '    return idx;\n'
              '  }\n'
              '  void print(std::string prefix)\n'
              '  {\n'
              '    printf("%s\\n", prefix.c_str());\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n'
              '      printf("[%d]  ", opTemp->type);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1556,
         lineno=269,
         tokens=51,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 0; j < opTemp->numInputs; j++)\n'
              '        printf("(%d %d) ", op[i].opIdx[j], op[i].tsIdx[j]);\n'
              '      printf("\\n");\n'
              '    }\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1557,
         lineno=275,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ScalarMulTemp : public OpTemp {\n'
              'public:\n'
              '  ScalarMulTemp(void)\n'
              '  : OpTemp(2, 1, OP_MUL)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'scalar, int opIdx)\n'
              '  {\n'
              '    if (scalar.numDim != 0) return false;\n'
              '    outputs[0].numDim = input.numDim;\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1558,
         lineno=276,
         tokens=268,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ScalarMulTemp',
         body='class ScalarMulTemp : public OpTemp {\n'
              'public:\n'
              '  ScalarMulTemp(void)\n'
              '  : OpTemp(2, 1, OP_MUL)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'scalar, int opIdx)\n'
              '  {\n'
              '    if (scalar.numDim != 0) return false;\n'
              '    outputs[0].numDim = input.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < input.numDim; i++) {\n'
              '      outputs[0].dim[i] = input.dim[i];\n'
              '      outputs[0].stride[i] = input.stride[i];\n'
              '      outputs[0].split[i] = input.split[i];\n'
              '      total *= input.dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      outputs[0].data[i] = input.data[i] * scalar.data[0];\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;   \n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1559,
         lineno=278,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ScalarMulTemp',
         body='ScalarMulTemp(void)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1560,
         lineno=278,
         tokens=20,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ScalarMulTemp',
         body='ScalarMulTemp(void)\n  : OpTemp(2, 1, OP_MUL)\n  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1561,
         lineno=296,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < input.numDim; i++) {\n'
              '      outputs[0].dim[i] = input.dim[i];\n'
              '      outputs[0].stride[i] = input.stride[i];\n'
              '      outputs[0].split[i] = input.split[i];\n'
              '      total *= input.dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      outputs[0].data[i] = input.data[i] * scalar.data[0];\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;   \n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1562,
         lineno=309,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class EnlargeConvTemp: public OpTemp {\n'
              'public:\n'
              '  EnlargeConvTemp(int _kernelH, int _kernelW)\n'
              '  : OpTemp(1, 1, OP_ENLARGE), kernelH(_kernelH), '
              'kernelW(_kernelW)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    //if (input.opIdx >= 0) return false;\n'
              '    if (input.numDim != 4) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1563,
         lineno=310,
         tokens=725,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='EnlargeConvTemp',
         body='class EnlargeConvTemp: public OpTemp {\n'
              'public:\n'
              '  EnlargeConvTemp(int _kernelH, int _kernelW)\n'
              '  : OpTemp(1, 1, OP_ENLARGE), kernelH(_kernelH), '
              'kernelW(_kernelW)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    //if (input.opIdx >= 0) return false;\n'
              '    if (input.numDim != 4) return false;\n'
              '    if ((input.dim[2] > kernelH) || (input.dim[3] > kernelW)) '
              'return false;\n'
              '    if ((input.dim[2] == kernelH) && (input.dim[3] == kernelW)) '
              'return false;\n'
              '    if (input.opIdx >= 0) return false;\n'
              '    int offH = (kernelH - input.dim[2]) / 2;\n'
              '    int offW = (kernelW - input.dim[3]) / 2;\n'
              '    outputs[0].numDim = 4;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = input.dim[1];\n'
              '    outputs[0].dim[2] = kernelH;\n'
              '    outputs[0].dim[3] = kernelW;\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = input.split[1];\n'
              '    outputs[0].split[2] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[3] = SplitInfo::NO_SPLIT;\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++)\n'
              '            if (h >= offH && w >= offW && h - offH < '
              'input.dim[2]\n'
              '            && w - offW < input.dim[3]) {\n'
              '              int weightVal = input.get_value(cout, cin, h - '
              'offH, w - offW);\n'
              '              outputs[0].set_value(cout, cin, h, w, '
              'weightVal);\n'
              '            } else {\n'
              '              outputs[0].set_value(cout, cin, h, w, 0);\n'
              '            }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;           \n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1564,
         lineno=312,
         tokens=42,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='EnlargeConvTemp',
         body='EnlargeConvTemp(int _kernelH, int _kernelW)\n'
              '  : OpTemp(1, 1, OP_ENLARGE), kernelH(_kernelH), '
              'kernelW(_kernelW)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1565,
         lineno=312,
         tokens=13,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='EnlargeConvTemp',
         body='EnlargeConvTemp(int _kernelH, int _kernelW)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1566,
         lineno=324,
         tokens=52,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if ((input.dim[2] > kernelH) || (input.dim[3] > kernelW)) '
              'return false;\n'
              '    if ((input.dim[2] == kernelH) && (input.dim[3] == kernelW)) '
              'return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1567,
         lineno=326,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (input.opIdx >= 0) return false;\n'
              '    int offH = (kernelH - input.dim[2]) / 2;\n'
              '    int offW = (kernelW - input.dim[3]) / 2;\n'
              '    outputs[0].numDim = 4;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = input.dim[1];\n'
              '    outputs[0].dim[2] = kernelH;\n'
              '    outputs[0].dim[3] = kernelW;\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = o')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1568,
         lineno=335,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='utputs[0].stride[3] * outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = input.split[1];\n'
              '    outputs[0].split[2] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[3] = SplitInfo::NO_SPLIT;\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1569,
         lineno=343,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1570,
         lineno=347,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (h >= offH && w >= offW && h - offH < '
              'input.dim[2]\n'
              '            && w - offW < input.dim[3]) {\n'
              '              int weightVal = input.get_value(cout, cin, h - '
              'offH, w - offW);\n'
              '              outputs[0].set_value(cout, cin, h, w, '
              'weightVal);\n'
              '            } else {\n'
              '              outputs[')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1571,
         lineno=352,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0].set_value(cout, cin, h, w, 0);\n'
              '            }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;           \n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1572,
         lineno=364,
         tokens=7,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='kernelH',
         body='int kernelH, kernelW;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1573,
         lineno=366,
         tokens=51,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ConstantTemp : public OpTemp {\n'
              'public:\n'
              '  ConstantTemp(int _ndim, const int* _dims, OpType _type)\n'
              '  : OpTemp(0, 1, _type), ndim(_ndim)\n'
              '  {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1574,
         lineno=367,
         tokens=186,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConstantTemp',
         body='class ConstantTemp : public OpTemp {\n'
              'public:\n'
              '  ConstantTemp(int _ndim, const int* _dims, OpType _type)\n'
              '  : OpTemp(0, 1, _type), ndim(_ndim)\n'
              '  {\n'
              '    for (int i = 0; i < ndim; i++)\n'
              '      dims[i] = _dims[i];\n'
              '  }\n'
              '  virtual bool compute(int opIdx) = 0;\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int ndim, dims[MAX_DIM];\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1575,
         lineno=369,
         tokens=66,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantTemp',
         body='ConstantTemp(int _ndim, const int* _dims, OpType _type)\n'
              '  : OpTemp(0, 1, _type), ndim(_ndim)\n'
              '  {\n'
              '    for (int i = 0; i < ndim; i++)\n'
              '      dims[i] = _dims[i];\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1576,
         lineno=369,
         tokens=18,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantTemp',
         body='ConstantTemp(int _ndim, const int* _dims, OpType _type)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1577,
         lineno=372,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < ndim; i++)\n'
              '      dims[i] = _dims[i];\n'
              '  }\n'
              '  virtual bool compute(int opIdx) = 0;\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int ndim, dims[MAX_DIM];\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1578,
         lineno=392,
         tokens=8,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='ndim',
         body='int ndim, dims[MAX_DIM];')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1579,
         lineno=394,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ConstantPoolTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantPoolTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_POOL)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1580,
         lineno=395,
         tokens=250,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConstantPoolTemp',
         body='class ConstantPoolTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantPoolTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_POOL)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1581,
         lineno=397,
         tokens=40,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantPoolTemp',
         body='ConstantPoolTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_POOL)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1582,
         lineno=397,
         tokens=13,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantPoolTemp',
         body='ConstantPoolTemp(int _ndim, const int* dims)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1583,
         lineno=405,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1584,
         lineno=414,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n'
              '\n'
              'class ConstantIConvTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIConvTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ICONV)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1585,
         lineno=422,
         tokens=392,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConstantIConvTemp',
         body='class ConstantIConvTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIConvTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ICONV)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int kh = 0; kh < outputs[0].dim[2]; kh++)\n'
              '          for (int kw = 0; kw < outputs[0].dim[3]; kw++) {\n'
              '            if (cout == cin && kh == outputs[0].dim[2]/2 && kw '
              '== outputs[0].dim[3]/2)\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 1);\n'
              '            else\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 0);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1586,
         lineno=424,
         tokens=54,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantIConvTemp',
         body='ConstantIConvTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ICONV)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1587,
         lineno=424,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantIConvTemp',
         body='ConstantIConvTemp(int _ndim, const int* dims)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1588,
         lineno=433,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1589,
         lineno=443,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int kh = 0; kh < outputs[0].dim[2]; kh++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1590,
         lineno=445,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int kw = 0; kw < outputs[0].dim[3]; kw++) {\n'
              '            if (cout == cin && kh == outputs[0].dim[2]/2 && kw '
              '== outputs[0].dim[3]/2)\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 1);\n'
              '            else\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 0);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1591,
         lineno=456,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ConstantIMMTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIMMTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_IMM)\n'
              '  {\n'
              '    assert(_ndim == 2);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1592,
         lineno=457,
         tokens=305,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConstantIMMTemp',
         body='class ConstantIMMTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIMMTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_IMM)\n'
              '  {\n'
              '    assert(_ndim == 2);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        outputs[0].data[cout * outputs[0].dim[1] + cin] = cout '
              '== cin ? 1 : 0;\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1593,
         lineno=459,
         tokens=53,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantIMMTemp',
         body='ConstantIMMTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_IMM)\n'
              '  {\n'
              '    assert(_ndim == 2);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1594,
         lineno=459,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantIMMTemp',
         body='ConstantIMMTemp(int _ndim, const int* dims)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1595,
         lineno=468,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1596,
         lineno=478,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        outputs[0].data[cout * outputs[0].dim[1] + cin] = cout '
              '== cin ? 1 : 0;\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1597,
         lineno=485,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ConstantOneTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantOneTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ONE)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1598,
         lineno=486,
         tokens=250,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConstantOneTemp',
         body='class ConstantOneTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantOneTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ONE)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1599,
         lineno=488,
         tokens=40,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantOneTemp',
         body='ConstantOneTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ONE)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1600,
         lineno=488,
         tokens=13,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConstantOneTemp',
         body='ConstantOneTemp(int _ndim, const int* dims)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1601,
         lineno=496,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1602,
         lineno=505,
         tokens=61,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1603,
         lineno=512,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Conv2DTemp : public OpTemp {\n'
              'public:\n'
              '  Conv2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, bool _relu)\n'
              '  : OpTemp(2, 1, OP_CONV2D), kernelH(_kernelH), '
              'kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1604,
         lineno=513,
         tokens=1241,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='Conv2DTemp',
         body='class Conv2DTemp : public OpTemp {\n'
              'public:\n'
              '  Conv2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, bool _relu)\n'
              '  : OpTemp(2, 1, OP_CONV2D), kernelH(_kernelH), '
              'kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad), '
              'relu(_relu)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n'
              '    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW)) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE && input.dim[0] != 2 * '
              'BATCHSIZE) return false;\n'
              '    //if (input.dim[1] != weight.dim[1]) return false;\n'
              '    if (input.dim[1] % weight.dim[1] != 0) return false;\n'
              '    int group = input.dim[1] / weight.dim[1];\n'
              '    if (weight.dim[0] % group != 0) return false;\n'
              '    //if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[0];\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            int group_idx = c / (weight.dim[0] / group);\n'
              '            TYPE val = 0;\n'
              '            for (int cin = 0; cin < weight.dim[1]; cin ++)\n'
              '              for (int kh = 0; kh < weight.dim[2]; kh ++)\n'
              '                for (int kw = 0; kw < weight.dim[3]; kw ++) {\n'
              '                  int posH = h * strideH + kh - padT;\n'
              '                  int posW = w * strideW + kw - padL;\n'
              '                  assert(posH >= -padT && posH <= input.dim[2] '
              '+ padT);\n'
              '                  assert(posW >= -padL && posW <= input.dim[3] '
              '+ padL);\n'
              '                  if ((posH >= 0) && (posH < input.dim[2])\n'
              '                  && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                    int weightVal = weight.get_value(c, cin, '
              'kh, kw);\n'
              '                    int inputVal = input.get_value(n, cin + '
              'group_idx * weight.dim[1], posH, posW);\n'
              '                    val += weightVal * inputVal;\n'
              '                  }\n'
              '                }\n'
              '            if (relu) val = relu_function(val);\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool relu, samePad;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1605,
         lineno=515,
         tokens=87,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='Conv2DTemp',
         body='Conv2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, bool _relu)\n'
              '  : OpTemp(2, 1, OP_CONV2D), kernelH(_kernelH), '
              'kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad), '
              'relu(_relu)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1606,
         lineno=515,
         tokens=35,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='Conv2DTemp',
         body='Conv2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, bool _relu)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1607,
         lineno=519,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='), relu(_relu)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1608,
         lineno=534,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW)) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE && input.dim[0] != 2 * '
              'BATCHSIZE) return false;\n'
              '    //if (input.dim[1] != weight.dim[1]) return false;\n'
              '    if (input.dim[1] % weight.dim[1] != 0) return false;\n'
              '    int group = input.dim[1] / weight.dim[1];\n'
              '    if (weight.dim[0] % group != 0) return false;\n'
              '    //if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    int padT, padL;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1609,
         lineno=541,
         tokens=7,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='padT',
         body='int padT, padL;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1610,
         lineno=542,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * st')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1611,
         lineno=548,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rideH + weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      ou')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1612,
         lineno=557,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1613,
         lineno=564,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[0];\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1614,
         lineno=573,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            int group_idx = c / (weight.dim[0] / group);\n'
              '            TYPE val = 0;\n'
              '            for (int cin = 0; cin < weight.dim[1]; cin ++)\n'
              '              for (int kh = 0; kh < weight.dim[2]; kh ++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1615,
         lineno=581,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                for (int kw = 0; kw < weight.dim[3]; kw ++) {\n'
              '                  int posH = h * strideH + kh - padT;\n'
              '                  int posW = w * strideW + kw - padL;\n'
              '                  assert(posH >= -padT && posH <= input.dim[2] '
              '+ padT);\n'
              '                  assert(posW >= -padL && posW <= input.dim[3] '
              '+ padL);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1616,
         lineno=586,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                  if ((posH >= 0) && (posH < input.dim[2])\n'
              '                  && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                    int weightVal = weight.get_value(c, cin, '
              'kh, kw);\n'
              '                    int inputVal = input.get_value(n, cin + '
              'group_idx * weight.dim[1], posH, posW);\n'
              '                    val += weightVal * inputVal;\n'
              '                  }\n'
              '                }\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1617,
         lineno=593,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (relu) val = relu_function(val);\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool relu, samePad;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1618,
         lineno=601,
         tokens=13,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='kernelH',
         body='int kernelH, kernelW, strideH, strideW;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1619,
         lineno=602,
         tokens=6,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='relu',
         body='bool relu, samePad;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1620,
         lineno=604,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Pool2DTemp : public OpTemp {\n'
              'public:\n'
              '  Pool2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, OpType _type)\n'
              '  : OpTemp(1, 1, _type), kernelH(_kernelH), kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1621,
         lineno=605,
         tokens=1951,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='Pool2DTemp',
         body='class Pool2DTemp : public OpTemp {\n'
              'public:\n'
              '  Pool2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, OpType _type)\n'
              '  : OpTemp(1, 1, _type), kernelH(_kernelH), kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    if (input.numDim != 4) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'kernelH\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'kernelW\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - kernelH) / strideH + '
              '1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - kernelW) / strideW + '
              '1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < kernelH; kh++)\n'
              '              for (int kw = 0; kw < kernelW; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n'
              '                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n'
              '    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW) || (weight.dim[1] != 1)) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < weight.dim[2]; kh++)\n'
              '              for (int kw = 0; kw < weight.dim[3]; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n'
              '                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool samePad;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1622,
         lineno=607,
         tokens=82,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='Pool2DTemp',
         body='Pool2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, OpType _type)\n'
              '  : OpTemp(1, 1, _type), kernelH(_kernelH), kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1623,
         lineno=607,
         tokens=36,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='Pool2DTemp',
         body='Pool2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, OpType _type)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1624,
         lineno=620,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (input.numDim != 4) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1625,
         lineno=621,
         tokens=7,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='padT',
         body='int padT, padL;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1626,
         lineno=628,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='* strideH + kernelH\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'kernelW\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outp')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1627,
         lineno=637,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='uts[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - kernelH) / strideH + '
              '1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - kernelW) / strideW + '
              '1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    ou')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1628,
         lineno=645,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputs[0].stride[1] = outputs[0].stride[2] * outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1629,
         lineno=652,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < kernelH; kh++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1630,
         lineno=658,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='              for (int kw = 0; kw < kernelW; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1631,
         lineno=666,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1632,
         lineno=683,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW) || (weight.dim[1] != 1)) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    int padT, padL;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1633,
         lineno=685,
         tokens=7,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='padT',
         body='int padT, padL;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1634,
         lineno=686,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * stri')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1635,
         lineno=692,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='deH + weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outp')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1636,
         lineno=701,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='uts[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1637,
         lineno=709,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1638,
         lineno=716,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < weight.dim[2]; kh++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1639,
         lineno=722,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='              for (int kw = 0; kw < weight.dim[3]; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1640,
         lineno=730,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool samePad;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1641,
         lineno=743,
         tokens=13,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='kernelH',
         body='int kernelH, kernelW, strideH, strideW;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1642,
         lineno=744,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='samePad',
         body='bool samePad;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1643,
         lineno=746,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class MatmulTemp : public OpTemp {\n'
              'public:\n'
              '  MatmulTemp(ActiMode _mode)\n'
              '  : OpTemp(2, 1, OP_MATMUL), mode(_mode)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '#ifdef NO_SAME_INPUTS\n'
              '    if (input == weight) return false;\n'
              '#endif\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1644,
         lineno=747,
         tokens=566,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='MatmulTemp',
         body='class MatmulTemp : public OpTemp {\n'
              'public:\n'
              '  MatmulTemp(ActiMode _mode)\n'
              '  : OpTemp(2, 1, OP_MATMUL), mode(_mode)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '#ifdef NO_SAME_INPUTS\n'
              '    if (input == weight) return false;\n'
              '#endif\n'
              '    if (input.numDim != 2 || weight.numDim != 2) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    outputs[0].numDim = 2;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = weight.dim[1];\n'
              '    outputs[0].stride[0] = outputs[0].dim[1];\n'
              '    outputs[0].stride[1] = 1;\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[1];\n'
              '    int outputN = outputs[0].dim[0];\n'
              '    int outputC = outputs[0].dim[1];\n'
              '    int inputC = input.dim[1];\n'
              '    for (int i = 0; i < outputN; i++)\n'
              '      for (int j = 0; j < outputC; j++) {\n'
              '        TYPE val = 0;\n'
              '        for (int k = 0; k < inputC; k++)\n'
              '          val += input.get_value(i, k) * weight.get_value(k, '
              'j);\n'
              '        outputs[0].set_value(i, j, val);\n'
              '      }\n'
              '    if (mode == AC_MODE_RELU) {\n'
              '      for (int i = 0; i < outputN * outputC; i++)\n'
              '        outputs[0].data[i] = '
              'relu_function(outputs[0].data[i]);\n'
              '    } else if (mode == AC_MODE_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else if (mode == AC_MODE_TANH) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(mode == AC_MODE_NONE);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  ActiMode mode;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1645,
         lineno=749,
         tokens=31,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='MatmulTemp',
         body='MatmulTemp(ActiMode _mode)\n'
              '  : OpTemp(2, 1, OP_MATMUL), mode(_mode)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1646,
         lineno=749,
         tokens=10,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='MatmulTemp',
         body='MatmulTemp(ActiMode _mode)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1647,
         lineno=767,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (input.numDim != 2 || weight.numDim != 2) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    outputs[0].numDim = 2;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = weight.dim[1];\n'
              '    outputs[0].stride[0] = outputs[0].dim[1];\n'
              '    output')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1648,
         lineno=775,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s[0].stride[1] = 1;\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[1];\n'
              '    int outputN = outputs[0].dim[0];\n'
              '    int outputC = outputs[0].dim[1];\n'
              '    int inputC = input.dim[1];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1649,
         lineno=781,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < outputN; i++)\n'
              '      for (int j = 0; j < outputC; j++) {\n'
              '        TYPE val = 0;\n'
              '        for (int k = 0; k < inputC; k++)\n'
              '          val += input.get_value(i, k) * weight.get_value(k, '
              'j);\n'
              '        outputs[0].set_value(i, j, val);\n'
              '      }\n'
              '    if (mode == AC_MODE_RELU) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1650,
         lineno=789,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < outputN * outputC; i++)\n'
              '        outputs[0].data[i] = '
              'relu_function(outputs[0].data[i]);\n'
              '    } else if (mode == AC_MODE_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else if (mode == AC_MODE_TANH) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(mode == AC_MODE_NONE);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  ActiMode mode;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1651,
         lineno=803,
         tokens=5,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='mode',
         body='ActiMode mode;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1652,
         lineno=805,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ElementTemp : public OpTemp {\n'
              'public:\n'
              '  ElementTemp(OpType _type)\n'
              '  : OpTemp(2, 1, _type) {\n'
              '    assert(_type == OP_EW_ADD || _type == OP_EW_MUL);\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1653,
         lineno=806,
         tokens=453,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ElementTemp',
         body='class ElementTemp : public OpTemp {\n'
              'public:\n'
              '  ElementTemp(OpType _type)\n'
              '  : OpTemp(2, 1, _type) {\n'
              '    assert(_type == OP_EW_ADD || _type == OP_EW_MUL);\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    if (x1.numDim != x2.numDim) return false;\n'
              '    int numDim = x1.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      if (x1.dim[i] != x2.dim[i])\n'
              '        return false;\n'
              '      if (x1.stride[i] != x2.stride[i])\n'
              '        return false;\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    outputs[0].numDim = numDim;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      if (x1.split[i] != x2.split[i])\n'
              '        outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      else\n'
              '        outputs[0].split[i] = x1.split[i];\n'
              '    }\n'
              '    if (type == OP_EW_ADD) {\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] + x2.data[i];\n'
              '    } else {\n'
              '      assert(type == OP_EW_MUL);\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] * x2.data[i];\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1654,
         lineno=808,
         tokens=41,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ElementTemp',
         body='ElementTemp(OpType _type)\n'
              '  : OpTemp(2, 1, _type) {\n'
              '    assert(_type == OP_EW_ADD || _type == OP_EW_MUL);\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1655,
         lineno=808,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ElementTemp',
         body='ElementTemp(OpType _type)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1656,
         lineno=824,
         tokens=33,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (x1.numDim != x2.numDim) return false;\n'
              '    int numDim = x1.numDim;\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1657,
         lineno=827,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      if (x1.dim[i] != x2.dim[i])\n'
              '        return false;\n'
              '      if (x1.stride[i] != x2.stride[i])\n'
              '        return false;\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    outputs[0].numDim = numDim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1658,
         lineno=835,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      if (x1.split[i] != x2.split[i])\n'
              '        outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      else\n'
              '        outputs[0].split[i] = x1.split[i];\n'
              '    }\n'
              '    if (type == OP_EW_ADD) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1659,
         lineno=844,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] + x2.data[i];\n'
              '    } else {\n'
              '      assert(type == OP_EW_MUL);\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] * x2.data[i];\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1660,
         lineno=856,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ActivationTemp : public OpTemp {\n'
              'public:\n'
              '  ActivationTemp(OpType _type)\n'
              '  : OpTemp(1, 1, _type) {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = x1.numDim;\n'
              '    int total = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1661,
         lineno=857,
         tokens=296,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ActivationTemp',
         body='class ActivationTemp : public OpTemp {\n'
              'public:\n'
              '  ActivationTemp(OpType _type)\n'
              '  : OpTemp(1, 1, _type) {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = x1.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < x1.numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      outputs[0].split[i] = x1.split[i];\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    if (type == OP_RELU) {\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = relu_function(x1.data[i]);\n'
              '    } else if (type == OP_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(false);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1662,
         lineno=859,
         tokens=21,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ActivationTemp',
         body='ActivationTemp(OpType _type)\n  : OpTemp(1, 1, _type) {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1663,
         lineno=859,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ActivationTemp',
         body='ActivationTemp(OpType _type)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1664,
         lineno=870,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < x1.numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      outputs[0].split[i] = x1.split[i];\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    if (type == OP_RELU) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1665,
         lineno=877,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = relu_function(x1.data[i]);\n'
              '    } else if (type == OP_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(false);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1666,
         lineno=894,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class TransposeTemp : public OpTemp {\n'
              'public:\n'
              '  TransposeTemp(int _n, const int _perm[], bool _shuffle)\n'
              '  : OpTemp(1, 1, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '  {\n'
              '    myNumDim = _n;\n'
              '    for (int i = 0; i < myNumDim; i++)\n'
              '      perm[i] = _perm[i];\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      assert(perm[i] >= 0);\n'
              '      assert(perm[i] < myNumDim);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1667,
         lineno=895,
         tokens=574,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='TransposeTemp',
         body='class TransposeTemp : public OpTemp {\n'
              'public:\n'
              '  TransposeTemp(int _n, const int _perm[], bool _shuffle)\n'
              '  : OpTemp(1, 1, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '  {\n'
              '    myNumDim = _n;\n'
              '    for (int i = 0; i < myNumDim; i++)\n'
              '      perm[i] = _perm[i];\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      assert(perm[i] >= 0);\n'
              '      assert(perm[i] < myNumDim);\n'
              '      for (int j = i + 1; j < myNumDim; j++)\n'
              '        assert(perm[i] != perm[j]);\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& x,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = x.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < output.dim[d]; i++) {\n'
              '        dfs(output, x, d+1, myPos + i * output.stride[d], inPos '
              '+ i * x.stride[perm[d]]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x, int opIdx)\n'
              '  {\n'
              '    if (x.numDim != myNumDim) return false;\n'
              '    outputs[0].numDim = myNumDim;\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = x.dim[perm[i]];\n'
              '      outputs[0].split[i] = x.split[perm[i]];\n'
              '    }\n'
              '    if (shuffle) {\n'
              '      int size = 1;\n'
              '      for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '        outputs[0].stride[i] = size;\n'
              '        size *= outputs[0].dim[i];\n'
              '      }\n'
              '    } else {\n'
              '      for (int i = 0; i < myNumDim; i++)\n'
              '        outputs[0].stride[i] = x.stride[perm[i]];\n'
              '    }\n'
              '    dfs(outputs[0], x, 0, 0, 0);\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  int myNumDim, perm[MAX_DIM];\n'
              '  int idx;\n'
              '  bool shuffle;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1668,
         lineno=897,
         tokens=141,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='TransposeTemp',
         body='TransposeTemp(int _n, const int _perm[], bool _shuffle)\n'
              '  : OpTemp(1, 1, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '  {\n'
              '    myNumDim = _n;\n'
              '    for (int i = 0; i < myNumDim; i++)\n'
              '      perm[i] = _perm[i];\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      assert(perm[i] >= 0);\n'
              '      assert(perm[i] < myNumDim);\n'
              '      for (int j = i + 1; j < myNumDim; j++)\n'
              '        assert(perm[i] != perm[j]);\n'
              '    }\n'
              '  }')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1669,
         lineno=897,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='TransposeTemp',
         body='TransposeTemp(int _n, const int _perm[], bool _shuffle)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1670,
         lineno=906,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = i + 1; j < myNumDim; j++)\n'
              '        assert(perm[i] != perm[j]);\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& x,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = x.data[inPos];\n'
              '    } else {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1671,
         lineno=921,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < output.dim[d]; i++) {\n'
              '        dfs(output, x, d+1, myPos + i * output.stride[d], inPos '
              '+ i * x.stride[perm[d]]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x, int opIdx)\n'
              '  {\n'
              '    if (x.numDim != myNumDim) return false;\n'
              '    outputs[0].numDim = myNumDim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1672,
         lineno=930,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = x.dim[perm[i]];\n'
              '      outputs[0].split[i] = x.split[perm[i]];\n'
              '    }\n'
              '    if (shuffle) {\n'
              '      int size = 1;\n'
              '      for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '        outputs[0].stride[i] = size;\n'
              '        size *= outputs[0].dim[i];\n'
              '      }\n'
              '    } else {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1673,
         lineno=941,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < myNumDim; i++)\n'
              '        outputs[0].stride[i] = x.stride[perm[i]];\n'
              '    }\n'
              '    dfs(outputs[0], x, 0, 0, 0);\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  int myNumDim, perm[MAX_DIM];\n'
              '  int idx;\n'
              '  bool shuffle;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1674,
         lineno=954,
         tokens=9,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='myNumDim',
         body='int myNumDim, perm[MAX_DIM];')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1675,
         lineno=955,
         tokens=3,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='idx',
         body='int idx;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1676,
         lineno=956,
         tokens=3,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='shuffle',
         body='bool shuffle;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1677,
         lineno=958,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class ConcatTemp : public OpTemp {\n'
              'public:\n'
              '  ConcatTemp(int n, int _numDim, int _axis)\n'
              '  : OpTemp(n, 1, OP_CONCAT), myNumDim(_numDim), axis(_axis)\n'
              '  {}\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos) {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1678,
         lineno=959,
         tokens=965,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='ConcatTemp',
         body='class ConcatTemp : public OpTemp {\n'
              'public:\n'
              '  ConcatTemp(int n, int _numDim, int _axis)\n'
              '  : OpTemp(n, 1, OP_CONCAT), myNumDim(_numDim), axis(_axis)\n'
              '  {}\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos) {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < input.dim[d]; i++) {\n'
              '        if (d == axis)\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + (i + accAxis) * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        else\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    for (int i = 0; i < n; i++)\n'
              '      if (inputs[i].numDim != myNumDim) return false;\n'
              '    if (axis >= myNumDim) return false;\n'
              '    for (int i = 1; i < n; i++)\n'
              '      for (int j = 0; j < myNumDim; j++)\n'
              '        if ((j != axis) && (inputs[0].dim[j] != '
              'inputs[i].dim[j]))\n'
              '          return false;\n'
              '    outputs[0].numDim = myNumDim;\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = inputs[0].dim[i];\n'
              '      outputs[0].split[i] = inputs[0].split[i];\n'
              '      if (i != axis) {\n'
              '        for (int j = 1; j < n; j++)\n'
              '          outputs[0].split[i].combine(inputs[j].split[i]);\n'
              '      } else {\n'
              '        for (int j = 1; j < n; j++) {\n'
              '          outputs[0].split[i].merge(outputs[0].dim[i], '
              'inputs[j].split[i]);\n'
              '          outputs[0].dim[i] += inputs[j].dim[i];\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE)\n'
              '      return false;\n'
              '    int size = 1;\n'
              '    for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '      outputs[0].stride[i] = size;\n'
              '      size = size * outputs[0].dim[i];\n'
              '    }\n'
              '    accAxis = 0;\n'
              '    for (int i = 0; i < n; i++) {\n'
              '      dfs(outputs[0], inputs[i], 0, 0, 0);\n'
              '      accAxis += inputs[0].dim[axis];\n'
              '    }\n'
              '    /*\n'
              '    int outSize = 1, inSize = 1;\n'
              '    for (int i = 0; i < axis; i++)\n'
              '      outSize *= inputs[0].dim[i];\n'
              '    for (int i = axis + 1; i < myNumDim; i++)\n'
              '      inSize *= inputs[0].dim[i];\n'
              '    int outIdx = 0, inIdxs[MAX_NUM_INPUTS];\n'
              '    for (int i = 0; i < n; i++)\n'
              '      inIdxs[i] = 0;\n'
              '    for (int out = 0; out < outSize; out++)\n'
              '      for (int i = 0; i < n; i++)\n'
              '        for (int j = 0; j < inputs[i].dim[axis]; j++)\n'
              '          for (int in = 0; in < inSize; in++) {\n'
              '            outputs[0].data[outIdx++] = '
              'inputs[i].data[inIdxs[i]++];\n'
              '          }\n'
              '    assert(outIdx == outputs[0].size());\n'
              '    */\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(numInputs == 2);\n'
              '    TensorTemp xs[2];\n'
              '    xs[0] = x1;\n'
              '    xs[1] = x2;\n'
              '    return compute(2, xs, opIdx);\n'
              '  }\n'
              'public:\n'
              '  int myNumDim, axis;\n'
              '  int accAxis;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1679,
         lineno=961,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ConcatTemp',
         body='ConcatTemp(int n, int _numDim, int _axis)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1680,
         lineno=961,
         tokens=40,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='ConcatTemp',
         body='ConcatTemp(int n, int _numDim, int _axis)\n'
              '  : OpTemp(n, 1, OP_CONCAT), myNumDim(_numDim), axis(_axis)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1681,
         lineno=969,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < input.dim[d]; i++) {\n'
              '        if (d == axis)\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + (i + accAxis) * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        else\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1682,
         lineno=983,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < n; i++)\n'
              '      if (inputs[i].numDim != myNumDim) return false;\n'
              '    if (axis >= myNumDim) return false;\n'
              '    for (int i = 1; i < n; i++)\n'
              '      for (int j = 0; j < myNumDim; j++)\n'
              '        if ((j != axis) && (inputs[0].dim[j] != '
              'inputs[i].dim[j]))\n'
              '          return false;\n'
              '    outputs[0].numDim = myNumDim;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1683,
         lineno=991,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = inputs[0].dim[i];\n'
              '      outputs[0].split[i] = inputs[0].split[i];\n'
              '      if (i != axis) {\n'
              '        for (int j = 1; j < n; j++)\n'
              '          outputs[0].split[i].combine(inputs[j].split[i]);\n'
              '      } else {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1684,
         lineno=998,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = 1; j < n; j++) {\n'
              '          outputs[0].split[i].merge(outputs[0].dim[i], '
              'inputs[j].split[i]);\n'
              '          outputs[0].dim[i] += inputs[j].dim[i];\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE)\n'
              '      return false;\n'
              '    int size = 1;\n'
              '    for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '      outputs[0].stride[i] = size;\n'
              '      size = size * outputs[0].dim[i];\n'
              '    }\n'
              '    accAxis = 0;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1685,
         lineno=1012,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < n; i++) {\n'
              '      dfs(outputs[0], inputs[i], 0, 0, 0);\n'
              '      accAxis += inputs[0].dim[axis];\n'
              '    }\n'
              '    /*\n'
              '    int outSize = 1, inSize = 1;\n'
              '    for (int i = 0; i < axis; i++)\n'
              '      outSize *= inputs[0].dim[i];\n'
              '    for (int i = axis + 1; i < myNumDim; i++)\n'
              '      inSize *= inputs[0].dim[i];\n'
              '    int outIdx = 0, inIdxs[MAX_NUM_INPUTS];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1686,
         lineno=1023,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < n; i++)\n'
              '      inIdxs[i] = 0;\n'
              '    for (int out = 0; out < outSize; out++)\n'
              '      for (int i = 0; i < n; i++)\n'
              '        for (int j = 0; j < inputs[i].dim[axis]; j++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1687,
         lineno=1028,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int in = 0; in < inSize; in++) {\n'
              '            outputs[0].data[outIdx++] = '
              'inputs[i].data[inIdxs[i]++];\n'
              '          }\n'
              '    assert(outIdx == outputs[0].size());\n'
              '    */\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1688,
         lineno=1037,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(numInputs == 2);\n'
              '    TensorTemp xs[2];\n'
              '    xs[0] = x1;\n'
              '    xs[1] = x2;\n'
              '    return compute(2, xs, opIdx);\n'
              '  }\n'
              'public:\n'
              '  int myNumDim, axis;\n'
              '  int accAxis;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1689,
         lineno=1051,
         tokens=7,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='myNumDim',
         body='int myNumDim, axis;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1690,
         lineno=1052,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='accAxis',
         body='int accAxis;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1691,
         lineno=1054,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class SplitTemp : public OpTemp {\n'
              'public:\n'
              '  SplitTemp(int n, int _axis)\n'
              '  : OpTemp(1, n, OP_SPLIT), axis(_axis)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == output.numDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < output.dim[d]; i++) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1692,
         lineno=1055,
         tokens=750,
         depth=0,
         parent_id=None,
         category='class',
         summary=False,
         name='SplitTemp',
         body='class SplitTemp : public OpTemp {\n'
              'public:\n'
              '  SplitTemp(int n, int _axis)\n'
              '  : OpTemp(1, n, OP_SPLIT), axis(_axis)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == output.numDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < output.dim[d]; i++) {\n'
              '        if (d == axis) {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + (i + accAxis) * input.stride[d]);\n'
              '        } else {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    // TODO:Only consider 2-split for now\n'
              '    assert(numOutputs == 2);\n'
              '    if (x1.split[axis].num == 0) return false;\n'
              '    SplitInfo parent = x1.split[axis], left, right;\n'
              '    int oldPos = x1.dim[axis], curPos;\n'
              '    for (int i = numOutputs - 1; i >= 0; i--) {\n'
              '      outputs[i].numDim = x1.numDim;\n'
              '      int size = 1;\n'
              '      for (int j = x1.numDim - 1; j >= 0; j--) {\n'
              '        if (j != axis) {\n'
              '          outputs[i].dim[j] = x1.dim[j];\n'
              '          outputs[i].split[j] = x1.split[j];\n'
              '        } else {\n'
              '          if (i > 0)\n'
              '            parent.divide(left, right, curPos);\n'
              '          else {\n'
              '            curPos = 0;\n'
              '            right = parent;\n'
              '          }\n'
              '          outputs[i].dim[j] = oldPos - curPos;\n'
              '          oldPos = curPos;\n'
              '          parent = left;\n'
              '          outputs[i].split[j] = right;\n'
              '        }\n'
              '        outputs[i].stride[j] = size;\n'
              '        size = size * outputs[i].dim[j];\n'
              '      }\n'
              '      accAxis = oldPos;\n'
              '      dfs(outputs[i], x1, 0, 0, 0);\n'
              '      /*\n'
              '      int outSize = 1;\n'
              '      int inSize = 1;\n'
              '      for (int j = 0; j < axis; j++)\n'
              '        outSize = outSize * outputs[i].dim[j];\n'
              '      for (int j = axis; j < outputs[i].numDim; j++)\n'
              '        inSize = inSize * outputs[i].dim[j];\n'
              '      for (int out = 0; out < outSize; out++) {\n'
              '        int dstIdx = out * inSize, srcIdx = out * inSize * '
              'numOutputs + inSize * i;\n'
              '        for (int in = 0; in < inSize; in++)\n'
              '          outputs[i].data[dstIdx++] = x1.data[srcIdx++];\n'
              '      }\n'
              '      */\n'
              '      outputs[i].opIdx = opIdx;\n'
              '      outputs[i].tsIdx = i;\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int axis, accAxis;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1693,
         lineno=1057,
         tokens=27,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitTemp',
         body='SplitTemp(int n, int _axis)\n'
              '  : OpTemp(1, n, OP_SPLIT), axis(_axis)\n'
              '  {}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1694,
         lineno=1057,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitTemp',
         body='SplitTemp(int n, int _axis)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1695,
         lineno=1072,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (d == axis) {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + (i + accAxis) * input.stride[d]);\n'
              '        } else {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    // TODO:Only consider 2-split for now\n'
              '    assert(numOutputs == 2);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1696,
         lineno=1088,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (x1.split[axis].num == 0) return false;\n'
              '    SplitInfo parent = x1.split[axis], left, right;\n'
              '    int oldPos = x1.dim[axis], curPos;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1697,
         lineno=1089,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='left',
         body='SplitInfo parent = x1.split[axis], left, right;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1698,
         lineno=1090,
         tokens=12,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='curPos',
         body='int oldPos = x1.dim[axis], curPos;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1699,
         lineno=1091,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = numOutputs - 1; i >= 0; i--) {\n'
              '      outputs[i].numDim = x1.numDim;\n'
              '      int size = 1;\n'
              '      for (int j = x1.numDim - 1; j >= 0; j--) {\n'
              '        if (j != axis) {\n'
              '          outputs[i].dim[j] = x1.dim[j];\n'
              '          outputs[i].split[j] = x1.split[j];\n'
              '        } else {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1700,
         lineno=1099,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          if (i > 0)\n'
              '            parent.divide(left, right, curPos);\n'
              '          else {\n'
              '            curPos = 0;\n'
              '            right = parent;\n'
              '          }\n'
              '          outputs[i].dim[j] = oldPos - curPos;\n'
              '          oldPos = curPos;\n'
              '          parent = left;\n'
              '          outputs[i].split[j] = right;\n'
              '        }\n'
              '        outputs[i].stride[j] = size;\n'
              '        size = size * outputs[i].dim[j];\n'
              '      }\n'
              '      accAxis = oldPos;\n'
              '      dfs(outputs[i], x1, 0, 0, 0);\n'
              '      /*\n'
              '      int outSize = 1;\n'
              '      int inSize = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1701,
         lineno=1118,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 0; j < axis; j++)\n'
              '        outSize = outSize * outputs[i].dim[j];\n'
              '      for (int j = axis; j < outputs[i].numDim; j++)\n'
              '        inSize = inSize * outputs[i].dim[j];\n'
              '      for (int out = 0; out < outSize; out++) {\n'
              '        int dstIdx = out * inSize, srcIdx = out * inSize * '
              'numOutputs + inSize * i;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1702,
         lineno=1124,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int in = 0; in < inSize; in++)\n'
              '          outputs[i].data[dstIdx++] = x1.data[srcIdx++];\n'
              '      }\n'
              '      */\n'
              '      outputs[i].opIdx = opIdx;\n'
              '      outputs[i].tsIdx = i;\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int axis, accAxis;\n'
              '};\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1703,
         lineno=1139,
         tokens=6,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='axis',
         body='int axis, accAxis;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1704,
         lineno=1141,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'namespace std {\n'
              '  template <>\n'
              '  struct hash<SplitInfo>\n'
              '  {\n'
              '    size_t operator()(const SplitInfo& si) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      res = res * 31 + hash<int>()(si.num);\n'
              '      for (int i = 0; i < si.num; i++)\n'
              '        res = res * 31 + hash<int>()(si.pos[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '  template <>\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1705,
         lineno=1142,
         tokens=7,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='std',
         body="namespace b'std' {...}")

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1706,
         lineno=1156,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  struct hash<TensorTemp>\n'
              '  {\n'
              '    size_t operator()(const TensorTemp& tt) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      int total = 1;\n'
              '      res = res * 31 + hash<int>()(tt.numDim);\n'
              '      for (int i = 0; i < tt.numDim; i++) {\n'
              '        res = res * 31 + hash<int>()(tt.dim[i]);\n'
              '        res = res * 31 + hash<int>()(tt.stride[i]);\n'
              '        res = res * 31 + hash<SplitInfo>()(tt.split[i]);\n'
              '        total *= tt.dim[i];\n'
              '      }\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1707,
         lineno=1169,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < total; i++)\n'
              '        res = res * 31 + hash<TYPE>()(tt.data[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '\n'
              '  template <>\n'
              '  struct hash<TensorTempList>\n'
              '  {\n'
              '    size_t operator()(const TensorTempList& ttl) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      res = res * 31 + hash<int>()(ttl.numTensor);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1708,
         lineno=1182,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < ttl.numTensor; i++)\n'
              '        res = res * 31 + hash<TensorTemp>()(ttl.tensors[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '}\n'
              '\n'
              'bool find_same_subgraph(const GraphTemp::GraphOp& o1,\n'
              '                        const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1709,
         lineno=1189,
         tokens=123,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='find_same_subgraph',
         body='bool find_same_subgraph(const GraphTemp::GraphOp& o1,\n'
              '                        const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n'
              '  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.tsIdx[i] != '
              'o2.tsIdx[i])) return false;\n'
              '    if (o1.opIdx[i] >= 0) return false;\n'
              '  }\n'
              '  return true;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1710,
         lineno=1189,
         tokens=25,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='find_same_subgraph',
         body='find_same_subgraph(const GraphTemp::GraphOp& o1,\n'
              '                        const GraphTemp::GraphOp& o2)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1711,
         lineno=1194,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.tsIdx[i] != '
              'o2.tsIdx[i])) return false;\n'
              '    if (o1.opIdx[i] >= 0) return false;\n'
              '  }\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool find_same_supergraph(const GraphTemp::GraphOp& o1,\n'
              '                          const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n'
              '  // Only one input is different\n'
              '  int diff = 0;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1712,
         lineno=1201,
         tokens=130,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='find_same_supergraph',
         body='bool find_same_supergraph(const GraphTemp::GraphOp& o1,\n'
              '                          const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n'
              '  // Only one input is different\n'
              '  int diff = 0;\n'
              '  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.opIdx[i] >= 0))\n'
              '      diff ++;\n'
              '  }\n'
              '  if (diff > 1) return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1713,
         lineno=1201,
         tokens=25,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='find_same_supergraph',
         body='find_same_supergraph(const GraphTemp::GraphOp& o1,\n'
              '                          const GraphTemp::GraphOp& o2)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1714,
         lineno=1208,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.opIdx[i] >= 0))\n'
              '      diff ++;\n'
              '  }\n'
              '  if (diff > 1) return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool variable_ordering(const GraphTemp& g)\n'
              '{\n'
              '  if (g.find("x1") > g.find("x2")) return false;\n'
              '  if (g.find("x2") > g.find("x3")) return false;\n'
              '  if (g.find("w1") > g.find("w2")) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1715,
         lineno=1216,
         tokens=168,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='variable_ordering',
         body='bool variable_ordering(const GraphTemp& g)\n'
              '{\n'
              '  if (g.find("x1") > g.find("x2")) return false;\n'
              '  if (g.find("x2") > g.find("x3")) return false;\n'
              '  if (g.find("w1") > g.find("w2")) return false;\n'
              '  if (g.find("w2") > g.find("w3")) return false;\n'
              '  if (g.find("i1") > g.find("i2")) return false;\n'
              '  if (g.find("i2") > g.find("i3")) return false;\n'
              '  if (g.find("w4") > g.find("w5")) return false;\n'
              '  if (g.find("w5") > g.find("w6")) return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1716,
         lineno=1216,
         tokens=9,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='variable_ordering',
         body='variable_ordering(const GraphTemp& g)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1717,
         lineno=1221,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (g.find("w2") > g.find("w3")) return false;\n'
              '  if (g.find("i1") > g.find("i2")) return false;\n'
              '  if (g.find("i2") > g.find("i3")) return false;\n'
              '  if (g.find("w4") > g.find("w5")) return false;\n'
              '  if (g.find("w5") > g.find("w6")) return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool pass_checks(const GraphTemp& g1,\n'
              '                 const GraphTemp& g2)\n'
              '{\n'
              '  // Pruning: cannot have common subgraphs\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1718,
         lineno=1229,
         tokens=196,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='pass_checks',
         body='bool pass_checks(const GraphTemp& g1,\n'
              '                 const GraphTemp& g2)\n'
              '{\n'
              '  // Pruning: cannot have common subgraphs\n'
              '  for (int i = 0; i < g1.numOps; i++)\n'
              '    for (int j = 0; j < g2.numOps; j++)\n'
              '      if (find_same_subgraph(g1.op[i], g2.op[j]))\n'
              '        return false;\n'
              '  // Pruning: cannot have common supergraphs\n'
              '  if (find_same_supergraph(g1.op[g1.numOps-1], '
              'g2.op[g2.numOps-1]))\n'
              '    return false;\n'
              '  // Pruning: check variable ordering (x1 used before x2 before '
              'x3)\n'
              '  if ((!variable_ordering(g1)) && (!variable_ordering(g2)))\n'
              '    return false;\n'
              '  // Pruning: variable renaming (e.g., "x1" must appear before '
              '"x2")\n'
              '  return true;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1719,
         lineno=1229,
         tokens=17,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pass_checks',
         body='pass_checks(const GraphTemp& g1,\n'
              '                 const GraphTemp& g2)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1720,
         lineno=1233,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < g1.numOps; i++)\n'
              '    for (int j = 0; j < g2.numOps; j++)\n'
              '      if (find_same_subgraph(g1.op[i], g2.op[j]))\n'
              '        return false;\n'
              '  // Pruning: cannot have common supergraphs\n'
              '  if (find_same_supergraph(g1.op[g1.numOps-1], '
              'g2.op[g2.numOps-1]))\n'
              '    return false;\n'
              '  // Pruning: check variable ordering (x1 used before x2 before '
              'x3)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1721,
         lineno=1241,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if ((!variable_ordering(g1)) && (!variable_ordering(g2)))\n'
              '    return false;\n'
              '  // Pruning: variable renaming (e.g., "x1" must appear before '
              '"x2")\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool same_via_subst(const GraphTemp& g1,\n'
              '                    const GraphTemp& g2,\n'
              '                    std::map<int, int>& variable_subst)\n'
              '{\n'
              '  if (g1.numOps != g2.numOps) return false;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1722,
         lineno=1247,
         tokens=263,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='same_via_subst',
         body='bool same_via_subst(const GraphTemp& g1,\n'
              '                    const GraphTemp& g2,\n'
              '                    std::map<int, int>& variable_subst)\n'
              '{\n'
              '  if (g1.numOps != g2.numOps) return false;\n'
              '  for (int i = 0; i < g1.numOps; i++) {\n'
              '    if (g1.op[i].opTemp != g2.op[i].opTemp) return false;\n'
              '    for (int j = 0; j < g1.op[i].opTemp->numInputs; j++) {\n'
              '      if (g1.op[i].tsIdx[j] != g2.op[i].tsIdx[j]) return '
              'false;\n'
              '      int op1 = g1.op[i].opIdx[j];\n'
              '      int op2 = g2.op[i].opIdx[j];\n'
              '      if ((op1 >= 0) || (op2 >= 0)) {\n'
              '        if (op1 != op2) return false;\n'
              '      } else {\n'
              '        if (variable_subst.find(op1) == variable_subst.end()) '
              '{\n'
              '          variable_subst[op1] = op2;\n'
              '        } else {\n'
              '          if (variable_subst[op1] != op2) return false;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1723,
         lineno=1247,
         tokens=31,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='same_via_subst',
         body='same_via_subst(const GraphTemp& g1,\n'
              '                    const GraphTemp& g2,\n'
              '                    std::map<int, int>& variable_subst)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1724,
         lineno=1252,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < g1.numOps; i++) {\n'
              '    if (g1.op[i].opTemp != g2.op[i].opTemp) return false;\n'
              '    for (int j = 0; j < g1.op[i].opTemp->numInputs; j++) {\n'
              '      if (g1.op[i].tsIdx[j] != g2.op[i].tsIdx[j]) return '
              'false;\n'
              '      int op1 = g1.op[i].opIdx[j];\n'
              '      int op2 = g2.op[i].opIdx[j];\n'
              '      if ((op1 >= 0) || (op2 >= 0)) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1725,
         lineno=1259,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (op1 != op2) return false;\n'
              '      } else {\n'
              '        if (variable_subst.find(op1) == variable_subst.end()) '
              '{\n'
              '          variable_subst[op1] = op2;\n'
              '        } else {\n'
              '          if (variable_subst[op1] != op2) return false;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1726,
         lineno=1271,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct TransferTemp {\n'
              '  GraphTemp fstGraph, sndGraph;\n'
              '  bool isDuplicate;\n'
              '};\n'
              '\n'
              'size_t graph_guid = 0;\n'
              'void dfs(int depth,\n'
              '         GraphTemp& graph,\n'
              '         std::vector<TensorTemp>& inputs,\n'
              '         const std::vector<OpTemp*>& ops,\n'
              '         std::unordered_map<size_t, GraphTemp>& hashmap,\n'
              '         std::vector<TransferTemp>& transfers)\n'
              '{\n'
              '  // Pruning should not have duplicated tensors\n'
              '  for (int i = 0; i < inputs.size(); i++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1727,
         lineno=1272,
         tokens=19,
         depth=0,
         parent_id=None,
         category='struct',
         summary=False,
         name='TransferTemp',
         body='struct TransferTemp {\n'
              '  GraphTemp fstGraph, sndGraph;\n'
              '  bool isDuplicate;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1728,
         lineno=1273,
         tokens=8,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='fstGraph',
         body='GraphTemp fstGraph, sndGraph;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1729,
         lineno=1274,
         tokens=4,
         depth=2,
         parent_id=None,
         category='field',
         summary=False,
         name='isDuplicate',
         body='bool isDuplicate;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1730,
         lineno=1278,
         tokens=1992,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='dfs',
         body='void dfs(int depth,\n'
              '         GraphTemp& graph,\n'
              '         std::vector<TensorTemp>& inputs,\n'
              '         const std::vector<OpTemp*>& ops,\n'
              '         std::unordered_map<size_t, GraphTemp>& hashmap,\n'
              '         std::vector<TransferTemp>& transfers)\n'
              '{\n'
              '  // Pruning should not have duplicated tensors\n'
              '  for (int i = 0; i < inputs.size(); i++)\n'
              '    for (int j = i + 1; j < inputs.size(); j++) {\n'
              '      if (inputs[i] == inputs[j])\n'
              '        return;\n'
              '    }\n'
              '  // Pruning should not have duplicated operators\n'
              '  for (int i = 0; i < graph.numOps; i++)\n'
              '    for (int j = i + 1; j < graph.numOps; j++) {\n'
              '      if (graph.op[i] == graph.op[j])\n'
              '        return;\n'
              '    }\n'
              '  // Add current subgraph to graphs\n'
              '  TensorTempList ttl;\n'
              '  ttl.numTensor = 0;\n'
              '  for (int i = inputs.size() - 1; inputs[i].opIdx >= 0; i--) {\n'
              '    bool found = false;\n'
              '    for (int j = 0; j < graph.numOps; j++)\n'
              '      for (int k = 0; k < graph.op[j].opTemp->numInputs; k++)\n'
              '        if (graph.op[j].opIdx[k] == inputs[i].opIdx\n'
              '        && graph.op[j].tsIdx[k] == inputs[i].tsIdx)\n'
              '          found = true;\n'
              '    if (!found) {\n'
              '      ttl.numTensor++;\n'
              '      assert(ttl.numTensor <= MAX_NUM_TENSORS);\n'
              '      ttl.tensors[ttl.numTensor-1] = inputs[i];\n'
              '    }\n'
              '  }\n'
              '  graph_guid ++;\n'
              '  if (graph_guid % 100000 == 0)\n'
              '    printf("Num of Graphs = %zu hashmap.size() = %zu\\n", '
              'graph_guid, hashmap.size()); \n'
              '  size_t hashKey = hash<TensorTempList>()(ttl);\n'
              '  if (hashmap.find(hashKey) != hashmap.end()) {\n'
              '    // Found a match\n'
              '    GraphTemp oldgraph = hashmap[hashKey];\n'
              '    if (pass_checks(oldgraph, graph)) {\n'
              '      // Pruning: cannot have redundant transfers via variable '
              'substitutions\n'
              '      bool found = false;\n'
              '      for (int i = 0; i < transfers.size(); i++)\n'
              '        if (!(transfers[i].isDuplicate)) {\n'
              '          // first->oldgraph, second->graph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(transfers[i].fstGraph, oldgraph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, graph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // first-> graph, second-> oldgraph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(transfers[i].fstGraph, graph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, oldgraph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // oldgraph->first, graph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(oldgraph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(graph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '          // graph->first, oldgraph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(graph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(oldgraph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '        } // if (it->second)\n'
              '      if (!found) {\n'
              '        TransferTemp tt;\n'
              '        tt.fstGraph = oldgraph;\n'
              '        tt.sndGraph = graph;\n'
              '        tt.isDuplicate = false;\n'
              '        transfers.push_back(tt);\n'
              '        printf("Source Graph: %s\\n", '
              'oldgraph.to_string().c_str());\n'
              '        printf("Target Graph: %s\\n", '
              'graph.to_string().c_str());\n'
              '      }\n'
              '    }\n'
              '  } else {\n'
              '    hashmap[hashKey] = graph;\n'
              '  }\n'
              '  if (depth >= 3) return; // MAX_NUM_OPS\n'
              '  for (int i = 0; i < ops.size(); i++)\n'
              '    switch (ops[i]->type) {\n'
              '      case OP_EW_ADD:\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONV2D:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++) {\n'
              '          if (inputs[j].opIdx < 0 && '
              "variable_names[inputs[j].opIdx][0] == 'w')\n"
              '            continue;\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MATMUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if ((j != k) && (op->compute(inputs[j], inputs[k], '
              'depth))) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_RELU:\n'
              '      case OP_ENLARGE:\n'
              '      case OP_TRANSPOSE:\n'
              '      case OP_POOL2D_AVG:\n'
              '      case OP_POOL2D_MAX:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n'
              '            inputs.push_back(op->outputs[0]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n'
              '            inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONSTANT_IMM:\n'
              '      case OP_CONSTANT_ICONV:\n'
              '      case OP_CONSTANT_ONE:\n'
              '      case OP_CONSTANT_POOL:\n'
              '      {\n'
              '        ConstantTemp* op = (ConstantTemp*) ops[i];\n'
              '        if (op->compute(depth)) {\n'
              '          inputs.push_back(op->outputs[0]);\n'
              '          graph.push_op(op);\n'
              '          dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '          graph.pop_op();\n'
              '          inputs.pop_back();\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONCAT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        assert(op->numInputs == 2);\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_SPLIT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n'
              '            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.push_back(op->outputs[k]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n'
              '            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1731,
         lineno=1278,
         tokens=54,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='dfs',
         body='dfs(int depth,\n'
              '         GraphTemp& graph,\n'
              '         std::vector<TensorTemp>& inputs,\n'
              '         const std::vector<OpTemp*>& ops,\n'
              '         std::unordered_map<size_t, GraphTemp>& hashmap,\n'
              '         std::vector<TransferTemp>& transfers)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1732,
         lineno=1287,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = i + 1; j < inputs.size(); j++) {\n'
              '      if (inputs[i] == inputs[j])\n'
              '        return;\n'
              '    }\n'
              '  // Pruning should not have duplicated operators\n'
              '  for (int i = 0; i < graph.numOps; i++)\n'
              '    for (int j = i + 1; j < graph.numOps; j++) {\n'
              '      if (graph.op[i] == graph.op[j])\n'
              '        return;\n'
              '    }\n'
              '  // Add current subgraph to graphs\n'
              '  TensorTempList ttl;\n'
              '  ttl.numTensor = 0;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1733,
         lineno=1298,
         tokens=5,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ttl',
         body='TensorTempList ttl;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1734,
         lineno=1300,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = inputs.size() - 1; inputs[i].opIdx >= 0; i--) {\n'
              '    bool found = false;\n'
              '    for (int j = 0; j < graph.numOps; j++)\n'
              '      for (int k = 0; k < graph.op[j].opTemp->numInputs; k++)\n'
              '        if (graph.op[j].opIdx[k] == inputs[i].opIdx\n'
              '        && graph.op[j].tsIdx[k] == inputs[i].tsIdx)\n'
              '          found = true;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1735,
         lineno=1307,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!found) {\n'
              '      ttl.numTensor++;\n'
              '      assert(ttl.numTensor <= MAX_NUM_TENSORS);\n'
              '      ttl.tensors[ttl.numTensor-1] = inputs[i];\n'
              '    }\n'
              '  }\n'
              '  graph_guid ++;\n'
              '  if (graph_guid % 100000 == 0)\n'
              '    printf("Num of Graphs = %zu hashmap.size() = %zu\\n", '
              'graph_guid, hashmap.size()); \n'
              '  size_t hashKey = hash<TensorTempList>()(ttl);\n'
              '  if (hashmap.find(hashKey) != hashmap.end()) {\n'
              '    // Found a match\n'
              '    GraphTemp oldgraph = hashmap[hashKey];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1736,
         lineno=1320,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (pass_checks(oldgraph, graph)) {\n'
              '      // Pruning: cannot have redundant transfers via variable '
              'substitutions\n'
              '      bool found = false;\n'
              '      for (int i = 0; i < transfers.size(); i++)\n'
              '        if (!(transfers[i].isDuplicate)) {\n'
              '          // first->oldgraph, second->graph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1737,
         lineno=1327,
         tokens=11,
         depth=10,
         parent_id=None,
         category='variable',
         summary=False,
         name='variable_subst',
         body='std::map<int, int> variable_subst;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1738,
         lineno=1328,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (same_via_subst(transfers[i].fstGraph, oldgraph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, graph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // first-> graph, second-> oldgraph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1739,
         lineno=1336,
         tokens=11,
         depth=10,
         parent_id=None,
         category='variable',
         summary=False,
         name='variable_subst',
         body='std::map<int, int> variable_subst;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1740,
         lineno=1337,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (same_via_subst(transfers[i].fstGraph, graph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, oldgraph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // oldgraph->first, graph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1741,
         lineno=1345,
         tokens=11,
         depth=10,
         parent_id=None,
         category='variable',
         summary=False,
         name='variable_subst',
         body='std::map<int, int> variable_subst;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1742,
         lineno=1346,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (same_via_subst(oldgraph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(graph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '          // graph->first, oldgraph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(graph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(oldgraph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '        } // if (it->second)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1743,
         lineno=1354,
         tokens=11,
         depth=10,
         parent_id=None,
         category='variable',
         summary=False,
         name='variable_subst',
         body='std::map<int, int> variable_subst;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1744,
         lineno=1362,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (!found) {\n'
              '        TransferTemp tt;\n'
              '        tt.fstGraph = oldgraph;\n'
              '        tt.sndGraph = graph;\n'
              '        tt.isDuplicate = false;\n'
              '        transfers.push_back(tt);\n'
              '        printf("Source Graph: %s\\n", '
              'oldgraph.to_string().c_str());\n'
              '        printf("Target Graph: %s\\n", '
              'graph.to_string().c_str());\n'
              '      }\n'
              '    }\n'
              '  } else {\n'
              '    hashmap[hashKey] = graph;\n'
              '  }\n'
              '  if (depth >= 3) return; // MAX_NUM_OPS\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1745,
         lineno=1376,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ops.size(); i++)\n'
              '    switch (ops[i]->type) {\n'
              '      case OP_EW_ADD:\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1746,
         lineno=1383,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONV2D:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1747,
         lineno=1396,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = 0; j < inputs.size(); j++) {\n'
              '          if (inputs[j].opIdx < 0 && '
              "variable_names[inputs[j].opIdx][0] == 'w')\n"
              '            continue;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1748,
         lineno=1399,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MATMUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1749,
         lineno=1414,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1750,
         lineno=1428,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (int k = 0; k < inputs.size(); k++)\n'
              '            if ((j != k) && (op->compute(inputs[j], inputs[k], '
              'depth))) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_RELU:\n'
              '      case OP_ENLARGE:\n'
              '      case OP_TRANSPOSE:\n'
              '      case OP_POOL2D_AVG:\n'
              '      case OP_POOL2D_MAX:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1751,
         lineno=1445,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n'
              '            inputs.push_back(op->outputs[0]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n'
              '            inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONSTANT_IMM:\n'
              '      case OP_CONSTANT_ICONV:\n'
              '      case OP_CONSTANT_ONE:\n'
              '      case OP_CONSTANT_POOL:\n'
              '      {\n'
              '        ConstantTemp* op = (ConstantTemp*) ops[i];\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1752,
         lineno=1461,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (op->compute(depth)) {\n'
              '          inputs.push_back(op->outputs[0]);\n'
              '          graph.push_op(op);\n'
              '          dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '          graph.pop_op();\n'
              '          inputs.pop_back();\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONCAT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        assert(op->numInputs == 2);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1753,
         lineno=1474,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_SPLIT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1754,
         lineno=1490,
         tokens=58,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.push_back(op->outputs[k]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1755,
         lineno=1495,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '}\n'
              '\n'
              'void init_tensor_temp(TensorTemp& tt, std::string name, int '
              'opIdx, int tsIdx, int n = 0, int c = 0, int h = 0, int w = 0)\n'
              '{\n'
              '  variable_names[opIdx] = name;\n'
              '  tt.numDim = 0;\n'
              '  if (n > 0) { tt.numDim ++; tt.dim[0] = n; tt.split[0] = '
              'SplitInfo::NO_SPLIT;}\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1756,
         lineno=1505,
         tokens=331,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='init_tensor_temp',
         body='void init_tensor_temp(TensorTemp& tt, std::string name, int '
              'opIdx, int tsIdx, int n = 0, int c = 0, int h = 0, int w = 0)\n'
              '{\n'
              '  variable_names[opIdx] = name;\n'
              '  tt.numDim = 0;\n'
              '  if (n > 0) { tt.numDim ++; tt.dim[0] = n; tt.split[0] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (c > 0) { tt.numDim ++; tt.dim[1] = c; tt.split[1] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (h > 0) { tt.numDim ++; tt.dim[2] = h; tt.split[2] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (w > 0) { tt.numDim ++; tt.dim[3] = w; tt.split[3] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  int size = 1;\n'
              '  for (int i = tt.numDim - 1; i >= 0; i --) {\n'
              '    tt.stride[i] = size;\n'
              '    size *= tt.dim[i];\n'
              '  }\n'
              '  tt.opIdx = opIdx;\n'
              '  tt.tsIdx = tsIdx;\n'
              '  int total = tt.size();\n'
              '  assert(total <= MAX_SIZE);\n'
              '  for (int i = 0; i < total; i++)\n'
              '    //tt.data[i] = (std::rand() % 2000 - 1000);\n'
              '    tt.data[i] = std::rand() - RAND_MAX / 2;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1757,
         lineno=1505,
         tokens=46,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='init_tensor_temp',
         body='init_tensor_temp(TensorTemp& tt, std::string name, int opIdx, '
              'int tsIdx, int n = 0, int c = 0, int h = 0, int w = 0)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1758,
         lineno=1510,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (c > 0) { tt.numDim ++; tt.dim[1] = c; tt.split[1] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (h > 0) { tt.numDim ++; tt.dim[2] = h; tt.split[2] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (w > 0) { tt.numDim ++; tt.dim[3] = w; tt.split[3] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  int size = 1;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1759,
         lineno=1514,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = tt.numDim - 1; i >= 0; i --) {\n'
              '    tt.stride[i] = size;\n'
              '    size *= tt.dim[i];\n'
              '  }\n'
              '  tt.opIdx = opIdx;\n'
              '  tt.tsIdx = tsIdx;\n'
              '  int total = tt.size();\n'
              '  assert(total <= MAX_SIZE);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1760,
         lineno=1522,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < total; i++)\n'
              '    //tt.data[i] = (std::rand() % 2000 - 1000);\n'
              '    tt.data[i] = std::rand() - RAND_MAX / 2;\n'
              '}\n'
              '\n'
              'void init_graph_temp(GraphTemp& graph)\n'
              '{\n'
              '  graph.numOps = 0;\n'
              '}\n'
              '\n'
              'void pb_fill_parameter(int key, int value,\n'
              '                       Grap')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1761,
         lineno=1527,
         tokens=19,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='init_graph_temp',
         body='void init_graph_temp(GraphTemp& graph)\n'
              '{\n'
              '  graph.numOps = 0;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1762,
         lineno=1527,
         tokens=8,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='init_graph_temp',
         body='init_graph_temp(GraphTemp& graph)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1763,
         lineno=1532,
         tokens=19,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_parameter',
         body='pb_fill_parameter(int key, int value,\n'
              '                       GraphSubst::Operator* pbOp)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1764,
         lineno=1532,
         tokens=51,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_parameter',
         body='void pb_fill_parameter(int key, int value,\n'
              '                       GraphSubst::Operator* pbOp)\n'
              '{\n'
              '  GraphSubst::Parameter* para = pbOp->add_para();\n'
              '  para->set_key(key);\n'
              '  para->set_value(value);\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1765,
         lineno=1533,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='hSubst::Operator* pbOp)\n'
              '{\n'
              '  GraphSubst::Parameter* para = pbOp->add_para();\n'
              '  para->set_key(key);\n'
              '  para->set_value(value);\n'
              '}\n'
              '\n'
              'void pb_fill_op(const GraphTemp::GraphOp& graphOp,\n'
              '                GraphSubst::Operator* pbOp)\n'
              '{\n'
              '  pbOp->set_type(graphOp.opTemp->type);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1766,
         lineno=1540,
         tokens=1036,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_op',
         body='void pb_fill_op(const GraphTemp::GraphOp& graphOp,\n'
              '                GraphSubst::Operator* pbOp)\n'
              '{\n'
              '  pbOp->set_type(graphOp.opTemp->type);\n'
              '  for (int j = 0; j < graphOp.opTemp->numInputs; j++) {\n'
              '    GraphSubst::Tensor* tensor = pbOp->add_input();\n'
              '    tensor->set_opid(graphOp.opIdx[j]);\n'
              '    tensor->set_tsid(graphOp.tsIdx[j]);   \n'
              '  }\n'
              '  switch (graphOp.opTemp->type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      Conv2DTemp* conv = (Conv2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = conv->samePad ?\n'
              '          PD_MODE_SAME : PD_MODE_VALID;\n'
              '      ActiMode activation = conv->relu ?\n'
              '          ActiMode(AC_MODE_RELU) : ActiMode(AC_MODE_NONE);\n'
              '      pb_fill_parameter(PM_KERNEL_H, conv->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, conv->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, conv->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, conv->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);\n'
              '      pb_fill_parameter(PM_ACTI, activation, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_POOL2D_MAX:\n'
              '    {\n'
              '      Pool2DTemp* pool = (Pool2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = pool->samePad ?\n'
              '          PD_MODE_SAME: PD_MODE_VALID;\n'
              '      pb_fill_parameter(PM_OP_TYPE, pool->type, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_H, pool->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, pool->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, pool->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, pool->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);\n'
              '      pb_fill_parameter(PM_ACTI, AC_MODE_NONE, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      ConcatTemp* concat = (ConcatTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_NUM_INPUTS, concat->numInputs, '
              'pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, concat->axis, pbOp);\n'
              '      pb_fill_parameter(PM_NUMDIM, concat->myNumDim, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      SplitTemp* split = (SplitTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_NUM_OUTPUTS, split->numOutputs, '
              'pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, split->axis, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_MUL:\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      EnlargeConvTemp* enlarge = (EnlargeConvTemp*) '
              'graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_KERNEL_H, enlarge->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, enlarge->kernelW, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_ICONV:\n'
              '    case OP_CONSTANT_POOL:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) graphOp.opTemp;\n'
              '      assert(constant->ndim == 4);\n'
              '      pb_fill_parameter(PM_KERNEL_H, constant->dims[2], pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, constant->dims[3], pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_ONE:\n'
              '    case OP_CONSTANT_IMM:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) graphOp.opTemp;\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      MatmulTemp* matmul = (MatmulTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_ACTI, matmul->mode, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      TransposeTemp* transpose = (TransposeTemp*) '
              'graphOp.opTemp;\n'
              '      int ndim = transpose->myNumDim;\n'
              '      pb_fill_parameter(PM_NUMDIM, ndim, pbOp);\n'
              '      int perm = 0;\n'
              '      for (int i = 0; i < ndim; i++)\n'
              '        perm = perm * ndim + transpose->perm[i];\n'
              '      pb_fill_parameter(PM_PERM, perm, pbOp);\n'
              '      pb_fill_parameter(PM_OUTSHUFFLE, transpose->shuffle, '
              'pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_BATCHNORM:\n'
              '    default:\n'
              '      printf("unsupported type(%d)\\n", graphOp.opTemp->type);\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1767,
         lineno=1540,
         tokens=23,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_op',
         body='pb_fill_op(const GraphTemp::GraphOp& graphOp,\n'
              '                GraphSubst::Operator* pbOp)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1768,
         lineno=1544,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int j = 0; j < graphOp.opTemp->numInputs; j++) {\n'
              '    GraphSubst::Tensor* tensor = pbOp->add_input();\n'
              '    tensor->set_opid(graphOp.opIdx[j]);\n'
              '    tensor->set_tsid(graphOp.tsIdx[j]);   \n'
              '  }\n'
              '  switch (graphOp.opTemp->type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      Conv2DTemp* conv = (Conv2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = conv->samePad ?\n'
              '          PD_MODE_SAME : PD_MODE_V')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1769,
         lineno=1554,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ALID;\n'
              '      ActiMode activation = conv->relu ?\n'
              '          ActiMode(AC_MODE_RELU) : ActiMode(AC_MODE_NONE);\n'
              '      pb_fill_parameter(PM_KERNEL_H, conv->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, conv->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, conv->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, conv->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1770,
         lineno=1561,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '      pb_fill_parameter(PM_ACTI, activation, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_POOL2D_MAX:\n'
              '    {\n'
              '      Pool2DTemp* pool = (Pool2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = pool->samePad ?\n'
              '          PD_MODE_SAME: PD_MODE_VALID;\n'
              '      pb_fill_parameter(PM_OP_TYPE, pool->type, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_H, pool->kernelH, pbOp);\n'
              '      pb_fi')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1771,
         lineno=1573,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ll_parameter(PM_KERNEL_W, pool->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, pool->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, pool->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);\n'
              '      pb_fill_parameter(PM_ACTI, AC_MODE_NONE, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      ConcatTemp* concat = (ConcatTemp*) graphOp.opTemp;\n'
              '      pb_fill_param')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1772,
         lineno=1583,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eter(PM_NUM_INPUTS, concat->numInputs, pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, concat->axis, pbOp);\n'
              '      pb_fill_parameter(PM_NUMDIM, concat->myNumDim, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      SplitTemp* split = (SplitTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_NUM_OUTPUTS, split->numOutputs, '
              'pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, split->axis, pbOp);\n'
              '      break;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1773,
         lineno=1593,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_MUL:\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      EnlargeConvTemp* enlarge = (EnlargeConvTemp*) '
              'graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_KERNEL_H, enlarge->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, enlarge->kernelW, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_IC')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1774,
         lineno=1610,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ONV:\n'
              '    case OP_CONSTANT_POOL:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) graphOp.opTemp;\n'
              '      assert(constant->ndim == 4);\n'
              '      pb_fill_parameter(PM_KERNEL_H, constant->dims[2], pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, constant->dims[3], pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_ONE:\n'
              '    case OP_CONSTANT_IMM:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) gra')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1775,
         lineno=1622,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='phOp.opTemp;\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      MatmulTemp* matmul = (MatmulTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_ACTI, matmul->mode, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      TransposeTemp* transpose = (TransposeTemp*) '
              'graphOp.opTemp;\n'
              '      int ndim = transpose->myNumDim;\n'
              '      pb_fill_parameter(PM_NUMDIM, ndim, pbOp);\n'
              '      int perm = 0;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1776,
         lineno=1637,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < ndim; i++)\n'
              '        perm = perm * ndim + transpose->perm[i];\n'
              '      pb_fill_parameter(PM_PERM, perm, pbOp);\n'
              '      pb_fill_parameter(PM_OUTSHUFFLE, transpose->shuffle, '
              'pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_BATCHNORM:\n'
              '    default:\n'
              '      printf("unsupported type(%d)\\n", graphOp.opTemp->type);\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'void pb_fill_rule(const GraphTemp& fstGraph,\n'
              '        ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1777,
         lineno=1650,
         tokens=319,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_rule',
         body='void pb_fill_rule(const GraphTemp& fstGraph,\n'
              '                  const GraphTemp& sndGraph,\n'
              '                  GraphSubst::Rule* rule)\n'
              '{\n'
              '  int srcOpIdxs[MAX_NUM_TENSORS], srcTsIdxs[MAX_NUM_TENSORS];\n'
              '  int dstOpIdxs[MAX_NUM_TENSORS], dstTsIdxs[MAX_NUM_TENSORS];\n'
              '  int srcMappedOutputs = fstGraph.mapped_outputs(srcOpIdxs, '
              'srcTsIdxs);\n'
              '  int dstMappedOutputs = sndGraph.mapped_outputs(dstOpIdxs, '
              'dstTsIdxs);\n'
              '  assert(srcMappedOutputs == dstMappedOutputs);\n'
              '  for (int i = 0; i < fstGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* srcOp = rule->add_srcop();\n'
              '    pb_fill_op(fstGraph.op[i], srcOp);\n'
              '  }\n'
              '  for (int i = 0; i < sndGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* dstOp = rule->add_dstop();\n'
              '    pb_fill_op(sndGraph.op[i], dstOp);\n'
              '  }\n'
              '  for (int i = 0; i < srcMappedOutputs; i++) {\n'
              '    GraphSubst::MapOutput* mapOutput = '
              'rule->add_mappedoutput();\n'
              '    mapOutput->set_srcopid(srcOpIdxs[i]);\n'
              '    mapOutput->set_dstopid(dstOpIdxs[i]);\n'
              '    mapOutput->set_srctsid(srcTsIdxs[i]);\n'
              '    mapOutput->set_dsttsid(dstTsIdxs[i]);\n'
              '  }\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1778,
         lineno=1650,
         tokens=27,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pb_fill_rule',
         body='pb_fill_rule(const GraphTemp& fstGraph,\n'
              '                  const GraphTemp& sndGraph,\n'
              '                  GraphSubst::Rule* rule)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1779,
         lineno=1651,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          const GraphTemp& sndGraph,\n'
              '                  GraphSubst::Rule* rule)\n'
              '{\n'
              '  int srcOpIdxs[MAX_NUM_TENSORS], srcTsIdxs[MAX_NUM_TENSORS];\n'
              '  int dstOpIdxs[MAX_NUM_TENSORS], dstTsIdxs[MAX_NUM_TENSORS];\n'
              '  int srcMappedOutputs = fstGraph.mapped_outputs(srcOpIdxs, '
              'srcTsIdxs);\n'
              '  int dstMappedOutputs = sndGraph.mapped_outputs(dstOpIdxs, '
              'dstTsIdxs);\n'
              '  assert(srcMappedOutputs == dstMappedOutputs);\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1780,
         lineno=1659,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < fstGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* srcOp = rule->add_srcop();\n'
              '    pb_fill_op(fstGraph.op[i], srcOp);\n'
              '  }\n'
              '  for (int i = 0; i < sndGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* dstOp = rule->add_dstop();\n'
              '    pb_fill_op(sndGraph.op[i], dstOp);\n'
              '  }\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1781,
         lineno=1667,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < srcMappedOutputs; i++) {\n'
              '    GraphSubst::MapOutput* mapOutput = '
              'rule->add_mappedoutput();\n'
              '    mapOutput->set_srcopid(srcOpIdxs[i]);\n'
              '    mapOutput->set_dstopid(dstOpIdxs[i]);\n'
              '    mapOutput->set_srctsid(srcTsIdxs[i]);\n'
              '    mapOutput->')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1782,
         lineno=1672,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='set_dsttsid(dstTsIdxs[i]);\n'
              '  }\n'
              '}\n'
              '\n'
              'int main(int argc, char **argv)\n'
              '{\n'
              '  std::unordered_map<size_t, GraphTemp> hashmap;\n'
              '  std::vector<TransferTemp> transfers;\n'
              '  std::vector<TensorTemp> inputs;\n'
              '  GraphTemp graph;\n'
              '  init_graph_temp(graph);\n'
              '  // Create 2D ten')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1783,
         lineno=1676,
         tokens=8,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='main(int argc, char **argv)')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1784,
         lineno=1676,
         tokens=3055,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='int main(int argc, char **argv)\n'
              '{\n'
              '  std::unordered_map<size_t, GraphTemp> hashmap;\n'
              '  std::vector<TransferTemp> transfers;\n'
              '  std::vector<TensorTemp> inputs;\n'
              '  GraphTemp graph;\n'
              '  init_graph_temp(graph);\n'
              '  // Create 2D tensors\n'
              '  TensorTemp x1, x2, x3, w1, w2, w3;\n'
              '  init_tensor_temp(x1, "x1", -1, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x1);\n'
              '  init_tensor_temp(x2, "x2", -2, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x2);\n'
              '  init_tensor_temp(x3, "x3", -3, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x3);\n'
              '  init_tensor_temp(w1, "w1", -4, 0, 4, 4);\n'
              '  inputs.push_back(w1);\n'
              '  init_tensor_temp(w2, "w2", -5, 0, 4, 4);\n'
              '  inputs.push_back(w2);\n'
              '  init_tensor_temp(w3, "w3", -6, 0, 4, 4);\n'
              '  inputs.push_back(w3);\n'
              '  // Create 4D tensors\n'
              '  TensorTemp i1, i2, i3, w4, w5, w6, w7, w8, w9, w10, w11, w12, '
              'w13, w14;\n'
              '  init_tensor_temp(i1, "i1", -7, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i1);\n'
              '  init_tensor_temp(i2, "i2", -8, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i2);\n'
              '  init_tensor_temp(i3, "i3", -9, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i3);\n'
              '  init_tensor_temp(w4, "w4", -10, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w4);\n'
              '  init_tensor_temp(w5, "w5", -11, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w5);\n'
              '  init_tensor_temp(w6, "w6", -12, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w6);\n'
              '  init_tensor_temp(w7, "w7", -13, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w7);\n'
              '  init_tensor_temp(w8, "w8", -14, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w8);\n'
              '  init_tensor_temp(w9, "w9", -15, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w9);\n'
              '  init_tensor_temp(w10, "w10", -16, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w10);\n'
              '  init_tensor_temp(w11, "w12", -17, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w11);\n'
              '  init_tensor_temp(w12, "w12", -18, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w12);\n'
              '  init_tensor_temp(w13, "w13", -19, 0, 4, 1, 3, 3);\n'
              '  inputs.push_back(w13);\n'
              '\n'
              '  // Create 0D scalar tensors\n'
              '  TensorTemp s0;\n'
              '  init_tensor_temp(s0, "s0", -20, 0);\n'
              '  inputs.push_back(s0);\n'
              '  std::vector<OpTemp*> ops;\n'
              '  ops.push_back(new MatmulTemp(AC_MODE_NONE));\n'
              '  operator_names[ops.back()] = "MatMul";\n'
              '  ops.push_back(new ElementTemp(OP_EW_ADD));\n'
              '  operator_names[ops.back()] = "EWAdd";\n'
              '  ops.push_back(new ElementTemp(OP_EW_MUL));\n'
              '  operator_names[ops.back()] = "EWMul";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv3x3S";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv3x3SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 1, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x1S";\n'
              '  ops.push_back(new Conv2DTemp(1, 1, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv1x1SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x3S";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv1x3SR";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, false));\n'
              '  //operator_names[ops.back()] = "Conv3x1S";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, true));\n'
              '  //operator_names[ops.back()] = "Conv3x1SR";\n'
              '  ops.push_back(new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_AVG));\n'
              '  operator_names[ops.back()] = "Pool3x3SA";\n'
              '  ops.push_back(new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_MAX));\n'
              '  operator_names[ops.back()] = "Pool3x3SM";\n'
              '\n'
              '  ops.push_back(new ConstantPoolTemp(w13.numDim, w13.dim));\n'
              '  operator_names[ops.back()] = "Constant_Pool";\n'
              '  ops.push_back(new ConstantIConvTemp(w4.numDim, w4.dim));\n'
              '  operator_names[ops.back()] = "Constant_IConv";\n'
              '  ops.push_back(new ConstantIMMTemp(w1.numDim, w1.dim));\n'
              '  operator_names[ops.back()] = "Constant_IMM";\n'
              '  ops.push_back(new ConstantOneTemp(i1.numDim, i1.dim));\n'
              '  operator_names[ops.back()] = "Constant_One";\n'
              '  ops.push_back(new EnlargeConvTemp(3, 3));\n'
              '  operator_names[ops.back()] = "Enlarge3x3";\n'
              '  ops.push_back(new ScalarMulTemp());\n'
              '  operator_names[ops.back()] = "ScalarMul";\n'
              '  ops.push_back(new ActivationTemp(OP_RELU));\n'
              '  operator_names[ops.back()] = "Relu";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, '
              '0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 1/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_1";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 0/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_0";\n'
              '  const int trans10[2] = {1, 0};\n'
              '  // Should enable shuffle = true one\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'false/*shuffle*/));\n'
              '  operator_names[ops.back()] = "Transpose_10";\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'true/*shuffle*/));\n'
              '  operator_names[ops.back()] = "TransposeShuffle_10";\n'
              '#ifdef DEADCODE\n'
              '  // <test1>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  TransposeTemp* transpose = new TransposeTemp(2, trans10, '
              'false);\n'
              '  TransposeTemp* transposeT = new TransposeTemp(2, trans10, '
              'true);\n'
              '  TensorTemp o1, o2, o3, o4, o5;\n'
              '  assert(matmul->compute(w1, w2, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(transpose->compute(w1, 0));\n'
              '  o2 = transpose->outputs[0];\n'
              '  assert(transpose->compute(w2, 1));\n'
              '  o3 = transpose->outputs[0];\n'
              '  assert(matmul->compute(o3, o2, 2));\n'
              '  o4 = matmul->outputs[0];\n'
              '  assert(transposeT->compute(o4, 3));\n'
              '  o5 = transposeT->outputs[0];\n'
              '  o1.print("o1");\n'
              '  w1.print("w1");\n'
              '  o2.print("o2");\n'
              '  w2.print("w2");\n'
              '  o3.print("o3");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  assert(o1 == o5);\n'
              '#endif\n'
              '#ifdef DEADCODE\n'
              '  // <test2>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  SplitTemp* split = new SplitTemp(2/*n*/, 1/*axis*/);\n'
              '  ConcatTemp* concat = new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/);\n'
              '  TensorTemp o1, o2, o3, o4, o5, o6;\n'
              '  assert(matmul->compute(x1, w1, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(matmul->compute(x1, w2, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(concat->compute(w1, w2, 0));\n'
              '  o3 = concat->outputs[0];\n'
              '  assert(matmul->compute(x1, o3, 1));\n'
              '  o4 = matmul->outputs[0];\n'
              '  assert(split->compute(o4, 2));\n'
              '  o5 = split->outputs[0];\n'
              '  o6 = split->outputs[1];\n'
              '  o1.print("o1");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  assert(o1 == o5);\n'
              '  assert(o2 == o6);\n'
              '#endif\n'
              '  // <test3>\n'
              '  ConstantPoolTemp* constant = new ConstantPoolTemp(w13.numDim, '
              'w13.dim);\n'
              '  Pool2DTemp* pool = new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_AVG);\n'
              '  Conv2DTemp* conv = new Conv2DTemp(3, 3, 1, 1, true, false);\n'
              '  TensorTemp o1, o2, o3;\n'
              '  assert(pool->compute(i1, 0));\n'
              '  o1 = pool->outputs[0];\n'
              '  assert(constant->compute(0));\n'
              '  o2 = constant->outputs[0];\n'
              '  assert(conv->compute(i1, o2, 1));\n'
              '  o3 = conv->outputs[0];\n'
              '  o1.print("o1");\n'
              '  o3.print("o3");\n'
              '  assert(o1 == o3);\n'
              '  // <test4>\n'
              '  ConstantIConvTemp* constant2 = new '
              'ConstantIConvTemp(w4.numDim, w4.dim);\n'
              '  assert(constant2->compute(0));\n'
              '  o1 = constant2->outputs[0];\n'
              '  assert(conv->compute(i1, o1, 1));\n'
              '  o2 = conv->outputs[0];\n'
              '  o2.print("o2");\n'
              '  i1.print("i1");\n'
              '  assert(o2 == i1);\n'
              '  // <test5>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  ConstantIMMTemp* constant3 = new ConstantIMMTemp(w1.numDim, '
              'w1.dim);\n'
              '  assert(constant3->compute(0));\n'
              '  o1 = constant3->outputs[0];\n'
              '  assert(matmul->compute(x1, o1, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(o2 == x1);\n'
              '  // <test6>\n'
              '  ElementTemp* ew_mul = new ElementTemp(OP_EW_MUL);\n'
              '  ConstantOneTemp* constant4 = new ConstantOneTemp(i1.numDim, '
              'i1.dim);\n'
              '  assert(constant4->compute(0));\n'
              '  o1 = constant4->outputs[0];\n'
              '  assert(ew_mul->compute(i1, o1, 1));\n'
              '  o2 = ew_mul->outputs[0];\n'
              '  assert(o2 == i1);\n'
              '\n'
              '  dfs(0, graph, inputs, ops, hashmap, transfers);\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", transfers.size());\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '  GraphSubst::RuleCollection collection;\n'
              '  size_t count = 0;\n'
              '  for (int i = 0; i < transfers.size(); i++)\n'
              '    if (!(transfers[i].isDuplicate)) {\n'
              '      count ++;\n'
              '      printf("Source Graph: %s\\n", '
              'transfers[i].fstGraph.to_string().c_str());\n'
              '      printf("Target Graph: %s\\n", '
              'transfers[i].sndGraph.to_string().c_str());\n'
              '      pb_fill_rule(transfers[i].fstGraph, '
              'transfers[i].sndGraph, collection.add_rule());\n'
              '    }\n'
              '  std::fstream outputFile("graph_subst.pb", ios::out | '
              'ios::trunc);\n'
              '  collection.SerializeToOstream(&outputFile);\n'
              '  google::protobuf::ShutdownProtobufLibrary();\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", count);\n'
              '  return 0;\n'
              '}')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1785,
         lineno=1678,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='hashmap',
         body='std::unordered_map<size_t, GraphTemp> hashmap;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1786,
         lineno=1679,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='transfers',
         body='std::vector<TransferTemp> transfers;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1787,
         lineno=1680,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputs',
         body='std::vector<TensorTemp> inputs;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1788,
         lineno=1681,
         tokens=4,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='graph',
         body='GraphTemp graph;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1789,
         lineno=1683,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sors\n'
              '  TensorTemp x1, x2, x3, w1, w2, w3;\n'
              '  init_tensor_temp(x1, "x1", -1, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x1);\n'
              '  init_tensor_temp(x2, "x2", -2, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x2);\n'
              '  init_tensor_temp(x3, "x3", -3, 0, BATCHSIZE, 4);\n'
              '  inputs.p')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1790,
         lineno=1690,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ush_back(x3);\n'
              '  init_tensor_temp(w1, "w1", -4, 0, 4, 4);\n'
              '  inputs.push_back(w1);\n'
              '  init_tensor_temp(w2, "w2", -5, 0, 4, 4);\n'
              '  inputs.push_back(w2);\n'
              '  init_tensor_temp(w3, "w3", -6, 0, 4, 4);\n'
              '  inputs.push_back(w3);\n'
              '  // Create 4D tensors\n'
              '  TensorTemp i1')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1791,
         lineno=1698,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', i2, i3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14;\n'
              '  init_tensor_temp(i1, "i1", -7, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i1);\n'
              '  init_tensor_temp(i2, "i2", -8, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i2);\n'
              '  init_tensor_temp(i3, "i3", -9,')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1792,
         lineno=1703,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i3);\n'
              '  init_tensor_temp(w4, "w4", -10, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w4);\n'
              '  init_tensor_temp(w5, "w5", -11, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w5);\n'
              '  init_tensor_temp(w6, "w6", -12, 0, 4, 4, 3, 3);\n'
              '  inpu')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1793,
         lineno=1710,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ts.push_back(w6);\n'
              '  init_tensor_temp(w7, "w7", -13, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w7);\n'
              '  init_tensor_temp(w8, "w8", -14, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w8);\n'
              '  init_tensor_temp(w9, "w9", -15, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w9);\n'
              '  init_tensor')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1794,
         lineno=1717,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_temp(w10, "w10", -16, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w10);\n'
              '  init_tensor_temp(w11, "w12", -17, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w11);\n'
              '  init_tensor_temp(w12, "w12", -18, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w12);\n'
              '  init_tensor_temp(w13, "w13", -19,')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1795,
         lineno=1723,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' 0, 4, 1, 3, 3);\n'
              '  inputs.push_back(w13);\n'
              '\n'
              '  // Create 0D scalar tensors\n'
              '  TensorTemp s0;\n'
              '  init_tensor_temp(s0, "s0", -20, 0);\n'
              '  inputs.push_back(s0);\n'
              '  std::vector<OpTemp*> ops;\n'
              '  ops.push_back(new MatmulTemp(AC_MODE_NONE));\n'
              '  operator_names[ops.back(')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1796,
         lineno=1730,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ops',
         body='std::vector<OpTemp*> ops;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1797,
         lineno=1732,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=')] = "MatMul";\n'
              '  ops.push_back(new ElementTemp(OP_EW_ADD));\n'
              '  operator_names[ops.back()] = "EWAdd";\n'
              '  ops.push_back(new ElementTemp(OP_EW_MUL));\n'
              '  operator_names[ops.back()] = "EWMul";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, false));\n'
              '  operator')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1798,
         lineno=1738,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_names[ops.back()] = "Conv3x3S";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv3x3SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 1, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x1S";\n'
              '  ops.push_back(ne')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1799,
         lineno=1743,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='w Conv2DTemp(1, 1, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv1x1SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x3S";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, true));\n'
              '  operator_n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1800,
         lineno=1748,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ames[ops.back()] = "Conv1x3SR";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, false));\n'
              '  //operator_names[ops.back()] = "Conv3x1S";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, true));\n'
              '  //operator_names[ops.back()] = "Conv3x1SR";\n'
              '  ops.push_')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1801,
         lineno=1753,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='back(new Pool2DTemp(3, 3, 1, 1, true, OP_POOL2D_AVG));\n'
              '  operator_names[ops.back()] = "Pool3x3SA";\n'
              '  ops.push_back(new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_MAX));\n'
              '  operator_names[ops.back()] = "Pool3x3SM";\n'
              '\n'
              '  ops.push_back(new ConstantPoolTemp(w13.nu')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1802,
         lineno=1758,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mDim, w13.dim));\n'
              '  operator_names[ops.back()] = "Constant_Pool";\n'
              '  ops.push_back(new ConstantIConvTemp(w4.numDim, w4.dim));\n'
              '  operator_names[ops.back()] = "Constant_IConv";\n'
              '  ops.push_back(new ConstantIMMTemp(w1.numDim, w1.dim));\n'
              '  operator_names[ops.back()] = "Constant_IMM";\n'
              '  ops.push_back(new ConstantOneTemp(i1.numDim, i1.dim));\n'
              '  operator_names[ops.back()] = "Constant_One";\n'
              '  ops.push_back(new EnlargeConvTemp(3, 3));\n'
              '  operator_names[ops.back()] = "Enlarge3x3";\n'
              '  ops.push_back(new ScalarMulTemp());')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1803,
         lineno=1768,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  operator_names[ops.back()] = "ScalarMul";\n'
              '  ops.push_back(new ActivationTemp(OP_RELU));\n'
              '  operator_names[ops.back()] = "Relu";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1804,
         lineno=1774,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(new ConcatTemp(2/*n*/, 2/*numDim*/, 0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1805,
         lineno=1778,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 1/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_1";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 0/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_0";\n'
              '  const int')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1806,
         lineno=1784,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' trans10[2] = {1, 0};\n'
              '  // Should enable shuffle = true one\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'false/*shuffle*/));\n'
              '  operator_names[ops.back()] = "Transpose_10";\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'true/*shuffle*/));\n'
              '  ope')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1807,
         lineno=1789,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rator_names[ops.back()] = "TransposeShuffle_10";\n'
              '#ifdef DEADCODE\n'
              '  // <test1>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  TransposeTemp* transpose = new TransposeTemp(2, trans10, '
              'false);\n'
              '  TransposeTemp* transposeT = new TransposeTemp(2, tran')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1808,
         lineno=1794,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s10, true);\n'
              '  TensorTemp o1, o2, o3, o4, o5;\n'
              '  assert(matmul->compute(w1, w2, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(transpose->compute(w1, 0));\n'
              '  o2 = transpose->outputs[0];\n'
              '  assert(transpose->compute(w2, 1));\n'
              '  o3 = transpose->outputs[0];\n'
              '  assert(')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1809,
         lineno=1802,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='matmul->compute(o3, o2, 2));\n'
              '  o4 = matmul->outputs[0];\n'
              '  assert(transposeT->compute(o4, 3));\n'
              '  o5 = transposeT->outputs[0];\n'
              '  o1.print("o1");\n'
              '  w1.print("w1");\n'
              '  o2.print("o2");\n'
              '  w2.print("w2");\n'
              '  o3.print("o3");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1810,
         lineno=1813,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='assert(o1 == o5);\n'
              '#endif\n'
              '#ifdef DEADCODE\n'
              '  // <test2>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  SplitTemp* split = new SplitTemp(2/*n*/, 1/*axis*/);\n'
              '  ConcatTemp* concat = new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/);\n'
              '  TensorTemp o1, o2, ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1811,
         lineno=1820,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='o3, o4, o5, o6;\n'
              '  assert(matmul->compute(x1, w1, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(matmul->compute(x1, w2, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(concat->compute(w1, w2, 0));\n'
              '  o3 = concat->outputs[0];\n'
              '  assert(matmul->compute(x1, o3, 1));\n'
              '  o4')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1812,
         lineno=1828,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' = matmul->outputs[0];\n'
              '  assert(split->compute(o4, 2));\n'
              '  o5 = split->outputs[0];\n'
              '  o6 = split->outputs[1];\n'
              '  o1.print("o1");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  assert(o1 == o5);\n'
              '  assert(o2 == o6);\n'
              '#endif\n'
              '  // <test3>\n'
              '  ConstantPoolTemp* constant = ')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1813,
         lineno=1839,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='new ConstantPoolTemp(w13.numDim, w13.dim);\n'
              '  Pool2DTemp* pool = new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_AVG);\n'
              '  Conv2DTemp* conv = new Conv2DTemp(3, 3, 1, 1, true, false);\n'
              '  TensorTemp o1, o2, o3;\n'
              '  assert(pool->compute(i1, 0));\n'
              '  o1 = pool->outputs[')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1814,
         lineno=1844,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0];\n'
              '  assert(constant->compute(0));\n'
              '  o2 = constant->outputs[0];\n'
              '  assert(conv->compute(i1, o2, 1));\n'
              '  o3 = conv->outputs[0];\n'
              '  o1.print("o1");\n'
              '  o3.print("o3");\n'
              '  assert(o1 == o3);\n'
              '  // <test4>\n'
              '  ConstantIConvTemp* constant2 = new ConstantIConvTemp(w4.')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1815,
         lineno=1853,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='numDim, w4.dim);\n'
              '  assert(constant2->compute(0));\n'
              '  o1 = constant2->outputs[0];\n'
              '  assert(conv->compute(i1, o1, 1));\n'
              '  o2 = conv->outputs[0];\n'
              '  o2.print("o2");\n'
              '  i1.print("i1");\n'
              '  assert(o2 == i1);\n'
              '  // <test5>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MO')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1816,
         lineno=1862,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='DE_NONE);\n'
              '  ConstantIMMTemp* constant3 = new ConstantIMMTemp(w1.numDim, '
              'w1.dim);\n'
              '  assert(constant3->compute(0));\n'
              '  o1 = constant3->outputs[0];\n'
              '  assert(matmul->compute(x1, o1, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(o2 == x1);\n'
              '  // <test6>\n'
              '  ElementTe')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1817,
         lineno=1870,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mp* ew_mul = new ElementTemp(OP_EW_MUL);\n'
              '  ConstantOneTemp* constant4 = new ConstantOneTemp(i1.numDim, '
              'i1.dim);\n'
              '  assert(constant4->compute(0));\n'
              '  o1 = constant4->outputs[0];\n'
              '  assert(ew_mul->compute(i1, o1, 1));\n'
              '  o2 = ew_mul->outputs[0];\n'
              '  assert(o2 == i1);\n'
              '\n'
              '  dfs(0, graph, inputs, ops, hashmap, transfers);\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", transfers.size());\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '  GraphSubst::RuleCollection collection;\n'
              '  size_t count = 0;\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1818,
         lineno=1881,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='collection',
         body='GraphSubst::RuleCollection collection;')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1819,
         lineno=1883,
         tokens=16,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < transfers.size(); i++)\n')

Fragment(document_cs='4654187488dd3d6dcc6118c9543ab8bd53f0aac6a680373d1d71564bb81ae569',
         id=1820,
         lineno=1884,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!(transfers[i].isDuplicate)) {\n'
              '      count ++;\n'
              '      printf("Source Graph: %s\\n", '
              'transfers[i].fstGraph.to_string().c_str());\n'
              '      printf("Target Graph: %s\\n", '
              'transfers[i].sndGraph.to_string().c_str());\n'
              '      pb_fill_rule(transfers[i].fstGraph, '
              'transfers[i].sndGraph, collection.add_rule());\n'
              '    }\n'
              '  std::fstream outputFile("graph_subst.pb", ios::out | '
              'ios::trunc);\n'
              '  collection.SerializeToOstream(&outputFile);\n'
              '  google::protobuf::ShutdownProtobufLibrary();\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", count);\n'
              '  return 0;\n'
              '}\n')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1821,
         lineno=1,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specifi')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1822,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/cast_mkl.cc\n'
              '  Methods: Cast::forward Cast::map Cast::unmap '
              'Model::measure_cast_cost\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_cast_cost unmap\n')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1823,
         lineno=12,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='c language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Cast::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Cast::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Cast::forward(bool block)\n'
              '{\n')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1824,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1825,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1826,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::map',
         body='void Cast::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1827,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::unmap',
         body='void Cast::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1828,
         lineno=37,
         tokens=20,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::forward',
         body='void Cast::forward(bool block)\n'
              '{\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1829,
         lineno=39,
         tokens=68,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_cast_cost(Cast* cast)\n'
              '{\n'
              '  cast->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Cast]: type(%d) cost(%.4lf)\\n",\n'
              '           cast->type, cast->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='479b284d4ccc9fd481564bbb2130fe6548caf56f4227c7c45a2937e30500c405',
         id=1830,
         lineno=42,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_cast_cost',
         body='void Model::measure_cast_cost(Cast* cast)\n'
              '{\n'
              '  cast->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Cast]: type(%d) cost(%.4lf)\\n",\n'
              '           cast->type, cast->runtime);\n'
              '}')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1831,
         lineno=1,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the L')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1832,
         lineno=1,
         tokens=43,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/constant_mkl.cc\n'
              '  Methods: Constant::forward Constant::map Constant::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1833,
         lineno=12,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='icense for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Constant::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Constant::unmap(void)\n'
              '{\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Constant::forward(bool block)\n'
              '{\n'
              '}\n'
              '\n')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1834,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1835,
         lineno=20,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::map',
         body='void Constant::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1836,
         lineno=27,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::unmap',
         body='void Constant::unmap(void)\n'
              '{\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='49b845bf319c6acb43a70a6f208898846bde213183d915dd8c45422090dd3552',
         id=1837,
         lineno=34,
         tokens=9,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::forward',
         body='void Constant::forward(bool block)\n{\n}')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1838,
         lineno=1,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTI')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1839,
         lineno=1,
         tokens=62,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/merge_gconv_mkl.cc\n'
              '  Functions: merge_gconv_kernel\n'
              '  Methods: MergeGConv::forward MergeGConv::map '
              'MergeGConv::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1840,
         lineno=11,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ES OR CONDITIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void merge_gconv_kernel(DATATYPE* dstPtr, const DATATYPE* '
              'srcPtr, int volume,\n'
              '    int cInHW, int cOut, int count) {\n'
              '  assert(cOut % count == 0);\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1841,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1842,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1843,
         lineno=21,
         tokens=34,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='merge_gconv_kernel',
         body='merge_gconv_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, '
              'int volume,\n'
              '    int cInHW, int cOut, int count)')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1844,
         lineno=21,
         tokens=133,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='merge_gconv_kernel',
         body='void merge_gconv_kernel(DATATYPE* dstPtr, const DATATYPE* '
              'srcPtr, int volume,\n'
              '    int cInHW, int cOut, int count) {\n'
              '  assert(cOut % count == 0);\n'
              '#pragma omp parallel for\n'
              '  for (int srcIdx = 0; srcIdx < volume; srcIdx++) {\n'
              '    int mod = srcIdx % cInHW;\n'
              '    int div = srcIdx / cInHW;\n'
              '    int dstIdx = (div * count + div / (cOut / count)) * cInHW + '
              'mod;\n'
              '    dstPtr[dstIdx] = srcPtr[srcIdx];\n'
              '  }\n'
              '}')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1845,
         lineno=25,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int srcIdx = 0; srcIdx < volume; srcIdx++) {\n'
              '    int mod = srcIdx % cInHW;\n'
              '    int div = srcIdx / cInHW;\n'
              '    int dstIdx = (div * count + div / (cOut / count)) * cInHW + '
              'mod;\n'
              '    dstPtr[dstIdx] = srcPtr[srcIdx];\n'
              '  }\n'
              '}\n'
              '\n'
              'void MergeGConv::map(void)\n'
              '{\n'
              '  // allocate ten')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1846,
         lineno=33,
         tokens=49,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::map',
         body='void MergeGConv::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1847,
         lineno=35,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void MergeGConv::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = ')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1848,
         lineno=40,
         tokens=44,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::unmap',
         body='void MergeGConv::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1849,
         lineno=46,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nullptr;\n'
              '}\n'
              '\n'
              'void MergeGConv::forward(bool block)\n'
              '{\n'
              '  // outChannels unchanged, inChannels enlarged by count.\n'
              '  assert(outputs[0].dim[0] == inputs[0].dim[0]);\n'
              '  int cOut = inputs[0].dim[0];\n'
              '  int cInHW = inputs[0].volume() / cOut;\n'
              '  assert(outputs[0].dim[1] % inputs[0].di')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1850,
         lineno=49,
         tokens=195,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::forward',
         body='void MergeGConv::forward(bool block)\n'
              '{\n'
              '  // outChannels unchanged, inChannels enlarged by count.\n'
              '  assert(outputs[0].dim[0] == inputs[0].dim[0]);\n'
              '  int cOut = inputs[0].dim[0];\n'
              '  int cInHW = inputs[0].volume() / cOut;\n'
              '  assert(outputs[0].dim[1] % inputs[0].dim[1] == 0);\n'
              '  int count = outputs[0].dim[1] / inputs[0].dim[1];\n'
              '\n'
              '  assign_kernel((DATATYPE*)outputs[0].data_ptr, '
              'outputs[0].volume(), 0.0f);\n'
              '  merge_gconv_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr,\n'
              '      inputs[0].volume(), cInHW, cOut, count);\n'
              '\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='4a91da6b2f602ead41bbc5858c0c11102cce56efde93c8ef4a3e4f20d9e754b2',
         id=1851,
         lineno=55,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='m[1] == 0);\n'
              '  int count = outputs[0].dim[1] / inputs[0].dim[1];\n'
              '\n'
              '  assign_kernel((DATATYPE*)outputs[0].data_ptr, '
              'outputs[0].volume(), 0.0f);\n'
              '  merge_gconv_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr,\n'
              '      inputs[0].volume(), cInHW, cOut, count);\n'
              '\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1852,
         lineno=1,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso as ts\n'
              '\n'
              'def resnet_block(graph, input, strides, out_channels):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1853,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1854,
         lineno=1,
         tokens=48,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/resnet50.py\n'
              '  Functions: resnet_block\n'
              '  Variables and usages: activation alpha budget conv2d dims '
              'graph input new_graph new_input new_weight optimize '
              'out_channels padding range relu strides taso weight\n')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1855,
         lineno=3,
         tokens=79,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='def resnet_block(graph, input, strides, out_channels):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t.')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1856,
         lineno=8,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1857,
         lineno=8,
         tokens=84,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1858,
         lineno=15,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,64,56,56))\n'
              't = input\n'
              'for i in range(3):\n'
              '    t =')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1859,
         lineno=15,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1860,
         lineno=26,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' resnet_block(graph, t, (1,1), 64)\n'
              'strides = (2,2)\n'
              'for i in range(4):\n'
              '    t = resnet_block(graph, t, strides, 128)\n'
              '    strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(6):\n'
              '    t = resnet_block(graph, t, strides, 256)\n'
              ' ')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1861,
         lineno=34,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(3):\n'
              '    t = resnet_block(graph, t, strides, 512)\n'
              '    strides = (1,1)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '#onnx_model = ts.export_onnx(new_graph)\n'
              '\n')

Fragment(document_cs='4ded009932bd09d6801c3b4cc35caa9302ec9a3fb9d051e616ac38fe86a1656a',
         id=1862,
         lineno=41,
         tokens=12,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#onnx_model = ts.export_onnx(new_graph)')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1863,
         lineno=1,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRAN')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1864,
         lineno=1,
         tokens=28,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/bert.h\n'
              '  Macros: _CPP_EXAMPLES_BERT_H_\n'
              '  Functions: attention bert\n')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1865,
         lineno=11,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TIES OR CONDITIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EXAMPLES_BERT_H_\n'
              '#define _CPP_EXAMPLES_BERT_H_\n'
              '\n'
              'TensorHandle attention(Graph* graph, const TensorHandle input, '
              'int heads) {\n'
              '  int d_model = input->dim[1];\n'
              '  int d_k = d_model / heads;\n'
              '  assert(input->dim[1] % heads == 0);\n'
              '  TensorHandle weights[3];\n')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1866,
         lineno=17,
         tokens=10,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_BERT_H_',
         body='#define _CPP_EXAMPLES_BERT_H_')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1867,
         lineno=19,
         tokens=402,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='TensorHandle attention(Graph* graph, const TensorHandle input, '
              'int heads) {\n'
              '  int d_model = input->dim[1];\n'
              '  int d_k = d_model / heads;\n'
              '  assert(input->dim[1] % heads == 0);\n'
              '  TensorHandle weights[3];\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    weights[i] = new_random_weight(graph, { d_model, d_model '
              '});\n'
              '  }\n'
              '  // compute query, key, value tensors\n'
              '  auto q = graph->matmul(input, weights[0]);\n'
              '  auto k = graph->matmul(input, weights[1]);\n'
              '  auto v = graph->matmul(input, weights[2]);\n'
              '  // reshape query, key, value to multiple heads\n'
              '  q = graph->reshape(q, { -1, heads, d_k });\n'
              '  k = graph->reshape(k, { -1, heads, d_k });\n'
              '  v = graph->reshape(v, { -1, heads, d_k });\n'
              '  // transpose query, key, value for batched matmul\n'
              '  q = graph->transpose(q, { 1, 0, 2 }, true);\n'
              '  k = graph->transpose(k, { 1, 2, 0 }, true);\n'
              '  v = graph->transpose(v, { 1, 0, 2 }, true);\n'
              '  // perform matrix multiplications\n'
              '  auto logits = graph->matmul(q, k);\n'
              '  auto output = graph->matmul(logits, v);\n'
              '  // transpose the output back\n'
              '  output = graph->transpose(output, { 1, 0, 2 }, true);\n'
              '  output = graph->reshape(output, { input->dim[0], '
              'input->dim[1] });\n'
              '\n'
              '  // a final linear layer\n'
              '  auto linear = new_random_weight(graph, { d_model, d_model '
              '});\n'
              '  output = graph->matmul(output, linear);\n'
              '  return output;\n'
              '}')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1868,
         lineno=19,
         tokens=13,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='attention(Graph* graph, const TensorHandle input, int heads)')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1869,
         lineno=24,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 3; i++) {\n'
              '    weights[i] = new_random_weight(graph, { d_model, d_model '
              '});\n'
              '  }\n'
              '  // compute query, key, value tensors\n'
              '  auto q = graph->matmul(input, weights[0]);\n'
              '  auto k = graph->matmul(input, weights[1]);\n'
              '  auto v = graph->matmul(input, weights[2]);\n'
              '  // reshape query, key, value to multiple heads\n'
              '  q = gr')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1870,
         lineno=32,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='aph->reshape(q, { -1, heads, d_k });\n'
              '  k = graph->reshape(k, { -1, heads, d_k });\n'
              '  v = graph->reshape(v, { -1, heads, d_k });\n'
              '  // transpose query, key, value for batched matmul\n'
              '  q = graph->transpose(q, { 1, 0, 2 }, true);\n'
              '  k = graph->transpose(k, { 1, 2, 0 }, true);\n'
              '  v = graph->transpose(v, { 1, 0, 2 }, true);\n'
              '  // perform mat')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1871,
         lineno=39,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rix multiplications\n'
              '  auto logits = graph->matmul(q, k);\n'
              '  auto output = graph->matmul(logits, v);\n'
              '  // transpose the output back\n'
              '  output = graph->transpose(output, { 1, 0, 2 }, true);\n'
              '  output = graph->reshape(output, { input->dim[0], '
              'input->dim[1] });\n'
              '\n'
              '  // a final linear layer\n'
              '  auto linear = new_random_weight(graph, { d_model')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1872,
         lineno=47,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', d_model });\n'
              '  output = graph->matmul(output, linear);\n'
              '  return output;\n'
              '}\n'
              '\n'
              'Graph* bert(float alpha, int budget, bool printSubst = false) '
              '{\n'
              '  const int seq_length = 64;\n'
              '  const int hidden_dims = 1024;\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { seq_length, hidden_dims });\n'
              '  inp = graph->relu(inp);\n'
              '  auto t = inp;\n'
              '  for (int i = 0; i < 8; i++) {\n'
              '    t = attention(graph, t, 16);\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='4e2cd4315cc0833573e8341111a7381d0a2ac218662353de4f53adb05e223c32',
         id=1873,
         lineno=52,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='bert',
         body='bert(float alpha, int budget, bool printSubst = false)')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1874,
         lineno=1,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See t')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1875,
         lineno=1,
         tokens=73,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/conv2d_kernel.cu\n'
              '  Methods: Conv2D::forward Conv2D::map Conv2D::unmap '
              'Model::measure_conv2d_cost\n'
              '  Variables: milliseconds padH totalPadH\n'
              '  Using: taso\n'
              '  Usages: forward map measure_conv2d_cost unmap\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1876,
         lineno=12,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='he License for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Conv2D::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));\n'
              '  checkCUDNN(cudnnCreateConvolutionD')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1877,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1878,
         lineno=20,
         tokens=739,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::map',
         body='void Conv2D::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));\n'
              '  checkCUDNN(cudnnCreateConvolutionDescriptor(&convDesc));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC = inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int outputC = inputs[1].dim[0];\n'
              '  int groups = inputs[0].dim[1] / inputs[1].dim[1];\n'
              '  int padH, padW;\n'
              '  get_padding(&padH, &padW);\n'
              '  // set descriptors\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      CUDNN_TENSOR_NCHW, inputs[1].dim[0], inputs[1].dim[1],\n'
              '      inputs[1].dim[2], inputs[1].dim[3]));\n'
              '  checkCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, '
              'padW,\n'
              '      strideH, strideW, 1/*dilationH*/, 1/*dilationW*/,\n'
              '      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));\n'
              '  checkCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));\n'
              '  if (groups != 1) {\n'
              '    checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, '
              'groups));\n'
              '  }\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetConvolution2dForwardOutputDim(convDesc,\n'
              '      inputTensor, filterDesc, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == outputC);\n'
              '  assert(outputs[0].dim[2] == h);\n'
              '  assert(outputs[0].dim[3] == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  size_t biasSize = sizeof(DATATYPE) * outputC;\n'
              '  checkCUDA(cudaMalloc(&biasPtr, biasSize));\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1879,
         lineno=27,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='escriptor(&convDesc));\n'
              '  int inputN = inputs[0].dim[0];\n'
              '  int inputC = inputs[0].dim[1];\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  int outputC = inputs[1].dim[0];\n'
              '  int groups = inputs[0].dim[1] / inputs[1].dim[1];\n'
              '  i')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1880,
         lineno=34,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nt padH, padW;\n'
              '  get_padding(&padH, &padW);\n'
              '  // set descriptors\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1881,
         lineno=34,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1882,
         lineno=39,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      CUDNN_TENSOR_NCHW, inputs[1].dim[0], inputs[1].dim[1],\n'
              '      inputs[1].dim[2], inputs[1].dim[3]));\n'
              '  ch')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1883,
         lineno=44,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eckCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, padW,\n'
              '      strideH, strideW, 1/*dilationH*/, 1/*dilationW*/,\n'
              '      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));\n'
              '  checkCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1884,
         lineno=48,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (groups != 1) {\n'
              '    checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, '
              'groups));\n'
              '  }\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetConvolution2dForwardOutputDim(convDesc,\n'
              '      inputTensor, filterDesc, &n, &c, &h, &w));\n'
              '  as')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1885,
         lineno=54,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sert(n == inputN);\n'
              '  assert(c == outputC);\n'
              '  assert(outputs[0].dim[2] == h);\n'
              '  assert(outputs[0].dim[3] == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1886,
         lineno=60,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  size_t biasSize = sizeof(DATATYPE) * outputC;\n'
              '  checkCUDA(cu')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1887,
         lineno=69,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='daMalloc(&biasPtr, biasSize));\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Conv2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyFilterDescriptor(filterDesc));\n'
              '  checkCUDNN(cudnnDestroyConvolutionDescriptor(convDesc));\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1888,
         lineno=73,
         tokens=136,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::unmap',
         body='void Conv2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyFilterDescriptor(filterDesc));\n'
              '  checkCUDNN(cudnnDestroyConvolutionDescriptor(convDesc));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '}')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1889,
         lineno=80,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '}\n'
              '\n'
              'void Conv2D::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1890,
         lineno=88,
         tokens=271,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::forward',
         body='void Conv2D::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnConvolutionBiasActivationForward(\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,\n'
              '        &beta, outputTensor, outputs[0].data_ptr, biasTensor, '
              'biasPtr, actiDesc,\n'
              '        outputTensor, outputs[0].data_ptr));\n'
              '  } else {\n'
              '    checkCUDNN(cudnnConvolutionForward(\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n'
              '    checkCUDNN(cudnnAddTensor(model->dnn, &alpha, biasTensor, '
              'biasPtr,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr));\n'
              '  }\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1891,
         lineno=92,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnConvolutionBiasActivationForward(\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,\n'
              '        &beta, outputTensor, outputs[0].data_ptr, biasTensor, '
              'biasPtr, actiDesc,\n'
              '        outputTensor, outputs[0].data_ptr));\n'
              '  } els')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1892,
         lineno=98,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e {\n'
              '    checkCUDNN(cudnnConvolutionForward(\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n'
              '    checkCUDNN(cudnnAddTensor(model->dnn, &alpha, biasTensor, '
              'biasPtr,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr));\n'
              '  }\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1893,
         lineno=106,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_conv2d_cost(Conv2D* conv)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = conv->inputs[0].dim[0];\n'
              '  int inputC = conv->inputs[0].dim[1];\n'
              '  int inputH = conv->inputs[0].dim[2];\n'
              '  int inputW = conv->inputs[0].dim[3];\n'
              '  int kernelH = conv->inputs[1].dim[2];\n'
              '  int kernelW = conv->in')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1894,
         lineno=110,
         tokens=1612,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_conv2d_cost',
         body='void Model::measure_conv2d_cost(Conv2D* conv)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int inputN = conv->inputs[0].dim[0];\n'
              '  int inputC = conv->inputs[0].dim[1];\n'
              '  int inputH = conv->inputs[0].dim[2];\n'
              '  int inputW = conv->inputs[0].dim[3];\n'
              '  int kernelH = conv->inputs[1].dim[2];\n'
              '  int kernelW = conv->inputs[1].dim[3];\n'
              '  int outputC = conv->outputs[0].dim[1];\n'
              '  int outputH = conv->outputs[0].dim[2];\n'
              '  int outputW = conv->outputs[0].dim[3];\n'
              '  int groups = conv->inputs[0].dim[1] / '
              'conv->inputs[1].dim[1];\n'
              '  int padH, padW;\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (conv->padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n'
              '      if (inputH % conv->strideH == 0)\n'
              '        totalPadH = max(kernelH - conv->strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % conv->strideH), '
              '0);\n'
              '      if (inputW % conv->strideW == 0)\n'
              '        totalPadW = max(kernelW - conv->strideW, 0);\n'
              '      else\n'
              '        totalPadW = max(kernelW - (inputW % conv->strideW), '
              '0);\n'
              '      // assert same padding on both sides\n'
              '      padH = (totalPadH + 1) / 2;\n'
              '      padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      padH = 0;\n'
              '      padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      CUDNN_TENSOR_NCHW, conv->inputs[1].dim[0], '
              'conv->inputs[1].dim[1],\n'
              '      conv->inputs[1].dim[2], conv->inputs[1].dim[3]));\n'
              '  checkCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, '
              'padW,\n'
              '      conv->strideH, conv->strideW, 1/*dilationH*/, '
              '1/*dilationW*/,\n'
              '      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));\n'
              '  checkCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));\n'
              '  checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, groups));\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetConvolution2dForwardOutputDim(convDesc,\n'
              '      inputTensor, filterDesc, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == outputC);\n'
              '  assert(outputH == h);\n'
              '  assert(outputW == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN * inputC * '
              'inputH * inputW;\n'
              '  size_t filterSize = sizeof(DATATYPE) * inputC * outputC\n'
              '                      * kernelH * kernelW;\n'
              '  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  assert(inputSize < MAX_TENSOR_SIZE);\n'
              '  assert(filterSize < MAX_TENSOR_SIZE);\n'
              '  assert(outputSize < MAX_TENSOR_SIZE);\n'
              '\n'
              '  const int reqAlgCnt = 8;\n'
              '  int cnt = 0;\n'
              '  cudnnConvolutionFwdAlgoPerf_t perfResults[reqAlgCnt];\n'
              '  checkCUDNN(cudnnFindConvolutionForwardAlgorithmEx(\n'
              '      dnn, inputTensor, inputPtr, filterDesc, filterPtr, '
              'convDesc,\n'
              '      outputTensor, outputPtr, reqAlgCnt, &cnt, perfResults,\n'
              '      workSpace, workSpaceSize));\n'
              '  assert(cnt > 0);\n'
              '  checkCUDNN(perfResults[0].status);\n'
              '  //for (int i = 0; i < cnt; i++) {\n'
              '    //printf("fwdAlgo(%d) time(%.2lfms) space(%dMB)\\n", '
              'perfResults[i].algo,\n'
              '    //       perfResults[i].time, perfResults[i].memory / 1024 '
              '/ 1024);\n'
              '  //}\n'
              '  conv->fwdAlgo = perfResults[0].algo;\n'
              ' \n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n'
              '    }\n'
              '    if (conv->activation != AC_MODE_NONE) {\n'
              '      checkCUDNN(cudnnConvolutionBiasActivationForward(\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc, '
              'filterPtr,\n'
              '          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,\n'
              '          &beta, outputTensor, outputPtr, biasTensor, biasPtr, '
              'actiDesc,\n'
              '          outputTensor, outputPtr));\n'
              '    } else {\n'
              '      checkCUDNN(cudnnConvolutionForward(\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc, '
              'filterPtr,\n'
              '          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '      checkCUDNN(cudnnAddTensor(dnn, &alpha, biasTensor, '
              'biasPtr,\n'
              '          &alpha, outputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  conv->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d %d) cost(%.4lf)\\n",\n'
              '           conv->inputs[0].dim[0], conv->inputs[0].dim[1], '
              'conv->inputs[0].dim[2], conv->inputs[0].dim[3],\n'
              '           conv->inputs[1].dim[0], conv->inputs[1].dim[1], '
              'conv->inputs[1].dim[2], conv->inputs[1].dim[3],\n'
              '           conv->strideH, conv->strideW, padH, padW, '
              'conv->runtime);\n'
              '}')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1895,
         lineno=119,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='puts[1].dim[3];\n'
              '  int outputC = conv->outputs[0].dim[1];\n'
              '  int outputH = conv->outputs[0].dim[2];\n'
              '  int outputW = conv->outputs[0].dim[3];\n'
              '  int groups = conv->inputs[0].dim[1] / '
              'conv->inputs[1].dim[1];\n'
              '  int padH, padW;\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (conv->padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1896,
         lineno=124,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1897,
         lineno=128,
         tokens=9,
         depth=5,
         parent_id=None,
         category='variable',
         summary=False,
         name='totalPadH',
         body='int totalPadH, totalPadW;')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1898,
         lineno=129,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (inputH % conv->strideH == 0)\n'
              '        totalPadH = max(kernelH - conv->strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % conv->strideH), '
              '0);\n'
              '      if (inputW % conv->strideW == 0)\n'
              '        totalPadW = max(kernelW - conv->strideW, 0);\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1899,
         lineno=135,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      else\n'
              '        totalPadW = max(kernelW - (inputW % conv->strideW), '
              '0);\n'
              '      // assert same padding on both sides\n'
              '      padH = (totalPadH + 1) / 2;\n'
              '      padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      padH = 0;\n'
              '      padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  checkC')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1900,
         lineno=148,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='UDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      C')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1901,
         lineno=153,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='UDNN_TENSOR_NCHW, conv->inputs[1].dim[0], '
              'conv->inputs[1].dim[1],\n'
              '      conv->inputs[1].dim[2], conv->inputs[1].dim[3]));\n'
              '  checkCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, '
              'padW,\n'
              '      conv->strideH, conv->strideW, 1/*dilationH*/, '
              '1/*dilationW*/,\n'
              '      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));\n'
              '  chec')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1902,
         lineno=158,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='kCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));\n'
              '  checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, groups));\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  int n, c, h, w;\n'
              '  checkCUDNN(cudnnGetConvolution2dForwardOutputDim')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1903,
         lineno=163,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(convDesc,\n'
              '      inputTensor, filterDesc, &n, &c, &h, &w));\n'
              '  assert(n == inputN);\n'
              '  assert(c == outputC);\n'
              '  assert(outputH == h);\n'
              '  assert(outputW == w);\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,\n'
              '      CUDNN_DATA_FLOAT, n, c, h, w));\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN *')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1904,
         lineno=171,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' inputC * inputH * inputW;\n'
              '  size_t filterSize = sizeof(DATATYPE) * inputC * outputC\n'
              '                      * kernelH * kernelW;\n'
              '  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  assert(inputSize < MAX_TENSOR_SIZE);\n'
              '  assert(filterSize < MAX_TENSOR_SIZE);\n'
              '  assert(outputSize < MAX_TENSOR_SIZE);\n'
              '\n'
              '  const in')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1905,
         lineno=179,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t reqAlgCnt = 8;\n'
              '  int cnt = 0;\n'
              '  cudnnConvolutionFwdAlgoPerf_t perfResults[reqAlgCnt];\n'
              '  checkCUDNN(cudnnFindConvolutionForwardAlgorithmEx(\n'
              '      dnn, inputTensor, inputPtr, filterDesc, filterPtr, '
              'convDesc,\n'
              '      outputTensor, outputPtr, reqAlgCnt, &cnt, perfResults,\n'
              '      workSpace, workSpaceSize));\n'
              '  assert(cn')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1906,
         lineno=186,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t > 0);\n'
              '  checkCUDNN(perfResults[0].status);\n'
              '  //for (int i = 0; i < cnt; i++) {\n'
              '    //printf("fwdAlgo(%d) time(%.2lfms) space(%dMB)\\n", '
              'perfResults[i].algo,\n'
              '    //       perfResults[i].time, perfResults[i].memory / 1024 '
              '/ 1024);\n'
              '  //}\n'
              '  conv->fwdAlgo = perfResults[0].algo;\n'
              ' \n'
              '  checkCUDA(cudaDeviceSynchronize());\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1907,
         lineno=195,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n'
              '    }\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1908,
         lineno=199,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (conv->activation != AC_MODE_NONE) {\n'
              '      checkCUDNN(cudnnConvolutionBiasActivationForward(\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc, '
              'filterPtr,\n'
              '          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,\n'
              '          &beta, outputTensor, outputPtr, biasTensor, biasPtr, '
              'actiDesc,\n'
              '          outputTensor, outputPtr));\n'
              '    } else {\n'
              '      checkCUDNN(cudnnConvolutionForward(\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc,')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1909,
         lineno=207,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' filterPtr,\n'
              '          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '      checkCUDNN(cudnnAddTensor(dnn, &alpha, biasTensor, '
              'biasPtr,\n'
              '          &alpha, outputTensor, outputPtr));\n'
              '    }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  conv->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1910,
         lineno=216,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1911,
         lineno=219,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d %d) cost(%.4lf)\\n",\n'
              '           conv->inputs[0].dim[0], conv->inputs[0].dim[1], '
              'conv->inputs[0].dim[2], con')

Fragment(document_cs='50fcaa540ac707b38558fe0ba3734cbcef7944159b4e40a9423665109f93e085',
         id=1912,
         lineno=221,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='v->inputs[0].dim[3],\n'
              '           conv->inputs[1].dim[0], conv->inputs[1].dim[1], '
              'conv->inputs[1].dim[2], conv->inputs[1].dim[3],\n'
              '           conv->strideH, conv->strideW, padH, padW, '
              'conv->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1913,
         lineno=1,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY ')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1914,
         lineno=1,
         tokens=79,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/fuse_conv_batchnorm_alpha_var_mkl.cc\n'
              '  Functions: fuse_conv_batchnorm_alpha_var_kernel\n'
              '  Methods: FuseConvBatchNormAlphaVar::forward '
              'FuseConvBatchNormAlphaVar::map '
              'FuseConvBatchNormAlphaVar::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: abs forward map sqrt unmap\n')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1915,
         lineno=11,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void fuse_conv_batchnorm_alpha_var_kernel(int c_out, int '
              'c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1916,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1917,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1918,
         lineno=21,
         tokens=43,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_alpha_var_kernel',
         body='fuse_conv_batchnorm_alpha_var_kernel(int c_out, int c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var)')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1919,
         lineno=21,
         tokens=128,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_alpha_var_kernel',
         body='void fuse_conv_batchnorm_alpha_var_kernel(int c_out, int '
              'c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1920,
         lineno=25,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(i')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1921,
         lineno=31,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::map',
         body='void FuseConvBatchNormAlphaVar::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1922,
         lineno=34,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::unmap(void)\n'
              '{\n'
              '  // clear prim')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1923,
         lineno=41,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::unmap',
         body='void FuseConvBatchNormAlphaVar::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1924,
         lineno=43,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='itives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DAT')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1925,
         lineno=50,
         tokens=137,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::forward',
         body='void FuseConvBatchNormAlphaVar::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  fuse_conv_batchnorm_alpha_var_kernel(c_out, c_in_h_w,\n'
              '      (DATATYPE*)outputs[0].data_ptr, conv_w_ptr, scale_ptr, '
              'var_ptr);\n'
              '}')

Fragment(document_cs='51244657b439cf5d31c90799e2627176d1fdc452a8d400aeedbd5e21d3ee1220',
         id=1926,
         lineno=54,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  fuse_conv_batchnorm_alpha_var_kernel(c_out, c_in_h_w,\n'
              '      (DATATYPE*)outputs[0].data_ptr, conv_w_ptr, scale_ptr, '
              'var_ptr);\n'
              '}\n'
              '\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1927,
         lineno=1,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import taso as ts\n'
              'import onnx\n'
              '\n'
              'NUM_LAYERS = 12\n'
              '\n'
              'def create_layer_weights(graph, num_layers, channels):\n'
              '    """Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    """\n'
              '    all_w = []\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1928,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1929,
         lineno=1,
         tokens=136,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/enas.py\n'
              '  Functions: add_skips create_architecture create_layer_weights '
              'get_dims main parse_arcs separable_conv\n'
              '  Variables and usages: ArgumentParser NUM_LAYERS ValueError '
              'action activation add_argument all_arcs all_w alpha append arcs '
              'argparse args avgpool2d budget channels conv2d conv_w default '
              'description dims enumerate export_onnx graph help input '
              'input_file input_size kernel_dim kernel_size kernels layer '
              'layer_id layers line maxpool2d min_size new_graph new_input '
              'new_weight num_layers num_models onnx onnx_model open optimize '
              'padding parse_args parser range save save_models size sizes '
              'skips spec split strides strip taso tuple type weight\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1930,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1931,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1932,
         lineno=7,
         tokens=72,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_layer_weights',
         body='def create_layer_weights(graph, num_layers, channels):\n'
              '    """Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    """\n'
              '    all_w = []\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1933,
         lineno=8,
         tokens=53,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1934,
         lineno=19,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(num_layers):\n'
              '        w = []\n'
              '        # conv_3x3\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 3, '
              '3))) # conv_3x3\n'
              '        # conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 5, '
              '5))) # conv_5x5\n'
              '        # separable conv_3x3\n'
              '        w.append(grap')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1935,
         lineno=19,
         tokens=95,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_layer_weights',
         body='    for i in range(num_layers):\n'
              '        w = []\n'
              '        # conv_3x3\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 3, '
              '3))) # conv_3x3\n'
              '        # conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 5, '
              '5))) # conv_5x5\n'
              '        # separable conv_3x3\n'
              '        w.append(grap')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1936,
         lineno=25,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# separable conv_3x3')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1937,
         lineno=26,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='h.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        # separable conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '\n'
              '        all_w.append(w)\n'
              '    return all_w\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1938,
         lineno=26,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_layer_weights',
         body='h.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        # separable conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '\n'
              '        all_w.append(w)\n'
              '    return all_w')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1939,
         lineno=28,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# separable conv_5x5')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1940,
         lineno=34,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def get_dims(t):\n'
              '    """Returns the size of a tensor."""\n'
              '    return tuple([t.dim(i) for i in range(4)])\n'
              '\n'
              'def add_skips(graph, layers, skips):\n'
              '    """Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '    ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1941,
         lineno=35,
         tokens=29,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_dims',
         body='def get_dims(t):\n'
              '    """Returns the size of a tensor."""\n'
              '    return tuple([t.dim(i) for i in range(4)])')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1942,
         lineno=36,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Returns the size of a tensor.')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1943,
         lineno=39,
         tokens=88,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='add_skips',
         body='def add_skips(graph, layers, skips):\n'
              '    """Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '     ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1944,
         lineno=40,
         tokens=136,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1945,
         lineno=49,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    """\n'
              '    t = layers[-1]\n'
              '    sizes = \\\n'
              '        set([get_dims(layers[i]) for i in range(len(skips)) if '
              'skips[i] == 1])\n'
              '    sizes.add(get_dims(t))\n'
              '    min_size = min(sizes)\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1946,
         lineno=49,
         tokens=112,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='add_skips',
         body='   layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    """\n'
              '    t = layers[-1]\n'
              '    sizes = \\\n'
              '        set([get_dims(layers[i]) for i in range(len(skips)) if '
              'skips[i] == 1])\n'
              '    sizes.add(get_dims(t))\n'
              '    min_size = min(sizes)\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1947,
         lineno=61,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(len(skips)):\n'
              '        if skips[i] == 1:\n'
              '            size = get_dims(layers[i])\n'
              '            if size > min_size:\n'
              '                kernel_size = size[-1] - 2 * (min_size[-1] - '
              '1)\n'
              '                t = graph.add(\n'
              '                        graph.avgpool2d(input=layers[i],\n'
              '                                        kernels=[kernel_size, '
              'kernel_size],\n'
              '                                        strides=[2, 2],\n'
              '                                        padding="VALID"),\n'
              '                        t)\n'
              '            else:\n'
              '                t = graph.add(layers[i], t)\n'
              '    return t\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1948,
         lineno=61,
         tokens=113,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='add_skips',
         body='    for i in range(len(skips)):\n'
              '        if skips[i] == 1:\n'
              '            size = get_dims(layers[i])\n'
              '            if size > min_size:\n'
              '                kernel_size = size[-1] - 2 * (min_size[-1] - '
              '1)\n'
              '                t = graph.add(\n'
              '                        graph.avgpool2d(input=layers[i],\n'
              '                                        kernels=[kernel_size, '
              'kernel_size],\n'
              '                                        strides=[2, 2],\n'
              '                                        padding="VALID"),\n'
              '                        t)\n'
              '            else:\n'
              '                t = graph.add(layers[i], t)\n'
              '    return t')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1949,
         lineno=75,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def separable_conv(graph, input, all_w, kernel_dim, layer_id):\n'
              '    """Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    """\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1950,
         lineno=76,
         tokens=102,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='separable_conv',
         body='def separable_conv(graph, input, all_w, kernel_dim, layer_id):\n'
              '    """Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    """\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1951,
         lineno=77,
         tokens=82,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1952,
         lineno=89,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if kernel_dim == 3:\n'
              '        conv_w = all_w[layer_id][2:4]\n'
              '    elif kernel_dim == 5:\n'
              '        conv_w = all_w[layer_id][4:]\n'
              '    else:\n'
              "        raise ValueError('Invalid kernel dim for '\n"
              "                         'separable conv: %d' % (kernel_dim))\n"
              '    t = graph.conv2d(input=input, weight=conv_w[0], strides=(1, '
              '1),\n'
              '                     padding="SAME", activation="RELU")\n'
              '    return graph.conv2d(input=t, weight=conv_w[1], strides=(1, '
              '1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1953,
         lineno=89,
         tokens=133,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='separable_conv',
         body='    if kernel_dim == 3:\n'
              '        conv_w = all_w[layer_id][2:4]\n'
              '    elif kernel_dim == 5:\n'
              '        conv_w = all_w[layer_id][4:]\n'
              '    else:\n'
              "        raise ValueError('Invalid kernel dim for '\n"
              "                         'separable conv: %d' % (kernel_dim))\n"
              '    t = graph.conv2d(input=input, weight=conv_w[0], strides=(1, '
              '1),\n'
              '                     padding="SAME", activation="RELU")\n'
              '    return graph.conv2d(input=t, weight=conv_w[1], strides=(1, '
              '1),\n'
              '                            padding="SAME", activation="RELU")')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1954,
         lineno=94,
         tokens=5,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Invalid kernel dim for ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1955,
         lineno=100,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def create_architecture(arc, graph, input, all_w):\n'
              '    """Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1956,
         lineno=101,
         tokens=100,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_architecture',
         body='def create_architecture(arc, graph, input, all_w):\n'
              '    """Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1957,
         lineno=102,
         tokens=85,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1958,
         lineno=108,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    """\n'
              '    t = input\n'
              "    layers = arc.split('|')\n"
              '\n'
              '    y = []\n'
              '    for i, layer in enumerate(layers):\n'
              "        spec = [int(x) for x in layer.split(' ')]\n"
              '        if i > 0:\n'
              '            t = add_skips(graph, y, spec[1:])\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1959,
         lineno=108,
         tokens=129,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_architecture',
         body='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    """\n'
              '    t = input\n'
              "    layers = arc.split('|')\n"
              '\n'
              '    y = []\n'
              '    for i, layer in enumerate(layers):\n'
              "        spec = [int(x) for x in layer.split(' ')]\n"
              '        if i > 0:\n'
              '            t = add_skips(graph, y, spec[1:])\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1960,
         lineno=108,
         tokens=67,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1961,
         lineno=125,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if spec[0] == 0:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][0], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n'
              '        elif spec[0] == 1:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=3, '
              'layer_id=i)\n'
              '        elif spec[0] == 2:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][1], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1962,
         lineno=125,
         tokens=120,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_architecture',
         body='        if spec[0] == 0:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][0], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n'
              '        elif spec[0] == 1:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=3, '
              'layer_id=i)\n'
              '        elif spec[0] == 2:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][1], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1963,
         lineno=133,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        elif spec[0] == 3:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=5, '
              'layer_id=i)\n'
              '        elif spec[0] == 4:\n'
              '           t = graph.avgpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        elif spec[0] == 5:\n'
              '           t = graph.maxpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        y.append(t)\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1964,
         lineno=133,
         tokens=125,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_architecture',
         body='        elif spec[0] == 3:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=5, '
              'layer_id=i)\n'
              '        elif spec[0] == 4:\n'
              '           t = graph.avgpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        elif spec[0] == 5:\n'
              '           t = graph.maxpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        y.append(t)')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1965,
         lineno=142,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def parse_arcs(input_file):\n'
              '    """Extracts the architecture string representations from an '
              'input file."""\n'
              '    arcs = []\n'
              "    with open(input_file, 'r') as f:\n"
              '        for line in f:\n'
              '            arcs.append(line.strip())\n'
              '    return arcs\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1966,
         lineno=143,
         tokens=51,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='parse_arcs',
         body='def parse_arcs(input_file):\n'
              '    """Extracts the architecture string representations from an '
              'input file."""\n'
              '    arcs = []\n'
              "    with open(input_file, 'r') as f:\n"
              '        for line in f:\n'
              '            arcs.append(line.strip())\n'
              '    return arcs')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1967,
         lineno=144,
         tokens=11,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Extracts the architecture string representations from an input '
              'file.')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1968,
         lineno=150,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    all_w = create_layer_weights(graph, NUM_LAYERS, '
              'args.channels)\n'
              '    all_arcs = parse_arcs(args.input_file)\n'
              '    if args.num_models is not None:\n'
              '        all_arcs = all_arcs[:args.num_models]\n'
              '\n'
              '    # stem conv\n'
              '    t = graph.conv2d(input=input,\n'
              '                     '
              'weight=graph.new_weight(dims=(args.channels,\n'
              '                                                   '
              'input.dim(1), 1, 1)),\n'
              '                     strides=(1, 1), padding="SAME", '
              'activation="RELU")\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1969,
         lineno=151,
         tokens=148,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    all_w = create_layer_weights(graph, NUM_LAYERS, '
              'args.channels)\n'
              '    all_arcs = parse_arcs(args.input_file)\n'
              '    if args.num_models is not None:\n'
              '        all_arcs = all_arcs[:args.num_models]\n'
              '\n'
              '    # stem conv\n'
              '    t = graph.conv2d(input=input,\n'
              '                     '
              'weight=graph.new_weight(dims=(args.channels,\n'
              '                                                   '
              'input.dim(1), 1, 1)),\n'
              '                     strides=(1, 1), padding="SAME", '
              'activation="RELU")\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1970,
         lineno=165,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    for arc in all_arcs:\n'
              '        create_architecture(arc, graph, t, all_w)\n'
              '\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(graph)\n'
              "        onnx.save(onnx_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(onnx_model, 'optimized_model.onnx')\n")

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1971,
         lineno=165,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='\n'
              '    for arc in all_arcs:\n'
              '        create_architecture(arc, graph, t, all_w)\n'
              '\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(graph)\n'
              "        onnx.save(onnx_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(onnx_model, 'optimized_model.onnx')")

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1972,
         lineno=176,
         tokens=4,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='optimized_model.onnx')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1973,
         lineno=177,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              "if __name__=='__main__':\n"
              '    parser = argparse.ArgumentParser(\n'
              "        description='Runs architectures sampled by the ENAS "
              "algorithm in TASO')\n"
              "    parser.add_argument('--input_file', type=str,\n"
              "                        default='examples/enas_arcs.txt',\n"
              "                        help='Input file specifying ENAS "
              "models')\n"
              "    parser.add_argument('--num_models', type=int, "
              'default=None,\n'
              "                        help=('Number of models to fuse '\n"
              "                              '(fuses all models if not s")

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1974,
         lineno=180,
         tokens=11,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Runs architectures sampled by the ENAS algorithm in TASO')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1975,
         lineno=182,
         tokens=6,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='examples/enas_arcs.txt')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1976,
         lineno=183,
         tokens=6,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Input file specifying ENAS models')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1977,
         lineno=185,
         tokens=6,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Number of models to fuse ')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1978,
         lineno=186,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="pecified)'))\n"
              "    parser.add_argument('--input_size', type=str, "
              "default='1x3x32x32',\n"
              '                        help=\'Input size ("NxCxHxW")\')\n'
              "    parser.add_argument('--channels', type=int, default=32,\n"
              "                        help='Number of channels')\n"
              "    parser.add_argument('--save_models', action='store_true', "
              'default=False,\n'
              "                        help=('If set, saves original and "
              "optimized models in '\n"
              "                              'ONNX form'))\n"
              '    args = parser.parse_args()\n'
              '    main(args)\n')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1979,
         lineno=186,
         tokens=8,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='(fuses all models if not specified)')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1980,
         lineno=188,
         tokens=10,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Input size ("NxCxHxW")')

Fragment(document_cs='524e22daaad38a8804932f4a78ac4784c060f01a585dae585c3506eb7dce97fb',
         id=1981,
         lineno=192,
         tokens=10,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='If set, saves original and optimized models in ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1982,
         lineno=1,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='// Generated by the protocol buffer compiler.  DO NOT EDIT!\n'
              '// source: rules.proto\n'
              '\n'
              '#include "rules.pb.h"\n'
              '\n'
              '#include <algorithm>\n'
              '\n'
              '#include <google/protobuf/stubs/common.h>\n'
              '#include <google/protobuf/stubs/port.h>\n'
              '#include <google/protobuf/io/coded_stream.h>\n'
              '#include <google/protobuf/wire_format_lite_inl.h>\n'
              '#include <google/protob')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1983,
         lineno=1,
         tokens=969,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/generator/rules.pb.cc\n'
              '  Classes: MapOutputDefaultTypeInternal '
              'OperatorDefaultTypeInternal ParameterDefaultTypeInternal '
              'RuleCollectionDefaultTypeInternal RuleDefaultTypeInternal '
              'TensorDefaultTypeInternal\n'
              '  Structs: StaticDescriptorInitializer\n'
              '  Macros: DO_\n'
              '  Functions: AddDescriptors AddDescriptorsImpl '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE InitDefaults '
              'InitDefaultsMapOutput InitDefaultsOperator '
              'InitDefaultsParameter InitDefaultsRule '
              'InitDefaultsRuleCollection InitDefaultsTensor '
              'StaticDescriptorInitializer protobuf_AssignDescriptors '
              'protobuf_AssignDescriptorsOnce protobuf_RegisterTypes\n'
              '  Methods: MapOutput::ByteSizeLong MapOutput::Clear '
              'MapOutput::CopyFrom MapOutput::GetMetadata '
              'MapOutput::InitAsDefaultInstance MapOutput::InternalSwap '
              'MapOutput::IsInitialized MapOutput::MapOutput '
              'MapOutput::MergeFrom MapOutput::MergePartialFromCodedStream '
              'MapOutput::RequiredFieldsByteSizeFallback '
              'MapOutput::SerializeWithCachedSizes MapOutput::SetCachedSize '
              'MapOutput::SharedCtor MapOutput::SharedDtor MapOutput::Swap '
              'MapOutput::~MapOutput Operator::ByteSizeLong Operator::Clear '
              'Operator::CopyFrom Operator::GetMetadata '
              'Operator::InitAsDefaultInstance Operator::InternalSwap '
              'Operator::IsInitialized Operator::MergeFrom '
              'Operator::MergePartialFromCodedStream Operator::Operator '
              'Operator::SerializeWithCachedSizes Operator::SetCachedSize '
              'Operator::SharedCtor Operator::SharedDtor Operator::Swap '
              'Operator::~Operator Parameter::ByteSizeLong Parameter::Clear '
              'Parameter::CopyFrom Parameter::GetMetadata '
              'Parameter::InitAsDefaultInstance Parameter::InternalSwap '
              'Parameter::IsInitialized Parameter::MergeFrom '
              'Parameter::MergePartialFromCodedStream Parameter::Parameter '
              'Parameter::RequiredFieldsByteSizeFallback '
              'Parameter::SerializeWithCachedSizes Parameter::SetCachedSize '
              'Parameter::SharedCtor Parameter::SharedDtor Parameter::Swap '
              'Parameter::~Parameter Rule::ByteSizeLong Rule::Clear '
              'Rule::CopyFrom Rule::GetMetadata Rule::InitAsDefaultInstance '
              'Rule::InternalSwap Rule::IsInitialized Rule::MergeFrom '
              'Rule::MergePartialFromCodedStream Rule::Rule '
              'Rule::SerializeWithCachedSizes Rule::SetCachedSize '
              'Rule::SharedCtor Rule::SharedDtor Rule::Swap Rule::~Rule '
              'RuleCollection::ByteSizeLong RuleCollection::Clear '
              'RuleCollection::CopyFrom RuleCollection::GetMetadata '
              'RuleCollection::InitAsDefaultInstance '
              'RuleCollection::InternalSwap RuleCollection::IsInitialized '
              'RuleCollection::MergeFrom '
              'RuleCollection::MergePartialFromCodedStream '
              'RuleCollection::RuleCollection '
              'RuleCollection::SerializeWithCachedSizes '
              'RuleCollection::SetCachedSize RuleCollection::SharedCtor '
              'RuleCollection::SharedDtor RuleCollection::Swap '
              'RuleCollection::~RuleCollection Tensor::ByteSizeLong '
              'Tensor::Clear Tensor::CopyFrom Tensor::GetMetadata '
              'Tensor::InitAsDefaultInstance Tensor::InternalSwap '
              'Tensor::IsInitialized Tensor::MergeFrom '
              'Tensor::MergePartialFromCodedStream '
              'Tensor::RequiredFieldsByteSizeFallback '
              'Tensor::SerializeWithCachedSizes Tensor::SetCachedSize '
              'Tensor::SharedCtor Tensor::SharedDtor Tensor::Swap '
              'Tensor::Tensor Tensor::~Tensor\n'
              '  Fields: _instance\n'
              '  Variables: _MapOutput_default_instance_ '
              '_Operator_default_instance_ _Parameter_default_instance_ '
              '_RuleCollection_default_instance_ _Rule_default_instance_ '
              '_Tensor_default_instance_ once scc_info_MapOutput '
              'scc_info_Operator scc_info_Parameter scc_info_Rule '
              'scc_info_Tensor static_descriptor_initializer tag\n'
              '  Namespaces: GraphSubst google protobuf '
              'protobuf_rules_2eproto\n'
              '  Usages: AllAreInitialized ByteSizeLong Clear '
              'ComputeUnknownFieldsSize CopyFrom GetMetadata GetTagFieldNumber '
              'InitAsDefaultInstance InitSCC Int32Size '
              'InternalAddGeneratedFile InternalRegisterGeneratedFile '
              'InternalSerializeWithCachedSizesToArray InternalSwap '
              'InternalWriteMessageToArray IsInitialized MapOutput Merge '
              'MergeFrom MergePartialFromCodedStream MessageSize '
              'OnShutdownDestroyMessage Operator Parameter ReadMessage '
              'RegisterAllTypes RequiredFieldsByteSizeFallback Rule '
              'RuleCollection SerializeUnknownFields '
              'SerializeUnknownFieldsToArray SerializeWithCachedSizes '
              'SetCachedSize SharedCtor SharedDtor SkipField Swap Tensor '
              'ToCachedSize WriteInt32 WriteInt32ToArray '
              'WriteMessageMaybeToArray _MapOutput_default_instance_ '
              '_Operator_default_instance_ _Parameter_default_instance_ '
              '_RuleCollection_default_instance_ _Rule_default_instance_ '
              '_Tensor_default_instance_ call_once default_instance descriptor '
              'file_level_metadata kDstOpFieldNumber kDstOpIdFieldNumber '
              'kDstTsIdFieldNumber kInputFieldNumber kKeyFieldNumber '
              'kMappedOutputFieldNumber kOpIdFieldNumber kParaFieldNumber '
              'kRuleFieldNumber kSrcOpFieldNumber kSrcOpIdFieldNumber '
              'kSrcTsIdFieldNumber kTsIdFieldNumber kTypeFieldNumber '
              'kUninitialized kValueFieldNumber memcpy memset offsets '
              'protobuf_AssignDescriptorsOnce scc_info_MapOutput '
              'scc_info_Operator scc_info_Parameter scc_info_Rule '
              'scc_info_RuleCollection scc_info_Tensor swap\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1984,
         lineno=12,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='uf/descriptor.h>\n'
              '#include <google/protobuf/generated_message_reflection.h>\n'
              '#include <google/protobuf/reflection_ops.h>\n'
              '#include <google/protobuf/wire_format.h>\n'
              '// This is a temporary google only hack\n'
              '#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS\n'
              '#include "third_party/protobuf/version.h"\n'
              '#endif\n'
              '// @@protoc_insertion_point(includes)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1985,
         lineno=21,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'namespace protobuf_rules_2eproto {\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Tensor;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2e')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1986,
         lineno=22,
         tokens=13,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='protobuf_rules_2eproto',
         body="namespace b'protobuf_rules_2eproto' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1987,
         lineno=23,
         tokens=33,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='scc_info_MapOutput',
         body='extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1988,
         lineno=24,
         tokens=32,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='scc_info_Parameter',
         body='extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1989,
         lineno=25,
         tokens=33,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='scc_info_Tensor',
         body='extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Tensor;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1990,
         lineno=26,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='proto ::google::protobuf::internal::SCCInfo<2> '
              'scc_info_Operator;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<2> scc_info_Rule;\n'
              '}  // namespace protobuf_rules_2eproto\n'
              'namespace GraphSubst {\n'
              'class ParameterDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Parameter>\n'
              '      _instance;\n'
              '} _Parameter_default_instance_;\n'
              'class TensorDefaultTypeInternal ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1991,
         lineno=26,
         tokens=33,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='scc_info_Operator',
         body='extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<2> scc_info_Operator;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1992,
         lineno=27,
         tokens=33,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='scc_info_Rule',
         body='extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<2> scc_info_Rule;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1993,
         lineno=29,
         tokens=9,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='GraphSubst',
         body="namespace b'GraphSubst' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1994,
         lineno=30,
         tokens=27,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='ParameterDefaultTypeInternal',
         body='class ParameterDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Parameter>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1995,
         lineno=30,
         tokens=32,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Parameter_default_instance_',
         body='class ParameterDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Parameter>\n'
              '      _instance;\n'
              '} _Parameter_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1996,
         lineno=32,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<Parameter>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1997,
         lineno=35,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='{\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>\n'
              '      _instance;\n'
              '} _Tensor_default_instance_;\n'
              'class OperatorDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Operator>\n'
              '      _instance;\n'
              '} _Operator_default_instance_;\n'
              'class MapOutputDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<MapOutput>\n'
              '      _instance;\n'
              '} _MapOutput_default_insta')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1998,
         lineno=35,
         tokens=27,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='TensorDefaultTypeInternal',
         body='class TensorDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=1999,
         lineno=35,
         tokens=32,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Tensor_default_instance_',
         body='class TensorDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>\n'
              '      _instance;\n'
              '} _Tensor_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2000,
         lineno=37,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<Tensor>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2001,
         lineno=40,
         tokens=27,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OperatorDefaultTypeInternal',
         body='class OperatorDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Operator>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2002,
         lineno=40,
         tokens=32,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Operator_default_instance_',
         body='class OperatorDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Operator>\n'
              '      _instance;\n'
              '} _Operator_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2003,
         lineno=42,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<Operator>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2004,
         lineno=45,
         tokens=28,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='MapOutputDefaultTypeInternal',
         body='class MapOutputDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<MapOutput>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2005,
         lineno=45,
         tokens=34,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_MapOutput_default_instance_',
         body='class MapOutputDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<MapOutput>\n'
              '      _instance;\n'
              '} _MapOutput_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2006,
         lineno=47,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<MapOutput>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2007,
         lineno=49,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nce_;\n'
              'class RuleDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Rule>\n'
              '      _instance;\n'
              '} _Rule_default_instance_;\n'
              'class RuleCollectionDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>\n'
              '      _instance;\n'
              '} _RuleCollection_default_instance_;\n'
              '}  // namespace GraphSubst\n'
              'namespace protobuf_rules_2eproto {\n'
              'static void InitDefaultsParameter() {\n'
              '  GOO')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2008,
         lineno=50,
         tokens=27,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleDefaultTypeInternal',
         body='class RuleDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Rule>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2009,
         lineno=50,
         tokens=32,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Rule_default_instance_',
         body='class RuleDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Rule>\n'
              '      _instance;\n'
              '} _Rule_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2010,
         lineno=52,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<Rule>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2011,
         lineno=55,
         tokens=29,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleCollectionDefaultTypeInternal',
         body='class RuleCollectionDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>\n'
              '      _instance;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2012,
         lineno=55,
         tokens=35,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='_RuleCollection_default_instance_',
         body='class RuleCollectionDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>\n'
              '      _instance;\n'
              '} _RuleCollection_default_instance_;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2013,
         lineno=57,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_instance',
         body='::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>\n'
              '      _instance;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2014,
         lineno=61,
         tokens=13,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='protobuf_rules_2eproto',
         body="namespace b'protobuf_rules_2eproto' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2015,
         lineno=62,
         tokens=73,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsParameter',
         body='static void InitDefaultsParameter() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Parameter_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Parameter();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Parameter::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2016,
         lineno=62,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsParameter',
         body='InitDefaultsParameter()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2017,
         lineno=63,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='GLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Parameter_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Parameter();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Parameter::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_Parameter =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '0, InitDefaultsParameter},')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2018,
         lineno=74,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' {}};\n'
              '\n'
              'static void InitDefaultsTensor() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Tensor_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Tensor();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Tensor::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_Tensor =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitia')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2019,
         lineno=76,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsTensor',
         body='InitDefaultsTensor()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2020,
         lineno=76,
         tokens=73,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsTensor',
         body='static void InitDefaultsTensor() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Tensor_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Tensor();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Tensor::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2021,
         lineno=88,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lized), 0, InitDefaultsTensor}, {}};\n'
              '\n'
              'static void InitDefaultsOperator() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Operator_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Operator();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Operator::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<2> scc_info_Operator =\n'
              '    {{ATOMIC_VAR_INIT(::google::')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2022,
         lineno=90,
         tokens=73,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsOperator',
         body='static void InitDefaultsOperator() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Operator_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Operator();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Operator::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2023,
         lineno=90,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsOperator',
         body='InitDefaultsOperator()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2024,
         lineno=102,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protobuf::internal::SCCInfoBase::kUninitialized), 2, '
              'InitDefaultsOperator}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Tensor.base,\n'
              '      &protobuf_rules_2eproto::scc_info_Parameter.base,}};\n'
              '\n'
              'static void InitDefaultsMapOutput() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_MapOutput_default_instance_;\n'
              '    new (ptr) ::GraphSubst::MapOutput();\n'
              '    ::google::protobuf::internal::OnShutdownDestroyMessage(pt')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2025,
         lineno=106,
         tokens=77,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsMapOutput',
         body='static void InitDefaultsMapOutput() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_MapOutput_default_instance_;\n'
              '    new (ptr) ::GraphSubst::MapOutput();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::MapOutput::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2026,
         lineno=106,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsMapOutput',
         body='InitDefaultsMapOutput()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2027,
         lineno=112,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r);\n'
              '  }\n'
              '  ::GraphSubst::MapOutput::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '0, InitDefaultsMapOutput}, {}};\n'
              '\n'
              'static void InitDefaultsRule() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Rule_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Rule();\n'
              '    ::google::protobuf::in')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2028,
         lineno=120,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsRule',
         body='InitDefaultsRule()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2029,
         lineno=120,
         tokens=73,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsRule',
         body='static void InitDefaultsRule() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Rule_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Rule();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Rule::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2030,
         lineno=126,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ternal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Rule::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<2> scc_info_Rule =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '2, InitDefaultsRule}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Operator.base,\n'
              '      &protobuf_rules_2eproto::scc_info_MapOutput.base,}};\n'
              '\n'
              'static void InitDefaultsRuleCollection() {\n'
              '  GOOGLE_PROTOBUF')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2031,
         lineno=136,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsRuleCollection',
         body='InitDefaultsRuleCollection()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2032,
         lineno=136,
         tokens=77,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaultsRuleCollection',
         body='static void InitDefaultsRuleCollection() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = '
              '&::GraphSubst::_RuleCollection_default_instance_;\n'
              '    new (ptr) ::GraphSubst::RuleCollection();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::RuleCollection::InitAsDefaultInstance();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2033,
         lineno=137,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = '
              '&::GraphSubst::_RuleCollection_default_instance_;\n'
              '    new (ptr) ::GraphSubst::RuleCollection();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::RuleCollection::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<1> '
              'scc_info_RuleCollection =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '1, InitDefaultsRul')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2034,
         lineno=148,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eCollection}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Rule.base,}};\n'
              '\n'
              'void InitDefaults() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Parameter.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Tensor.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Operator.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_MapOutput.base);\n'
              '  ::google::protobuf::internal::InitSCC(&scc_info_Rule.base);\n'
              '  ::google::')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2035,
         lineno=151,
         tokens=120,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaults',
         body='void InitDefaults() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Parameter.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Tensor.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Operator.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_MapOutput.base);\n'
              '  ::google::protobuf::internal::InitSCC(&scc_info_Rule.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_RuleCollection.base);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2036,
         lineno=151,
         tokens=3,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='InitDefaults',
         body='InitDefaults()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2037,
         lineno=157,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protobuf::internal::InitSCC(&scc_info_RuleCollection.base);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata file_level_metadata[6];\n'
              '\n'
              'const ::google::protobuf::uint32 TableStruct::offsets[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              '_internal_metadata_),\n'
              '  ~0u,  // ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2038,
         lineno=165,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              'key_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              'value_),\n'
              '  0,\n'
              '  1,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              '_internal_metadata_),\n'
              '  ~0u,')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2039,
         lineno=174,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              'opid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              'tsid_),\n'
              '  0,\n'
              '  1,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              '_internal_metadata_),\n'
              '  ~')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2040,
         lineno=183,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'type_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'input_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'para_),\n'
              '  0,\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              '_has_bits_),')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2041,
         lineno=192,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'srcopid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'dstopid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'srct')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2042,
         lineno=199,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'dsttsid_),\n'
              '  0,\n'
              '  1,\n'
              '  2,\n'
              '  3,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2043,
         lineno=210,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::Rule, srcop_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              'dstop_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              'mappedoutput_),\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  /')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2044,
         lineno=219,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/ no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              'rule_),\n'
              '  ~0u,\n'
              '};\n'
              'static const ::google::protobuf::internal::MigrationSchema '
              'schemas[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '  { 0, 7, sizeof(::GraphSubst::Parameter)},\n'
              '  { 9, 16, sizeof(::GraphSubst::Tensor)},\n'
              '  { 18, 26, sizeof(::GraphSubst::Operator)},\n'
              '  { 29, 38, sizeof(::G')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2045,
         lineno=224,
         tokens=14,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE',
         body='GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold)')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2046,
         lineno=228,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='raphSubst::MapOutput)},\n'
              '  { 42, 50, sizeof(::GraphSubst::Rule)},\n'
              '  { 53, 59, sizeof(::GraphSubst::RuleCollection)},\n'
              '};\n'
              '\n'
              'static ::google::protobuf::Message const * const '
              'file_default_instances[] = {\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Parameter_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Tensor_default_instance_),\n'
              '  reinterpret_cast<const ::google')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2047,
         lineno=236,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::protobuf::Message*>(&::GraphSubst::_Operator_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_MapOutput_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Rule_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_RuleCollection_default_instance_),\n'
              '};\n'
              '\n'
              'void protobuf_AssignDescriptors() {\n'
              '  AddDescriptors();\n'
              ' ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2048,
         lineno=242,
         tokens=42,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_AssignDescriptors',
         body='void protobuf_AssignDescriptors() {\n'
              '  AddDescriptors();\n'
              '  AssignDescriptors(\n'
              '      "rules.proto", schemas, file_default_instances, '
              'TableStruct::offsets,\n'
              '      file_level_metadata, NULL, NULL);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2049,
         lineno=242,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_AssignDescriptors',
         body='protobuf_AssignDescriptors()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2050,
         lineno=244,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' AssignDescriptors(\n'
              '      "rules.proto", schemas, file_default_instances, '
              'TableStruct::offsets,\n'
              '      file_level_metadata, NULL, NULL);\n'
              '}\n'
              '\n'
              'void protobuf_AssignDescriptorsOnce() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'protobuf_AssignDescriptors);\n'
              '}\n'
              '\n'
              'void protobuf_RegisterTypes(const ::std::string&) '
              'GOOGLE_PROTOBUF_ATTRIBUTE_COLD;\n'
              'void protobuf_RegisterTypes(const ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2051,
         lineno=249,
         tokens=40,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_AssignDescriptorsOnce',
         body='void protobuf_AssignDescriptorsOnce() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'protobuf_AssignDescriptors);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2052,
         lineno=249,
         tokens=6,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_AssignDescriptorsOnce',
         body='protobuf_AssignDescriptorsOnce()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2053,
         lineno=250,
         tokens=12,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='once',
         body='static ::google::protobuf::internal::once_flag once;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2054,
         lineno=254,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_RegisterTypes',
         body='protobuf_RegisterTypes(const ::std::string&)')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2055,
         lineno=255,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::std::string&) {\n'
              '  protobuf_AssignDescriptorsOnce();\n'
              '  '
              '::google::protobuf::internal::RegisterAllTypes(file_level_metadata, '
              '6);\n'
              '}\n'
              '\n'
              'void AddDescriptorsImpl() {\n'
              '  InitDefaults();\n'
              '  static const char descriptor[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '      '
              '"\\n\\013rules.proto\\022\\nGraphSubst\\"\\\'\\n\\tParameter\\022\\013"\n'
              '      "\\n\\003key\\030\\001 '
              '\\002(\\005\\022\\r\\n\\005value\\030\\002 '
              '\\002(\\005\\"$\\n\\006Tensor\\022\\01')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2056,
         lineno=255,
         tokens=37,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_RegisterTypes',
         body='void protobuf_RegisterTypes(const ::std::string&) {\n'
              '  protobuf_AssignDescriptorsOnce();\n'
              '  '
              '::google::protobuf::internal::RegisterAllTypes(file_level_metadata, '
              '6);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2057,
         lineno=255,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='protobuf_RegisterTypes',
         body='protobuf_RegisterTypes(const ::std::string&)')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2058,
         lineno=260,
         tokens=458,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='AddDescriptorsImpl',
         body='void AddDescriptorsImpl() {\n'
              '  InitDefaults();\n'
              '  static const char descriptor[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '      '
              '"\\n\\013rules.proto\\022\\nGraphSubst\\"\\\'\\n\\tParameter\\022\\013"\n'
              '      "\\n\\003key\\030\\001 '
              '\\002(\\005\\022\\r\\n\\005value\\030\\002 '
              '\\002(\\005\\"$\\n\\006Tensor\\022\\014\\n\\004"\n'
              '      "opId\\030\\001 '
              '\\002(\\005\\022\\014\\n\\004tsId\\030\\002 '
              '\\002(\\005\\"`\\n\\010Operator\\022\\014\\n\\004"\n'
              '      "type\\030\\001 \\002(\\005\\022!\\n\\005input\\030\\002 '
              '\\003(\\0132\\022.GraphSubst.T"\n'
              '      "ensor\\022#\\n\\004para\\030\\003 '
              '\\003(\\0132\\025.GraphSubst.Paramet"\n'
              '      "er\\"O\\n\\tMapOutput\\022\\017\\n\\007srcOpId\\030\\001 '
              '\\002(\\005\\022\\017\\n\\007dstO"\n'
              '      "pId\\030\\002 '
              '\\002(\\005\\022\\017\\n\\007srcTsId\\030\\003 '
              '\\002(\\005\\022\\017\\n\\007dstTsId\\030\\004 "\n'
              '      "\\002(\\005\\"}\\n\\004Rule\\022#\\n\\005srcOp\\030\\001 '
              '\\003(\\0132\\024.GraphSubst."\n'
              '      "Operator\\022#\\n\\005dstOp\\030\\002 '
              '\\003(\\0132\\024.GraphSubst.Ope"\n'
              '      "rator\\022+\\n\\014mappedOutput\\030\\003 '
              '\\003(\\0132\\025.GraphSubst"\n'
              '      '
              '".MapOutput\\"0\\n\\016RuleCollection\\022\\036\\n\\004rule\\030\\001 '
              '\\003"\n'
              '      "(\\0132\\020.GraphSubst.Rule"\n'
              '  };\n'
              '  '
              '::google::protobuf::DescriptorPool::InternalAddGeneratedFile(\n'
              '      descriptor, 460);\n'
              '  '
              '::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(\n'
              '    "rules.proto", &protobuf_RegisterTypes);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2059,
         lineno=260,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='AddDescriptorsImpl',
         body='AddDescriptorsImpl()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2060,
         lineno=264,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='4\\n\\004"\n'
              '      "opId\\030\\001 '
              '\\002(\\005\\022\\014\\n\\004tsId\\030\\002 '
              '\\002(\\005\\"`\\n\\010Operator\\022\\014\\n\\004"\n'
              '      "type\\030\\001 \\002(\\005\\022!\\n\\005input\\030\\002 '
              '\\003(\\0132\\022.GraphSubst.T"\n'
              '      "ensor\\022#\\n\\004pa')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2061,
         lineno=267,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ra\\030\\003 \\003(\\0132\\025.GraphSubst.Paramet"\n'
              '      "er\\"O\\n\\tMapOutput\\022\\017\\n\\007srcOpId\\030\\001 '
              '\\002(\\005\\022\\017\\n\\007dstO"\n'
              '      "pId\\030\\002 '
              '\\002(\\005\\022\\017\\n\\007srcTsId\\030\\003 '
              '\\002(\\005\\022\\017\\n\\007dstT')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2062,
         lineno=269,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sId\\030\\004 "\n'
              '      "\\002(\\005\\"}\\n\\004Rule\\022#\\n\\005srcOp\\030\\001 '
              '\\003(\\0132\\024.GraphSubst."\n'
              '      "Operator\\022#\\n\\005dstOp\\030\\002 '
              '\\003(\\0132\\024.GraphSubst.Ope"\n'
              '      "rator\\022+\\n\\014mappedOutput\\030\\003 \\003')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2063,
         lineno=272,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(\\0132\\025.GraphSubst"\n'
              '      '
              '".MapOutput\\"0\\n\\016RuleCollection\\022\\036\\n\\004rule\\030\\001 '
              '\\003"\n'
              '      "(\\0132\\020.GraphSubst.Rule"\n'
              '  };\n'
              '  '
              '::google::protobuf::DescriptorPool::InternalAddGeneratedFile(\n'
              '      descriptor')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2064,
         lineno=277,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', 460);\n'
              '  '
              '::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(\n'
              '    "rules.proto", &protobuf_RegisterTypes);\n'
              '}\n'
              '\n'
              'void AddDescriptors() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'AddDescriptorsImpl);\n'
              '}\n'
              '// Force AddDescriptors() to be called at dynamic '
              'initialization time.\n'
              'struct StaticDescriptorInitializer {\n'
              '  StaticDescriptorInitializer() {\n'
              '    AddDescri')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2065,
         lineno=282,
         tokens=36,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='AddDescriptors',
         body='void AddDescriptors() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'AddDescriptorsImpl);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2066,
         lineno=282,
         tokens=3,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='AddDescriptors',
         body='AddDescriptors()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2067,
         lineno=283,
         tokens=12,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='once',
         body='static ::google::protobuf::internal::once_flag once;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2068,
         lineno=287,
         tokens=18,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='StaticDescriptorInitializer',
         body='struct StaticDescriptorInitializer {\n'
              '  StaticDescriptorInitializer() {\n'
              '    AddDescriptors();\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2069,
         lineno=287,
         tokens=22,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='static_descriptor_initializer',
         body='struct StaticDescriptorInitializer {\n'
              '  StaticDescriptorInitializer() {\n'
              '    AddDescriptors();\n'
              '  }\n'
              '} static_descriptor_initializer;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2070,
         lineno=288,
         tokens=11,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='StaticDescriptorInitializer',
         body='StaticDescriptorInitializer() {\n    AddDescriptors();\n  }')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2071,
         lineno=288,
         tokens=4,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='StaticDescriptorInitializer',
         body='StaticDescriptorInitializer()')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2072,
         lineno=289,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ptors();\n'
              '  }\n'
              '} static_descriptor_initializer;\n'
              '}  // namespace protobuf_rules_2eproto\n'
              'namespace GraphSubst {\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Parameter::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Parameter::kKeyFieldNumber;\n'
              'const int Parameter::kValueFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Parameter::Parameter()\n'
              '  : ::googl')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2073,
         lineno=293,
         tokens=9,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='GraphSubst',
         body="namespace b'GraphSubst' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2074,
         lineno=297,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::InitAsDefaultInstance',
         body='void Parameter::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2075,
         lineno=304,
         tokens=70,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::Parameter',
         body='Parameter::Parameter()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Parameter.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.Parameter)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2076,
         lineno=305,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Parameter.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.Parameter)\n'
              '}\n'
              'Parameter::Parameter(const Parameter& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_met')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2077,
         lineno=311,
         tokens=99,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::Parameter',
         body='Parameter::Parameter(const Parameter& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&key_, &from.key_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&value_) -\n'
              '    reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2078,
         lineno=315,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='adata_);\n'
              '  ::memcpy(&key_, &from.key_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&value_) -\n'
              '    reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)\n'
              '}\n'
              '\n'
              'void Parameter::SharedCtor() {\n'
              '  ::memset(&key_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&value_) -\n'
              '      reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '}\n'
              '\n'
              'Parameter::~Parameter() {\n'
              '  // @')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2079,
         lineno=322,
         tokens=43,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::SharedCtor',
         body='void Parameter::SharedCtor() {\n'
              '  ::memset(&key_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&value_) -\n'
              '      reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2080,
         lineno=328,
         tokens=27,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::~Parameter',
         body='Parameter::~Parameter() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Parameter)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2081,
         lineno=329,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='@protoc_insertion_point(destructor:GraphSubst.Parameter)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Parameter::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Parameter::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Parameter::descriptor() '
              '{\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Parameter& Parameter')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2082,
         lineno=333,
         tokens=9,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::SharedDtor',
         body='void Parameter::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2083,
         lineno=336,
         tokens=20,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::SetCachedSize',
         body='void Parameter::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2084,
         lineno=344,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Parameter.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Parameter::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2085,
         lineno=350,
         tokens=131,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::Clear',
         body='void Parameter::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    ::memset(&key_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&value_) -\n'
              '        reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2086,
         lineno=357,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 3u) {\n'
              '    ::memset(&key_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&value_) -\n'
              '        reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Parameter::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.Parameter)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2087,
         lineno=366,
         tokens=508,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::MergePartialFromCodedStream',
         body='bool Parameter::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.Parameter)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 key = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_key();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &key_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 value = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_value();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &value_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Parameter)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.Parameter)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2088,
         lineno=368,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2089,
         lineno=369,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2090,
         lineno=371,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 key = 1;\n'
              '      case 1: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2091,
         lineno=378,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_key();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &key_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 value = 2;\n'
              '      case 2: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2092,
         lineno=392,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_value();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &value_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2093,
         lineno=406,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Parameter)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_fail')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2094,
         lineno=419,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ure:GraphSubst.Parameter)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Parameter::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 key = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2095,
         lineno=424,
         tokens=235,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::SerializeWithCachedSizes',
         body='void Parameter::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 key = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->key(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 value = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->value(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Parameter)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2096,
         lineno=432,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->key(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 value = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->value(), output);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2097,
         lineno=440,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Parameter)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Parameter::InternalSerializeWithCachedSizesToA')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2098,
         lineno=448,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 key = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->key(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 value = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2099,
         lineno=462,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->value(), target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2100,
         lineno=465,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Parameter)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Parameter::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2101,
         lineno=474,
         tokens=141,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::RequiredFieldsByteSizeFallback',
         body='size_t Parameter::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_key()) {\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '  }\n'
              '\n'
              '  if (has_value()) {\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2102,
         lineno=477,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (has_key()) {\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '  }\n'
              '\n'
              '  if (has_value()) {\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t Parameter::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2103,
         lineno=494,
         tokens=239,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::ByteSizeLong',
         body='size_t Parameter::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2104,
         lineno=497,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2105,
         lineno=503,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2106,
         lineno=515,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Parameter::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Parameter* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Parameter>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2107,
         lineno=522,
         tokens=149,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::MergeFrom',
         body='void Parameter::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Parameter* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Parameter>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Parameter)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Parameter)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2108,
         lineno=528,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Parameter)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Parameter)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Parameter::M')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2109,
         lineno=537,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ergeFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      key_ = from.key_;\n'
              '    }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2110,
         lineno=537,
         tokens=163,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::MergeFrom',
         body='void Parameter::MergeFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      key_ = from.key_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      value_ = from.value_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2111,
         lineno=549,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (cached_has_bits & 0x00000002u) {\n'
              '      value_ = from.value_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Parameter::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Parameter::CopyFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Parameter::IsInitialized() const {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2112,
         lineno=556,
         tokens=53,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::CopyFrom',
         body='void Parameter::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2113,
         lineno=563,
         tokens=47,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::CopyFrom',
         body='void Parameter::CopyFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2114,
         lineno=570,
         tokens=40,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::IsInitialized',
         body='bool Parameter::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2115,
         lineno=571,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Parameter::Swap(Parameter* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Parameter::InternalSwap(Parameter* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2116,
         lineno=575,
         tokens=24,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::Swap',
         body='void Parameter::Swap(Parameter* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2117,
         lineno=579,
         tokens=60,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::InternalSwap',
         body='void Parameter::InternalSwap(Parameter* other) {\n'
              '  using std::swap;\n'
              '  swap(key_, other->key_);\n'
              '  swap(value_, other->value_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2118,
         lineno=580,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  swap(key_, other->key_);\n'
              '  swap(value_, other->value_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Parameter::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Tensor::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Tensor::kOpIdFieldNumber;\n'
              'const int Te')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2119,
         lineno=587,
         tokens=49,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::GetMetadata',
         body='::google::protobuf::Metadata Parameter::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2120,
         lineno=595,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::InitAsDefaultInstance',
         body='void Tensor::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2121,
         lineno=599,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsor::kTsIdFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Tensor::Tensor()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Tensor.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2122,
         lineno=602,
         tokens=71,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::Tensor',
         body='Tensor::Tensor()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Tensor.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Tensor)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2123,
         lineno=607,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(constructor:GraphSubst.Tensor)\n'
              '}\n'
              'Tensor::Tensor(const Tensor& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&opid_, &from.opid_,\n'
              '    static_cast<size_t>(reinterp')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2124,
         lineno=609,
         tokens=104,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::Tensor',
         body='Tensor::Tensor(const Tensor& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&opid_, &from.opid_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&tsid_) -\n'
              '    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2125,
         lineno=615,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ret_cast<char*>(&tsid_) -\n'
              '    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)\n'
              '}\n'
              '\n'
              'void Tensor::SharedCtor() {\n'
              '  ::memset(&opid_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&tsid_) -\n'
              '      reinterpret_cast<char*>(&opi')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2126,
         lineno=620,
         tokens=47,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::SharedCtor',
         body='void Tensor::SharedCtor() {\n'
              '  ::memset(&opid_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&tsid_) -\n'
              '      reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2127,
         lineno=623,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d_)) + sizeof(tsid_));\n'
              '}\n'
              '\n'
              'Tensor::~Tensor() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Tensor::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Tensor::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Tensor::descriptor() {\n'
              '  ::p')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2128,
         lineno=626,
         tokens=27,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::~Tensor',
         body='Tensor::~Tensor() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2129,
         lineno=631,
         tokens=9,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::SharedDtor',
         body='void Tensor::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2130,
         lineno=634,
         tokens=20,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::SetCachedSize',
         body='void Tensor::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2131,
         lineno=638,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rotobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Tensor& Tensor::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Tensor.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Tensor::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2132,
         lineno=648,
         tokens=135,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::Clear',
         body='void Tensor::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    ::memset(&opid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&tsid_) -\n'
              '        reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2133,
         lineno=655,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 3u) {\n'
              '    ::memset(&opid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&tsid_) -\n'
              '        reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Tensor::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Tensor)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2134,
         lineno=664,
         tokens=514,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::MergePartialFromCodedStream',
         body='bool Tensor::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Tensor)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 opId = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_opid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &opid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 tsId = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_tsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &tsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Tensor)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_failure:GraphSubst.Tensor)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2135,
         lineno=666,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2136,
         lineno=667,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2137,
         lineno=669,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 opId = 1;\n'
              '      case 1: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2138,
         lineno=676,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_opid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &opid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 tsId = 2;\n'
              '      case 2: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2139,
         lineno=690,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_tsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &tsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2140,
         lineno=704,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Tensor)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_fa')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2141,
         lineno=717,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ilure:GraphSubst.Tensor)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Tensor::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 opId = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2142,
         lineno=722,
         tokens=239,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::SerializeWithCachedSizes',
         body='void Tensor::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 opId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->opid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 tsId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->tsid(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Tensor)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2143,
         lineno=730,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->opid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 tsId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->tsid(), output);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2144,
         lineno=738,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Tensor)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Tensor::InternalSerializeWithCachedSizesToArr')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2145,
         lineno=746,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ay(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 opId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->opid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 tsId = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2146,
         lineno=760,
         tokens=46,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->tsid(), target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2147,
         lineno=763,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Tensor)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Tensor::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2148,
         lineno=772,
         tokens=147,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::RequiredFieldsByteSizeFallback',
         body='size_t Tensor::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_opid()) {\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '  }\n'
              '\n'
              '  if (has_tsid()) {\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2149,
         lineno=775,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (has_opid()) {\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '  }\n'
              '\n'
              '  if (has_tsid()) {\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t Tensor::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2150,
         lineno=792,
         tokens=243,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::ByteSizeLong',
         body='size_t Tensor::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2151,
         lineno=795,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2152,
         lineno=801,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallb')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2153,
         lineno=813,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ack();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Tensor::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Tensor* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Tensor>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2154,
         lineno=820,
         tokens=149,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::MergeFrom',
         body='void Tensor::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Tensor* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Tensor>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Tensor)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Tensor)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2155,
         lineno=826,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Tensor)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Tensor)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Tensor::Mer')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2156,
         lineno=835,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='geFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      opid_ = from.opid_;\n'
              '    }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2157,
         lineno=835,
         tokens=167,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::MergeFrom',
         body='void Tensor::MergeFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      opid_ = from.opid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      tsid_ = from.tsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2158,
         lineno=847,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (cached_has_bits & 0x00000002u) {\n'
              '      tsid_ = from.tsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Tensor::CopyFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Tensor::CopyFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Tensor::IsInitialized() const {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2159,
         lineno=854,
         tokens=53,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::CopyFrom',
         body='void Tensor::CopyFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2160,
         lineno=861,
         tokens=47,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::CopyFrom',
         body='void Tensor::CopyFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2161,
         lineno=868,
         tokens=40,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::IsInitialized',
         body='bool Tensor::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2162,
         lineno=869,
         tokens=68,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Tensor::Swap(Tensor* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Tensor::InternalSwap(Tensor* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2163,
         lineno=873,
         tokens=25,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::Swap',
         body='void Tensor::Swap(Tensor* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2164,
         lineno=877,
         tokens=65,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::InternalSwap',
         body='void Tensor::InternalSwap(Tensor* other) {\n'
              '  using std::swap;\n'
              '  swap(opid_, other->opid_);\n'
              '  swap(tsid_, other->tsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2165,
         lineno=878,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  swap(opid_, other->opid_);\n'
              '  swap(tsid_, other->tsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Tensor::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return ::protobuf_ru')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2166,
         lineno=885,
         tokens=49,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::GetMetadata',
         body='::google::protobuf::Metadata Tensor::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2167,
         lineno=887,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='les_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Operator::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Operator::kTypeFieldNumber;\n'
              'const int Operator::kInputFieldNumber;\n'
              'const int Operator::kParaFie')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2168,
         lineno=893,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::InitAsDefaultInstance',
         body='void Operator::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2169,
         lineno=898,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Operator::Operator()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Operator.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Operator)\n'
              '}\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2170,
         lineno=901,
         tokens=71,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::Operator',
         body='Operator::Operator()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Operator.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Operator)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2171,
         lineno=908,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Operator::Operator(const Operator& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      input_(from.input_),\n'
              '      para_(from.para_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  type_ = from.type_;\n'
              '  // @@protoc_insertion_point(copy_constructor')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2172,
         lineno=908,
         tokens=86,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::Operator',
         body='Operator::Operator(const Operator& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      input_(from.input_),\n'
              '      para_(from.para_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  type_ = from.type_;\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Operator)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2173,
         lineno=916,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=':GraphSubst.Operator)\n'
              '}\n'
              '\n'
              'void Operator::SharedCtor() {\n'
              '  type_ = 0;\n'
              '}\n'
              '\n'
              'Operator::~Operator() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Operator)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Operator::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Operator::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2174,
         lineno=919,
         tokens=16,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::SharedCtor',
         body='void Operator::SharedCtor() {\n  type_ = 0;\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2175,
         lineno=923,
         tokens=27,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::~Operator',
         body='Operator::~Operator() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Operator)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2176,
         lineno=928,
         tokens=9,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::SharedDtor',
         body='void Operator::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2177,
         lineno=931,
         tokens=20,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::SetCachedSize',
         body='void Operator::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2178,
         lineno=934,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Operator::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Operator& Operator::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Operator.base);\n'
              '  return')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2179,
         lineno=941,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Operator::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.Clear();\n'
              '  para_.Clear();\n'
              '  type_ = 0;\n'
              '  _')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2180,
         lineno=945,
         tokens=89,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::Clear',
         body='void Operator::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.Clear();\n'
              '  para_.Clear();\n'
              '  type_ = 0;\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2181,
         lineno=954,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Operator::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Operator)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2182,
         lineno=958,
         tokens=580,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::MergePartialFromCodedStream',
         body='bool Operator::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Operator)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 type = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_type();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &type_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Tensor input = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_input()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Parameter para = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_para()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Operator)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.Operator)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2183,
         lineno=960,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2184,
         lineno=961,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2185,
         lineno=966,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 type = 1;\n'
              '      case 1: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2186,
         lineno=970,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_type();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &type_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Tensor input = 2;\n'
              '      case 2: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2187,
         lineno=984,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_input()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Parameter para = 3;\n'
              '      case 3: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2188,
         lineno=996,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_para()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2189,
         lineno=1008,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Operator)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_fail')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2190,
         lineno=1021,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ure:GraphSubst.Operator)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Operator::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 type = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2191,
         lineno=1026,
         tokens=341,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::SerializeWithCachedSizes',
         body='void Operator::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 type = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->type(), output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->input_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->input(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->para_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->para(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Operator)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2192,
         lineno=1034,
         tokens=55,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->type(), output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2193,
         lineno=1039,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->input_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->input(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->para_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->para(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2194,
         lineno=1055,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Operator)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Operator::InternalSerializeWithCachedSizesToAr')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2195,
         lineno=1063,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 type = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->type(), target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2196,
         lineno=1077,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->input_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        2, this->input(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2197,
         lineno=1085,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->para_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        3, this->para(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2198,
         lineno=1091,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Operator)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Operator::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2199,
         lineno=1100,
         tokens=336,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::ByteSizeLong',
         body='size_t Operator::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // required int32 type = 1;\n'
              '  if (has_type()) {\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->type());\n'
              '  }\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->input_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->input(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->para_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->para(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2200,
         lineno=1103,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // required int32 type = 1;\n'
              '  if (has_type()) {\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->type());\n'
              '  }\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->input_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2201,
         lineno=1119,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->input(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->para_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2202,
         lineno=1130,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->para(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2203,
         lineno=1139,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_size;\n'
              '}\n'
              '\n'
              'void Operator::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Operator* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Operator>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2204,
         lineno=1142,
         tokens=149,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::MergeFrom',
         body='void Operator::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Operator* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Operator>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Operator)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Operator)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2205,
         lineno=1148,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Operator)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Operator)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Operator::MergeFrom(cons')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2206,
         lineno=1157,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.MergeFrom(from.input_);\n'
              '  para_.MergeFrom(from.para_);\n'
              '  if (from.has_type()) {\n'
              '    set_type(from.type());\n'
              '  }\n'
              '}\n'
              '\n'
              'void Operator::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Operator)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2207,
         lineno=1157,
         tokens=108,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::MergeFrom',
         body='void Operator::MergeFrom(const Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.MergeFrom(from.input_);\n'
              '  para_.MergeFrom(from.para_);\n'
              '  if (from.has_type()) {\n'
              '    set_type(from.type());\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2208,
         lineno=1171,
         tokens=53,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::CopyFrom',
         body='void Operator::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Operator)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2209,
         lineno=1173,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Operator::CopyFrom(const Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Operator::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return '
              'false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->input())) '
              'return false;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2210,
         lineno=1178,
         tokens=47,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::CopyFrom',
         body='void Operator::CopyFrom(const Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2211,
         lineno=1185,
         tokens=80,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::IsInitialized',
         body='bool Operator::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return '
              'false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->input())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->para())) '
              'return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2212,
         lineno=1188,
         tokens=61,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->para())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Operator::Swap(Operator* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Operator::InternalSwap(Operator* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2213,
         lineno=1192,
         tokens=25,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::Swap',
         body='void Operator::Swap(Operator* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2214,
         lineno=1196,
         tokens=91,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::InternalSwap',
         body='void Operator::InternalSwap(Operator* other) {\n'
              '  using std::swap;\n'
              '  '
              'CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));\n'
              '  CastToBase(&para_)->InternalSwap(CastToBase(&other->para_));\n'
              '  swap(type_, other->type_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2215,
         lineno=1197,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  '
              'CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));\n'
              '  CastToBase(&para_)->InternalSwap(CastToBase(&other->para_));\n'
              '  swap(type_, other->type_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Operator::GetMetadat')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2216,
         lineno=1205,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='a() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void MapOutput::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int MapOutpu')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2217,
         lineno=1205,
         tokens=49,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::GetMetadata',
         body='::google::protobuf::Metadata Operator::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2218,
         lineno=1213,
         tokens=11,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::InitAsDefaultInstance',
         body='void MapOutput::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2219,
         lineno=1216,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t::kSrcOpIdFieldNumber;\n'
              'const int MapOutput::kDstOpIdFieldNumber;\n'
              'const int MapOutput::kSrcTsIdFieldNumber;\n'
              'const int MapOutput::kDstTsIdFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'MapOutput::MapOutput()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '   ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2220,
         lineno=1222,
         tokens=74,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::MapOutput',
         body='MapOutput::MapOutput()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_MapOutput.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.MapOutput)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2221,
         lineno=1225,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   &protobuf_rules_2eproto::scc_info_MapOutput.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.MapOutput)\n'
              '}\n'
              'MapOutput::MapOutput(const MapOutput& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2222,
         lineno=1229,
         tokens=113,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::MapOutput',
         body='MapOutput::MapOutput(const MapOutput& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&srcopid_, &from.srcopid_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -\n'
              '    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2223,
         lineno=1233,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='metadata_);\n'
              '  ::memcpy(&srcopid_, &from.srcopid_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -\n'
              '    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)\n'
              '}\n'
              '\n'
              'void MapOutput::SharedCtor() {\n'
              '  ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '      rein')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2224,
         lineno=1240,
         tokens=52,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::SharedCtor',
         body='void MapOutput::SharedCtor() {\n'
              '  ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&dsttsid_) -\n'
              '      reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2225,
         lineno=1242,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='terpret_cast<char*>(&dsttsid_) -\n'
              '      reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '}\n'
              '\n'
              'MapOutput::~MapOutput() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void MapOutput::SharedDtor() {\n'
              '}\n'
              '\n'
              'void MapOutput::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::googl')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2226,
         lineno=1246,
         tokens=30,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::~MapOutput',
         body='MapOutput::~MapOutput() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2227,
         lineno=1251,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::SharedDtor',
         body='void MapOutput::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2228,
         lineno=1254,
         tokens=21,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::SetCachedSize',
         body='void MapOutput::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2229,
         lineno=1257,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e::protobuf::Descriptor* MapOutput::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const MapOutput& MapOutput::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Map')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2230,
         lineno=1263,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Output.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void MapOutput::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2231,
         lineno=1268,
         tokens=141,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::Clear',
         body='void MapOutput::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 15u) {\n'
              '    ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&dsttsid_) -\n'
              '        reinterpret_cast<char*>(&srcopid_)) + '
              'sizeof(dsttsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2232,
         lineno=1275,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 15u) {\n'
              '    ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&dsttsid_) -\n'
              '        reinterpret_cast<char*>(&srcopid_)) + '
              'sizeof(dsttsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool MapOutput::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.MapOutput)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2233,
         lineno=1284,
         tokens=792,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::MergePartialFromCodedStream',
         body='bool MapOutput::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.MapOutput)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 srcOpId = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_srcopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srcopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstOpId = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_dstopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dstopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 srcTsId = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(24u /* 24 & '
              '0xFF */)) {\n'
              '          set_has_srctsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srctsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstTsId = 4;\n'
              '      case 4: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(32u /* 32 & '
              '0xFF */)) {\n'
              '          set_has_dsttsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dsttsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.MapOutput)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.MapOutput)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2234,
         lineno=1286,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2235,
         lineno=1287,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2236,
         lineno=1289,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 srcOpId = 1;\n'
              '      case 1: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2237,
         lineno=1296,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_srcopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srcopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstOpId = 2;\n'
              '      case 2: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2238,
         lineno=1310,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_dstopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dstopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 srcTsId = 3;\n'
              '      case 3: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2239,
         lineno=1324,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(24u /* 24 & '
              '0xFF */)) {\n'
              '          set_has_srctsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srctsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstTsId = 4;\n'
              '      case 4: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2240,
         lineno=1338,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(32u /* 32 & '
              '0xFF */)) {\n'
              '          set_has_dsttsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dsttsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2241,
         lineno=1352,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.MapOutput)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_failur')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2242,
         lineno=1365,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e:GraphSubst.MapOutput)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void MapOutput::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 srcOpId = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2243,
         lineno=1370,
         tokens=358,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::SerializeWithCachedSizes',
         body='void MapOutput::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 srcOpId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->srcopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->dstopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 srcTsId = 3;\n'
              '  if (cached_has_bits & 0x00000004u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, '
              'this->srctsid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  if (cached_has_bits & 0x00000008u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, '
              'this->dsttsid(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.MapOutput)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2244,
         lineno=1378,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->srcopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->dstopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 srcTsId = 3;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2245,
         lineno=1388,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000004u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, '
              'this->srctsid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  if (cached_has_bits & 0x00000008u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, '
              'this->dsttsid(), output);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2246,
         lineno=1396,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.MapOutput)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'MapOutput::InternalSerializeWithCachedSizesToArr')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2247,
         lineno=1404,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ay(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 srcOpId = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2248,
         lineno=1413,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->srcopid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->dstopid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 srcTsId = 3;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2249,
         lineno=1423,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cached_has_bits & 0x00000004u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, '
              'this->srctsid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  if (cached_has_bits & 0x00000008u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, '
              'this->dsttsid(), target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2250,
         lineno=1431,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.MapOutput)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t MapOutput::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2251,
         lineno=1440,
         tokens=261,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::RequiredFieldsByteSizeFallback',
         body='size_t MapOutput::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_srcopid()) {\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '  }\n'
              '\n'
              '  if (has_dstopid()) {\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '  }\n'
              '\n'
              '  if (has_srctsid()) {\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '  }\n'
              '\n'
              '  if (has_dsttsid()) {\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2252,
         lineno=1443,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (has_srcopid()) {\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '  }\n'
              '\n'
              '  if (has_dstopid()) {\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2253,
         lineno=1457,
         tokens=54,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (has_srctsid()) {\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2254,
         lineno=1464,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (has_dsttsid()) {\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t MapOutput::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2255,
         lineno=1474,
         tokens=335,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::ByteSizeLong',
         body='size_t MapOutput::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2256,
         lineno=1483,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2257,
         lineno=1490,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2258,
         lineno=1500,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void MapOutput::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const MapOutput* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'MapOutput>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2259,
         lineno=1512,
         tokens=155,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::MergeFrom',
         body='void MapOutput::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const MapOutput* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'MapOutput>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.MapOutput)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.MapOutput)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2260,
         lineno=1518,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.MapOutput)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.MapOutput)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void MapOutput::M')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2261,
         lineno=1527,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ergeFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 15u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      srcopid_ = from.srcopid_;\n'
              '    }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2262,
         lineno=1527,
         tokens=233,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::MergeFrom',
         body='void MapOutput::MergeFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 15u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      srcopid_ = from.srcopid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      dstopid_ = from.dstopid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000004u) {\n'
              '      srctsid_ = from.srctsid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000008u) {\n'
              '      dsttsid_ = from.dsttsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2263,
         lineno=1539,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (cached_has_bits & 0x00000002u) {\n'
              '      dstopid_ = from.dstopid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000004u) {\n'
              '      srctsid_ = from.srctsid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000008u) {\n'
              '      dsttsid_ = from.dsttsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void MapOutput::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.MapOutput)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2264,
         lineno=1552,
         tokens=55,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::CopyFrom',
         body='void MapOutput::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.MapOutput)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2265,
         lineno=1554,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void MapOutput::CopyFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool MapOutput::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void MapOutput::Swap(MapOutput* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void MapOutput::InternalSwap(MapOutput* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2266,
         lineno=1559,
         tokens=50,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::CopyFrom',
         body='void MapOutput::CopyFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2267,
         lineno=1566,
         tokens=43,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::IsInitialized',
         body='bool MapOutput::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return '
              'false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2268,
         lineno=1571,
         tokens=26,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::Swap',
         body='void MapOutput::Swap(MapOutput* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2269,
         lineno=1575,
         tokens=94,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::InternalSwap',
         body='void MapOutput::InternalSwap(MapOutput* other) {\n'
              '  using std::swap;\n'
              '  swap(srcopid_, other->srcopid_);\n'
              '  swap(dstopid_, other->dstopid_);\n'
              '  swap(srctsid_, other->srctsid_);\n'
              '  swap(dsttsid_, other->dsttsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2270,
         lineno=1576,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  swap(srcopid_, other->srcopid_);\n'
              '  swap(dstopid_, other->dstopid_);\n'
              '  swap(srctsid_, other->srctsid_);\n'
              '  swap(dsttsid_, other->dsttsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata MapOutput::GetMetadata() const ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2271,
         lineno=1585,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='{\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Rule::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Rule::kSrcOpField')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2272,
         lineno=1585,
         tokens=50,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::GetMetadata',
         body='::google::protobuf::Metadata MapOutput::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2273,
         lineno=1593,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::InitAsDefaultInstance',
         body='void Rule::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2274,
         lineno=1596,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Number;\n'
              'const int Rule::kDstOpFieldNumber;\n'
              'const int Rule::kMappedOutputFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Rule::Rule()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Rule.base);\n'
              '  SharedCtor();\n'
              '  //')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2275,
         lineno=1601,
         tokens=71,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::Rule',
         body='Rule::Rule()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Rule.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Rule)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2276,
         lineno=1606,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' @@protoc_insertion_point(constructor:GraphSubst.Rule)\n'
              '}\n'
              'Rule::Rule(const Rule& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      srcop_(from.srcop_),\n'
              '      dstop_(from.dstop_),\n'
              '      mappedoutput_(from.mappedoutput_) {\n'
              '  _internal_metadata_.MergeFrom(from._in')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2277,
         lineno=1608,
         tokens=92,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::Rule',
         body='Rule::Rule(const Rule& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      srcop_(from.srcop_),\n'
              '      dstop_(from.dstop_),\n'
              '      mappedoutput_(from.mappedoutput_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Rule)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2278,
         lineno=1615,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ternal_metadata_);\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Rule)\n'
              '}\n'
              '\n'
              'void Rule::SharedCtor() {\n'
              '}\n'
              '\n'
              'Rule::~Rule() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Rule)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Rule::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Rule::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google:')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2279,
         lineno=1619,
         tokens=9,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::SharedCtor',
         body='void Rule::SharedCtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2280,
         lineno=1622,
         tokens=27,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::~Rule',
         body='Rule::~Rule() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Rule)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2281,
         lineno=1627,
         tokens=9,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::SharedDtor',
         body='void Rule::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2282,
         lineno=1630,
         tokens=20,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::SetCachedSize',
         body='void Rule::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2283,
         lineno=1633,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=':protobuf::Descriptor* Rule::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Rule& Rule::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Rule.base);\n'
              '  ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2284,
         lineno=1640,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Rule::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.Clear();\n'
              '  dstop_.Clear();\n'
              '  mappedoutput_.Cle')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2285,
         lineno=1644,
         tokens=90,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::Clear',
         body='void Rule::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.Clear();\n'
              '  dstop_.Clear();\n'
              '  mappedoutput_.Clear();\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2286,
         lineno=1652,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ar();\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Rule::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Rule)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2287,
         lineno=1657,
         tokens=559,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::MergePartialFromCodedStream',
         body='bool Rule::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Rule)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Operator srcOp = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_srcop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Operator dstOp = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_dstop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_mappedoutput()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Rule)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_failure:GraphSubst.Rule)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2288,
         lineno=1659,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2289,
         lineno=1660,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2290,
         lineno=1665,
         tokens=51,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Operator srcOp = 1;\n'
              '      case 1: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2291,
         lineno=1669,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_srcop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Operator dstOp = 2;\n'
              '      case 2: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2292,
         lineno=1681,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_dstop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '      case 3: {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2293,
         lineno=1693,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_mappedoutput()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2294,
         lineno=1705,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Rule)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_po')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2295,
         lineno=1718,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='int(parse_failure:GraphSubst.Rule)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Rule::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // @@protoc_insertion_point(serialize_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2296,
         lineno=1723,
         tokens=367,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::SerializeWithCachedSizes',
         body='void Rule::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // @@protoc_insertion_point(serialize_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->srcop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->srcop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->dstop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->dstop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->mappedoutput_size()); '
              'i < n; i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->mappedoutput(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Rule)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2297,
         lineno=1730,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->srcop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->srcop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2298,
         lineno=1739,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->dstop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->dstop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2299,
         lineno=1748,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->mappedoutput_size()); '
              'i < n; i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->mappedoutput(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Rule)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* Rule::InternalSerializeWithCachedSi')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2300,
         lineno=1763,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='zesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2301,
         lineno=1771,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->srcop_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        1, this->srcop(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2302,
         lineno=1779,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->dstop_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        2, this->dstop(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2303,
         lineno=1787,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->mappedoutput_size()); '
              'i < n; i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        3, this->mappedoutput(static_cast<int>(i)), '
              'deterministic, target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2304,
         lineno=1793,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Rule)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Rule::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2305,
         lineno=1802,
         tokens=389,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::ByteSizeLong',
         body='size_t Rule::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->srcop_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->srcop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->dstop_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->dstop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->mappedoutput_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->mappedoutput(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2306,
         lineno=1805,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->srcop_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2307,
         lineno=1815,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->srcop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->dstop_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2308,
         lineno=1826,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->dstop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->mappedoutput_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2309,
         lineno=1837,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->mappedoutput(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  ')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2310,
         lineno=1846,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='return total_size;\n'
              '}\n'
              '\n'
              'void Rule::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Rule)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Rule* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Rule>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2311,
         lineno=1849,
         tokens=149,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::MergeFrom',
         body='void Rule::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Rule)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Rule* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Rule>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Rule)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Rule)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2312,
         lineno=1855,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Rule)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Rule)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Rule::MergeFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)\n'
              '  G')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2313,
         lineno=1864,
         tokens=106,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::MergeFrom',
         body='void Rule::MergeFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.MergeFrom(from.srcop_);\n'
              '  dstop_.MergeFrom(from.dstop_);\n'
              '  mappedoutput_.MergeFrom(from.mappedoutput_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2314,
         lineno=1866,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.MergeFrom(from.srcop_);\n'
              '  dstop_.MergeFrom(from.dstop_);\n'
              '  mappedoutput_.MergeFrom(from.mappedoutput_);\n'
              '}\n'
              '\n'
              'void Rule::CopyFrom(const ::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Rule)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2315,
         lineno=1876,
         tokens=53,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::CopyFrom',
         body='void Rule::CopyFrom(const ::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Rule)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2316,
         lineno=1878,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Rule::CopyFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Rule::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->srcop())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->dstop())) '
              'return false;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2317,
         lineno=1883,
         tokens=47,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::CopyFrom',
         body='void Rule::CopyFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2318,
         lineno=1890,
         tokens=76,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::IsInitialized',
         body='bool Rule::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->srcop())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->dstop())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->mappedoutput())) '
              'return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2319,
         lineno=1893,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->mappedoutput())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Rule::Swap(Rule* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Rule::InternalSwap(Rule* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2320,
         lineno=1897,
         tokens=25,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::Swap',
         body='void Rule::Swap(Rule* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2321,
         lineno=1901,
         tokens=108,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::InternalSwap',
         body='void Rule::InternalSwap(Rule* other) {\n'
              '  using std::swap;\n'
              '  '
              'CastToBase(&srcop_)->InternalSwap(CastToBase(&other->srcop_));\n'
              '  '
              'CastToBase(&dstop_)->InternalSwap(CastToBase(&other->dstop_));\n'
              '  '
              'CastToBase(&mappedoutput_)->InternalSwap(CastToBase(&other->mappedoutput_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2322,
         lineno=1902,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  '
              'CastToBase(&srcop_)->InternalSwap(CastToBase(&other->srcop_));\n'
              '  '
              'CastToBase(&dstop_)->InternalSwap(CastToBase(&other->dstop_));\n'
              '  '
              'CastToBase(&mappedoutput_)->InternalSwap(CastToBase(&other->mappedoutput_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::goo')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2323,
         lineno=1910,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='gle::protobuf::Metadata Rule::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void RuleCollection::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) |')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2324,
         lineno=1910,
         tokens=49,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::GetMetadata',
         body='::google::protobuf::Metadata Rule::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2325,
         lineno=1918,
         tokens=11,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::InitAsDefaultInstance',
         body='void RuleCollection::InitAsDefaultInstance() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2326,
         lineno=1920,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='| _MSC_VER >= 1900\n'
              'const int RuleCollection::kRuleFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'RuleCollection::RuleCollection()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_RuleCollection.base);\n'
              '  SharedCtor();\n'
              '  // @@pro')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2327,
         lineno=1924,
         tokens=75,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::RuleCollection',
         body='RuleCollection::RuleCollection()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_RuleCollection.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.RuleCollection)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2328,
         lineno=1929,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='toc_insertion_point(constructor:GraphSubst.RuleCollection)\n'
              '}\n'
              'RuleCollection::RuleCollection(const RuleCollection& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      rule_(from.rule_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  // @@protoc_insertion_point(c')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2329,
         lineno=1931,
         tokens=75,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::RuleCollection',
         body='RuleCollection::RuleCollection(const RuleCollection& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      rule_(from.rule_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.RuleCollection)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2330,
         lineno=1937,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='opy_constructor:GraphSubst.RuleCollection)\n'
              '}\n'
              '\n'
              'void RuleCollection::SharedCtor() {\n'
              '}\n'
              '\n'
              'RuleCollection::~RuleCollection() {\n'
              '  // '
              '@@protoc_insertion_point(destructor:GraphSubst.RuleCollection)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void RuleCollection::SharedDtor() {\n'
              '}\n'
              '\n'
              'void RuleCollection::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::g')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2331,
         lineno=1940,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::SharedCtor',
         body='void RuleCollection::SharedCtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2332,
         lineno=1943,
         tokens=30,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::~RuleCollection',
         body='RuleCollection::~RuleCollection() {\n'
              '  // '
              '@@protoc_insertion_point(destructor:GraphSubst.RuleCollection)\n'
              '  SharedDtor();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2333,
         lineno=1948,
         tokens=10,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::SharedDtor',
         body='void RuleCollection::SharedDtor() {\n}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2334,
         lineno=1951,
         tokens=21,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::SetCachedSize',
         body='void RuleCollection::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2335,
         lineno=1954,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='oogle::protobuf::Descriptor* RuleCollection::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const RuleCollection& RuleCollection::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::s')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2336,
         lineno=1960,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='cc_info_RuleCollection.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void RuleCollection::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.Clear();\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2337,
         lineno=1965,
         tokens=79,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::Clear',
         body='void RuleCollection::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.Clear();\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2338,
         lineno=1972,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool RuleCollection::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.RuleCollection)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2339,
         lineno=1976,
         tokens=356,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::MergePartialFromCodedStream',
         body='bool RuleCollection::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.RuleCollection)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Rule rule = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_rule()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.RuleCollection)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.RuleCollection)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2340,
         lineno=1978,
         tokens=18,
         depth=4,
         parent_id=None,
         category='macro',
         summary=False,
         name='DO_',
         body='#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2341,
         lineno=1979,
         tokens=9,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='tag',
         body='::google::protobuf::uint32 tag;')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2342,
         lineno=1984,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Rule rule = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_rule()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2343,
         lineno=2000,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.RuleCollection)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(pars')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2344,
         lineno=2013,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e_failure:GraphSubst.RuleCollection)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void RuleCollection::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2345,
         lineno=2018,
         tokens=202,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::SerializeWithCachedSizes',
         body='void RuleCollection::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->rule_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->rule(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.RuleCollection)\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2346,
         lineno=2025,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->rule_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->rule(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.RuleCollection)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* RuleCollection::InternalSerializeWith')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2347,
         lineno=2040,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='CachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2348,
         lineno=2048,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->rule_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        1, this->rule(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2349,
         lineno=2054,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.RuleCollection)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t RuleCollection::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)\n'
              '  size_t total_size = 0;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2350,
         lineno=2063,
         tokens=201,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::ByteSizeLong',
         body='size_t RuleCollection::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->rule_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->rule(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2351,
         lineno=2066,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->rule_size());\n'
              '    total_size += 1UL * count;\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2352,
         lineno=2076,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->rule(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'vo')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2353,
         lineno=2088,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='id RuleCollection::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const RuleCollection* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'RuleCollection>(\n'
              '          &from);\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2354,
         lineno=2088,
         tokens=155,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::MergeFrom',
         body='void RuleCollection::MergeFrom(const '
              '::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const RuleCollection* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'RuleCollection>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.RuleCollection)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.RuleCollection)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2355,
         lineno=2094,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.RuleCollection)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.RuleCollection)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void RuleCollection::MergeFrom(const RuleCollection& from) {\n'
              '// @@protoc_insertion_point(class_')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2356,
         lineno=2103,
         tokens=86,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::MergeFrom',
         body='void RuleCollection::MergeFrom(const RuleCollection& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.MergeFrom(from.rule_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2357,
         lineno=2104,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='specific_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.MergeFrom(from.rule_);\n'
              '}\n'
              '\n'
              'void RuleCollection::CopyFrom(const '
              '::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.RuleCollection)\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2358,
         lineno=2113,
         tokens=55,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::CopyFrom',
         body='void RuleCollection::CopyFrom(const '
              '::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.RuleCollection)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2359,
         lineno=2115,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void RuleCollection::CopyFrom(const RuleCollection& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool RuleCollection::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->rule())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void RuleCollection::Swap(RuleCollection* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void RuleCollection::InternalSwap(RuleCollection* other) {\n')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2360,
         lineno=2120,
         tokens=50,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::CopyFrom',
         body='void RuleCollection::CopyFrom(const RuleCollection& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2361,
         lineno=2127,
         tokens=34,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::IsInitialized',
         body='bool RuleCollection::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->rule())) '
              'return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2362,
         lineno=2132,
         tokens=27,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::Swap',
         body='void RuleCollection::Swap(RuleCollection* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2363,
         lineno=2136,
         tokens=66,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::InternalSwap',
         body='void RuleCollection::InternalSwap(RuleCollection* other) {\n'
              '  using std::swap;\n'
              '  CastToBase(&rule_)->InternalSwap(CastToBase(&other->rule_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2364,
         lineno=2137,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  using std::swap;\n'
              '  CastToBase(&rule_)->InternalSwap(CastToBase(&other->rule_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata RuleCollection::GetMetadata() '
              'const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// @@protoc_insertion_point(namespace_scope)\n'
              '}  // namespace G')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2365,
         lineno=2143,
         tokens=50,
         depth=2,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::GetMetadata',
         body='::google::protobuf::Metadata RuleCollection::GetMetadata() '
              'const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2366,
         lineno=2150,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='raphSubst\n'
              'namespace google {\n'
              'namespace protobuf {\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Parameter* Arena::CreateMaybeMessage< '
              '::GraphSubst::Parameter >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Parameter '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Tensor* Arena::CreateMaybeMessage< '
              '::GraphSubst::Tensor >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Tensor >(arena);\n'
              '}\n'
              'te')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2367,
         lineno=2151,
         tokens=7,
         depth=0,
         parent_id=None,
         category='namespace',
         summary=False,
         name='google',
         body="namespace b'google' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2368,
         lineno=2152,
         tokens=7,
         depth=2,
         parent_id=None,
         category='namespace',
         summary=False,
         name='protobuf',
         body="namespace b'protobuf' {...}")

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2369,
         lineno=2159,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mplate<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Operator* Arena::CreateMaybeMessage< '
              '::GraphSubst::Operator >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Operator '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::MapOutput* Arena::CreateMaybeMessage< '
              '::GraphSubst::MapOutput >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::MapOutput '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::')

Fragment(document_cs='53a2ad107b2470665f5e3b0978f25e37096a53cebecd0fa4bf570753fbc8f1d1',
         id=2370,
         lineno=2165,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='GraphSubst::Rule* Arena::CreateMaybeMessage< ::GraphSubst::Rule '
              '>(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Rule >(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::RuleCollection* Arena::CreateMaybeMessage< '
              '::GraphSubst::RuleCollection >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::RuleCollection '
              '>(arena);\n'
              '}\n'
              '}  // namespace protobuf\n'
              '}  // namespace google\n'
              '\n'
              '// @@protoc_insertion_point(global_scope)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2371,
         lineno=1,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='from .core import *\n'
              'import onnx\n'
              'from onnx import helper, TensorProto, numpy_helper\n'
              '\n'
              'class InputNotFoundError(Exception):\n'
              '    """Raised when cannot find input tensors """\n'
              '    pass\n'
              '\n'
              '# correspond to '
              'https://github.com/onnx/onnx/blob/master/onnx/onnx.proto\n'
              'def onnx_datatype_tostring(dtype):\n'
              '    if dtype == 0:\n'
              "        return 'UNDEFINED'\n"
              '    elif dtype == 1:\n'
              "        return 'FLOAT'\n"
              '    elif dtype == 2:\n'
              "        return 'UINT8'\n"
              '    elif dtype == 3:\n'
              "        return 'INT8'\n"
              '    elif dtype == 4:\n'
              "        return 'UINT16'\n"
              '    elif dtype == 5:\n'
              "        return 'INT16'\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2372,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2373,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2374,
         lineno=1,
         tokens=532,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /python/taso/__init__.py\n'
              '  Functions: _add _add_node_attribute _argmax _argmin '
              '_avgpool2d _batchnorm _cast _ceil _check_output _concat '
              '_constant _conv2d _crop_and_resize _div _dropout _equal _exp '
              '_flatten _gemm _get_conv_pool_pads_attr _get_inputs '
              '_get_list_from_initializer _globalavgpool2d _greater _identity '
              '_input_tensor_name _leakyrelu _less _log _logical_not _matmul '
              '_max _maxpool2d _min _mul _output_tensor_name _pad '
              '_parse_attribute _prelu _reducemax _reducemean _reducemin '
              '_reduceprod _reducesum _relu _reshape _resize '
              '_resize_nearest_neighbor _round _shape _sigmoid _size _slice '
              '_split _sqrt _squeeze _strided_slice _sub _sum _transpose '
              '_unsqueeze export_onnx load_onnx new_graph '
              'onnx_datatype_tostring optimize\n'
              '  Classes: InputNotFoundError\n'
              '  Variables and usages: AttributeProto Exception FLOAT INT '
              'INT64 INTS PyGraph STRING TENSOR TensorProto alpha append attr '
              'attribute attributes attrs atts avgpool2d axes axes_ints '
              'axes_list axis batchnorm begin_mask budget bytes cast ceil '
              'concat conv2d core crop_and_resize data datatype decode '
              'dependents dim_value dims dropout dtype ellipsis_mask end_mask '
              'epsilon equal filename format get_input_dims get_input_edges '
              'get_num_outputs get_operator_attr get_operator_list '
              'get_operator_type get_output_dims get_weight_value graph '
              'graph_initializers graph_inputs graph_nodes graph_outputs '
              'greater group guid helper inedge inedges init initializer input '
              'input_node input_tensor input_weight_names inputs int64_data '
              'ints intype keepdims kernels leakyrelu less load logical_not '
              'make_attribute make_graph make_model make_node make_tensor '
              'make_tensor_value_info matmul maxpool2d model mytype nDim name '
              'name_to_op new_axis_mask new_height new_input new_weight '
              'new_width node node_list numpy_helper onnx onnx_graph '
              'onnx_model onnx_output opList op_type operator_attrs opname '
              'optype origin_dim out_edges output output_guids outputs padding '
              'pads perm perm_ints prelu print print_measurements print_subst '
              'producer_name range rate raw_data reduce_argmax reduce_argmin '
              'reduce_max reduce_mean reduce_min reduce_prod reduce_sum relu '
              'reshape reshaped_bias resize resize_nearest_neighbor '
              'ret_in_array round shape shape_in_array shrink_axis_mask '
              'shuffle sigmoid size slice slope split split_ints split_list '
              'sqrt squeeze start steps strides taso_output tensor '
              'tensor_owner tensor_type tensors to_array to_type transpose '
              'tuple type unsqueeze weight weight_data xf_operators\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2375,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2376,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2377,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2378,
         lineno=5,
         tokens=16,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='InputNotFoundError',
         body='class InputNotFoundError(Exception):\n'
              '    """Raised when cannot find input tensors """\n'
              '    pass')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2379,
         lineno=6,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Raised when cannot find input tensors ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2380,
         lineno=9,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# correspond to '
              'https://github.com/onnx/onnx/blob/master/onnx/onnx.proto')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2381,
         lineno=10,
         tokens=149,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='onnx_datatype_tostring',
         body='def onnx_datatype_tostring(dtype):\n'
              '    if dtype == 0:\n'
              "        return 'UNDEFINED'\n"
              '    elif dtype == 1:\n'
              "        return 'FLOAT'\n"
              '    elif dtype == 2:\n'
              "        return 'UINT8'\n"
              '    elif dtype == 3:\n'
              "        return 'INT8'\n"
              '    elif dtype == 4:\n'
              "        return 'UINT16'\n"
              '    elif dtype == 5:\n'
              "        return 'INT16'\n"
              '    elif dtype == 6:\n'
              "        return 'INT32'\n"
              '    elif dtype == 7:\n'
              "        return 'INT64'\n"
              '    elif dtype == 8:\n'
              "        return 'STRING'\n"
              '    elif dtype == 9:\n'
              "        return 'BOOL'\n"
              '    elif dtype == 10:\n'
              "        return 'FLOAT16'\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2382,
         lineno=23,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif dtype == 6:\n'
              "        return 'INT32'\n"
              '    elif dtype == 7:\n'
              "        return 'INT64'\n"
              '    elif dtype == 8:\n'
              "        return 'STRING'\n"
              '    elif dtype == 9:\n'
              "        return 'BOOL'\n"
              '    elif dtype == 10:\n'
              "        return 'FLOAT16'\n"
              '    elif dtype == 11:\n'
              "        return 'DOUBLE'\n"
              '    elif dtype == 12:\n'
              "        return 'UINT32'\n"
              '    elif dtype == 13:\n'
              "        return 'UINT64'\n"
              '    elif dtype == 14:\n'
              "        return 'COMPLEX64'\n"
              '    elif dtype == 15:\n'
              "        return 'COMPLEX128'\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2383,
         lineno=33,
         tokens=92,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='onnx_datatype_tostring',
         body='    elif dtype == 11:\n'
              "        return 'DOUBLE'\n"
              '    elif dtype == 12:\n'
              "        return 'UINT32'\n"
              '    elif dtype == 13:\n'
              "        return 'UINT64'\n"
              '    elif dtype == 14:\n'
              "        return 'COMPLEX64'\n"
              '    elif dtype == 15:\n'
              "        return 'COMPLEX128'\n"
              '    elif dtype == 16:\n'
              "        return 'BFLOAT16'\n"
              '    else:\n'
              "        raise Exception('Unknown onnx datatype')")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2384,
         lineno=43,
         tokens=26,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif dtype == 16:\n'
              "        return 'BFLOAT16'\n"
              '    else:\n'
              "        raise Exception('Unknown onnx datatype')\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2385,
         lineno=46,
         tokens=4,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Unknown onnx datatype')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2386,
         lineno=47,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _check_output(taso_output, onnx_output):\n'
              '    # TODO: check output match\n'
              '    return True\n'
              '\n'
              'def _parse_attribute(attributes):\n'
              '    atts = dict()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2387,
         lineno=48,
         tokens=23,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_check_output',
         body='def _check_output(taso_output, onnx_output):\n'
              '    # TODO: check output match\n'
              '    return True')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2388,
         lineno=49,
         tokens=6,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: check output match')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2389,
         lineno=52,
         tokens=12,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_parse_attribute',
         body='def _parse_attribute(attributes):\n    atts = dict()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2390,
         lineno=54,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for att in attributes:\n'
              '        if att.type == onnx.AttributeProto.INT:\n'
              '            atts[att.name] = att.i\n'
              '        elif att.type == onnx.AttributeProto.INTS:\n'
              '            atts[att.name] = att.ints\n'
              '        elif att.type == onnx.AttributeProto.FLOAT:\n'
              '            atts[att.name] = att.f\n'
              '        elif att.type == onnx.AttributeProto.STRING:\n'
              '            atts[att.name] = att.s\n'
              '        elif att.type == onnx.AttributeProto.TENSOR:\n'
              '            atts[att.name] = att.t\n'
              '        else:\n'
              '            assert False, "Unsupported Attribute Type: '
              '{}".format(att.type)\n'
              '    return atts\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2391,
         lineno=54,
         tokens=140,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_parse_attribute',
         body='    for att in attributes:\n'
              '        if att.type == onnx.AttributeProto.INT:\n'
              '            atts[att.name] = att.i\n'
              '        elif att.type == onnx.AttributeProto.INTS:\n'
              '            atts[att.name] = att.ints\n'
              '        elif att.type == onnx.AttributeProto.FLOAT:\n'
              '            atts[att.name] = att.f\n'
              '        elif att.type == onnx.AttributeProto.STRING:\n'
              '            atts[att.name] = att.s\n'
              '        elif att.type == onnx.AttributeProto.TENSOR:\n'
              '            atts[att.name] = att.t\n'
              '        else:\n'
              '            assert False, "Unsupported Attribute Type: '
              '{}".format(att.type)\n'
              '    return atts')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2392,
         lineno=66,
         tokens=5,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Unsupported Attribute Type: {}')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2393,
         lineno=68,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _get_conv_pool_pads_attr(attrs):\n'
              '    if ("auto_pad" in attrs):\n'
              '        padding = attrs["auto_pad"]\n'
              '        if isinstance(padding, bytes):\n'
              '            padding = padding.decode()\n'
              "        if (padding=='SAME_LOWER') or (padding=='SAME_UPPER'):\n"
              '            pads = "SAME"\n'
              "        elif (padding=='VALID'):\n"
              '            pads = "VALID"\n'
              '        else:\n'
              '            assert padding==\'NOTSET\', "Unrecogonized auto_pad '
              'value: {}".format(padding)\n'
              '        # Note that we always think conv1x1 has SAME padding\n'
              '        # This will allow fusing enlarged convs\n'
              "        if sum(attrs['kernel_shape']) <= 2:\n"
              '            pads = "SAME"\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2394,
         lineno=69,
         tokens=142,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_get_conv_pool_pads_attr',
         body='def _get_conv_pool_pads_attr(attrs):\n'
              '    if ("auto_pad" in attrs):\n'
              '        padding = attrs["auto_pad"]\n'
              '        if isinstance(padding, bytes):\n'
              '            padding = padding.decode()\n'
              "        if (padding=='SAME_LOWER') or (padding=='SAME_UPPER'):\n"
              '            pads = "SAME"\n'
              "        elif (padding=='VALID'):\n"
              '            pads = "VALID"\n'
              '        else:\n'
              '            assert padding==\'NOTSET\', "Unrecogonized auto_pad '
              'value: {}".format(padding)\n'
              '        # Note that we always think conv1x1 has SAME padding\n'
              '        # This will allow fusing enlarged convs\n'
              "        if sum(attrs['kernel_shape']) <= 2:\n"
              '            pads = "SAME"\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2395,
         lineno=79,
         tokens=10,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Unrecogonized auto_pad value: {}')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2396,
         lineno=80,
         tokens=13,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Note that we always think conv1x1 has SAME padding')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2397,
         lineno=81,
         tokens=9,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# This will allow fusing enlarged convs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2398,
         lineno=84,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="        if padding != 'NOTSET':\n"
              '            return pads\n'
              '    # Assume zero padding if the pads are missing\n'
              '    if "pads" not in attrs:\n'
              "        attrs['pads'] = [0 for i in "
              "range(len(attrs['kernel_shape'])*2)]\n"
              '    # Note that we always think conv1x1 has SAME padding\n'
              '    # This will allow fusing enlarged convs\n'
              '    if sum(attrs["pads"]) == 0 and sum(attrs[\'kernel_shape\']) '
              '> 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2399,
         lineno=84,
         tokens=121,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_get_conv_pool_pads_attr',
         body="        if padding != 'NOTSET':\n"
              '            return pads\n'
              '    # Assume zero padding if the pads are missing\n'
              '    if "pads" not in attrs:\n'
              "        attrs['pads'] = [0 for i in "
              "range(len(attrs['kernel_shape'])*2)]\n"
              '    # Note that we always think conv1x1 has SAME padding\n'
              '    # This will allow fusing enlarged convs\n'
              '    if sum(attrs["pads"]) == 0 and sum(attrs[\'kernel_shape\']) '
              '> 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2400,
         lineno=86,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Assume zero padding if the pads are missing')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2401,
         lineno=89,
         tokens=13,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Note that we always think conv1x1 has SAME padding')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2402,
         lineno=90,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# This will allow fusing enlarged convs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2403,
         lineno=96,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _get_list_from_initializer(initializer, name):\n'
              '    for data in initializer:\n'
              '        if data.name == name:\n'
              '            ret = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    ret.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                ret_in_array = numpy_helper.to_array(data)\n'
              '                for dim in ret_in_array:\n'
              '                        ret.append(dim)\n'
              '            return ret\n'
              '    raise InputNotFoundError\n'
              '    return []\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2404,
         lineno=97,
         tokens=98,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_get_list_from_initializer',
         body='def _get_list_from_initializer(initializer, name):\n'
              '    for data in initializer:\n'
              '        if data.name == name:\n'
              '            ret = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    ret.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                ret_in_array = numpy_helper.to_array(data)\n'
              '                for dim in ret_in_array:\n'
              '                        ret.append(dim)\n'
              '            return ret\n'
              '    raise InputNotFoundError\n'
              '    return []')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2405,
         lineno=111,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _get_inputs(op, graph, tensors, initializer):\n'
              '    inputs = list()\n'
              '    for i in op.input:\n'
              '        input_tensor = None\n'
              '        if i in tensors:\n'
              '            input_tensor = tensors[i]\n'
              '        else:\n'
              '            for init in initializer:\n'
              '                if init.name == i:\n'
              '                    input_tensor = graph.new_weight(\n'
              '                        dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '                    break\n'
              '        if input_tensor is None:\n'
              '            raise InputNotFoundError\n'
              '            return []\n'
              '        inputs.append(input_tensor)\n'
              '    return inputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2406,
         lineno=112,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_get_inputs',
         body='def _get_inputs(op, graph, tensors, initializer):\n'
              '    inputs = list()\n'
              '    for i in op.input:\n'
              '        input_tensor = None\n'
              '        if i in tensors:\n'
              '            input_tensor = tensors[i]\n'
              '        else:\n'
              '            for init in initializer:\n'
              '                if init.name == i:\n'
              '                    input_tensor = graph.new_weight(\n'
              '                        dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '                    break\n'
              '        if input_tensor is None:\n'
              '            raise InputNotFoundError\n'
              '            return []\n'
              '        inputs.append(input_tensor)\n'
              '    return inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2407,
         lineno=129,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _add(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _argmax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmax(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2408,
         lineno=130,
         tokens=41,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_add',
         body='def _add(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2409,
         lineno=135,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_argmax',
         body='def _argmax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmax(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2410,
         lineno=137,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ArgMax requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2411,
         lineno=144,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _argmin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmin(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2412,
         lineno=145,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_argmin',
         body='def _argmin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmin(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2413,
         lineno=147,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ArgMin requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2414,
         lineno=154,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _batchnorm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              "    if 'epsilon' in attrs:\n"
              "        epsilon = attrs['epsilon']\n"
              '    else:\n'
              '        epsilon = -1\n'
              '    outputs = graph.batchnorm(inputs[0], inputs[1], inputs[2], '
              'inputs[3], inputs[4], epsilon)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2415,
         lineno=155,
         tokens=90,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_batchnorm',
         body='def _batchnorm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              "    if 'epsilon' in attrs:\n"
              "        epsilon = attrs['epsilon']\n"
              '    else:\n'
              '        epsilon = -1\n'
              '    outputs = graph.batchnorm(inputs[0], inputs[1], inputs[2], '
              'inputs[3], inputs[4], epsilon)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2416,
         lineno=164,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _cast(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    #assert len(op.input) == 1, "Cast requires exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name == op.input[0]:\n'
              '    #            ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2417,
         lineno=165,
         tokens=100,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_cast',
         body='def _cast(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    #assert len(op.input) == 1, "Cast requires exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name == op.input[0]:\n'
              '    #            ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2418,
         lineno=167,
         tokens=17,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#assert len(op.input) == 1, "Cast requires exactly one input"')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2419,
         lineno=168,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#input_tensor = None')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2420,
         lineno=169,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#if op.input[0] in tensors:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2421,
         lineno=170,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    input_tensor = tensors[op.input[0]]')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2422,
         lineno=172,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    for init in initializer:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2423,
         lineno=173,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        if init.name == op.input[0]:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2424,
         lineno=174,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    to_type = onnx_datatype_tostring(attrs["to"])\n'
              '    outputs = graph.cast(input=inputs[0], datatype=to_type)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2425,
         lineno=174,
         tokens=88,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_cast',
         body='input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    to_type = onnx_datatype_tostring(attrs["to"])\n'
              '    outputs = graph.cast(input=inputs[0], datatype=to_type)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2426,
         lineno=174,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            input_tensor = graph.new_weight(')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2427,
         lineno=175,
         tokens=18,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2428,
         lineno=177,
         tokens=14,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2429,
         lineno=182,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _ceil(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Ceil requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.ceil(inputs[0])\n'
              '    return outputs\n'
              '\n'
              'def _concat(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    outputs = graph.concat(axis, inputs)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2430,
         lineno=183,
         tokens=63,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_ceil',
         body='def _ceil(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Ceil requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.ceil(inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2431,
         lineno=185,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Ceil requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2432,
         lineno=190,
         tokens=53,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_concat',
         body='def _concat(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    outputs = graph.concat(axis, inputs)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2433,
         lineno=196,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _constant(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: Currently do not support sparse value\n'
              '    assert "value" in attrs, "Do not support sparse value for '
              'Constant"\n'
              '    tensor = attrs["value"]\n'
              '    dims = list()\n'
              '    for dim in tensor.dims:\n'
              '        dims.append(dim)\n'
              '    weight_data = numpy_helper.to_array(tensor)\n'
              '    outputs = graph.new_weight(dims=tuple(dims), '
              'data=weight_data)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2434,
         lineno=197,
         tokens=118,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_constant',
         body='def _constant(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: Currently do not support sparse value\n'
              '    assert "value" in attrs, "Do not support sparse value for '
              'Constant"\n'
              '    tensor = attrs["value"]\n'
              '    dims = list()\n'
              '    for dim in tensor.dims:\n'
              '        dims.append(dim)\n'
              '    weight_data = numpy_helper.to_array(tensor)\n'
              '    outputs = graph.new_weight(dims=tuple(dims), '
              'data=weight_data)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2435,
         lineno=200,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: Currently do not support sparse value')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2436,
         lineno=201,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Do not support sparse value for Constant')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2437,
         lineno=209,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _conv2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "group" not in attrs:\n'
              '        group = 1 # default 1\n'
              '    else:\n'
              '        group = attrs["group"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    strides = attrs["strides"]\n'
              '    outputs = graph.conv2d(input=inputs[0], weight=inputs[1], '
              'strides=strides, padding=pads)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2438,
         lineno=210,
         tokens=112,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_conv2d',
         body='def _conv2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "group" not in attrs:\n'
              '        group = 1 # default 1\n'
              '    else:\n'
              '        group = attrs["group"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    strides = attrs["strides"]\n'
              '    outputs = graph.conv2d(input=inputs[0], weight=inputs[1], '
              'strides=strides, padding=pads)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2439,
         lineno=220,
         tokens=57,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if len(inputs) > 2:\n'
              '        dim = inputs[2].dim(0)\n'
              '        reshaped_bias = graph.reshape(inputs[2], (1, dim, 1, '
              '1))\n'
              '        outputs = graph.add(outputs, reshaped_bias)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2440,
         lineno=220,
         tokens=56,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_conv2d',
         body='    if len(inputs) > 2:\n'
              '        dim = inputs[2].dim(0)\n'
              '        reshaped_bias = graph.reshape(inputs[2], (1, dim, 1, '
              '1))\n'
              '        outputs = graph.add(outputs, reshaped_bias)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2441,
         lineno=225,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _div(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Div takes exactly two inputs"\n'
              '    outputs = graph.div(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _dropout(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Dropout takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    rate = attrs["ratio"]\n'
              '    outputs = graph.dropout(input=inputs[0], rate=rate)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2442,
         lineno=226,
         tokens=61,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_div',
         body='def _div(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Div takes exactly two inputs"\n'
              '    outputs = graph.div(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2443,
         lineno=228,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Div takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2444,
         lineno=232,
         tokens=76,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_dropout',
         body='def _dropout(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Dropout takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    rate = attrs["ratio"]\n'
              '    outputs = graph.dropout(input=inputs[0], rate=rate)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2445,
         lineno=234,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Dropout takes exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2446,
         lineno=239,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _equal(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Equal takes exactly two inputs"\n'
              '    outputs = graph.equal(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _exp(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Exp requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.exp(input=inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2447,
         lineno=240,
         tokens=61,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_equal',
         body='def _equal(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Equal takes exactly two inputs"\n'
              '    outputs = graph.equal(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2448,
         lineno=242,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Equal takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2449,
         lineno=246,
         tokens=64,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_exp',
         body='def _exp(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Exp requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.exp(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2450,
         lineno=248,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Exp requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2451,
         lineno=252,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _flatten(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Flatten requires exactly one '
              'input"\n'
              '    shape = []\n'
              '    shape.append(inputs[0].dim(0))\n'
              '    dim = 1\n'
              '    for i in range(1, inputs[0].nDim):\n'
              '        dim *= inputs[0].dim(i)\n'
              '    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2452,
         lineno=253,
         tokens=108,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_flatten',
         body='def _flatten(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Flatten requires exactly one '
              'input"\n'
              '    shape = []\n'
              '    shape.append(inputs[0].dim(0))\n'
              '    dim = 1\n'
              '    for i in range(1, inputs[0].nDim):\n'
              '        dim *= inputs[0].dim(i)\n'
              '    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2453,
         lineno=255,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Flatten requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2454,
         lineno=264,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _gemm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "transA" in attrs and attrs["transA"] == 1:\n'
              '        inputs[0] = graph.transpose(inputs[0], (1,0), '
              'shuffle=True)\n'
              '    if "transB" in attrs and attrs["transB"] == 1:\n'
              '        inputs[1] = graph.transpose(inputs[1], (1,0), '
              'shuffle=True)\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    if len(inputs) > 2:\n'
              '        outputs = graph.add(outputs, inputs[2])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2455,
         lineno=265,
         tokens=147,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_gemm',
         body='def _gemm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "transA" in attrs and attrs["transA"] == 1:\n'
              '        inputs[0] = graph.transpose(inputs[0], (1,0), '
              'shuffle=True)\n'
              '    if "transB" in attrs and attrs["transB"] == 1:\n'
              '        inputs[1] = graph.transpose(inputs[1], (1,0), '
              'shuffle=True)\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    if len(inputs) > 2:\n'
              '        outputs = graph.add(outputs, inputs[2])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2456,
         lineno=276,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _greater(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Greater takes exactly two '
              'inputs"\n'
              '    outputs = graph.greater(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _identity(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Identity takes exactly one '
              'input"\n'
              '    outputs = graph.dropout(inputs[0], 0.0)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2457,
         lineno=277,
         tokens=58,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_greater',
         body='def _greater(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Greater takes exactly two '
              'inputs"\n'
              '    outputs = graph.greater(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2458,
         lineno=279,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Greater takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2459,
         lineno=283,
         tokens=58,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_identity',
         body='def _identity(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Identity takes exactly one '
              'input"\n'
              '    outputs = graph.dropout(inputs[0], 0.0)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2460,
         lineno=285,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Identity takes exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2461,
         lineno=288,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _leakyrelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "LeakyRelu requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    alpha = attrs["alpha"]\n'
              '    outputs = graph.leakyrelu(input=inputs[0], alpha=alpha)\n'
              '    return outputs\n'
              '\n'
              'def _less(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Less takes exactly two inputs"\n'
              '    outputs = graph.less(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2462,
         lineno=289,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_leakyrelu',
         body='def _leakyrelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "LeakyRelu requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    alpha = attrs["alpha"]\n'
              '    outputs = graph.leakyrelu(input=inputs[0], alpha=alpha)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2463,
         lineno=291,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='LeakyRelu requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2464,
         lineno=297,
         tokens=57,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_less',
         body='def _less(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Less takes exactly two inputs"\n'
              '    outputs = graph.less(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2465,
         lineno=299,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Less takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2466,
         lineno=302,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _log(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Log requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name =')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2467,
         lineno=303,
         tokens=90,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_log',
         body='def _log(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Log requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name =')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2468,
         lineno=305,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Log requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2469,
         lineno=306,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#input_tensor = None')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2470,
         lineno=307,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#if op.input[0] in tensors:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2471,
         lineno=308,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    input_tensor = tensors[op.input[0]]')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2472,
         lineno=310,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    for init in initializer:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2473,
         lineno=311,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='= op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.log(input=inputs[0])\n'
              '    return outputs\n'
              '\n'
              'def _logical_not(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Not requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.logical_not(input=inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2474,
         lineno=311,
         tokens=78,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_log',
         body='= op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.log(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2475,
         lineno=311,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        if init.name == op.input[0]:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2476,
         lineno=312,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            input_tensor = graph.new_weight(')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2477,
         lineno=313,
         tokens=18,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2478,
         lineno=315,
         tokens=14,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2479,
         lineno=320,
         tokens=66,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_logical_not',
         body='def _logical_not(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Not requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.logical_not(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2480,
         lineno=322,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Not requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2481,
         lineno=326,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _matmul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "MatMul takes exactly two inputs"\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _min(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Min takes exactly two inputs"\n'
              '    outputs = graph.min(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2482,
         lineno=327,
         tokens=59,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_matmul',
         body='def _matmul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "MatMul takes exactly two inputs"\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2483,
         lineno=329,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='MatMul takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2484,
         lineno=333,
         tokens=57,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_min',
         body='def _min(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Min takes exactly two inputs"\n'
              '    outputs = graph.min(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2485,
         lineno=335,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Min takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2486,
         lineno=338,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _mul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Mul takes exactly two inputs"\n'
              '    outputs = graph.mul(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _pad(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: use the shape information from the ONNX runtime to\n'
              '    # calculate the exact output shape\n'
              '    # Currently treat pad as a no op\n'
              "    #assert sum(attrs['pads']) == 0\n"
              '    return inputs[0]\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2487,
         lineno=339,
         tokens=57,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_mul',
         body='def _mul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Mul takes exactly two inputs"\n'
              '    outputs = graph.mul(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2488,
         lineno=341,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Mul takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2489,
         lineno=345,
         tokens=86,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_pad',
         body='def _pad(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: use the shape information from the ONNX runtime to\n'
              '    # calculate the exact output shape\n'
              '    # Currently treat pad as a no op\n'
              "    #assert sum(attrs['pads']) == 0\n"
              '    return inputs[0]')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2490,
         lineno=348,
         tokens=13,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: use the shape information from the ONNX runtime to')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2491,
         lineno=349,
         tokens=6,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# calculate the exact output shape')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2492,
         lineno=350,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Currently treat pad as a no op')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2493,
         lineno=351,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="#assert sum(attrs['pads']) == 0")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2494,
         lineno=353,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _prelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "PRelu requires exactly two '
              'inputs"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.prelu(x=inputs[0], slope=inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _max(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Max takes exactly two inputs"\n'
              '    outputs = graph.max(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2495,
         lineno=354,
         tokens=73,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_prelu',
         body='def _prelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "PRelu requires exactly two '
              'inputs"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.prelu(x=inputs[0], slope=inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2496,
         lineno=356,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='PRelu requires exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2497,
         lineno=361,
         tokens=57,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_max',
         body='def _max(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Max takes exactly two inputs"\n'
              '    outputs = graph.max(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2498,
         lineno=363,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Max takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2499,
         lineno=366,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _maxpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "MaxPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.maxpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2500,
         lineno=367,
         tokens=113,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_maxpool2d',
         body='def _maxpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "MaxPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.maxpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2501,
         lineno=369,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='MaxPool2D requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2502,
         lineno=376,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _avgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "AvgPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2503,
         lineno=377,
         tokens=113,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_avgpool2d',
         body='def _avgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "AvgPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2504,
         lineno=379,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='AvgPool2D requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2505,
         lineno=386,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _globalavgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "GlobalAvgPool2D requires exactly '
              'one input"\n'
              '    dim = inputs[0].dim(inputs[0].nDim-1)\n'
              '    kernels = [dim, dim]\n'
              '    strides = [1, 1]\n'
              '    pads = "VALID"\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2506,
         lineno=387,
         tokens=118,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_globalavgpool2d',
         body='def _globalavgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "GlobalAvgPool2D requires exactly '
              'one input"\n'
              '    dim = inputs[0].dim(inputs[0].nDim-1)\n'
              '    kernels = [dim, dim]\n'
              '    strides = [1, 1]\n'
              '    pads = "VALID"\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2507,
         lineno=389,
         tokens=9,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='GlobalAvgPool2D requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2508,
         lineno=396,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reducemax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_max(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2509,
         lineno=397,
         tokens=119,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reducemax',
         body='def _reducemax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_max(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2510,
         lineno=399,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ReduceMax requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2511,
         lineno=408,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reducemean(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMean requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_mean(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2512,
         lineno=409,
         tokens=119,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reducemean',
         body='def _reducemean(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMean requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_mean(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2513,
         lineno=411,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ReduceMean requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2514,
         lineno=420,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reducemin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_min(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2515,
         lineno=421,
         tokens=119,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reducemin',
         body='def _reducemin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_min(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2516,
         lineno=423,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ReduceMin requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2517,
         lineno=432,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reduceprod(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceProd requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_prod(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2518,
         lineno=433,
         tokens=118,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reduceprod',
         body='def _reduceprod(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceProd requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_prod(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2519,
         lineno=435,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ReduceProd requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2520,
         lineno=444,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reducesum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceSum requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_sum(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2521,
         lineno=445,
         tokens=120,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reducesum',
         body='def _reducesum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceSum requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_sum(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2522,
         lineno=447,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ReduceSum requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2523,
         lineno=456,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _reshape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            shape = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    shape.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                shape_in_array = numpy_helper.to_array(data)\n'
              '                for dim in shape_in_array:\n'
              '                    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2524,
         lineno=457,
         tokens=132,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_reshape',
         body='def _reshape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            shape = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    shape.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                shape_in_array = numpy_helper.to_array(data)\n'
              '                for dim in shape_in_array:\n'
              '                    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2525,
         lineno=473,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 2, "Resize takes at least two '
              'inputs"\n'
              '    outputs = graph.resize(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              '# TensorFlow resize_nearest_neighbor\n'
              '# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/resize-nearest-neighbor\n'
              'def _resize_nearest_neighbor(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "ResizeNearestNeighbor takes '
              'exactly two inputs"\n'
              '    shape = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2526,
         lineno=474,
         tokens=58,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_resize',
         body='def _resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 2, "Resize takes at least two '
              'inputs"\n'
              '    outputs = graph.resize(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2527,
         lineno=476,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Resize takes at least two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2528,
         lineno=480,
         tokens=6,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TensorFlow resize_nearest_neighbor')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2529,
         lineno=481,
         tokens=22,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/resize-nearest-neighbor')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2530,
         lineno=482,
         tokens=136,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_resize_nearest_neighbor',
         body='def _resize_nearest_neighbor(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "ResizeNearestNeighbor takes '
              'exactly two inputs"\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            for dim in data.int64_data:\n'
              '                shape.append(dim)\n'
              '    assert len(shape) == 2, "ResizeNeareestNeighbor: new size '
              'cannot be statically inferred"\n'
              '    outputs = graph.resize_nearest_neighbor(input=inputs[0], '
              'new_height=shape[0], new_width=shape[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2531,
         lineno=484,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ResizeNearestNeighbor takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2532,
         lineno=486,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            for dim in data.int64_data:\n'
              '                shape.append(dim)\n'
              '    assert len(shape) == 2, "ResizeNeareestNeighbor: new size '
              'cannot be statically inferred"\n'
              '    outputs = graph.resize_nearest_neighbor(input=inputs[0], '
              'new_height=shape[0], new_width=shape[1])\n'
              '    return outputs\n'
              '\n'
              '# TensorFlow crop_and_resize\n'
              '# https://www.tensorf')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2533,
         lineno=490,
         tokens=12,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='ResizeNeareestNeighbor: new size cannot be statically inferred')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2534,
         lineno=494,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TensorFlow crop_and_resize')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2535,
         lineno=495,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='low.org/api_docs/cc/class/tensorflow/ops/crop-and-resize\n'
              'def _crop_and_resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "CropAndResize takes exactly four '
              'inputs"\n'
              '    outputs = graph.crop_and_resize(inputs[0], inputs[1], '
              'inputs[2], inputs[3])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2536,
         lineno=495,
         tokens=21,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/crop-and-resize')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2537,
         lineno=496,
         tokens=71,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_crop_and_resize',
         body='def _crop_and_resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "CropAndResize takes exactly four '
              'inputs"\n'
              '    outputs = graph.crop_and_resize(inputs[0], inputs[1], '
              'inputs[2], inputs[3])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2538,
         lineno=498,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='CropAndResize takes exactly four inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2539,
         lineno=501,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _relu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Relu requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.relu(input=inputs[0])\n'
              '    return outputs\n'
              '\n'
              'def _round(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Round requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.round(inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2540,
         lineno=502,
         tokens=65,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_relu',
         body='def _relu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Relu requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.relu(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2541,
         lineno=504,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Relu requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2542,
         lineno=509,
         tokens=62,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_round',
         body='def _round(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Round requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.round(inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2543,
         lineno=511,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Round requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2544,
         lineno=515,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _shape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs)== 1, "Shape requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.shape(inputs[0])\n'
              '    return outputs\n'
              '\n'
              'def _sigmoid(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sigmoid requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sigmoid(input=inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2545,
         lineno=516,
         tokens=61,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_shape',
         body='def _shape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs)== 1, "Shape requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.shape(inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2546,
         lineno=518,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Shape requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2547,
         lineno=523,
         tokens=65,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_sigmoid',
         body='def _sigmoid(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sigmoid requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sigmoid(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2548,
         lineno=525,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Sigmoid requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2549,
         lineno=529,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _size(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Size requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.size(inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2550,
         lineno=530,
         tokens=62,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_size',
         body='def _size(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Size requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.size(inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2551,
         lineno=532,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Size requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2552,
         lineno=536,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 3, "Slice requires at least 3 '
              'inputs"\n'
              '    assert len(inputs) <= 5, "Slice takes at most 5 inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    # replace INT_MAX with 999999\n'
              '    for i in range(len(start)):\n'
              '        start[i] = min(999999, start[i])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2553,
         lineno=537,
         tokens=134,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_slice',
         body='def _slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 3, "Slice requires at least 3 '
              'inputs"\n'
              '    assert len(inputs) <= 5, "Slice takes at most 5 inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    # replace INT_MAX with 999999\n'
              '    for i in range(len(start)):\n'
              '        start[i] = min(999999, start[i])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2554,
         lineno=539,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Slice requires at least 3 inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2555,
         lineno=540,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Slice takes at most 5 inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2556,
         lineno=542,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# replace INT_MAX with 999999')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2557,
         lineno=546,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# replace INT_MAX with 999999')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2558,
         lineno=547,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(len(end)):\n'
              '        end[i] = min(999999, end[i])\n'
              '    if len(op.input) > 3:\n'
              '        axes = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    else:\n'
              '        axes = None\n'
              '    if len(op.input) > 4:\n'
              '        steps = _get_list_from_initializer(initializer, '
              'op.input[4])\n'
              '    else:\n'
              '        steps = None\n'
              '    outputs = graph.slice(inputs[0], start, end, axes, steps)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2559,
         lineno=547,
         tokens=109,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_slice',
         body='    for i in range(len(end)):\n'
              '        end[i] = min(999999, end[i])\n'
              '    if len(op.input) > 3:\n'
              '        axes = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    else:\n'
              '        axes = None\n'
              '    if len(op.input) > 4:\n'
              '        steps = _get_list_from_initializer(initializer, '
              'op.input[4])\n'
              '    else:\n'
              '        steps = None\n'
              '    outputs = graph.slice(inputs[0], start, end, axes, steps)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2560,
         lineno=559,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _split(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Split requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    split_ints = attrs["split"]\n'
              '    if type(split_ints) is not list:\n'
              '        origin_dim = inputs[0].dim(axis)\n'
              '        split_list = [int(origin_dim / split_ints)] * '
              'split_ints\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    else:\n'
              '        split_list = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2561,
         lineno=560,
         tokens=129,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_split',
         body='def _split(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Split requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    split_ints = attrs["split"]\n'
              '    if type(split_ints) is not list:\n'
              '        origin_dim = inputs[0].dim(axis)\n'
              '        split_list = [int(origin_dim / split_ints)] * '
              'split_ints\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    else:\n'
              '        split_list = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2562,
         lineno=562,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Split requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2563,
         lineno=572,
         tokens=32,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for i in split_ints:\n'
              '            split_list.append(i)\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2564,
         lineno=572,
         tokens=31,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_split',
         body='        for i in split_ints:\n'
              '            split_list.append(i)\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2565,
         lineno=576,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _sqrt(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sqrt requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2566,
         lineno=577,
         tokens=91,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_sqrt',
         body='def _sqrt(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sqrt requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2567,
         lineno=579,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Sqrt requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2568,
         lineno=580,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#input_tensor = None')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2569,
         lineno=581,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#if op.input[0] in tensors:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2570,
         lineno=582,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    input_tensor = tensors[op.input[0]]')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2571,
         lineno=584,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    for init in initializer:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2572,
         lineno=585,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='== op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sqrt(input=inputs[0])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2573,
         lineno=585,
         tokens=78,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_sqrt',
         body='== op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sqrt(input=inputs[0])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2574,
         lineno=585,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        if init.name == op.input[0]:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2575,
         lineno=586,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            input_tensor = graph.new_weight(')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2576,
         lineno=587,
         tokens=18,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2577,
         lineno=589,
         tokens=14,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2578,
         lineno=593,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _squeeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Squeeze takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n'
              '    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.squeeze(input=inputs[0], axes=tuple(axes))\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2579,
         lineno=594,
         tokens=98,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_squeeze',
         body='def _squeeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Squeeze takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n'
              '    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.squeeze(input=inputs[0], axes=tuple(axes))\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2580,
         lineno=596,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Squeeze takes exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2581,
         lineno=604,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _strided_slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "StrideSlice takes exactly four '
              'inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    steps = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    begin_mask = attrs["begin_mask"]\n'
              '    end_mask = attrs["end_mask"]\n'
              '   ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2582,
         lineno=605,
         tokens=120,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_strided_slice',
         body='def _strided_slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "StrideSlice takes exactly four '
              'inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    steps = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    begin_mask = attrs["begin_mask"]\n'
              '    end_mask = attrs["end_mask"]\n'
              '   ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2583,
         lineno=607,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='StrideSlice takes exactly four inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2584,
         lineno=614,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' ellipsis_mask = attrs["ellipsis_mask"]\n'
              '    new_axis_mask = attrs["new_axis_mask"]\n'
              '    shrink_axis_mask = attrs["shrink_axis_mask"]\n'
              '    # TODO: support new_axis and shrink axis\n'
              '    assert new_axis_mask == 0, "Non zero new_axis_mask is not '
              'supported yet"\n'
              '    assert shrink_axis_mask == 0, "Non zero shrink_axis_mask is '
              'not supported yet"\n'
              '    # TODO: current assume that strided slice returns the '
              'original tensor\n'
              '    outputs = graph.slice(inputs[0], None, None, None, None)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2585,
         lineno=614,
         tokens=118,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_strided_slice',
         body=' ellipsis_mask = attrs["ellipsis_mask"]\n'
              '    new_axis_mask = attrs["new_axis_mask"]\n'
              '    shrink_axis_mask = attrs["shrink_axis_mask"]\n'
              '    # TODO: support new_axis and shrink axis\n'
              '    assert new_axis_mask == 0, "Non zero new_axis_mask is not '
              'supported yet"\n'
              '    assert shrink_axis_mask == 0, "Non zero shrink_axis_mask is '
              'not supported yet"\n'
              '    # TODO: current assume that strided slice returns the '
              'original tensor\n'
              '    outputs = graph.slice(inputs[0], None, None, None, None)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2586,
         lineno=617,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: support new_axis and shrink axis')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2587,
         lineno=618,
         tokens=9,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Non zero new_axis_mask is not supported yet')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2588,
         lineno=619,
         tokens=9,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Non zero shrink_axis_mask is not supported yet')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2589,
         lineno=620,
         tokens=13,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: current assume that strided slice returns the original '
              'tensor')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2590,
         lineno=623,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _sub(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Sub takes exactly two inputs"\n'
              '    outputs = graph.sub(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n'
              '\n'
              'def _sum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "TASO assumes Sum takes exactly '
              'two inputs. Submit a github issue when you see this."\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2591,
         lineno=624,
         tokens=61,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_sub',
         body='def _sub(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Sub takes exactly two inputs"\n'
              '    outputs = graph.sub(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2592,
         lineno=626,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Sub takes exactly two inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2593,
         lineno=630,
         tokens=70,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_sum',
         body='def _sum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "TASO assumes Sum takes exactly '
              'two inputs. Submit a github issue when you see this."\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2594,
         lineno=632,
         tokens=19,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='TASO assumes Sum takes exactly two inputs. Submit a github '
              'issue when you see this.')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2595,
         lineno=635,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _transpose(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Transpose requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    perm_ints = attrs["perm"]\n'
              '    perm = list()\n'
              '    for i in perm_ints:\n'
              '        perm.append(i)\n'
              '    outputs = graph.transpose(inputs[0], tuple(perm), '
              'shuffle=True)\n'
              '    return outputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2596,
         lineno=636,
         tokens=96,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_transpose',
         body='def _transpose(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Transpose requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    perm_ints = attrs["perm"]\n'
              '    perm = list()\n'
              '    for i in perm_ints:\n'
              '        perm.append(i)\n'
              '    outputs = graph.transpose(inputs[0], tuple(perm), '
              'shuffle=True)\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2597,
         lineno=638,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Transpose requires exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2598,
         lineno=646,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _unsqueeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Unsqueeze takes exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2599,
         lineno=647,
         tokens=89,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_unsqueeze',
         body='def _unsqueeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Unsqueeze takes exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if i')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2600,
         lineno=649,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Unsqueeze takes exactly one input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2601,
         lineno=650,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#input_tensor = None')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2602,
         lineno=651,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#if op.input[0] in tensors:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2603,
         lineno=652,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    input_tensor = tensors[op.input[0]]')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2604,
         lineno=654,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    for init in initializer:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2605,
         lineno=655,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='init.name == op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2606,
         lineno=655,
         tokens=113,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_unsqueeze',
         body='nit.name == op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n'
              '    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.unsqueeze(input=inputs[0], '
              'axes=tuple(axes))\n'
              '    return outputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2607,
         lineno=655,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#        if init.name == op.input[0]:')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2608,
         lineno=656,
         tokens=9,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            input_tensor = graph.new_weight(')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2609,
         lineno=657,
         tokens=18,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2610,
         lineno=659,
         tokens=14,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2611,
         lineno=663,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.unsqueeze(input=inputs[0], '
              'axes=tuple(axes))\n'
              '    return outputs\n'
              '\n'
              '# Add all supported operators\n'
              'xf_operators = dict()\n'
              "xf_operators['Add'] = _add\n"
              "xf_operators['ArgMax'] = _argmax\n"
              "xf_operators['ArgMin'] = _argmin\n"
              "xf_operators['BatchNormalization'] = _batchnorm\n"
              "xf_operators['Cast'] = _cast\n"
              "xf_operators['Ceil'] = _ceil\n"
              "xf_operators['Concat'] = _concat\n"
              'xf_operators["Constant"] = _constant\n'
              'xf_o')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2612,
         lineno=668,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Add all supported operators')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2613,
         lineno=678,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="perators['Conv'] = _conv2d\n"
              "xf_operators['Div'] = _div\n"
              "xf_operators['Dropout'] = _dropout\n"
              "xf_operators['Equal'] = _equal\n"
              "xf_operators['Exp'] = _exp\n"
              "xf_operators['Flatten'] = _flatten\n"
              "xf_operators['Gemm'] = _gemm\n"
              "xf_operators['Grea")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2614,
         lineno=685,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ter'] = _greater\n"
              "xf_operators['Identity'] = _identity\n"
              "xf_operators['LeakyRelu'] = _leakyrelu\n"
              "xf_operators['Less'] = _less\n"
              "xf_operators['Log'] = _log\n"
              "xf_operators['Pad'] = _pad\n"
              "xf_operators['PRelu'] = _prelu\n"
              "xf_operators['ReduceMa")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2615,
         lineno=692,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="x'] = _reducemax\n"
              "xf_operators['ReduceMean'] = _reducemean\n"
              "xf_operators['ReduceMin'] = _reducemin\n"
              "xf_operators['ReduceProd'] = _reduceprod\n"
              "xf_operators['ReduceSum'] = _reducesum\n"
              "xf_operators['Reshape'] = _reshape\n"
              "xf_operators['Rel")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2616,
         lineno=698,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="u'] = _relu\n"
              "xf_operators['Round'] = _round\n"
              "xf_operators['MatMul'] = _matmul\n"
              "xf_operators['Max'] = _max\n"
              "xf_operators['MaxPool'] = _maxpool2d\n"
              "xf_operators['Min'] = _min\n"
              "xf_operators['Mul'] = _mul\n"
              "xf_operators['Not'] = _logical_not\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2617,
         lineno=706,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="xf_operators['AveragePool'] = _avgpool2d\n"
              "xf_operators['GlobalAveragePool'] = _globalavgpool2d\n"
              "xf_operators['Shape'] = _shape\n"
              "xf_operators['Size'] = _size\n"
              "xf_operators['Slice'] = _slice\n"
              "xf_operators['Split'] = _split\n"
              "xf_operators['Sqrt'] = _sqrt\n"
              "xf_operators['Squeeze'] = _squeeze\n"
              "xf_operators['StridedSlice'] = _strided_slice\n"
              "xf_operators['Sub'] = _sub\n"
              "xf_operators['Sum'] = _sum\n"
              "xf_operators['Transpose'] = _transpose\n"
              "xf_operators['Unsqueeze'] = _unsqueeze\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2618,
         lineno=719,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def new_graph(print_measurements = False):\n'
              '    graph = core.PyGraph()\n'
              '    if print_measurements:\n'
              '        graph.print_measurements()\n'
              '    return graph\n'
              '\n'
              'def load_onnx(filename):\n'
              "    '''\n"
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              "    '''\n"
              '    graph = core.PyGraph()\n'
              '    model = onnx.load(filename)\n'
              '    tensors = dict()\n'
              '    for t in model.graph.input:\n'
              '        dims = list()\n'
              '        for d in t.type.tensor_type.shape.dim:\n'
              '            dims.append(d.dim_value)\n'
              '        weight_data = None\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2619,
         lineno=720,
         tokens=32,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='new_graph',
         body='def new_graph(print_measurements = False):\n'
              '    graph = core.PyGraph()\n'
              '    if print_measurements:\n'
              '        graph.print_measurements()\n'
              '    return graph')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2620,
         lineno=726,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='def load_onnx(filename):\n'
              "    '''\n"
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              "    '''\n"
              '    graph = core.PyGraph()\n'
              '    model = onnx.load(filename)\n'
              '    tensors = dict()\n'
              '    for t in model.graph.input:\n'
              '        dims = list()\n'
              '        for d in t.type.tensor_type.shape.dim:\n'
              '            dims.append(d.dim_value)\n'
              '        weight_data = None\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2621,
         lineno=727,
         tokens=37,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              '    ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2622,
         lineno=743,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for weight in model.graph.initializer:\n'
              '            if (weight.name == t.name):\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '        # We classify an input to be a pure input if we cannot '
              'find its weights\n'
              '        if weight_data is None:\n'
              '            tensors[t.name] = '
              'graph.new_input(dims=tuple(dims))\n'
              '        else:\n'
              '            tensors[t.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Add initializers not in the inputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2623,
         lineno=743,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='        for weight in model.graph.initializer:\n'
              '            if (weight.name == t.name):\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '        # We classify an input to be a pure input if we cannot '
              'find its weights\n'
              '        if weight_data is None:\n'
              '            tensors[t.name] = '
              'graph.new_input(dims=tuple(dims))\n'
              '        else:\n'
              '            tensors[t.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Add initializers not in the inputs\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2624,
         lineno=746,
         tokens=16,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# We classify an input to be a pure input if we cannot find its '
              'weights')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2625,
         lineno=752,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Add initializers not in the inputs')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2626,
         lineno=753,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for weight in model.graph.initializer:\n'
              '        if weight.name not in tensors:\n'
              '            if weight.dims:\n'
              '                dims = list(weight.dims)\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '                tensors[weight.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Reorder nodes to satisfy data dependencies\n'
              '    tensor_owner = dict()\n'
              '    name_to_op = dict()\n'
              '    idx = 0\n'
              '    for op in model.graph.node:\n'
              '        # Assign a name to the node if empty\n'
              '        if len(op.name) == 0:\n'
              "            op.name = op.op_type + '_' + str(idx)\n"
              '        idx += 1\n'
              '        name_to_op[op.name] = op\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2627,
         lineno=753,
         tokens=150,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='    for weight in model.graph.initializer:\n'
              '        if weight.name not in tensors:\n'
              '            if weight.dims:\n'
              '                dims = list(weight.dims)\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '                tensors[weight.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Reorder nodes to satisfy data dependencies\n'
              '    tensor_owner = dict()\n'
              '    name_to_op = dict()\n'
              '    idx = 0\n'
              '    for op in model.graph.node:\n'
              '        # Assign a name to the node if empty\n'
              '        if len(op.name) == 0:\n'
              "            op.name = op.op_type + '_' + str(idx)\n"
              '        idx += 1\n'
              '        name_to_op[op.name] = op\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2628,
         lineno=760,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Reorder nodes to satisfy data dependencies')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2629,
         lineno=765,
         tokens=9,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Assign a name to the node if empty')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2630,
         lineno=770,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for output in op.output:\n'
              '            tensor_owner[output] = op.name\n'
              '    out_edges = dict()\n'
              '    dependents = dict()\n'
              '    node_list = list()\n'
              '    for op in model.graph.node:\n'
              '        dependents[op.name] = 0\n'
              '        for input in op.input:\n'
              '            if input in tensor_owner:\n'
              '                dependents[op.name] += 1\n'
              '                input_node = tensor_owner[input]\n'
              '                if input_node not in out_edges:\n'
              '                    out_edges[input_node] = list()\n'
              '                out_edges[input_node].append(op.name)\n'
              '        if dependents[op.name] == 0:\n'
              '            node_list.append(op.name)\n'
              '    idx = 0\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2631,
         lineno=770,
         tokens=137,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='        for output in op.output:\n'
              '            tensor_owner[output] = op.name\n'
              '    out_edges = dict()\n'
              '    dependents = dict()\n'
              '    node_list = list()\n'
              '    for op in model.graph.node:\n'
              '        dependents[op.name] = 0\n'
              '        for input in op.input:\n'
              '            if input in tensor_owner:\n'
              '                dependents[op.name] += 1\n'
              '                input_node = tensor_owner[input]\n'
              '                if input_node not in out_edges:\n'
              '                    out_edges[input_node] = list()\n'
              '                out_edges[input_node].append(op.name)\n'
              '        if dependents[op.name] == 0:\n'
              '            node_list.append(op.name)\n'
              '    idx = 0\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2632,
         lineno=787,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    while idx < len(node_list):\n'
              '        opname = node_list[idx]\n'
              '        if opname in out_edges:\n'
              '            for e in out_edges[opname]:\n'
              '                dependents[e] -= 1\n'
              '                if dependents[e] == 0:\n'
              '                    node_list.append(e)\n'
              '        idx += 1\n'
              '    assert len(node_list) == len(model.graph.node), "Internal '
              'error when reording ONNX operators"\n'
              '\n'
              '    # Add nodes into TASO graph\n'
              '    cnt = 0\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2633,
         lineno=787,
         tokens=101,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='    while idx < len(node_list):\n'
              '        opname = node_list[idx]\n'
              '        if opname in out_edges:\n'
              '            for e in out_edges[opname]:\n'
              '                dependents[e] -= 1\n'
              '                if dependents[e] == 0:\n'
              '                    node_list.append(e)\n'
              '        idx += 1\n'
              '    assert len(node_list) == len(model.graph.node), "Internal '
              'error when reording ONNX operators"\n'
              '\n'
              '    # Add nodes into TASO graph\n'
              '    cnt = 0\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2634,
         lineno=795,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Internal error when reording ONNX operators')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2635,
         lineno=797,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Add nodes into TASO graph')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2636,
         lineno=799,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for opname in node_list:\n'
              '        op = name_to_op[opname]\n'
              '        #print(cnt, op.op_type, opname)\n'
              '        cnt += 1\n'
              '        if op.op_type in xf_operators:\n'
              '            try:\n'
              '                outputs = xf_operators[op.op_type](op, graph, '
              'tensors, model.graph.initializer)\n'
              '                if not isinstance(outputs, list):\n'
              '                    outputs = [outputs]\n'
              '                assert len(outputs) == len(op.output), "Number '
              'of output tensors mismatch"\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2637,
         lineno=799,
         tokens=100,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='    for opname in node_list:\n'
              '        op = name_to_op[opname]\n'
              '        #print(cnt, op.op_type, opname)\n'
              '        cnt += 1\n'
              '        if op.op_type in xf_operators:\n'
              '            try:\n'
              '                outputs = xf_operators[op.op_type](op, graph, '
              'tensors, model.graph.initializer)\n'
              '                if not isinstance(outputs, list):\n'
              '                    outputs = [outputs]\n'
              '                assert len(outputs) == len(op.output), "Number '
              'of output tensors mismatch"\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2638,
         lineno=801,
         tokens=10,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#print(cnt, op.op_type, opname)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2639,
         lineno=808,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Number of output tensors mismatch')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2640,
         lineno=809,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                for i in range(len(outputs)):\n'
              '                    assert _check_output(outputs[i], '
              'op.output[i])\n'
              '                    tensors[op.output[i]] = outputs[i]\n'
              '            except InputNotFoundError:\n'
              '                print("Cannot find input tensor for operator: '
              'name({}) type({}) (Skipped)".format(opname, op.op_type))\n'
              '                continue\n'
              '        else:\n'
              '            print("Found unsupported ONNX operator: {} '
              '(Skipped)".format(op.op_type))\n'
              '            continue\n'
              '    return graph\n'
              '\n'
              'input_weight_names = dict()\n'
              "input_weight_names['Add'] = ['input1', 'input2']\n"
              'i')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2641,
         lineno=809,
         tokens=94,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='load_onnx',
         body='                for i in range(len(outputs)):\n'
              '                    assert _check_output(outputs[i], '
              'op.output[i])\n'
              '                    tensors[op.output[i]] = outputs[i]\n'
              '            except InputNotFoundError:\n'
              '                print("Cannot find input tensor for operator: '
              'name({}) type({}) (Skipped)".format(opname, op.op_type))\n'
              '                continue\n'
              '        else:\n'
              '            print("Found unsupported ONNX operator: {} '
              '(Skipped)".format(op.op_type))\n'
              '            continue\n'
              '    return graph')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2642,
         lineno=813,
         tokens=17,
         depth=15,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Cannot find input tensor for operator: name({}) type({}) '
              '(Skipped)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2643,
         lineno=816,
         tokens=11,
         depth=13,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Found unsupported ONNX operator: {} (Skipped)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2644,
         lineno=822,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="nput_weight_names['AveragePool'] = ['input']\n"
              "input_weight_names['BatchNormalization'] = ['input', 'scale', "
              "'bias', 'mean', 'var']\n"
              "input_weight_names['Concat'] = ['input1', 'input2', 'input3', "
              "'input4', 'input5', 'input6']\n"
              "input_weight_names['Conv'] = ['input', 'weight', 'bias']\n"
              'input')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2645,
         lineno=826,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="_weight_names['MatMul'] = ['input', 'weight']\n"
              "input_weight_names['Mul'] = ['input1', 'input2']\n"
              "input_weight_names['Reshape'] = ['input', 'shape']\n"
              "input_weight_names['BroadcastAdd'] = ['input1', 'input2']\n"
              "input_weight_names['Transpose'] = ['input']\n"
              '\n'
              'operator_attrs = dict()\n'
              'operator_at')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2646,
         lineno=833,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="trs['Add'] = []\n"
              "operator_attrs['ArgMax'] = []\n"
              "operator_attrs['ArgMin'] = []\n"
              "operator_attrs['AveragePool'] = ['kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['BatchNormalization'] = ['epsilon'] # TODO: Add "
              'momentum\n'
              "operator_attrs['Cast'] = []\n"
              "operator_attrs['Ceil'] = []\n"
              "operator_attrs['Concat'] = ['axis']\n"
              "operator_attrs['Conv'] = ['group', 'kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['Div'] = []\n"
              "operator_attrs['Dropout'] = []\n"
              "operator_attrs['Gemm'] = []\n"
              "operator_attrs['Greater'] = []\n"
              "operator_attrs['Identity'] = []\n"
              "operator_attrs['Less'] = []\n"
              'operator_attr')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2647,
         lineno=837,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: Add momentum')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2648,
         lineno=848,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="s['Log'] = []\n"
              "operator_attrs['Pad'] = []\n"
              "operator_attrs['MatMul'] = []\n"
              "operator_attrs['MaxPool'] = ['kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['Mul'] = []\n"
              "operator_attrs['Shape'] = []\n"
              "operator_attrs['Sigmoid'] = []\n"
              "operator_attrs['Slice'] = []\n"
              "operator_attrs['Split'] = ['axis'")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2649,
         lineno=856,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=", 'split']\n"
              'operator_attrs["Squeeze"] = [\'axes\']\n'
              "operator_attrs['StridedSlice'] = []\n"
              "operator_attrs['Relu'] = []\n"
              "operator_attrs['Reshape'] = []\n"
              "operator_attrs['Tanh'] = []\n"
              "operator_attrs['Transpose'] = ['perm']\n"
              "operator_attrs['Unsqueeze'] = ['axes']\n"
              "operator_attrs['BroadcastAdd'] = []\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2650,
         lineno=865,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _input_tensor_name(graph, inedge, op):\n'
              "    intype = graph.get_operator_type(inedge['srcOp'])\n"
              '    if intype == "Input":\n'
              '        return "data"\n'
              '    elif intype == "Weight":\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        return "{}{}_{}".format(mytype, op[\'guid\'], '
              "input_weight_names[mytype][inedge['dstIdx']])\n"
              '    else:\n'
              "        return _output_tensor_name(graph, inedge['srcOp'], "
              "inedge['srcIdx'])\n"
              '\n'
              'def _output_tensor_name(graph, op, idx):\n'
              '    type = graph.get_operator_type(op)\n'
              '    return "{}{}_fwd{}".format(type, op[\'guid\'], idx)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2651,
         lineno=866,
         tokens=107,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_input_tensor_name',
         body='def _input_tensor_name(graph, inedge, op):\n'
              "    intype = graph.get_operator_type(inedge['srcOp'])\n"
              '    if intype == "Input":\n'
              '        return "data"\n'
              '    elif intype == "Weight":\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        return "{}{}_{}".format(mytype, op[\'guid\'], '
              "input_weight_names[mytype][inedge['dstIdx']])\n"
              '    else:\n'
              "        return _output_tensor_name(graph, inedge['srcOp'], "
              "inedge['srcIdx'])")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2652,
         lineno=876,
         tokens=36,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_output_tensor_name',
         body='def _output_tensor_name(graph, op, idx):\n'
              '    type = graph.get_operator_type(op)\n'
              '    return "{}{}_fwd{}".format(type, op[\'guid\'], idx)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2653,
         lineno=879,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def _add_node_attribute(graph, node, op, optype):\n'
              '    for key in operator_attrs[optype]:\n'
              '        val = graph.get_operator_attr(op, key)\n'
              '        attr = helper.make_attribute(key, val)\n'
              '        node.attribute.append(attr)\n'
              '\n'
              'def export_onnx(graph):\n'
              "    '''\n"
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              "    '''\n"
              '    opList = graph.get_operator_list()\n'
              '    graph_nodes = list()\n'
              '    graph_inputs = list()\n'
              '    graph_initializers = list()\n'
              '    graph_outputs = list()\n'
              '    output_guids = dict()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2654,
         lineno=880,
         tokens=50,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_add_node_attribute',
         body='def _add_node_attribute(graph, node, op, optype):\n'
              '    for key in operator_attrs[optype]:\n'
              '        val = graph.get_operator_attr(op, key)\n'
              '        attr = helper.make_attribute(key, val)\n'
              '        node.attribute.append(attr)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2655,
         lineno=886,
         tokens=146,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body='def export_onnx(graph):\n'
              "    '''\n"
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              "    '''\n"
              '    opList = graph.get_operator_list()\n'
              '    graph_nodes = list()\n'
              '    graph_inputs = list()\n'
              '    graph_initializers = list()\n'
              '    graph_outputs = list()\n'
              '    output_guids = dict()\n'
              '    for op in opList:\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        inedges = graph.get_input_edges(op)\n'
              '        #print("op.guid={} mytype={} '
              'inedges={}".format(op[\'guid\'], mytype, len(inedges)))\n'
              '        inputs = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2656,
         lineno=887,
         tokens=38,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              '    ')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2657,
         lineno=901,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for op in opList:\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        inedges = graph.get_input_edges(op)\n'
              '        #print("op.guid={} mytype={} '
              'inedges={}".format(op[\'guid\'], mytype, len(inedges)))\n'
              '        inputs = list()\n'
              '        for e in inedges:\n'
              "            intype = graph.get_operator_type(e['srcOp'])\n"
              '            inputs.append(_input_tensor_name(graph, e, op))\n'
              "            output_guids.pop((e['srcOp']['guid'], e['srcIdx']), "
              'None)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2658,
         lineno=904,
         tokens=25,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#print("op.guid={} mytype={} inedges={}".format(op[\'guid\'], '
              'mytype, len(inedges)))')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2659,
         lineno=906,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body='        for e in inedges:\n'
              "            intype = graph.get_operator_type(e['srcOp'])\n"
              '            inputs.append(_input_tensor_name(graph, e, op))\n'
              "            output_guids.pop((e['srcOp']['guid'], e['srcIdx']), "
              'None)\n'
              "            if intype == 'Input' or intype == 'Weight':\n"
              '                '
              'graph_inputs.append(helper.make_tensor_value_info(_input_tensor_name(graph, '
              'e, op),\n'
              '                                    TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx'])))\n")

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2660,
         lineno=910,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="            if intype == 'Input' or intype == 'Weight':\n"
              '                '
              'graph_inputs.append(helper.make_tensor_value_info(_input_tensor_name(graph, '
              'e, op),\n'
              '                                    TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx'])))\n"
              "            if intype == 'Weight':\n"
              '                '
              'graph_initializers.append(helper.make_tensor(_input_tensor_name(graph, '
              'e, op),\n'
              '                                          TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx']),\n"
              '                                          '
              "graph.get_weight_value(e['srcOp'])))\n"
              '\n'
              '        # add a second input for Reshape\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2661,
         lineno=913,
         tokens=63,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body="            if intype == 'Weight':\n"
              '                '
              'graph_initializers.append(helper.make_tensor(_input_tensor_name(graph, '
              'e, op),\n'
              '                                          TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx']),\n"
              '                                          '
              "graph.get_weight_value(e['srcOp'])))\n"
              '\n'
              '        # add a second input for Reshape\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2662,
         lineno=918,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# add a second input for Reshape')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2663,
         lineno=919,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="        if mytype == 'Reshape':\n"
              "            inputs.append('Reshape_attr{}'.format(op['guid']))\n"
              '            shape = graph.get_output_dims(op, 0)\n'
              '            '
              "graph_inputs.append(helper.make_tensor_value_info('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)]))\n'
              '            '
              "graph_initializers.append(helper.make_tensor('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)], shape))\n'
              '        outputs = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2664,
         lineno=919,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body="        if mytype == 'Reshape':\n"
              "            inputs.append('Reshape_attr{}'.format(op['guid']))\n"
              '            shape = graph.get_output_dims(op, 0)\n'
              '            '
              "graph_inputs.append(helper.make_tensor_value_info('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)]))\n'
              '            '
              "graph_initializers.append(helper.make_tensor('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)], shape))\n'
              '        outputs = list()\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2665,
         lineno=925,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for i in range(graph.get_num_outputs(op)):\n'
              '            outputs.append(_output_tensor_name(graph, op, i))\n'
              "            output_guids[(op['guid'], i)] = op\n"
              '        node = helper.make_node(mytype, inputs, outputs, '
              "'{}{}'.format(mytype, op['guid']))\n"
              '        _add_node_attribute(graph, node, op, mytype)\n'
              '        graph_nodes.append(node)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2666,
         lineno=925,
         tokens=81,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body='        for i in range(graph.get_num_outputs(op)):\n'
              '            outputs.append(_output_tensor_name(graph, op, i))\n'
              "            output_guids[(op['guid'], i)] = op\n"
              '        node = helper.make_node(mytype, inputs, outputs, '
              "'{}{}'.format(mytype, op['guid']))\n"
              '        _add_node_attribute(graph, node, op, mytype)\n'
              '        graph_nodes.append(node)\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2667,
         lineno=931,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for guid, idx in output_guids:\n'
              '        op = output_guids[(guid, idx)]\n'
              '        '
              'graph_outputs.append(helper.make_tensor_value_info(_output_tensor_name(graph, '
              'op, idx),\n'
              '                             TensorProto.FLOAT, '
              'graph.get_output_dims(op, idx)))\n'
              "    onnx_graph = helper.make_graph(graph_nodes, 'main', "
              'graph_inputs, graph_outputs, graph_initializers)\n'
              '    onnx_model = helper.make_model(onnx_graph, '
              "producer_name='TASO Optimized Model')\n"
              '    return onnx_model\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2668,
         lineno=931,
         tokens=104,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='export_onnx',
         body='    for guid, idx in output_guids:\n'
              '        op = output_guids[(guid, idx)]\n'
              '        '
              'graph_outputs.append(helper.make_tensor_value_info(_output_tensor_name(graph, '
              'op, idx),\n'
              '                             TensorProto.FLOAT, '
              'graph.get_output_dims(op, idx)))\n'
              "    onnx_graph = helper.make_graph(graph_nodes, 'main', "
              'graph_inputs, graph_outputs, graph_initializers)\n'
              '    onnx_model = helper.make_model(onnx_graph, '
              "producer_name='TASO Optimized Model')\n"
              '    return onnx_model')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2669,
         lineno=936,
         tokens=6,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='TASO Optimized Model')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2670,
         lineno=938,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def optimize(graph, alpha = 1.0, budget = 1000, print_subst = '
              'False):\n'
              '    return graph.optimize(alpha, budget, print_subst)\n'
              '\n'
              '# Current TASO Version\n'
              '__version__ = "0.1.0"\n')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2671,
         lineno=939,
         tokens=35,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='optimize',
         body='def optimize(graph, alpha = 1.0, budget = 1000, print_subst = '
              'False):\n'
              '    return graph.optimize(alpha, budget, print_subst)')

Fragment(document_cs='550608bbd393401fa2ff32604b743d5f4cd9571b2b4358a6bab5335563fd8f54',
         id=2672,
         lineno=942,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Current TASO Version')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2673,
         lineno=1,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EX')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2674,
         lineno=1,
         tokens=34,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/resnet50.h\n'
              '  Macros: _CPP_EXAMPLES_RESNET50_H_\n'
              '  Functions: resnet50 resnet_block\n')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2675,
         lineno=16,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='AMPLES_RESNET50_H_\n'
              '#define _CPP_EXAMPLES_RESNET50_H_\n'
              '\n'
              'TensorHandle resnet_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels) {\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAM')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2676,
         lineno=17,
         tokens=11,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_RESNET50_H_',
         body='#define _CPP_EXAMPLES_RESNET50_H_')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2677,
         lineno=19,
         tokens=304,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='TensorHandle resnet_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels) {\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAME, AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1], '
              '3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 4 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n'
              '  if (strideH > 1 || inp->dim[1] != 4 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 4 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return graph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2678,
         lineno=19,
         tokens=24,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='resnet_block(Graph* graph, const TensorHandle input, int '
              'strideH, int strideW, int outChannels)')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2679,
         lineno=22,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='E, AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1], '
              '3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 4 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2680,
         lineno=28,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (strideH > 1 || inp->dim[1] != 4 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 4 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return gr')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2681,
         lineno=32,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='aph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}\n'
              '\n'
              'Graph* resnet50(float alpha, int budget, bool printSubst = '
              'false) {\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { 1, 64, 56, 56 });\n'
              '  auto t = inp;\n'
              '  int stride = 1;\n')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2682,
         lineno=35,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet50',
         body='resnet50(float alpha, int budget, bool printSubst = false)')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2683,
         lineno=40,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 3; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 64);\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 4; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 128);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 6; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 256);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n')

Fragment(document_cs='56469cc16d06dcde5d149a5ca5ee1dead4cdd44fc5d2cd4d12b9c9d2e979b5e8',
         id=2684,
         lineno=54,
         tokens=58,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 3; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 512);\n'
              '    stride = 1;\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2685,
         lineno=1,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIE')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2686,
         lineno=1,
         tokens=375,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/ops.cc\n'
              '  Methods: Edge::Edge Graph::Graph Graph::add_edge '
              'Graph::check_correctness Graph::export_op Graph::export_to_file '
              'Graph::find_op_or_fail Graph::get_input_dims '
              'Graph::get_input_edges Graph::get_num_outputs '
              'Graph::get_operator_float_attr Graph::get_operator_int_attr '
              'Graph::get_operator_list Graph::get_operator_type '
              'Graph::get_output_dims Graph::get_split_lens '
              'Graph::get_weight_value Graph::has_edge Graph::has_loop '
              'Graph::hash Graph::new_input Graph::new_weight '
              'Graph::num_in_edges Graph::num_out_edges Graph::print '
              'Graph::print_costs Graph::print_measurements Graph::remove_edge '
              'Graph::remove_node Graph::replace_node Graph::run '
              'Graph::total_cost Op::Op Op::op_to_string OpBase::OpBase '
              'OpBase::get_float_parameter OpBase::get_input_parameter '
              'OpBase::get_int_parameter SrcEdge::SrcEdge\n'
              '  Variables: candidates deps_string export_fs hashmap inList '
              'it2 opBaseList opIt opList outList padH permVec ret shape '
              'timer_fs todos weightList weightOps xfers\n'
              '  Using: std taso\n'
              '  Usages: Edge Graph INVALID_OP NO_SPLIT Op OpBase SrcEdge '
              'add_edge check_correctness create_conv_batch create_conv_mul '
              'create_conv_relu create_enlarge_merge_convs '
              'create_merge_group_convs endl export_op export_to_file '
              'find_op_or_fail get_float_parameter get_input_dims '
              'get_input_edges get_input_parameter get_int_parameter '
              'get_num_outputs get_operator_float_attr get_operator_int_attr '
              'get_operator_list get_operator_type get_output_dims '
              'get_split_lens get_weight_value has_edge has_loop hash '
              'load_graph_xfer_from_pb_file new_input new_weight num_in_edges '
              'num_out_edges op_to_string optimize preprocess_weights print '
              'print_costs print_measurements remove_edge remove_node '
              'replace_node run string to_string total_cost\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2687,
         lineno=11,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='S OR CONDITIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/substitution.h"\n'
              '#include <iostream>\n'
              '#include <fstream>\n'
              'using namespace std;\n'
              'using namespace taso;\n'
              '\n'
              'const Op Op::INVALID_OP = Op();\n'
              'const SplitInfo SplitInfo::NO_SPLIT = SplitInfo();\n'
              '\n'
              '/*\n'
              'bool Op::operator==(const Op& b)\n'
              '{\n'
              '  if (guid != b.guid) return false;\n'
              '  return (ptr == b.ptr);\n'
              '}\n'
              '\n'
              'bool Op::operator<(const Op& b)\n'
              '{\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2688,
         lineno=20,
         tokens=4,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='std',
         body='using namespace std;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2689,
         lineno=21,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2690,
         lineno=35,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (guid != b.guid) return guid < b.guid;\n'
              '  return ptr < b.ptr;\n'
              '}\n'
              '*/\n'
              '\n'
              'Op::Op(void)\n'
              '{\n'
              '  guid = GUID_INVALID;\n'
              '  ptr = NULL;\n'
              '}\n'
              '\n'
              'Edge::Edge(void)\n'
              ': srcOp(Op::INVALID_OP), dstOp(Op::INVALID_OP), srcIdx(-1), '
              'dstIdx(-1)\n'
              '{}\n'
              '\n'
              'Edge::E')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2691,
         lineno=40,
         tokens=18,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Op::Op',
         body='Op::Op(void)\n{\n  guid = GUID_INVALID;\n  ptr = NULL;\n}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2692,
         lineno=46,
         tokens=31,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Edge::Edge',
         body='Edge::Edge(void)\n'
              ': srcOp(Op::INVALID_OP), dstOp(Op::INVALID_OP), srcIdx(-1), '
              'dstIdx(-1)\n'
              '{}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2693,
         lineno=50,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dge(Op _srcOp, Op _dstOp, int _srcIdx, int _dstIdx)\n'
              ': srcOp(_srcOp), dstOp(_dstOp), srcIdx(_srcIdx), '
              'dstIdx(_dstIdx)\n'
              '{}\n'
              '\n'
              'SrcEdge::SrcEdge(int _idx, Op _op)\n'
              ': idx(_idx), op(_op)\n'
              '{}\n'
              '\n'
              '/*\n'
              'bool Tensor::operator==(const Tensor& b)\n'
              '{\n'
              '  if (numDim != b.numDim) return false;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2694,
         lineno=50,
         tokens=49,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Edge::Edge',
         body='Edge::Edge(Op _srcOp, Op _dstOp, int _srcIdx, int _dstIdx)\n'
              ': srcOp(_srcOp), dstOp(_dstOp), srcIdx(_srcIdx), '
              'dstIdx(_dstIdx)\n'
              '{}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2695,
         lineno=54,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SrcEdge::SrcEdge',
         body='SrcEdge::SrcEdge(int _idx, Op _op)\n: idx(_idx), op(_op)\n{}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2696,
         lineno=62,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numDim; i++)\n'
              '    if (dim[i] != b.dim[i]) return false;\n'
              '  if (idx != b.idx) return false;\n'
              '  if (op.guid != b.op.guid) return false;\n'
              '  return true;\n'
              '}\n'
              '*/\n'
              '\n'
              'OpBase::OpBase(Model* _model, OpType _type)\n'
              ': numInputs(0), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  // Assume only constant operator can take no inputs\n'
              '  assert(type == OP_CONSTANT_POOL);\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2697,
         lineno=70,
         tokens=115,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(Model* _model, OpType _type)\n'
              ': numInputs(0), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  // Assume only constant operator can take no inputs\n'
              '  assert(type == OP_CONSTANT_POOL);\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2698,
         lineno=77,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'OpBase::OpBase(const Tensor& _input,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(1), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2699,
         lineno=82,
         tokens=112,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(const Tensor& _input,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(1), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2700,
         lineno=89,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(2), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2701,
         lineno=94,
         tokens=132,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(2), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2702,
         lineno=103,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(3), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2703,
         lineno=108,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(3), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2704,
         lineno=119,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               const Tensor& _input3,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(5), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  inputs[3] = _input3;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2705,
         lineno=124,
         tokens=168,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               const Tensor& _input3,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(5), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  inputs[3] = _input3;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2706,
         lineno=135,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              '\n'
              'OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               const Tensor& _input3,\n'
              '               ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2707,
         lineno=143,
         tokens=186,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(const Tensor& _input0,\n'
              '               const Tensor& _input1,\n'
              '               const Tensor& _input2,\n'
              '               const Tensor& _input3,\n'
              '               const Tensor& _input4,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(5), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  inputs[3] = _input3;\n'
              '  inputs[4] = _input4;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2708,
         lineno=147,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='const Tensor& _input4,\n'
              '               Model* _model, OpType _type)\n'
              ': numInputs(5), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  inputs[0] = _input0;\n'
              '  inputs[1] = _input1;\n'
              '  inputs[2] = _input2;\n'
              '  inputs[3] = _input3;\n'
              '  inputs[4] = _input4;\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2709,
         lineno=158,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'OpBase::OpBase(int n, Tensor* _inputs, Model* _model, OpType '
              '_type)\n'
              ': numInputs(n), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  assert(n <= MAX_NUM_INPUTS);\n'
              '  for (int i = 0; i < n; i++)\n'
              '    inputs[i] = _inputs[i];\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2710,
         lineno=163,
         tokens=136,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::OpBase',
         body='OpBase::OpBase(int n, Tensor* _inputs, Model* _model, OpType '
              '_type)\n'
              ': numInputs(n), model(_model), type(_type), runtime(0.0f)\n'
              '{\n'
              '  assert(n <= MAX_NUM_INPUTS);\n'
              '  for (int i = 0; i < n; i++)\n'
              '    inputs[i] = _inputs[i];\n'
              '  for (int i = 0; i < MAX_NUM_OUTPUTS; i++) {\n'
              '    outputs[i].numDim = 0;\n'
              '    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2711,
         lineno=171,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < MAX_DIM; j++)\n'
              '      outputs[i].dim[j] = 0;\n'
              '  }\n'
              '}\n'
              '\n'
              'bool OpBase::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_OP_TYPE:\n'
              '      *value = (int) type;\n'
              '      return true;\n'
              '    case PM_NUM_INPUTS:\n'
              '      *value = numInputs;\n'
              '      return true;\n'
              '    case PM_NUM_OUTPUTS:\n'
              '      *value = numOutputs;\n'
              '      return true;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '}\n'
              '\n'
              'bool OpBase::get_float_parameter(PMParamet')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2712,
         lineno=176,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::get_int_parameter',
         body='bool OpBase::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_OP_TYPE:\n'
              '      *value = (int) type;\n'
              '      return true;\n'
              '    case PM_NUM_INPUTS:\n'
              '      *value = numInputs;\n'
              '      return true;\n'
              '    case PM_NUM_OUTPUTS:\n'
              '      *value = numOutputs;\n'
              '      return true;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2713,
         lineno=193,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='er para, float* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '}\n'
              '\n'
              'bool OpBase::get_input_parameter(TNParameter tnp, DIMParameter '
              'dim, int* value)\n'
              '{\n'
              '  int inputIdx = 0, dimIdx = 0;\n'
              '  switch (tnp) {\n'
              '    case IN_5:\n'
              '      inputIdx++;\n'
              '    case IN_4:\n'
              '      inputIdx++;\n'
              '    case IN_3:\n'
              '      inputIdx++;\n'
              '    case IN_2:\n'
              '      inputIdx++;\n'
              '    case IN_1:\n'
              '      inputIdx++;\n'
              '    case IN_0:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2714,
         lineno=193,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::get_float_parameter',
         body='bool OpBase::get_float_parameter(PMParameter para, float* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2715,
         lineno=201,
         tokens=231,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpBase::get_input_parameter',
         body='bool OpBase::get_input_parameter(TNParameter tnp, DIMParameter '
              'dim, int* value)\n'
              '{\n'
              '  int inputIdx = 0, dimIdx = 0;\n'
              '  switch (tnp) {\n'
              '    case IN_5:\n'
              '      inputIdx++;\n'
              '    case IN_4:\n'
              '      inputIdx++;\n'
              '    case IN_3:\n'
              '      inputIdx++;\n'
              '    case IN_2:\n'
              '      inputIdx++;\n'
              '    case IN_1:\n'
              '      inputIdx++;\n'
              '    case IN_0:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '  if (inputIdx >= numInputs) return false;\n'
              '  switch (dim) {\n'
              '    case DIM_3:\n'
              '      dimIdx ++;\n'
              '    case DIM_2:\n'
              '      dimIdx ++;\n'
              '    case DIM_1:\n'
              '      dimIdx ++;\n'
              '    case DIM_0:\n'
              '      break;\n'
              '    case DIM_ND:\n'
              '      *value = inputs[inputIdx].numDim;\n'
              '      return true;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '  if (dimIdx >= inputs[inputIdx].numDim) return false;\n'
              '  *value = inputs[inputIdx].dim[dimIdx];\n'
              '  return true;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2716,
         lineno=220,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (inputIdx >= numInputs) return false;\n'
              '  switch (dim) {\n'
              '    case DIM_3:\n'
              '      dimIdx ++;\n'
              '    case DIM_2:\n'
              '      dimIdx ++;\n'
              '    case DIM_1:\n'
              '      dimIdx ++;\n'
              '    case DIM_0:\n'
              '      break;\n'
              '    case DIM_ND:\n'
              '      *value = inputs[inputIdx].numDim;\n'
              '      return true;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2717,
         lineno=236,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (dimIdx >= inputs[inputIdx].numDim) return false;\n'
              '  *value = inputs[inputIdx].dim[dimIdx];\n'
              '  return true;\n'
              '}\n'
              '\n'
              'std::string Op::op_to_string(const OpBase* ptr)\n'
              '{\n'
              '  switch (ptr->type) {\n'
              '    case OP_INPUT:\n'
              '      return "Input";\n'
              '    case OP_WEIGHT:\n'
              '      return "Weight";\n'
              '    case OP_ANY:\n'
              '      return "Any";\n'
              '    case OP_CON')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2718,
         lineno=241,
         tokens=676,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Op::op_to_string',
         body='std::string Op::op_to_string(const OpBase* ptr)\n'
              '{\n'
              '  switch (ptr->type) {\n'
              '    case OP_INPUT:\n'
              '      return "Input";\n'
              '    case OP_WEIGHT:\n'
              '      return "Weight";\n'
              '    case OP_ANY:\n'
              '      return "Any";\n'
              '    case OP_CONV2D:\n'
              '      return "Conv";\n'
              '    case OP_DROPOUT:\n'
              '      return "Dropout";\n'
              '    case OP_LINEAR:\n'
              '      return "Linear";\n'
              '    case OP_POOL2D_MAX:\n'
              '      return "MaxPool";\n'
              '    case OP_POOL2D_AVG:\n'
              '      return "AveragePool";\n'
              '    case OP_RELU:\n'
              '      return "Relu";\n'
              '    case OP_SIGMOID:\n'
              '      return "Sigmoid";\n'
              '    case OP_TANH:\n'
              '      return "TanH";\n'
              '    case OP_BATCHNORM:\n'
              '      return "Batchnorm";\n'
              '    case OP_CONCAT:\n'
              '      return "Concat";\n'
              '    case OP_SPLIT:\n'
              '      return "Split";\n'
              '    case OP_RESHAPE:\n'
              '      return "Reshape";\n'
              '    case OP_TRANSPOSE:\n'
              '      return "Transpose";\n'
              '    case OP_EW_ADD:\n'
              '      return "Add";\n'
              '    case OP_EW_MUL:\n'
              '      return "Mul";\n'
              '    case OP_MATMUL:\n'
              '      return "MatMul";\n'
              '    case OP_MUL:\n'
              '      return "Mul";\n'
              '    case OP_ENLARGE:\n'
              '      return "Enlarge";\n'
              '    case OP_SQUEEZE:\n'
              '      return "Squeeze";\n'
              '    case OP_UNSQUEEZE:\n'
              '      return "Unsqueeze";\n'
              '    case OP_EW_SUB:\n'
              '      return "Sub";\n'
              '    case OP_EW_DIV:\n'
              '      return "Div";\n'
              '    case OP_EW_EQUAL:\n'
              '      return "Equal";\n'
              '    case OP_EW_GREATER:\n'
              '      return "Greater";\n'
              '    case OP_EW_LESS:\n'
              '      return "Less";\n'
              '    case OP_EW_MAX:\n'
              '      return "Max";\n'
              '    case OP_EW_MIN:\n'
              '      return "Min";\n'
              '    case OP_REDUCE_ARGMAX:\n'
              '      return "ArgMax";\n'
              '    case OP_REDUCE_ARGMIN:\n'
              '      return "ArgMin";\n'
              '    case OP_REDUCE_MAX:\n'
              '      return "ReduceMax";\n'
              '    case OP_REDUCE_MEAN:\n'
              '      return "ReduceMean";\n'
              '    case OP_REDUCE_MIN:\n'
              '      return "ReduceMin";\n'
              '    case OP_REDUCE_PROD:\n'
              '      return "ReduceProd";\n'
              '    case OP_REDUCE_SUM:\n'
              '      return "ReduceSum";\n'
              '    case OP_PAD:\n'
              '      return "Pad";\n'
              '    case OP_SHAPE:\n'
              '      return "Shape";\n'
              '    case OP_SIZE:\n'
              '      return "Size";\n'
              '    case OP_TOPK:\n'
              '      return "TopK";\n'
              '    case OP_WHERE:\n'
              '      return "Where";\n'
              '    case OP_CEIL:\n'
              '      return "Ceil";\n'
              '    case OP_CAST:\n'
              '      return "Cast";\n'
              '    case OP_EXP:\n'
              '      return "Exp";\n'
              '    case OP_ROUND:\n'
              '      return "Round";\n'
              '    case OP_LOG:\n'
              '      return "Log";\n'
              '    case OP_LOGICAL_NOT:\n'
              '      return "Not";\n'
              '    case OP_SQRT:\n'
              '      return "Sqrt";\n'
              '    case OP_LEAKYRELU:\n'
              '      return "LeakyRelu";\n'
              '    case OP_SLICE:\n'
              '      return "Slice";\n'
              '    case OP_RESIZE:\n'
              '      return "Resize";\n'
              '    default:\n'
              '      return "Unknown_" + std::to_string(ptr->type);\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2719,
         lineno=250,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='V2D:\n'
              '      return "Conv";\n'
              '    case OP_DROPOUT:\n'
              '      return "Dropout";\n'
              '    case OP_LINEAR:\n'
              '      return "Linear";\n'
              '    case OP_POOL2D_MAX:\n'
              '      return "MaxPool";\n'
              '    case OP_POOL2D_AVG:\n'
              '      return "AveragePool";\n'
              '    case OP_RELU:\n'
              '      return "Relu";\n'
              '    case OP_SIGMOID:\n'
              '      return "Sigmoid";\n'
              '    case OP_TANH:\n'
              '      re')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2720,
         lineno=265,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='turn "TanH";\n'
              '    case OP_BATCHNORM:\n'
              '      return "Batchnorm";\n'
              '    case OP_CONCAT:\n'
              '      return "Concat";\n'
              '    case OP_SPLIT:\n'
              '      return "Split";\n'
              '    case OP_RESHAPE:\n'
              '      return "Reshape";\n'
              '    case OP_TRANSPOSE:\n'
              '      return "Transpose";\n'
              '    case OP_EW_ADD:\n'
              '      return "Add";\n'
              '    case OP_EW_MUL:\n'
              '      return "Mul";\n'
              '   ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2721,
         lineno=280,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' case OP_MATMUL:\n'
              '      return "MatMul";\n'
              '    case OP_MUL:\n'
              '      return "Mul";\n'
              '    case OP_ENLARGE:\n'
              '      return "Enlarge";\n'
              '    case OP_SQUEEZE:\n'
              '      return "Squeeze";\n'
              '    case OP_UNSQUEEZE:\n'
              '      return "Unsqueeze";\n'
              '    case OP_EW_SUB:\n'
              '      return "Sub";\n'
              '    case OP_EW_DIV:\n'
              '      return "Div";\n'
              '    case OP_EW_EQUAL:\n'
              '      ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2722,
         lineno=295,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='return "Equal";\n'
              '    case OP_EW_GREATER:\n'
              '      return "Greater";\n'
              '    case OP_EW_LESS:\n'
              '      return "Less";\n'
              '    case OP_EW_MAX:\n'
              '      return "Max";\n'
              '    case OP_EW_MIN:\n'
              '      return "Min";\n'
              '    case OP_REDUCE_ARGMAX:\n'
              '      return "ArgMax";\n'
              '    case OP_REDUCE_ARGMIN:\n'
              '      return "ArgMin";\n'
              '    case OP_REDUCE_MAX:\n'
              '      return ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2723,
         lineno=309,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='"ReduceMax";\n'
              '    case OP_REDUCE_MEAN:\n'
              '      return "ReduceMean";\n'
              '    case OP_REDUCE_MIN:\n'
              '      return "ReduceMin";\n'
              '    case OP_REDUCE_PROD:\n'
              '      return "ReduceProd";\n'
              '    case OP_REDUCE_SUM:\n'
              '      return "ReduceSum";\n'
              '    case OP_PAD:\n'
              '      return "Pad";\n'
              '    case OP_SHAPE:\n'
              '      return "Shape";\n'
              '    case OP_SIZE:\n'
              '      retur')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2724,
         lineno=323,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='n "Size";\n'
              '    case OP_TOPK:\n'
              '      return "TopK";\n'
              '    case OP_WHERE:\n'
              '      return "Where";\n'
              '    case OP_CEIL:\n'
              '      return "Ceil";\n'
              '    case OP_CAST:\n'
              '      return "Cast";\n'
              '    case OP_EXP:\n'
              '      return "Exp";\n'
              '    case OP_ROUND:\n'
              '      return "Round";\n'
              '    case OP_LOG:\n'
              '      return "Log";\n'
              '    case OP_LOGICAL_NOT:\n'
              '      return "No')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2725,
         lineno=339,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t";\n'
              '    case OP_SQRT:\n'
              '      return "Sqrt";\n'
              '    case OP_LEAKYRELU:\n'
              '      return "LeakyRelu";\n'
              '    case OP_SLICE:\n'
              '      return "Slice";\n'
              '    case OP_RESIZE:\n'
              '      return "Resize";\n'
              '    default:\n'
              '      return "Unknown_" + std::to_string(ptr->type);\n'
              '  }\n'
              '}\n'
              '\n'
              'static Model* model_singleton = NULL;\n'
              '\n'
              'Graph::Graph()\n'
              ': totalCost(-1.0f)\n'
              '{\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2726,
         lineno=355,
         tokens=90,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::Graph',
         body='Graph::Graph()\n'
              ': totalCost(-1.0f)\n'
              '{\n'
              '  if (model_singleton == NULL) {\n'
              '    model_singleton = new Model();\n'
              '  }\n'
              '  model = model_singleton;\n'
              '  model->print_cost = false;\n'
              '  //size_t inputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  //checkCUDA(cudaMalloc(&input.ptr, inputSize));\n'
              '  //printf("Initialize a graph\\n");\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2727,
         lineno=358,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (model_singleton == NULL) {\n'
              '    model_singleton = new Model();\n'
              '  }\n'
              '  model = model_singleton;\n'
              '  model->print_cost = false;\n'
              '  //size_t inputSize = sizeof(DATATYPE) * n * c * h * w;\n'
              '  //checkCUDA(cudaMalloc(&input.ptr, inputSize));\n'
              '  //printf("Initialize a graph\\n");\n'
              '}\n'
              '\n'
              'void Graph::print_measurements(void)\n'
              '{\n'
              '  model->print_')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2728,
         lineno=368,
         tokens=18,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::print_measurements',
         body='void Graph::print_measurements(void)\n'
              '{\n'
              '  model->print_cost = true;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2729,
         lineno=370,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='cost = true;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::new_input(int ndim, const int* dims)\n'
              '{\n'
              '  TensorHandle t = new Tensor(ndim, dims, GUID_INPUT);\n'
              '  t = input_wrapper(t);\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::new_weight(int ndim, const int* dims, const '
              'DATATYPE* weight_initial)\n'
              '{\n'
              '  DATATYPE* weight_ptr = NULL;\n'
              '  int total_size = sizeof(DATATYPE);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2730,
         lineno=373,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::new_input',
         body='TensorHandle Graph::new_input(int ndim, const int* dims)\n'
              '{\n'
              '  TensorHandle t = new Tensor(ndim, dims, GUID_INPUT);\n'
              '  t = input_wrapper(t);\n'
              '  return t;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2731,
         lineno=380,
         tokens=113,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::new_weight',
         body='TensorHandle Graph::new_weight(int ndim, const int* dims, const '
              'DATATYPE* weight_initial)\n'
              '{\n'
              '  DATATYPE* weight_ptr = NULL;\n'
              '  int total_size = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    total_size *= dims[i];\n'
              '  weight_ptr = (DATATYPE*) model->allocate_memory(total_size, '
              'weight_initial);\n'
              '  TensorHandle t = new Tensor(ndim, dims, GUID_WEIGHT, '
              'weight_ptr);\n'
              '  t = weight_wrapper(t);\n'
              '  return t;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2732,
         lineno=384,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    total_size *= dims[i];\n'
              '  weight_ptr = (DATATYPE*) model->allocate_memory(total_size, '
              'weight_initial);\n'
              '  TensorHandle t = new Tensor(ndim, dims, GUID_WEIGHT, '
              'weight_ptr);\n'
              '  t = weight_wrapper(t);\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::new_weight(const Tensor& weight)\n'
              '{\n'
              '  TensorHandle t = new Tensor(we')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2733,
         lineno=392,
         tokens=91,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::new_weight',
         body='TensorHandle Graph::new_weight(const Tensor& weight)\n'
              '{\n'
              '  TensorHandle t = new Tensor(weight);\n'
              '  t->op.guid = GUID_WEIGHT;\n'
              '  t->op.ptr = NULL;\n'
              '  t->idx = 0;\n'
              '  t->data_ptr = (DATATYPE*) model->allocate_memory(\n'
              '      weight.volume() * sizeof(DATATYPE), (DATATYPE*) '
              'weight.data_ptr);\n'
              '  t = weight_wrapper(t);\n'
              '  return t;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2734,
         lineno=394,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ight);\n'
              '  t->op.guid = GUID_WEIGHT;\n'
              '  t->op.ptr = NULL;\n'
              '  t->idx = 0;\n'
              '  t->data_ptr = (DATATYPE*) model->allocate_memory(\n'
              '      weight.volume() * sizeof(DATATYPE), (DATATYPE*) '
              'weight.data_ptr);\n'
              '  t = weight_wrapper(t);\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Graph* Graph::optimize(float alpha, int budget, bool '
              'print_subst)\n'
              '{\n'
              '  std::vector<GraphXfer*> xfers;\n'
              '  for (int i = 1; i < 3; i++)\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2735,
         lineno=406,
         tokens=11,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='xfers',
         body='std::vector<GraphXfer*> xfers;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2736,
         lineno=408,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < 2; j++) {\n'
              '      PaddingMode pad_mode = (j == 0) ? PD_MODE_SAME : '
              'PD_MODE_VALID;\n'
              '      xfers.push_back(GraphXfer::create_conv_relu(model, i, i, '
              'pad_mode));\n'
              '      xfers.push_back(GraphXfer::create_conv_batch(model, i, i, '
              'pad_mode));\n'
              '      xfers.push_ba')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2737,
         lineno=412,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ck(GraphXfer::create_conv_mul(model, i, i, pad_mode));\n'
              '      //xfers.push_back(GraphXfer::create_conv_add(model, i, i, '
              'pad_mode));\n'
              '    }\n'
              '  xfers.push_back(GraphXfer::create_enlarge_merge_convs(model, '
              'AC_MODE_NONE));\n'
              '  xfers.push_back(GraphXfer::create_enlarge_merge_convs(mo')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2738,
         lineno=416,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='del, AC_MODE_RELU));\n'
              '  xfers.push_back(GraphXfer::create_merge_group_convs(model, 1, '
              '1, AC_MODE_NONE));\n'
              '  xfers.push_back(GraphXfer::create_merge_group_convs(model, 1, '
              '1, AC_MODE_RELU));\n'
              '  xfers.push_back(GraphXfer::create_merge_group_convs(model, 2, '
              '2, AC_MODE_NONE));\n'
              '  xf')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2739,
         lineno=420,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ers.push_back(GraphXfer::create_merge_group_convs(model, 2, 2, '
              'AC_MODE_RELU));\n'
              '\n'
              '  //xfers.push_back(create_avg_pool_conv(model));\n'
              '  //xfers.push_back(create_two_pools(model));\n'
              '  //xfers.push_back(create_merge_seperable_convs(model));\n'
              '  char* taso_path = getenv("TASO_HOME");\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2740,
         lineno=426,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (taso_path == NULL) {\n'
              '    fprintf(stderr, "Error: environment variable TASO_HOME is '
              'not set. "\n'
              '           "Please set TASO_HOME to the home directory of TASO '
              'source code.\\n");\n'
              '    assert(false);\n'
              '  }\n'
              '  std::string graph_subst_file = std::string(taso_path) + '
              '"/graph_subst.pb";\n'
              '  GraphXfer::load_graph_xfer_from_pb_file(mode')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2741,
         lineno=432,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l, xfers, graph_subst_file);\n'
              '  //xfers.push_back(create_fuse_conv_batch_xfer(model));\n'
              '  //xfers.push_back(create_fuse_conv_relu_xfer(model));\n'
              '  //xfers.push_back(create_merge_conv_xfer(model));\n'
              '  //xfers.push_back(create_exclusive_concat_xfer(model));\n'
              '  //xfers.push_back(create_enlarge_conv_xfer(model));\n'
              '  //xfers.push_back(cr')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2742,
         lineno=438,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eate_resnet_merge_xfer(model));\n'
              '\n'
              '  std::priority_queue<Graph*, std::vector<Graph*>, '
              'GraphCompare> candidates;\n'
              '  std::set<size_t> hashmap;\n'
              '  candidates.push(this);\n'
              '  hashmap.insert(hash());\n'
              '  Graph *bestGraph = this;\n'
              '  float bestCost = total_cost();\n'
              '  //printf("MetaFlow Cost = %.4lfms\\n", bestCost);\n'
              '  //printf("Input graph: en')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2743,
         lineno=440,
         tokens=19,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='candidates',
         body='std::priority_queue<Graph*, std::vector<Graph*>, GraphCompare> '
              'candidates;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2744,
         lineno=441,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='hashmap',
         body='std::set<size_t> hashmap;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2745,
         lineno=447,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d-to-end execution time =\\n"\n'
              '  //       "%.8lf ms (average of 100 runs)\\n", run());\n'
              '  print_costs();\n'
              '\n'
              '  int counter = 0;\n'
              '  int maxNumOps = inEdges.size();\n'
              '  //long long start_time = microsecond_timer();\n'
              '  ofstream timer_fs;\n'
              '  timer_fs.open("timer.txt");\n'
              '  printf("\\n        ===== Start Cost-Based Backtracking Search '
              '=====\\n");\n'
              '  while (!candidates.empty()) {\n'
              '    Graph *subGraph = candidates.top();\n'
              '    candidates.pop();\n'
              '    if (subGraph->total_cost() < bestCost) {\n'
              '      delete bestGraph;\n'
              '      bestCost = subGraph->total_cost();\n'
              '      bestGraph = subGraph;\n'
              '    }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2746,
         lineno=454,
         tokens=4,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='timer_fs',
         body='ofstream timer_fs;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2747,
         lineno=465,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (counter > budget) {\n'
              '      // TODO: free all remaining candidates when budget '
              'exhausted \n'
              '      break;\n'
              '    }\n'
              '    if (counter % 1 == 0) {\n'
              '      printf("        [%d] cost = %.4lf bestCost = %.4lf '
              'candidates.size() = %zu\\n", counter, subGraph->total_cost(), '
              'bestCost, candidates.size());\n'
              '      //timer_fs << microsecond_timer() - start_time << ", " << '
              'bestCost << std::endl;\n'
              '    }\n'
              '    counter ++;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2748,
         lineno=474,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (size_t i = 0; i < xfers.size(); i++) {\n'
              '      //for (size_t j = 0; j < xfers[i]->srcOps.size(); j++) {\n'
              '      //  printf("srcOps[%zu]: type(%d)\\n", j, '
              'xfers[i]->srcOps[j]->type);\n'
              '      //}\n'
              '      //for (size_t j =')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2749,
         lineno=478,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' 0; j < xfers[i]->dstOps.size(); j++) {\n'
              '      //  printf("dstOps[%zu]: type(%d)\\n", j, '
              'xfers[i]->dstOps[j]->type);\n'
              '      //}\n'
              '      xfers[i]->run(0, subGraph, candidates, hashmap, bestCost '
              '* alpha, 2 * maxNumOps);\n'
              '    }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2750,
         lineno=483,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (bestGraph != subGraph) {\n'
              '      delete subGraph;\n'
              '    }\n'
              '  }\n'
              '  bestGraph = bestGraph->preprocess_weights();\n'
              '  printf("        ===== Finish Cost-Based Backtracking Search '
              '=====\\n\\n");\n'
              '  //printf("bestCost = %.4lf\\n", bestGraph->total_cost());\n'
              '  //printf("Optimized graph: end-to-end execution time =\\n");\n'
              '  //printf("%.8lf ms (average of 100 runs)\\n", '
              'bestGraph->run());\n'
              '  bestGraph->print_costs();\n'
              '  if (print_subst) {\n'
              '    printf("        ===== Applied Substitutions =====\\n\\n");\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2751,
         lineno=495,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (size_t i = 0; i < bestGraph->subst_history.size(); '
              'i++) {\n'
              '      printf("        substitution[%03zu]: \\n", i);\n'
              '      Graph::GraphSubst subst = bestGraph->subst_history[i];\n'
              '      for (size_t j = 0; j < subst.srcOps.size(); j++) {\n'
              '        printf("            srcOp[%zu]: %s\\n", j, '
              'subst.srcOps[j].to_string().c_str());\n'
              '      }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2752,
         lineno=501,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (size_t j = 0; j < subst.dstOps.size(); j++) {\n'
              '        printf("            dstOp[%zu]: %s\\n", j, '
              'subst.dstOps[j].to_string().c_str());\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return bestGraph;\n'
              '}\n'
              '\n'
              'Graph* Graph::preprocess_weights(void)\n'
              '{\n'
              '  Graph* newGraph = new Graph();\n'
              '  newGraph->subst_history = subst_history;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator opIt;\n'
              '  // Step 1: clone the input graph\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2753,
         lineno=513,
         tokens=22,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opIt',
         body='std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator opIt;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2754,
         lineno=515,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (opIt = inEdges.begin(); opIt != inEdges.end(); opIt++)\n'
              '  {\n'
              '    const std::set<Edge, EdgeCompare>& list = opIt->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '    for (it = list.begin(); it != list.end(); it++)\n'
              '      newGraph->add_edge(it->srcOp, it->dstOp, it->srcIdx, '
              'it->dstIdx);\n'
              '  }\n'
              '  // Step 2: iteratively process the weights\n'
              '  while (true) {\n'
              '    bool change = false;\n'
              '    for (opIt = newGraph->inEdges.begin(); opIt != '
              'newGraph->inEdges.end(); opIt++) {\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2755,
         lineno=526,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (opIt->first.ptr->type == OP_INPUT || '
              'opIt->first.ptr->type == OP_WEIGHT) {\n'
              '        continue;\n'
              '      } else if (opIt->first.ptr->type == OP_TRANSPOSE) {\n'
              '        // NOTE: We skip OP_TRANSPOSE here because the kernel '
              'implementation\n'
              '        // of OP_TRANSPOSE is currently a no-op, and therefore '
              'the correct\n'
              '        // output wi')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2756,
         lineno=531,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ll not be returned. To fix this, we should\n'
              '        // implement the cuBLAS transpose operator and/or add '
              'an OP_GEMM\n'
              '        // to automatically transpose inputs.\n'
              '        continue;\n'
              '      }\n'
              '      bool allWeights = true;\n'
              '      const std::set<Edge, EdgeCompare>& list = opIt->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2757,
         lineno=539,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (it = list.begin(); it != list.end(); it++)\n'
              '        if (it->srcOp.ptr->type != OP_WEIGHT) {\n'
              '          allWeights = false;\n'
              '          break;\n'
              '        }\n'
              '      if (allWeights) {\n'
              '        // Preprocess weights\n'
              '        // Currently assume the op has single output\n'
              '        Op op = opIt->first;\n'
              '        //assert(op.ptr->numOutputs == 1);\n'
              '        // map and execute the operator to get the output '
              'weights\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2758,
         lineno=550,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (it = list.begin(); it != list.end(); it++) {\n'
              '          assert(it->srcOp.ptr->outputs[it->srcIdx].data_ptr != '
              'NULL);\n'
              '          '
              'assert(op.ptr->inputs[it->dstIdx].has_same_shape_stride_split(\n'
              '              it->srcOp.ptr->outputs[it->srcIdx]));\n'
              '          op.ptr->inputs[it->dstIdx].data_ptr =\n'
              '              it->srcOp.ptr->outputs[it->srcIdx].da')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2759,
         lineno=555,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ta_ptr;\n'
              '        }\n'
              '        op.ptr->map();\n'
              '        op.ptr->forward(true/*block*/);\n'
              '        TensorHandle tensor = '
              'newGraph->new_weight(op.ptr->outputs[0]);\n'
              '        newGraph->replace_node(op, tensor->op);\n'
              '        op.ptr->unmap();\n'
              '        newGraph->remove_node(op);\n'
              '        change = true;\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              "    // Stop if we didn't make any change\n"
              '    if (!change)\n'
              '      break;\n'
              '  }\n'
              '  // Remove isolated nodes\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::vector<Op> weightList;\n'
              '  std::set<Op, OpCompare> weightOps;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2760,
         lineno=572,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='todos',
         body='std::map<Op, int, OpCompare> todos;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2761,
         lineno=573,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='weightList',
         body='std::vector<Op> weightList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2762,
         lineno=574,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='weightOps',
         body='std::set<Op, OpCompare> weightOps;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2763,
         lineno=575,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (opIt = newGraph->inEdges.begin(); opIt != '
              'newGraph->inEdges.end(); opIt++) {\n'
              '    int cnt = 0;\n'
              '    const std::set<Edge, EdgeCompare>& inList = opIt->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid != GUID_WEIGHT) cnt ++;\n'
              '    }\n'
              '    todos[opIt->first] = cnt;\n'
              '    if (cnt == 0)\n'
              '      weightList.push_back(opIt->first);\n'
              '  }\n'
              '  size_t i = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2764,
         lineno=578,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2765,
         lineno=587,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (i < weightList.size()) {\n'
              '    Op op = weightList[i++];\n'
              '    weightOps.insert(op);\n'
              '    const std::set<Edge, EdgeCompare>& outList = '
              'newGraph->outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        weightList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  while (true) {\n'
              '    bool change = false;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2766,
         lineno=591,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2767,
         lineno=601,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (opIt = newGraph->inEdges.begin(); opIt != '
              'newGraph->inEdges.end(); opIt++) {\n'
              '      Op op = opIt->first;\n'
              '      if (weightOps.find(op) != weightOps.end() && '
              'newGraph->num_out_edges(op) == 0) {\n'
              '        newGraph->remove_node(op);\n'
              '        change = true;\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '    if (!change)\n'
              '      break;\n'
              '  }\n'
              '  return newGraph;\n'
              '}\n'
              '\n'
              'Op Graph::find_op_or_fail(size_t guid)\n'
              '{\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2768,
         lineno=615,
         tokens=75,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::find_op_or_fail',
         body='Op Graph::find_op_or_fail(size_t guid)\n'
              '{\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++)\n'
              '    if (it->first.guid == guid) {\n'
              '      return it->first;\n'
              '    }\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2769,
         lineno=618,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++)\n'
              '    if (it->first.guid == guid) {\n'
              '      return it->first;\n'
              '    }\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'int Graph::get_operator_list(Op* ops, size_t maxNumOps)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2770,
         lineno=625,
         tokens=365,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_operator_list',
         body='int Graph::get_operator_list(Op* ops, size_t maxNumOps)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '\n'
              '  size_t cnt = 0, i = 0;\n'
              '  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    if ((op.ptr->type == OP_INPUT) || (op.ptr->type == '
              'OP_WEIGHT)) {\n'
              '    } else {\n'
              '      ops[cnt++] = op;\n'
              '    }\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  assert(opList.size() == inEdges.size());\n'
              '  return cnt;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2771,
         lineno=627,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='todos',
         body='std::map<Op, int, OpCompare> todos;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2772,
         lineno=629,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opList',
         body='std::vector<Op> opList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2773,
         lineno=630,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '\n'
              '  size_t cnt = 0, i = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2774,
         lineno=633,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2775,
         lineno=643,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    if ((op.ptr->type == OP_INPUT) || (op.ptr->type == '
              'OP_WEIGHT)) {\n'
              '    } else {\n'
              '      ops[cnt++] = op;\n'
              '    }\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2776,
         lineno=650,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2777,
         lineno=653,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  assert(opList.size() == inEdges.size());\n'
              '  return cnt;\n'
              '}\n'
              '\n'
              'int Graph::get_input_edges(Edge* ops, size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(inEdges.find(op) != inEdges.end());\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '  size_t cnt = inList.size();\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2778,
         lineno=662,
         tokens=184,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_input_edges',
         body='int Graph::get_input_edges(Edge* ops, size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(inEdges.find(op) != inEdges.end());\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '  size_t cnt = inList.size();\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '  for (it2 = inList.begin(); it2 != inList.end(); it2 ++) {\n'
              '    Edge e = *it2;\n'
              '    ops[it2->dstIdx] = e;\n'
              '  }\n'
              '  // We manually delete the second input for pool2d\n'
              '  if (op.ptr->type == OP_POOL2D_MAX || op.ptr->type == '
              'OP_POOL2D_AVG) {\n'
              '    assert(cnt == 2 || cnt == 1);\n'
              '    cnt = 1;\n'
              '  }\n'
              '  return cnt;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2779,
         lineno=668,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2780,
         lineno=669,
         tokens=55,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it2 = inList.begin(); it2 != inList.end(); it2 ++) {\n'
              '    Edge e = *it2;\n'
              '    ops[it2->dstIdx] = e;\n'
              '  }\n'
              '  // We manually delete the second input for pool2d\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2781,
         lineno=674,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (op.ptr->type == OP_POOL2D_MAX || op.ptr->type == '
              'OP_POOL2D_AVG) {\n'
              '    assert(cnt == 2 || cnt == 1);\n'
              '    cnt = 1;\n'
              '  }\n'
              '  return cnt;\n'
              '}\n'
              '\n'
              'OpType Graph::get_operator_type(size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  return op.ptr->type;\n'
              '}\n'
              '\n'
              'int Graph::get_operator_int_attr(size_t guid, PMParameter '
              'attr)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  int ret;\n'
              '  assert(op.ptr->get_int_parameter(attr, &ret));\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'float Graph::get_op')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2782,
         lineno=681,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_operator_type',
         body='OpType Graph::get_operator_type(size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  return op.ptr->type;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2783,
         lineno=687,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_operator_int_attr',
         body='int Graph::get_operator_int_attr(size_t guid, PMParameter '
              'attr)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  int ret;\n'
              '  assert(op.ptr->get_int_parameter(attr, &ret));\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2784,
         lineno=690,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='int ret;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2785,
         lineno=695,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='erator_float_attr(size_t guid, PMParameter attr)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  float ret;\n'
              '  assert(op.ptr->get_float_parameter(attr, &ret));\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'int Graph::get_num_outputs(size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  return op.ptr->numOutputs;\n'
              '}\n'
              '\n'
              'int Graph::get_input_dims(size_t guid, int* dims, int idx)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->numInputs > idx);\n'
              '  int ndim = op.ptr->inputs[idx].numDim;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2786,
         lineno=695,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_operator_float_attr',
         body='float Graph::get_operator_float_attr(size_t guid, PMParameter '
              'attr)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  float ret;\n'
              '  assert(op.ptr->get_float_parameter(attr, &ret));\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2787,
         lineno=698,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='float ret;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2788,
         lineno=703,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_num_outputs',
         body='int Graph::get_num_outputs(size_t guid)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  return op.ptr->numOutputs;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2789,
         lineno=709,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_input_dims',
         body='int Graph::get_input_dims(size_t guid, int* dims, int idx)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->numInputs > idx);\n'
              '  int ndim = op.ptr->inputs[idx].numDim;\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    dims[i] = op.ptr->inputs[idx].dim[i];\n'
              '  return ndim;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2790,
         lineno=714,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    dims[i] = op.ptr->inputs[idx].dim[i];\n'
              '  return ndim;\n'
              '}\n'
              '\n'
              'void Graph::get_weight_value(size_t guid, DATATYPE* value)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  // Assume weight op has one input and one output\n'
              '  assert(op.ptr->type == OP_WEIGHT);\n'
              '  assert(op.ptr->numInputs == 1);\n'
              '  assert(op.ptr->numOutputs == 1);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2791,
         lineno=719,
         tokens=122,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_weight_value',
         body='void Graph::get_weight_value(size_t guid, DATATYPE* value)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  // Assume weight op has one input and one output\n'
              '  assert(op.ptr->type == OP_WEIGHT);\n'
              '  assert(op.ptr->numInputs == 1);\n'
              '  assert(op.ptr->numOutputs == 1);\n'
              '  assert(op.ptr->inputs[0].data_ptr != NULL);\n'
              '  model->copy_memory(value, (DATATYPE*) '
              'op.ptr->inputs[0].data_ptr,\n'
              '      sizeof(DATATYPE) * op.ptr->inputs[0].volume());\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2792,
         lineno=726,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  assert(op.ptr->inputs[0].data_ptr != NULL);\n'
              '  model->copy_memory(value, (DATATYPE*) '
              'op.ptr->inputs[0].data_ptr,\n'
              '      sizeof(DATATYPE) * op.ptr->inputs[0].volume());\n'
              '}\n'
              '\n'
              'int Graph::get_output_dims(size_t guid, int* dims, int idx)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->numOutputs > idx);\n'
              '  int ndim = op.ptr->outputs[idx].numDim;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2793,
         lineno=731,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_output_dims',
         body='int Graph::get_output_dims(size_t guid, int* dims, int idx)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->numOutputs > idx);\n'
              '  int ndim = op.ptr->outputs[idx].numDim;\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    dims[i] = op.ptr->outputs[idx].dim[i];\n'
              '  return ndim;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2794,
         lineno=736,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    dims[i] = op.ptr->outputs[idx].dim[i];\n'
              '  return ndim;\n'
              '}\n'
              '\n'
              'int Graph::get_split_lens(size_t guid, int* lens)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->type == OP_SPLIT);\n'
              '  Split* split = (Split*) op.ptr;\n'
              '  int numSplits = split->numOutputs;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2795,
         lineno=741,
         tokens=97,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::get_split_lens',
         body='int Graph::get_split_lens(size_t guid, int* lens)\n'
              '{\n'
              '  Op op = find_op_or_fail(guid);\n'
              '  assert(op.ptr->type == OP_SPLIT);\n'
              '  Split* split = (Split*) op.ptr;\n'
              '  int numSplits = split->numOutputs;\n'
              '  for (int i = 0; i < numSplits; i++)\n'
              '    lens[i] = split->outputs[i].dim[split->axis];\n'
              '  return numSplits;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2796,
         lineno=747,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numSplits; i++)\n'
              '    lens[i] = split->outputs[i].dim[split->axis];\n'
              '  return numSplits;\n'
              '}\n'
              '\n'
              'void Graph::add_edge(Op srcOp, Op dstOp, int srcIdx, int '
              'dstIdx)\n'
              '{\n'
              '  assert(dstOp.guid != OP_WEIGHT);\n'
              '  if (inEdges.find(dstOp) == inEdges.end()) {\n'
              '    inEdges[dstOp];\n'
              '  }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2797,
         lineno=752,
         tokens=113,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::add_edge',
         body='void Graph::add_edge(Op srcOp, Op dstOp, int srcIdx, int '
              'dstIdx)\n'
              '{\n'
              '  assert(dstOp.guid != OP_WEIGHT);\n'
              '  if (inEdges.find(dstOp) == inEdges.end()) {\n'
              '    inEdges[dstOp];\n'
              '  }\n'
              '  if (outEdges.find(srcOp) == outEdges.end()) {\n'
              '    outEdges[srcOp];\n'
              '  }\n'
              '  Edge e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '  inEdges[dstOp].insert(e);\n'
              '  outEdges[srcOp].insert(e);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2798,
         lineno=758,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (outEdges.find(srcOp) == outEdges.end()) {\n'
              '    outEdges[srcOp];\n'
              '  }\n'
              '  Edge e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '  inEdges[dstOp].insert(e);\n'
              '  outEdges[srcOp].insert(e);\n'
              '}\n'
              '\n'
              'void Graph::remove_edge(Edge e)\n'
              '{\n'
              '  assert(outEdges[e.srcOp].find(e) != '
              'outEdges[e.srcOp].end());\n'
              '  assert(inEdges[e.dstOp].find(e) != inEdges[e.dstOp].end());\n'
              '  assert(ou')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2799,
         lineno=766,
         tokens=81,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::remove_edge',
         body='void Graph::remove_edge(Edge e)\n'
              '{\n'
              '  assert(outEdges[e.srcOp].find(e) != '
              'outEdges[e.srcOp].end());\n'
              '  assert(inEdges[e.dstOp].find(e) != inEdges[e.dstOp].end());\n'
              '  assert(outEdges[e.srcOp].erase(e) == 1);\n'
              '  assert(inEdges[e.dstOp].erase(e) == 1);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2800,
         lineno=770,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tEdges[e.srcOp].erase(e) == 1);\n'
              '  assert(inEdges[e.dstOp].erase(e) == 1);\n'
              '}\n'
              '\n'
              'void Graph::replace_node(Op oldOp, Op newOp)\n'
              '{\n'
              '  //if (outEdges.find(newOp) == outEdges.end()) {\n'
              '  //  outEdges[newOp];\n'
              '  //}\n'
              '  const std::set<Edge, EdgeCompare>& outSet = outEdges[oldOp];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  std::vector<Edge> outList;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2801,
         lineno=774,
         tokens=193,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::replace_node',
         body='void Graph::replace_node(Op oldOp, Op newOp)\n'
              '{\n'
              '  //if (outEdges.find(newOp) == outEdges.end()) {\n'
              '  //  outEdges[newOp];\n'
              '  //}\n'
              '  const std::set<Edge, EdgeCompare>& outSet = outEdges[oldOp];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  std::vector<Edge> outList;\n'
              '  for (it = outSet.begin(); it != outSet.end(); it++)\n'
              '    outList.push_back(*it);\n'
              '  for (size_t i = 0; i < outList.size(); i++) {\n'
              '    Edge e = outList[i];\n'
              '    remove_edge(e);\n'
              '    // update input ptr of dstOp to newOp.output\n'
              '    e.dstOp.ptr->inputs[e.dstIdx] = '
              'newOp.ptr->outputs[e.srcIdx];\n'
              '    add_edge(newOp, e.dstOp, e.srcIdx, e.dstIdx);\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2802,
         lineno=781,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='outList',
         body='std::vector<Edge> outList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2803,
         lineno=782,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = outSet.begin(); it != outSet.end(); it++)\n'
              '    outList.push_back(*it);\n'
              '  for (size_t i = 0; i < outList.size(); i++) {\n'
              '    Edge e = outList[i];\n'
              '    remove_edge(e);\n'
              '    // update input ptr of dstOp to newOp.output\n'
              '    e.dstOp.ptr->inputs[e.dstIdx] = '
              'newOp.ptr->outputs[e.srcIdx];\n'
              '    add_edge(newOp, e.dstOp, e.srcIdx, e.dstIdx);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Graph::remove_nod')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2804,
         lineno=793,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e(Op oldOp)\n'
              '{\n'
              '  assert(outEdges.find(oldOp) != outEdges.end());\n'
              '  // Asser that it is safe to remove the node\n'
              '  assert(outEdges[oldOp].size() == 0);\n'
              '  const std::set<Edge, EdgeCompare>& inSet = inEdges[oldOp];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  std::vector<Edge> inList;\n'
              '  for (it = inSet.begin(); it != inSet.end(); it++)\n'
              '    inList.push_back(*it);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2805,
         lineno=793,
         tokens=170,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::remove_node',
         body='void Graph::remove_node(Op oldOp)\n'
              '{\n'
              '  assert(outEdges.find(oldOp) != outEdges.end());\n'
              '  // Asser that it is safe to remove the node\n'
              '  assert(outEdges[oldOp].size() == 0);\n'
              '  const std::set<Edge, EdgeCompare>& inSet = inEdges[oldOp];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  std::vector<Edge> inList;\n'
              '  for (it = inSet.begin(); it != inSet.end(); it++)\n'
              '    inList.push_back(*it);\n'
              '  for (size_t i = 0; i < inList.size(); i++)\n'
              '    remove_edge(inList[i]);\n'
              '  assert(inEdges[oldOp].size() == 0);\n'
              '  inEdges.erase(oldOp);\n'
              '  outEdges.erase(oldOp);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2806,
         lineno=800,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inList',
         body='std::vector<Edge> inList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2807,
         lineno=803,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < inList.size(); i++)\n'
              '    remove_edge(inList[i]);\n'
              '  assert(inEdges[oldOp].size() == 0);\n'
              '  inEdges.erase(oldOp);\n'
              '  outEdges.erase(oldOp);\n'
              '}\n'
              '\n'
              '// We do this in topological order because it will be easier to '
              'parse on\n'
              '// the other end\n'
              'void Graph::export_to_file(std::string file_name)\n'
              '{\n'
              '  ofstream export_fs;\n'
              '  export_fs.open(file_name.c_str());\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2808,
         lineno=812,
         tokens=345,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::export_to_file',
         body='void Graph::export_to_file(std::string file_name)\n'
              '{\n'
              '  ofstream export_fs;\n'
              '  export_fs.open(file_name.c_str());\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '    {\n'
              '      opList.push_back(it->first);\n'
              '    }\n'
              '  }\n'
              '  size_t i = 0;\n'
              '  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    export_op(export_fs, op);\n'
              '\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      if (todos[it2->dstOp] == 0) '
              'opList.push_back(it2->dstOp);\n'
              '    }\n'
              '  }\n'
              '  export_fs.close();\n'
              '  assert(opList.size() == inEdges.size());\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2809,
         lineno=814,
         tokens=4,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='export_fs',
         body='ofstream export_fs;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2810,
         lineno=816,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='todos',
         body='std::map<Op, int, OpCompare> todos;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2811,
         lineno=818,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opList',
         body='std::vector<Op> opList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2812,
         lineno=819,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '    {\n'
              '      opList.push_back(it->first);\n'
              '    }\n'
              '  }\n'
              '  size_t i = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2813,
         lineno=822,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2814,
         lineno=833,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    export_op(export_fs, op);\n'
              '\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2815,
         lineno=838,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2816,
         lineno=841,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (todos[it2->dstOp] == 0) '
              'opList.push_back(it2->dstOp);\n'
              '    }\n'
              '  }\n'
              '  export_fs.close();\n'
              '  assert(opList.size() == inEdges.size());\n'
              '}\n'
              '\n'
              '/* Exports an operator with the following format:\n'
              ' * guid\n'
              ' * type\n'
              ' * dependencies (comma separated list of other ops)\n'
              ' * parameters (comma separated and type')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2817,
         lineno=852,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' dependent)\n'
              ' */\n'
              'void Graph::export_op(ofstream &file_stream, Op &op)\n'
              '{\n'
              '  file_stream << op.guid << std::endl;\n'
              '\n'
              '  file_stream << op.ptr->type << std::endl;\n'
              '\n'
              '  std::string deps_string;\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  int i = 0;\n'
              '  for (it = inList.begin(); it != inList.end(); it++) {\n'
              '    deps_string += std::to_string(it->srcOp.guid);\n'
              "    deps_string += ':';\n"
              '    deps_string += std::to_string(it->srcIdx);\n'
              "    deps_string += ',';\n"
              '    i++;\n'
              '  }\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2818,
         lineno=854,
         tokens=1428,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::export_op',
         body='void Graph::export_op(ofstream &file_stream, Op &op)\n'
              '{\n'
              '  file_stream << op.guid << std::endl;\n'
              '\n'
              '  file_stream << op.ptr->type << std::endl;\n'
              '\n'
              '  std::string deps_string;\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '  std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '  int i = 0;\n'
              '  for (it = inList.begin(); it != inList.end(); it++) {\n'
              '    deps_string += std::to_string(it->srcOp.guid);\n'
              "    deps_string += ':';\n"
              '    deps_string += std::to_string(it->srcIdx);\n'
              "    deps_string += ',';\n"
              '    i++;\n'
              '  }\n'
              '  if (deps_string.size() > 0)\n'
              '  {\n'
              '    deps_string = deps_string.substr(0, deps_string.size()-1);\n'
              '  }\n'
              '  file_stream << deps_string.c_str() << std::endl;\n'
              '\n'
              '  switch (op.ptr->type) {\n'
              '    case OP_CONV2D:\n'
              '    { \n'
              '      Conv2D* conv = (Conv2D*) op.ptr;\n'
              '      Tensor t = conv->inputs[0];\n'
              '      Tensor w = conv->inputs[1];\n'
              '      int padH, padW;\n'
              '      conv->get_padding(&padH, &padW);\n'
              "      file_stream << t.dim[0] << ','; // 0\n"
              "      file_stream << t.dim[1] << ','; // 1\n"
              "      file_stream << t.dim[2] << ','; // 2\n"
              "      file_stream << t.dim[3] << ','; // 3\n"
              "      file_stream << w.dim[0] << ','; // 4\n"
              "      file_stream << w.dim[1] << ','; // 5\n"
              "      file_stream << w.dim[2] << ','; // 6\n"
              "      file_stream << w.dim[3] << ','; // 7\n"
              "      file_stream << conv->strideH << ','; // 8\n"
              "      file_stream << conv->strideW << ','; // 9\n"
              "      file_stream << conv->padding << ','; // 10\n"
              "      file_stream << conv->activation << ','; // 11\n"
              "      file_stream << padH << ','; // 12\n"
              '      file_stream << padW; // 13\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_MAX:\n'
              '    case OP_POOL2D_AVG:\n'
              '    {\n'
              '      Pool2D* pool = (Pool2D*) op.ptr;\n'
              '      Tensor t = pool->inputs[0];\n'
              '      int padH, padW;\n'
              '      pool->get_padding(&padH, &padW);\n'
              "      file_stream << t.dim[0] << ','; // 0\n"
              "      file_stream << t.dim[1] << ','; // 1\n"
              "      file_stream << t.dim[2] << ','; // 2\n"
              "      file_stream << t.dim[3] << ','; // 3\n"
              "      file_stream << pool->type << ','; // 4\n"
              "      file_stream << pool->kernelH << ','; // 5\n"
              "      file_stream << pool->kernelW << ','; // 6\n"
              "      file_stream << pool->strideH << ','; // 7\n"
              "      file_stream << pool->strideW << ','; // 8\n"
              "      file_stream << pool->padding << ','; // 9\n"
              "      file_stream << pool->activation << ','; // 10\n"
              "      file_stream << padH << ','; // 11\n"
              '      file_stream << padW; // 12\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      Split* split = (Split*) op.ptr;\n'
              "      file_stream << split->axis << ',';\n"
              '      for (int i = 0; i < split->numOutputs; i++)\n'
              '      {\n'
              '        file_stream << split->sizes[i];\n'
              '        if (i < split->numOutputs - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      Concat* concat = (Concat*) op.ptr;\n'
              '      file_stream << concat->axis;\n'
              '      //TODO: fix below for visualizer\n'
              '      //Tensor t = concat->inputs[0];\n'
              "      //file_stream << t.dim[0] << ','; // 0\n"
              "      //file_stream << t.dim[1] << ','; // 1\n"
              "      //file_stream << t.dim[2] << ','; // 2\n"
              '      //file_stream << t.dim[3]; // 3\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_TANH:\n'
              '    case OP_BATCHNORM:\n'
              '    case OP_INPUT:\n'
              '    case OP_WEIGHT:\n'
              '    {\n'
              '      Tensor t = op.ptr->inputs[0];\n'
              '      for (int i = 0; i < t.numDim; i++)\n'
              '      {\n'
              '        file_stream << t.dim[i]; // 0 - N\n'
              '        if (i < t.numDim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              "    case OP_MATMUL: // This doesn't seem to be implemented in "
              'run either\n'
              '    {\n'
              '      Matmul* matmul = (Matmul*) op.ptr;\n'
              "      file_stream << matmul->activation << ','; // 0\n"
              '      file_stream << matmul->outputs[0].numDim; // 1\n'
              '      break;\n'
              '    }\n'
              '    case OP_RESHAPE:\n'
              '    {\n'
              '      //Reshape *reshape = (Reshape*) op.ptr;\n'
              '      Tensor t = op.ptr->outputs[0];\n'
              '      for (int i = 0; i < t.numDim; i++)\n'
              '      {\n'
              '        file_stream << t.dim[i]; // 0 - N\n'
              '        if (i < t.numDim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      Transpose *transpose = (Transpose*) op.ptr;\n'
              '      Tensor t = op.ptr->outputs[0];\n'
              '      int permIdx = transpose->permIdx;\n'
              '      int ndim = t.numDim;\n'
              '      //int permArray[MAX_DIM];\n'
              '      for (int i = ndim - 1; i >= 0; i--) {\n'
              '        //permArray[i] = permIdx % ndim;\n'
              '        permIdx = permIdx / ndim;\n'
              '      }\n'
              '      assert(permIdx == 0);\n'
              '      for (int i = 0; i < ndim; i++) {\n'
              '        file_stream << t.dim[i];// 0 - N\n'
              '        if (i < ndim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  file_stream << std::endl;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2819,
         lineno=860,
         tokens=6,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='deps_string',
         body='std::string deps_string;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2820,
         lineno=871,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (deps_string.size() > 0)\n'
              '  {\n'
              '    deps_string = deps_string.substr(0, deps_string.size()-1);\n'
              '  }\n'
              '  file_stream << deps_string.c_str() << std::endl;\n'
              '\n'
              '  switch (op.ptr->type) {\n'
              '    case OP_CONV2D:\n'
              '    { \n'
              '      Conv2D* conv = (Conv2D*) ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2821,
         lineno=880,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='op.ptr;\n'
              '      Tensor t = conv->inputs[0];\n'
              '      Tensor w = conv->inputs[1];\n'
              '      int padH, padW;\n'
              '      conv->get_padding(&padH, &padW);\n'
              "      file_stream << t.dim[0] << ','; // 0\n"
              "      file_stream << t.dim[1] << ','; // 1\n"
              '      file_stre')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2822,
         lineno=883,
         tokens=7,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2823,
         lineno=887,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="am << t.dim[2] << ','; // 2\n"
              "      file_stream << t.dim[3] << ','; // 3\n"
              "      file_stream << w.dim[0] << ','; // 4\n"
              "      file_stream << w.dim[1] << ','; // 5\n"
              "      file_stream << w.dim[2] << ','; // 6\n"
              "      file_stream << w.dim[3] << ',';")

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2824,
         lineno=892,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' // 7\n'
              "      file_stream << conv->strideH << ','; // 8\n"
              "      file_stream << conv->strideW << ','; // 9\n"
              "      file_stream << conv->padding << ','; // 10\n"
              "      file_stream << conv->activation << ','; // 11\n"
              "      file_stream << padH << ','; /")

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2825,
         lineno=897,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/ 12\n'
              '      file_stream << padW; // 13\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_MAX:\n'
              '    case OP_POOL2D_AVG:\n'
              '    {\n'
              '      Pool2D* pool = (Pool2D*) op.ptr;\n'
              '      Tensor t = pool->inputs[0];\n'
              '      int padH, padW;\n'
              '      pool->get_padding(&padH, ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2826,
         lineno=906,
         tokens=7,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2827,
         lineno=907,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='&padW);\n'
              "      file_stream << t.dim[0] << ','; // 0\n"
              "      file_stream << t.dim[1] << ','; // 1\n"
              "      file_stream << t.dim[2] << ','; // 2\n"
              "      file_stream << t.dim[3] << ','; // 3\n"
              "      file_stream << pool->type << ','; // 4\n"
              '      file_st')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2828,
         lineno=913,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ream << pool->kernelH << ','; // 5\n"
              "      file_stream << pool->kernelW << ','; // 6\n"
              "      file_stream << pool->strideH << ','; // 7\n"
              "      file_stream << pool->strideW << ','; // 8\n"
              "      file_stream << pool->padding << ','; // 9\n"
              "      file_stream << pool->activation << ','; // 10\n"
              "      file_stream << padH << ','; // 11\n"
              '      file_stream << padW; // 12\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      Split* split = (Split*) op.ptr;\n'
              "      file_stream << split->axis << ',';\n")

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2829,
         lineno=927,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < split->numOutputs; i++)\n'
              '      {\n'
              '        file_stream << split->sizes[i];\n'
              '        if (i < split->numOutputs - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      Concat* concat = (Concat*) op.ptr;\n'
              '      file_stream << concat->axis;\n'
              '      //TODO: fix below for visualizer\n'
              '      //Tensor t = concat->inputs[0];\n'
              "      //file_stream << t.dim[0] << ','; // 0\n"
              '    ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2830,
         lineno=944,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="  //file_stream << t.dim[1] << ','; // 1\n"
              "      //file_stream << t.dim[2] << ','; // 2\n"
              '      //file_stream << t.dim[3]; // 3\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_TANH:\n'
              '    case OP_BATCHNORM:\n'
              '    case OP_INPUT:\n'
              '    case OP_WEIGHT:\n'
              '    {\n'
              '      Tensor t = op.ptr->inputs[0];\n'
              '      for (int i = 0; i < t.numDim; i++)\n'
              '      {\n'
              '        file_stream << t.dim[i]; // 0 - N\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2831,
         lineno=962,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (i < t.numDim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              "    case OP_MATMUL: // This doesn't seem to be implemented in "
              'run either\n'
              '    {\n'
              '      Matmul* matmul = (Matmul*) op.ptr;\n'
              "      file_stream << matmul->activation << ','; // 0\n"
              '      file_stream << matmul->outputs[0].numDim; // 1\n'
              '      break;\n'
              '    }\n'
              '    case OP_RESHAPE:\n'
              '    {\n'
              '      //Reshape *reshape = (Reshape*) op.ptr;\n'
              '      Tensor t = op.ptr->outputs[0];\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2832,
         lineno=980,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < t.numDim; i++)\n'
              '      {\n'
              '        file_stream << t.dim[i]; // 0 - N\n'
              '        if (i < t.numDim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      Transpose *transpose = (Transpose*) op.ptr;\n'
              '      Tensor t = op.ptr->outputs[0];\n'
              '      int permIdx = transpose->permIdx;\n'
              '      int ndim = t.numDim;\n'
              '      //int permArray[MAX_DIM];\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2833,
         lineno=997,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = ndim - 1; i >= 0; i--) {\n'
              '        //permArray[i] = permIdx % ndim;\n'
              '        permIdx = permIdx / ndim;\n'
              '      }\n'
              '      assert(permIdx == 0);\n'
              '      for (int i = 0; i < ndim; i++) {\n'
              '        file_stream << t.dim[i];// 0 - N\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2834,
         lineno=1004,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (i < ndim - 1)\n'
              '        {\n'
              "          file_stream << ',';\n"
              '        }\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  file_stream << std::endl;\n'
              '}\n'
              '\n'
              'size_t Graph::num_in_edges(Op op)\n'
              '{\n'
              '  return inEdges[op].size();\n'
              '}\n'
              '\n'
              'size_t Graph::num_out_edges(Op op)\n'
              '{\n'
              '  return outEdges[op].s')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2835,
         lineno=1017,
         tokens=20,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::num_in_edges',
         body='size_t Graph::num_in_edges(Op op)\n'
              '{\n'
              '  return inEdges[op].size();\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2836,
         lineno=1022,
         tokens=20,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::num_out_edges',
         body='size_t Graph::num_out_edges(Op op)\n'
              '{\n'
              '  return outEdges[op].size();\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2837,
         lineno=1024,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ize();\n'
              '}\n'
              '\n'
              'bool Graph::has_edge(Op srcOp, Op dstOp, int srcIdx, int '
              'dstIdx)\n'
              '{\n'
              '  Edge e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '  return (inEdges[dstOp].find(e) != inEdges[dstOp].end());\n'
              '}\n'
              '\n'
              'size_t Graph::hash(void)\n'
              '{\n'
              '  size_t total = 0;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2838,
         lineno=1027,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::has_edge',
         body='bool Graph::has_edge(Op srcOp, Op dstOp, int srcIdx, int '
              'dstIdx)\n'
              '{\n'
              '  Edge e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '  return (inEdges[dstOp].find(e) != inEdges[dstOp].end());\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2839,
         lineno=1033,
         tokens=205,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::hash',
         body='size_t Graph::hash(void)\n'
              '{\n'
              '  size_t total = 0;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    size_t my = 17 * 31 + (size_t)(it->first.ptr);\n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      my = my * 31 + '
              'std::hash<size_t>()((size_t)(e.srcOp.ptr));\n'
              '      my = my * 31 + std::hash<int>()(e.srcIdx);\n'
              '      my = my * 31 + std::hash<int>()(e.dstIdx);\n'
              '    }\n'
              '    total += my;\n'
              '  }\n'
              '  return total;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2840,
         lineno=1037,
         tokens=67,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    size_t my = 17 * 31 + (size_t)(it->first.ptr);\n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2841,
         lineno=1040,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2842,
         lineno=1041,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      my = my * 31 + '
              'std::hash<size_t>()((size_t)(e.srcOp.ptr));\n'
              '      my = my * 31 + std::hash<int>()(e.srcIdx);\n'
              '      my = my * 31 + std::hash<int>()(e.dstIdx);\n'
              '    }\n'
              '    total += my;\n'
              '  }\n'
              '  return total;\n'
              '}\n'
              '\n'
              'void Graph::print(void)\n'
              '{\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2843,
         lineno=1052,
         tokens=355,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::print',
         body='void Graph::print(void)\n'
              '{\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (it->first.guid == 0) continue;\n'
              '    printf("\tguid(%zu) type(%d) runtime(%.4lf): ", '
              'it->first.guid, it->first.ptr->type, '
              'it->first.ptr->runtime);    \n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      printf(" inEdge(guid(%zu) idx(%d))", e.srcOp.guid, '
              'e.srcIdx);\n'
              '    }\n'
              '    printf("\\n");\n'
              '    // if (it->first.ptr->type == OP_CONV2D) {\n'
              '    //   it->first.ptr->inputs[1].print_info("conv weight");\n'
              '    // }\n'
              '    // else if (it->first.ptr->type == OP_BROADCAST_ADD) {\n'
              '    //   it->first.ptr->inputs[1].print_info("conv new bias");\n'
              '    // }\n'
              '    // else if (it->first.ptr->type == OP_BATCHNORM) {\n'
              '    //   it->first.ptr->inputs[1].print_info("gamma");\n'
              '    //   it->first.ptr->inputs[2].print_info("beta");\n'
              '    //   it->first.ptr->inputs[3].print_info("mean");\n'
              '    //   it->first.ptr->inputs[4].print_info("var");\n'
              '    // }\n'
              '  }\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2844,
         lineno=1055,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (it->first.guid == 0) continue;\n'
              '    printf("\tguid(%zu) type(%d) runtime(%.4lf): ", '
              'it->first.guid, it->first.ptr->type, '
              'it->first.ptr->runtime);    \n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2845,
         lineno=1059,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2846,
         lineno=1060,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      printf(" inEdge(guid(%zu) idx(%d))", e.srcOp.guid, '
              'e.srcIdx);\n'
              '    }\n'
              '    printf("\\n");\n'
              '    // if (it->first.ptr->type == OP_CONV2D) {\n'
              '    //   it->first.ptr->inputs[1].print_info("conv weight");\n'
              '    // }\n'
              '    // else if (it->first.ptr->type == OP_BROADCAST_ADD) {\n'
              '    //   it->first.ptr->inputs[1].print_info("conv new bias");\n'
              '    // }\n'
              ' ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2847,
         lineno=1071,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   // else if (it->first.ptr->type == OP_BATCHNORM) {\n'
              '    //   it->first.ptr->inputs[1].print_info("gamma");\n'
              '    //   it->first.ptr->inputs[2].print_info("beta");\n'
              '    //   it->first.ptr->inputs[3].print_info("mean");\n'
              '    //   it->first.ptr->inputs[4].print_info("var");\n'
              '    // }\n'
              '  }\n'
              '}\n'
              '\n'
              'bool Graph::check_correctness(void)\n'
              '{\n'
              '  bool okay = true;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2848,
         lineno=1080,
         tokens=275,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::check_correctness',
         body='bool Graph::check_correctness(void)\n'
              '{\n'
              '  bool okay = true;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  for (it = outEdges.begin(); it != outEdges.end(); it++) {\n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      if (!has_edge(e.srcOp, e.dstOp, e.srcIdx, e.dstIdx)) '
              'assert(false);\n'
              '      if (e.srcOp.ptr == NULL) continue;\n'
              '      Tensor srcTensor = e.srcOp.ptr->outputs[e.srcIdx];\n'
              '      Tensor dstTensor = e.dstOp.ptr->inputs[e.dstIdx];\n'
              '      if (srcTensor.numDim != dstTensor.numDim) assert(false);\n'
              '      for (int i = 0; i < srcTensor.numDim; i++) {\n'
              '        if (srcTensor.dim[i] != dstTensor.dim[i]) {\n'
              '          assert(false);\n'
              '          return false;\n'
              '        }\n'
              '        if (srcTensor.stride[i] != dstTensor.stride[i]) {\n'
              '          //assert(false);\n'
              '          //return false;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return okay;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2849,
         lineno=1084,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = outEdges.begin(); it != outEdges.end(); it++) {\n'
              '    std::set<Edge, EdgeCompare> list = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2850,
         lineno=1086,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2851,
         lineno=1087,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      if (!has_edge(e.srcOp, e.dstOp, e.srcIdx, e.dstIdx)) '
              'assert(false);\n'
              '      if (e.srcOp.ptr == NULL) continue;\n'
              '      Tensor srcTensor = e.srcOp.ptr->outputs[e.srcIdx];\n'
              '      Tensor dstTensor = e.dstOp.ptr->inputs[e.dstIdx];\n'
              '      if (srcTensor.numDim != dstTensor.numDim) assert(false);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2852,
         lineno=1094,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < srcTensor.numDim; i++) {\n'
              '        if (srcTensor.dim[i] != dstTensor.dim[i]) {\n'
              '          assert(false);\n'
              '          return false;\n'
              '        }\n'
              '        if (srcTensor.stride[i] != dstTensor.stride[i]) {\n'
              '          //assert(false);\n'
              '          //return false;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return okay;\n'
              '}\n'
              '\n'
              'float Graph::total_cost(void)\n'
              '{\n'
              '  if (totalCost > 0) return totalCost;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  float total = 0.0f;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2853,
         lineno=1109,
         tokens=103,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::total_cost',
         body='float Graph::total_cost(void)\n'
              '{\n'
              '  if (totalCost > 0) return totalCost;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  float total = 0.0f;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (it->first.ptr != NULL) total += '
              'it->first.ptr->runtime;\n'
              '  }\n'
              '  totalCost = total;\n'
              '  return total;\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2854,
         lineno=1114,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (it->first.ptr != NULL) total += '
              'it->first.ptr->runtime;\n'
              '  }\n'
              '  totalCost = total;\n'
              '  return total;\n'
              '}\n'
              '\n'
              'bool Graph::has_loop(void)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2855,
         lineno=1121,
         tokens=313,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::has_loop',
         body='bool Graph::has_loop(void)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '  size_t i = 0;\n'
              '  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return (opList.size() < inEdges.size());\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2856,
         lineno=1123,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='todos',
         body='std::map<Op, int, OpCompare> todos;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2857,
         lineno=1125,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opList',
         body='std::vector<Op> opList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2858,
         lineno=1126,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '  size_t i = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2859,
         lineno=1129,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2860,
         lineno=1138,
         tokens=48,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2861,
         lineno=1141,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2862,
         lineno=1142,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return (opList.size() < inEdges.size());\n'
              '}\n'
              '\n'
              'float Graph::run(void)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n'
              '  std::vector<OpBase*> opBaseList;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2863,
         lineno=1152,
         tokens=2390,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::run',
         body='float Graph::run(void)\n'
              '{\n'
              '  std::map<Op, int, OpCompare> todos;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  std::vector<Op> opList;\n'
              '  std::vector<OpBase*> opBaseList;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '  size_t i = 0;\n'
              '  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    assert(inList.size() > 0);\n'
              '    OpBase* opPtr = NULL;\n'
              '    // Step 1: prepare inputs\n'
              '    Tensor inputs[MAX_NUM_INPUTS];\n'
              '    if ((op.ptr->type == OP_INPUT) || (op.ptr->type == '
              'OP_WEIGHT)) {\n'
              '      assert(inList.size() == 1);\n'
              '      //Edge e = *inList.begin();\n'
              "      //assert(e.srcOp.ptr == NULL); // NoOp's input must not "
              'be any Op\n'
              '      Tensor t = op.ptr->inputs[0];\n'
              '      size_t size = sizeof(DATATYPE);\n'
              '      for (int j = 0; j < t.numDim; j++)\n'
              '        size *= t.dim[j];\n'
              '      if (op.ptr->type == OP_INPUT) {\n'
              '        assert(t.data_ptr == NULL);\n'
              '        t.data_ptr = (DATATYPE*) model->allocate_memory(size);\n'
              '      } else {\n'
              '        assert(t.data_ptr != NULL);\n'
              '      }\n'
              '      inputs[0] = t;\n'
              '    } else {\n'
              '      for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '        size_t idx2 = 0;\n'
              '        for (idx2 = 0; idx2 < opList.size(); idx2++) {\n'
              '          if (opList[idx2].guid == it2->srcOp.guid) break;\n'
              '        }\n'
              '        assert(idx2 < i);\n'
              '        assert(inputs[it2->dstIdx].data_ptr == NULL); // No '
              'duplicated dstIdxes\n'
              '        inputs[it2->dstIdx] = '
              'opBaseList[idx2]->outputs[it2->srcIdx];\n'
              '      }\n'
              '    }\n'
              '#ifdef DEADCODE\n'
              '    // Step 1: prepare inputs\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      Edge e = *it2;\n'
              '      if (e.srcOp.guid == GUID_INPUT) {\n'
              '        Tensor t = op.ptr->inputs[e.dstIdx];\n'
              '        t.ptr = (DATATYPE*) '
              'model->allocate_memory(sizeof(DATATYPE) * t.size());\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = t;\n'
              '      } else if (e.srcOp.guid = GUID_WEIGHT) {\n'
              '        Tensor t = op.ptr->inputs[e.dstIdx];\n'
              '        t.ptr = (DATATYPE*) '
              'model->allocate_memory(sizeof(DATATYPE) * t.size());\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = t;\n'
              '      } else {\n'
              '        size_t idx2 = 0;\n'
              '        for (idx2 = 0; idx2 < opList.size(); idx2++) {\n'
              '          if (opList[idx2].guid == e.srcOp.guid) break;\n'
              '        }\n'
              '        assert(idx2 < i);\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = '
              'opBaseList[idx2]->outputs[it2->srcIdx];\n'
              '      }\n'
              '    }\n'
              '#endif\n'
              '    // Step 2: create Ops\n'
              '    switch (op.ptr->type) {\n'
              '      case OP_CONV2D:\n'
              '      {\n'
              '        Conv2D* conv = (Conv2D*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Conv2D(model, inputs[0], inputs[1],\n'
              '                           conv->strideH, conv->strideW,\n'
              '                           conv->padding, conv->activation);\n'
              '#ifdef USE_CUDNN\n'
              '        ((Conv2D*)opPtr)->fwdAlgo = conv->fwdAlgo;\n'
              '#endif\n'
              '        break;\n'
              '      }\n'
              '      case OP_MATMUL:\n'
              '      {\n'
              '        Matmul* matmul = (Matmul*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Matmul(model, inputs[0], inputs[1], '
              'matmul->activation);\n'
              '        break;\n'
              '      }\n'
              '      case OP_RESHAPE:\n'
              '      {\n'
              '        Reshape* reshape = (Reshape*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        std::vector<int> shape;\n'
              '        for (int i = 0; i < reshape->outputs[0].numDim; i++)\n'
              '          shape.push_back(reshape->outputs[0].dim[i]);\n'
              '        opPtr = new Reshape(model, inputs[0], shape);\n'
              '        break;\n'
              '      }\n'
              '      case OP_TRANSPOSE:\n'
              '      {\n'
              '        Transpose* transpose = (Transpose*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        int ndim = inputs[0].numDim, permIdx = '
              'transpose->permIdx;\n'
              '        std::vector<int> permVec;\n'
              '        int permArray[MAX_DIM];\n'
              '        for (int i = ndim - 1; i >= 0; i--) {\n'
              '          permArray[i] = permIdx % ndim;\n'
              '          permIdx = permIdx / ndim;\n'
              '        }\n'
              '        assert(permIdx == 0);\n'
              '        for (int i = 0; i < ndim; i++)\n'
              '          for (int j = i + 1; j < ndim; j++)\n'
              '            assert(permArray[i] != permArray[j]);\n'
              '        for (int i = 0; i < ndim; i++)\n'
              '          permVec.push_back(permArray[i]);\n'
              '        opPtr = new Transpose(model, inputs[0], permVec, '
              'transpose->shuffle);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_ADD:\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        //Element* element = (Element*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Element(model, op.ptr->type, inputs[0], '
              'inputs[1]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_ENLARGE:\n'
              '      {\n'
              '        //Enlarge* enlarge = (Enlarge*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Enlarge(model, inputs[0], inputs[1]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_MERGE_GCONV:\n'
              '      {\n'
              '        MergeGConv* merge = (MergeGConv*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new MergeGConv(model, inputs[0], '
              'merge->count);\n'
              '        break;\n'
              '      }\n'
              '      case OP_POOL2D_MAX:\n'
              '      case OP_POOL2D_AVG:\n'
              '      {\n'
              '        Pool2D* pool = (Pool2D*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Pool2D(model, inputs[0], inputs[1], '
              'pool->type,\n'
              '                           pool->kernelH, pool->kernelW,\n'
              '                           pool->strideH, pool->strideW,\n'
              '                           pool->padding, pool->activation);\n'
              '        break;\n'
              '      }\n'
              '      case OP_RELU:\n'
              '      case OP_SIGMOID:\n'
              '      case OP_TANH:\n'
              '      {\n'
              '        Activation* act = (Activation*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new Activation(model, inputs[0], act->type, '
              'act->inPlace);\n'
              '        break;\n'
              '      }\n'
              '      case OP_BATCHNORM:\n'
              '      {\n'
              '        assert(inList.size() == 5);\n'
              '        BatchNorm* batchnorm = (BatchNorm*) op.ptr;\n'
              '        opPtr = new BatchNorm(model, inputs[0], inputs[1], '
              'inputs[2], inputs[3], inputs[4], batchnorm->epsilon);\n'
              '        break;\n'
              '      }\n'
              '      case OP_SPLIT:\n'
              '      {\n'
              '        Split* split = (Split*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new Split(model, inputs[0], split->axis, '
              'split->sizes);\n'
              '        break;\n'
              '      }\n'
              '      case OP_INPUT:\n'
              '      case OP_WEIGHT:\n'
              '      case OP_DROPOUT:\n'
              '      {\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new NoOp(model, inputs[0], op.ptr->type);\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONCAT:\n'
              '      {\n'
              '        Concat* concat = (Concat*) op.ptr;\n'
              '        opPtr = new Concat(model, concat->axis, inList.size(), '
              'inputs, concat->needCopy);\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        printf("op.type = %d\\n", op.ptr->type);\n'
              '        assert(false);\n'
              '    }\n'
              '    // Step 3: map new Op\n'
              '    opPtr->map();\n'
              '    opBaseList.push_back(opPtr);\n'
              '    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      //printf("myOp(%zu) dstOp(%zu) dstType(%d) '
              'dstTodos(%d)\\n",\n'
              '      //    it2->srcOp.guid, it2->dstOp.guid,\n'
              '      //    it2->dstOp.ptr->type, todos[it2->dstOp]);\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '#ifdef VERBOSE_PRINTS\n'
              '  for (int i =0; i < opList.size(); i++) {\n'
              '    printf("opList[%d]: guid(%zu) type(%d)\\n", i, '
              'opList[i].guid,\n'
              '           opList[i].ptr->type);\n'
              '  }\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    printf("op: guid(%zu) type(%d)\\n", it->first.guid, '
              'it->first.ptr->type);\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    int cnt = 0;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      printf("    inEdge[%d]: srcOp(%zu) srcIdx(%d) dstOp(%zu) '
              'dstIdx(%d)\\n", cnt++, it2->srcOp.guid, it2->srcIdx, '
              'it2->dstOp.guid, it2->dstIdx);\n'
              '    }\n'
              '  }\n'
              '#endif\n'
              '\n'
              '  assert(opList.size() == inEdges.size());\n'
              '  assert(opList.size() == opBaseList.size());\n'
              '\n'
              '  return model->measure_oplist_runtime(opBaseList);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2864,
         lineno=1154,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='todos',
         body='std::map<Op, int, OpCompare> todos;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2865,
         lineno=1156,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opList',
         body='std::vector<Op> opList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2866,
         lineno=1157,
         tokens=11,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opBaseList',
         body='std::vector<OpBase*> opBaseList;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2867,
         lineno=1158,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    int cnt = 0;\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      if (it2->srcOp.guid > GUID_PRESERVED) cnt ++;\n'
              '    }\n'
              '    todos[it->first] = cnt;\n'
              '    if (todos[it->first] == 0)\n'
              '      opList.push_back(it->first);\n'
              '  }\n'
              '  size_t i = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2868,
         lineno=1161,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2869,
         lineno=1170,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (i < opList.size()) {\n'
              '    Op op = opList[i++];\n'
              '    std::set<Edge, EdgeCompare> outList = outEdges[op];\n'
              '    std::set<Edge, EdgeCompare> inList = inEdges[op];\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    assert(inList.size() > 0);\n'
              '    OpBase* opPtr = NULL;\n'
              '    // Step 1: prepare inputs\n'
              '    Tensor inputs[MAX_NUM_INPUTS];\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2870,
         lineno=1174,
         tokens=13,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2871,
         lineno=1179,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if ((op.ptr->type == OP_INPUT) || (op.ptr->type == '
              'OP_WEIGHT)) {\n'
              '      assert(inList.size() == 1);\n'
              '      //Edge e = *inList.begin();\n'
              "      //assert(e.srcOp.ptr == NULL); // NoOp's input must not "
              'be any Op\n'
              '      Tensor t = op.ptr->inputs[0];\n'
              '      size_t size = sizeof(DATATYPE);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2872,
         lineno=1185,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int j = 0; j < t.numDim; j++)\n'
              '        size *= t.dim[j];\n'
              '      if (op.ptr->type == OP_INPUT) {\n'
              '        assert(t.data_ptr == NULL);\n'
              '        t.data_ptr = (DATATYPE*) model->allocate_memory(size);\n'
              '      } else {\n'
              '        assert(t.data_ptr != NULL);\n'
              '      }\n'
              '      inputs[0] = t;\n'
              '    } else {\n'
              '      for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '        size_t idx2 = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2873,
         lineno=1197,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (idx2 = 0; idx2 < opList.size(); idx2++) {\n'
              '          if (opList[idx2].guid == it2->srcOp.guid) break;\n'
              '        }\n'
              '        assert(idx2 < i);\n'
              '        assert(inputs[it2->dstIdx].data_ptr == NULL); // No '
              'duplicated dstIdxes\n'
              '        inputs[it2->dstIdx] = '
              'opBaseList[idx2]->outputs[it2->srcIdx];\n'
              '      }\n'
              '    }\n'
              '#ifdef DEADCODE\n'
              '    // Step 1: prepare inputs\n'
              '    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      Edge e = *it2;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2874,
         lineno=1209,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (e.srcOp.guid == GUID_INPUT) {\n'
              '        Tensor t = op.ptr->inputs[e.dstIdx];\n'
              '        t.ptr = (DATATYPE*) '
              'model->allocate_memory(sizeof(DATATYPE) * t.size());\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = t;\n'
              '      } else if (e.srcO')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2875,
         lineno=1214,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p.guid = GUID_WEIGHT) {\n'
              '        Tensor t = op.ptr->inputs[e.dstIdx];\n'
              '        t.ptr = (DATATYPE*) '
              'model->allocate_memory(sizeof(DATATYPE) * t.size());\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = t;\n'
              '      } else {\n'
              '        size_t idx2 = 0;\n'
              '        for (idx2 = 0; idx2 < opList.size(); idx2++) {\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2876,
         lineno=1222,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          if (opList[idx2].guid == e.srcOp.guid) break;\n'
              '        }\n'
              '        assert(idx2 < i);\n'
              '        assert(inputs[e.dstIdx].ptr == NULL); // No duplicated '
              'dstIdxes\n'
              '        inputs[e.dstIdx] = '
              'opBaseList[idx2]->outputs[it2->srcIdx];\n'
              '      }\n'
              '    }\n'
              '#endif\n'
              '    // Step 2: create Ops\n'
              '    switch (op.ptr->type) {\n'
              '      case OP_CONV2D:\n'
              '      {\n'
              '        Conv2D* conv = (Conv2D*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Conv2D(model, inputs[0], inputs[1],\n'
              '                           conv->strideH, conv->st')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2877,
         lineno=1237,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rideW,\n'
              '                           conv->padding, conv->activation);\n'
              '#ifdef USE_CUDNN\n'
              '        ((Conv2D*)opPtr)->fwdAlgo = conv->fwdAlgo;\n'
              '#endif\n'
              '        break;\n'
              '      }\n'
              '      case OP_MATMUL:\n'
              '      {\n'
              '        Matmul* matmul = (Matmul*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Matmul(model, inputs[0], inputs[1], '
              'matmul->activation);\n'
              '        break;\n'
              '      }\n'
              '      case OP_RESHAPE:\n'
              '      {\n'
              '        Reshape* reshape = (Reshape*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        std::vector<int> shape;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2878,
         lineno=1255,
         tokens=7,
         depth=8,
         parent_id=None,
         category='variable',
         summary=False,
         name='shape',
         body='std::vector<int> shape;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2879,
         lineno=1256,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int i = 0; i < reshape->outputs[0].numDim; i++)\n'
              '          shape.push_back(reshape->outputs[0].dim[i]);\n'
              '        opPtr = new Reshape(model, inputs[0], shape);\n'
              '        break;\n'
              '      }\n'
              '      case OP_TRANSPOSE:\n'
              '      {\n'
              '        Transpose* transpose = (Transpose*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        int ndim = inputs[0].numDim, permIdx = '
              'transpose->permIdx;\n'
              '        std::vector<int> permVec;\n'
              '        int permArray[MAX_DIM];\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2880,
         lineno=1266,
         tokens=8,
         depth=8,
         parent_id=None,
         category='variable',
         summary=False,
         name='permVec',
         body='std::vector<int> permVec;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2881,
         lineno=1268,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int i = ndim - 1; i >= 0; i--) {\n'
              '          permArray[i] = permIdx % ndim;\n'
              '          permIdx = permIdx / ndim;\n'
              '        }\n'
              '        assert(permIdx == 0);\n'
              '        for (int i = 0; i < ndim; i++)\n'
              '          for (int j = i + 1; j < ndim; j++)\n'
              '            assert(permArray[i] != permArray[j]);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2882,
         lineno=1276,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int i = 0; i < ndim; i++)\n'
              '          permVec.push_back(permArray[i]);\n'
              '        opPtr = new Transpose(model, inputs[0], permVec, '
              'transpose->shuffle);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_ADD:\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        //Element* element = (Element*) op.ptr;\n'
              '        assert(inList.size')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2883,
         lineno=1285,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='() == 2);\n'
              '        opPtr = new Element(model, op.ptr->type, inputs[0], '
              'inputs[1]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_ENLARGE:\n'
              '      {\n'
              '        //Enlarge* enlarge = (Enlarge*) op.ptr;\n'
              '        assert(inList.size() == 2);\n'
              '        opPtr = new Enlarge(model, inputs[0], inputs[1]);\n'
              '        break;\n'
              '      }\n'
              '      cas')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2884,
         lineno=1296,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e OP_MERGE_GCONV:\n'
              '      {\n'
              '        MergeGConv* merge = (MergeGConv*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new MergeGConv(model, inputs[0], '
              'merge->count);\n'
              '        break;\n'
              '      }\n'
              '      case OP_POOL2D_MAX:\n'
              '      case OP_POOL2D_AVG:\n'
              '      {\n'
              '        Pool2D* pool = (Pool2D*) op.ptr;\n'
              '        a')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2885,
         lineno=1307,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ssert(inList.size() == 2);\n'
              '        opPtr = new Pool2D(model, inputs[0], inputs[1], '
              'pool->type,\n'
              '                           pool->kernelH, pool->kernelW,\n'
              '                           pool->strideH, pool->strideW,\n'
              '                           pool->padding, pool->activation);\n'
              '        break;\n'
              '      }\n'
              '      case OP_REL')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2886,
         lineno=1314,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='U:\n'
              '      case OP_SIGMOID:\n'
              '      case OP_TANH:\n'
              '      {\n'
              '        Activation* act = (Activation*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new Activation(model, inputs[0], act->type, '
              'act->inPlace);\n'
              '        break;\n'
              '      }\n'
              '      case OP_BATCHNORM:\n'
              '      {\n'
              '        assert(inList.size() == 5);\n'
              '    ')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2887,
         lineno=1326,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    BatchNorm* batchnorm = (BatchNorm*) op.ptr;\n'
              '        opPtr = new BatchNorm(model, inputs[0], inputs[1], '
              'inputs[2], inputs[3], inputs[4], batchnorm->epsilon);\n'
              '        break;\n'
              '      }\n'
              '      case OP_SPLIT:\n'
              '      {\n'
              '        Split* split = (Split*) op.ptr;\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new S')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2888,
         lineno=1334,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='plit(model, inputs[0], split->axis, split->sizes);\n'
              '        break;\n'
              '      }\n'
              '      case OP_INPUT:\n'
              '      case OP_WEIGHT:\n'
              '      case OP_DROPOUT:\n'
              '      {\n'
              '        assert(inList.size() == 1);\n'
              '        opPtr = new NoOp(model, inputs[0], op.ptr->type);\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONCAT:\n'
              '      {\n'
              '        Concat*')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2889,
         lineno=1347,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' concat = (Concat*) op.ptr;\n'
              '        opPtr = new Concat(model, concat->axis, inList.size(), '
              'inputs, concat->needCopy);\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        printf("op.type = %d\\n", op.ptr->type);\n'
              '        assert(false);\n'
              '    }\n'
              '    // Step 3: map new Op\n'
              '    opPtr->map();\n'
              '    opBaseList.push_back(opPtr);\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2890,
         lineno=1358,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = outList.begin(); it2 != outList.end(); it2++) {\n'
              '      todos[it2->dstOp] --;\n'
              '      //printf("myOp(%zu) dstOp(%zu) dstType(%d) '
              'dstTodos(%d)\\n",\n'
              '      //    it2->srcOp.guid, it2->dstOp.guid,\n'
              '      //    it2->dstOp.ptr->type, todos[it2->dstOp]);\n'
              '      if (todos[it2->dstOp] == 0) {\n'
              '        opList.push_back(it2->dstOp);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '#ifdef VERBOSE_PRINTS\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2891,
         lineno=1369,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i =0; i < opList.size(); i++) {\n'
              '    printf("opList[%d]: guid(%zu) type(%d)\\n", i, '
              'opList[i].guid,\n'
              '           opList[i].ptr->type);\n'
              '  }\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    printf("op: guid(%zu) type(%d)\\n", it->first.guid, '
              'it->first.ptr->type);\n'
              '    std::set<Edge, EdgeCompare> inList = it->second;\n'
              '    std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '    int cnt = 0;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2892,
         lineno=1376,
         tokens=13,
         depth=5,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2893,
         lineno=1378,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it2 = inList.begin(); it2 != inList.end(); it2++) {\n'
              '      printf("    inEdge[%d]: srcOp(%zu) srcIdx(%d) dstOp(%zu) '
              'dstIdx(%d)\\n", cnt++, it2->srcOp.guid, it2->srcIdx, '
              'it2->dstOp.guid, it2->dstIdx);\n'
              '    }\n'
              '  }\n'
              '#endif\n'
              '\n'
              '  assert(opList.size() == inEdges.size());\n'
              '  ass')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2894,
         lineno=1385,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ert(opList.size() == opBaseList.size());\n'
              '\n'
              '  return model->measure_oplist_runtime(opBaseList);\n'
              '}\n'
              '\n'
              'void Graph::print_costs(void)\n'
              '{\n'
              '  float exe_time = 0, flops = 0, mem_acc = 0;\n'
              '  int num_kernels = 0;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2895,
         lineno=1390,
         tokens=191,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::print_costs',
         body='void Graph::print_costs(void)\n'
              '{\n'
              '  float exe_time = 0, flops = 0, mem_acc = 0;\n'
              '  int num_kernels = 0;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    it->first.ptr->collect_costs(exe_time, flops, mem_acc, '
              'num_kernels);\n'
              '  }\n'
              '  printf("        Cost metrics: exe_time(%.4lf) flops(%.4lf) "\n'
              '         "memory_access(%.4lf) kernel_launches(%d)\\n",\n'
              '         exe_time, flops / 1024.0 / 1024.0 / 1024.0,\n'
              '         mem_acc * 4.0 / 1024.0 / 1024.0, num_kernels);\n'
              '}')

Fragment(document_cs='565866943a0dc58390bfa1af6f836381fc5f6ecb23f870cb80e69f622ab2b389',
         id=2896,
         lineno=1395,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    it->first.ptr->collect_costs(exe_time, flops, mem_acc, '
              'num_kernels);\n'
              '  }\n'
              '  printf("        Cost metrics: exe_time(%.4lf) flops(%.4lf) "\n'
              '         "memory_access(%.4lf) kernel_launches(%d)\\n",\n'
              '         exe_time, flops / 1024.0 / 1024.0 / 1024.0,\n'
              '         mem_acc * 4.0 / 1024.0 / 1024.0, num_kernels);\n'
              '}\n'
              '\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2897,
         lineno=1,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing permi')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2898,
         lineno=1,
         tokens=74,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/element_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP elementwise_kernel\n'
              '  Methods: Element::forward Element::map Element::unmap '
              'Element::use_kernel Model::measure_element_cost\n'
              '  Variables: milliseconds opType\n'
              '  Using: taso\n'
              '  Usages: forward map measure_element_cost unmap use_kernel\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2899,
         lineno=12,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ssions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void elementwise_kernel(int volume,\n'
              '                        OpType type,\n'
              '                        const Tensor xTensor,\n'
              '                        const Tensor yTensor,\n'
              '                        const Tensor zTensor,\n'
              '                        const DATATYPE* x,\n'
              '\t\t\tconst DATATYPE* y,\n'
              '\t\t\tDATATYPE* z)\n'
              '{\n'
              '  int pos[6];\n'
              '  assert(zTensor.numDim <= 6);\n'
              '  CUDA_KERNEL_LOOP(id_z, volume)\n'
              '  {\n'
              '    int id_x = 0, id_y = 0;\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2900,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2901,
         lineno=20,
         tokens=560,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='elementwise_kernel',
         body='__global__\n'
              'void elementwise_kernel(int volume,\n'
              '                        OpType type,\n'
              '                        const Tensor xTensor,\n'
              '                        const Tensor yTensor,\n'
              '                        const Tensor zTensor,\n'
              '                        const DATATYPE* x,\n'
              '\t\t\tconst DATATYPE* y,\n'
              '\t\t\tDATATYPE* z)\n'
              '{\n'
              '  int pos[6];\n'
              '  assert(zTensor.numDim <= 6);\n'
              '  CUDA_KERNEL_LOOP(id_z, volume)\n'
              '  {\n'
              '    int id_x = 0, id_y = 0;\n'
              '    for (int j = 0; j < zTensor.numDim; j++) {\n'
              '      pos[j] = (id_z / zTensor.stride[j]) % zTensor.dim[j];\n'
              '    }\n'
              '    int diff = zTensor.numDim - xTensor.numDim;\n'
              '    for (int j = 0; j < xTensor.numDim; j++) {\n'
              '      id_x += xTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '    diff = zTensor.numDim - yTensor.numDim;\n'
              '    for (int j = 0; j < yTensor.numDim; j++) {\n'
              '      id_y += yTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '      {\n'
              '        z[id_z] = x[id_x] + y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        z[id_z] = x[id_x] * y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MAX:\n'
              '      {\n'
              '        z[id_z] = max(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MIN:\n'
              '      {\n'
              '        z[id_z] = min(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_SUB:\n'
              '      {\n'
              '        z[id_z] = x[id_x] - y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_DIV:\n'
              '      {\n'
              '        z[id_z] = x[id_x] / y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_EQUAL:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] == y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_GREATER:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] > y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_LESS:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] < y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_PRELU:\n'
              '      {\n'
              '        z[id_z] = x[id_x] >= 0 ? x[id_x] : y[id_y] * x[id_x];\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2902,
         lineno=21,
         tokens=50,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='elementwise_kernel',
         body='elementwise_kernel(int volume,\n'
              '                        OpType type,\n'
              '                        const Tensor xTensor,\n'
              '                        const Tensor yTensor,\n'
              '                        const Tensor zTensor,\n'
              '                        const DATATYPE* x,\n'
              '\t\t\tconst DATATYPE* y,\n'
              '\t\t\tDATATYPE* z)')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2903,
         lineno=32,
         tokens=8,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(id_z, volume)')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2904,
         lineno=32,
         tokens=487,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(id_z, volume)\n'
              '  {\n'
              '    int id_x = 0, id_y = 0;\n'
              '    for (int j = 0; j < zTensor.numDim; j++) {\n'
              '      pos[j] = (id_z / zTensor.stride[j]) % zTensor.dim[j];\n'
              '    }\n'
              '    int diff = zTensor.numDim - xTensor.numDim;\n'
              '    for (int j = 0; j < xTensor.numDim; j++) {\n'
              '      id_x += xTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '    diff = zTensor.numDim - yTensor.numDim;\n'
              '    for (int j = 0; j < yTensor.numDim; j++) {\n'
              '      id_y += yTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '      {\n'
              '        z[id_z] = x[id_x] + y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        z[id_z] = x[id_x] * y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MAX:\n'
              '      {\n'
              '        z[id_z] = max(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MIN:\n'
              '      {\n'
              '        z[id_z] = min(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_SUB:\n'
              '      {\n'
              '        z[id_z] = x[id_x] - y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_DIV:\n'
              '      {\n'
              '        z[id_z] = x[id_x] / y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_EQUAL:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] == y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_GREATER:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] > y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_LESS:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] < y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_PRELU:\n'
              '      {\n'
              '        z[id_z] = x[id_x] >= 0 ? x[id_x] : y[id_y] * x[id_x];\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2905,
         lineno=35,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < zTensor.numDim; j++) {\n'
              '      pos[j] = (id_z / zTensor.stride[j]) % zTensor.dim[j];\n'
              '    }\n'
              '    int diff = zTensor.numDim - xTensor.numDim;\n'
              '    for (int j = 0; j < xTensor.numDim; j++) {\n'
              '      id_x += xTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '    diff = zTensor.numDim - yTensor.numDim;\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2906,
         lineno=43,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < yTensor.numDim; j++) {\n'
              '      id_y += yTensor.stride[j] * pos[j + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '      {\n'
              '        z[id_z] = x[id_x] + y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        z[id_z] = x[id_x] * y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MAX:\n'
              '      {\n'
              '        z[i')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2907,
         lineno=60,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d_z] = max(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_MIN:\n'
              '      {\n'
              '        z[id_z] = min(x[id_x], y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_SUB:\n'
              '      {\n'
              '        z[id_z] = x[id_x] - y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_DIV:\n'
              '      {\n'
              '        z[id_z] = x[id_x] / y[id_y];\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2908,
         lineno=78,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='EQUAL:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] == y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_GREATER:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] > y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_EW_LESS:\n'
              '      {\n'
              '        z[id_z] = (x[id_x] < y[id_y]);\n'
              '        break;\n'
              '      }\n'
              '      case OP_PRELU:\n'
              '      {\n'
              '        z[id_z] = x[id_x] >= 0 ? x[id_x] : y[id_')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2909,
         lineno=95,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='y] * x[id_x];\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'bool Element::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_EW_MAX:\n'
              '    case OP_EW_MIN:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '  // use cudnn kernel only if inputs and output have default '
              'layouts\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2910,
         lineno=104,
         tokens=240,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::use_kernel',
         body='bool Element::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_EW_MAX:\n'
              '    case OP_EW_MIN:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '  // use cudnn kernel only if inputs and output have default '
              'layouts\n'
              '  if (inputs[0].default_layout() && inputs[1].default_layout()\n'
              '  && outputs[0].default_layout()) {\n'
              '    // Do nothing\n'
              '  } else {\n'
              '    return false;\n'
              '  }\n'
              '  // CUDNNv7.6.5 raequirement: Each dimension of the input '
              'tensor A must \n'
              '  // match the corresponding dimension of the destination '
              'tensor C, and \n'
              '  // each dimension of the input tensor B must match the '
              'corresponding \n'
              '  // dimension of the destination tensor C or must be equal to '
              '1. \n'
              '  // In the latter case, the same value from the input tensor B '
              'for \n'
              '  // those dimensions will be used to blend into the C tensor.\n'
              '  if (inputs[0].volume() != outputs[0].volume())\n'
              '    return false;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2911,
         lineno=116,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (inputs[0].default_layout() && inputs[1].default_layout()\n'
              '  && outputs[0].default_layout()) {\n'
              '    // Do nothing\n'
              '  } else {\n'
              '    return false;\n'
              '  }\n'
              '  // CUDNNv7.6.5 raequirement: Each dimension of the input '
              'tensor A must \n'
              '  // match the corresponding dimension of the destination '
              'tensor C, and \n'
              '  // each dimension of the input tensor B must match the '
              'corresponding \n'
              '  // dimension of the destination tensor C or must be equal to '
              '1. \n'
              '  // In the latter case, the same value from the input tensor B '
              'for \n'
              '  // those dimensions will be used to blend into the C tensor.\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2912,
         lineno=128,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (inputs[0].volume() != outputs[0].volume())\n'
              '    return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Element::map(void)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    // create descriptors\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in1Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in2Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&outTensor));\n'
              '    checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));\n'
              '    // set descriptors\n'
              '    hel')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2913,
         lineno=133,
         tokens=384,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::map',
         body='void Element::map(void)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    // create descriptors\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in1Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in2Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&outTensor));\n'
              '    checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));\n'
              '    // set descriptors\n'
              '    helperSetBroadcastableTensorDescriptor(inputs[0], '
              'outputs[0], in1Tensor);\n'
              '    helperSetBroadcastableTensorDescriptor(inputs[1], '
              'outputs[0], in2Tensor);\n'
              '    helperSetTensorDescriptor(outputs[0], outTensor);\n'
              '\n'
              '    cudnnOpTensorOp_t opType;\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '        opType = CUDNN_OP_TENSOR_ADD;\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        opType = CUDNN_OP_TENSOR_MUL;\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        opType = CUDNN_OP_TENSOR_MAX;\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        opType = CUDNN_OP_TENSOR_MIN;\n'
              '        break;\n'
              '      default:\n'
              '        fprintf(stderr, "Unsupported Elementwise Operator by '
              'cuDNN: %d\\n", type);\n'
              '        assert(false);\n'
              '    }\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,\n'
              '        CUDNN_NOT_PROPAGATE_NAN));\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2914,
         lineno=142,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='perSetBroadcastableTensorDescriptor(inputs[0], outputs[0], '
              'in1Tensor);\n'
              '    helperSetBroadcastableTensorDescriptor(inputs[1], '
              'outputs[0], in2Tensor);\n'
              '    helperSetTensorDescriptor(outputs[0], outTensor);\n'
              '\n'
              '    cudnnOpTensorOp_t opType;\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '        opType = CUDNN_OP_TENS')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2915,
         lineno=146,
         tokens=10,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='opType',
         body='cudnnOpTensorOp_t opType;')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2916,
         lineno=149,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OR_ADD;\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        opType = CUDNN_OP_TENSOR_MUL;\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        opType = CUDNN_OP_TENSOR_MAX;\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        opType = CUDNN_OP_TENSOR_MIN;\n'
              '        break;\n'
              '      default:\n'
              '        fprintf(stderr, "Unsupported Elemen')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2917,
         lineno=161,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='twise Operator by cuDNN: %d\\n", type);\n'
              '        assert(false);\n'
              '    }\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,\n'
              '        CUDNN_NOT_PROPAGATE_NAN));\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Element::unmap(void)\n'
              '{\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2918,
         lineno=176,
         tokens=89,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::unmap',
         body='void Element::unmap(void)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in1Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in2Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(outTensor));\n'
              '    checkCUDNN(cudnnDestroyOpTensorDescriptor(opDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2919,
         lineno=178,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (use_kernel()) {\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in1Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in2Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(outTensor));\n'
              '    checkCUDNN(cudnnDestroyOpTensorDescriptor(opDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Element::forward(bool block)\n'
              '{\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2920,
         lineno=187,
         tokens=191,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::forward',
         body='void Element::forward(bool block)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n'
              '    checkCUDNN(cudnnOpTensor(model->dnn, opDesc, &alpha, '
              'in1Tensor, inputs[0].data_ptr,\n'
              '        &alpha, in2Tensor, inputs[1].data_ptr, &beta, '
              'outTensor, outputs[0].data_ptr));\n'
              '  } else {\n'
              '    elementwise_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputs[0].volume(), type, inputs[0], inputs[1], '
              'outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr, '
              '(DATATYPE*)inputs[1].data_ptr,\n'
              '\t(DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2921,
         lineno=189,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (use_kernel()) {\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n'
              '    checkCUDNN(cudnnOpTensor(model->dnn, opDesc, &alpha, '
              'in1Tensor, inputs[0].data_ptr,\n'
              '        &alpha, in2Tensor, inputs[1].data_ptr, &beta, '
              'outTensor, outputs[0].data_ptr));\n'
              '  } e')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2922,
         lineno=194,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lse {\n'
              '    elementwise_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputs[0].volume(), type, inputs[0], inputs[1], '
              'outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr, '
              '(DATATYPE*)inputs[1].data_ptr,\n'
              '\t(DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_element_cost(Element* ele)\n'
              '{\n'
              '  // cudnnOpTensor only supports OP_EW_ADD, OP_EW_MUL, '
              'OP_EW_MAX, OP_EW_MIN\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2923,
         lineno=204,
         tokens=771,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_element_cost',
         body='void Model::measure_element_cost(Element* ele)\n'
              '{\n'
              '  // cudnnOpTensor only supports OP_EW_ADD, OP_EW_MUL, '
              'OP_EW_MAX, OP_EW_MIN\n'
              '  if (ele->use_kernel()) {\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n'
              '    helperSetBroadcastableTensorDescriptor(ele->inputs[0],\n'
              '        ele->outputs[0], inputTensor);\n'
              '    helperSetBroadcastableTensorDescriptor(ele->inputs[1],\n'
              '        ele->outputs[0], biasTensor);\n'
              '    helperSetTensorDescriptor(ele->outputs[0], outputTensor);\n'
              '    cudnnOpTensorOp_t opType;\n'
              '    switch (ele->type) {\n'
              '      case OP_EW_ADD:\n'
              '        opType = CUDNN_OP_TENSOR_ADD;\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        opType = CUDNN_OP_TENSOR_MUL;\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        opType = CUDNN_OP_TENSOR_MAX;\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        opType = CUDNN_OP_TENSOR_MIN;\n'
              '        break;\n'
              '      default:\n'
              '      {\n'
              '        fprintf(stderr, "Unsupported Elementwise Operator by '
              'cuDNN: %d\\n", ele->type);\n'
              '        assert(false);\n'
              '      }\n'
              '    }\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,\n'
              '        CUDNN_NOT_PROPAGATE_NAN));\n'
              '  \n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '    checkCUDA(cudaEventRecord(startEvent));\n'
              '    for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '      checkCUDNN(cudnnOpTensor(dnn, opDesc, &alpha, '
              'inputTensor, inputPtr,\n'
              '          &alpha, biasTensor, filterPtr, &beta, outputTensor, '
              'outputPtr));\n'
              '    }\n'
              '    checkCUDA(cudaEventRecord(endEvent));\n'
              '    checkCUDA(cudaEventSynchronize(endEvent));\n'
              '    float milliseconds;\n'
              '    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '    ele->runtime = milliseconds / REPEAT_TIMES;\n'
              '    if (print_cost)\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '             ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '  } else {\n'
              '    // Use our implementation to measure other elementwise '
              'operators\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '    checkCUDA(cudaEventRecord(startEvent));\n'
              '    for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '      '
              'elementwise_kernel<<<GET_BLOCKS(ele->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '          ele->outputs[0].volume(), ele->type, ele->inputs[0], '
              'ele->inputs[1],\n'
              '          ele->outputs[0], inputPtr, filterPtr, outputPtr);\n'
              '    }\n'
              '    checkCUDA(cudaEventRecord(endEvent));\n'
              '    checkCUDA(cudaEventSynchronize(endEvent));\n'
              '    float milliseconds;\n'
              '    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '    ele->runtime = milliseconds / REPEAT_TIMES;\n'
              '    if (print_cost)\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '             ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '  }\n'
              '}')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2924,
         lineno=207,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (ele->use_kernel()) {\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n'
              '    helperSetBroadcastableTensorDescriptor(ele->inputs[0],\n'
              '        ele->outputs[0], inputTensor);\n'
              '    helperSetBroadcastableTensorDescriptor(ele->inputs[1],\n'
              '        ele->outputs[0], biasTensor);\n'
              '    helperSetTensorDescriptor(ele->outputs[0], outputTensor);\n'
              '    cudnnOpTensorOp_t opType;\n'
              '    switch (ele->type) {\n'
              '      case OP_EW_ADD:\n'
              '        opType = CUDNN_OP_TENSOR_ADD;\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        opType = CUDNN_OP_')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2925,
         lineno=215,
         tokens=10,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='opType',
         body='cudnnOpTensorOp_t opType;')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2926,
         lineno=221,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TENSOR_MUL;\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        opType = CUDNN_OP_TENSOR_MAX;\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        opType = CUDNN_OP_TENSOR_MIN;\n'
              '        break;\n'
              '      default:\n'
              '      {\n'
              '        fprintf(stderr, "Unsupported Elementwise Operator by '
              'cuDNN: %d\\n", ele->type);\n'
              '        assert(false);\n'
              '      }\n'
              '    }\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,\n'
              '        CUDNN_NOT_PROPAGATE_NAN));\n'
              '  \n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '    checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2927,
         lineno=240,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '      checkCUDNN(cudnnOpTensor(dnn, opDesc, &alpha, '
              'inputTensor, inputPtr,\n'
              '          &alpha, biasTensor, filterPtr, &beta, outputTensor, '
              'outputPtr));\n'
              '    }\n'
              '    checkCUDA(cudaEventRecord(endEvent));\n'
              '    checkCUDA(cudaEventSynchronize(endEvent));\n'
              '    float milliseconds;\n'
              '    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '    ele->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2928,
         lineno=246,
         tokens=3,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2929,
         lineno=249,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (print_cost)\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '             ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '  } else {\n'
              '    // Use our implementation to measure other elementwise '
              'operators\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '    checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2930,
         lineno=257,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '      '
              'elementwise_kernel<<<GET_BLOCKS(ele->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '          ele->outputs[0].volume(), ele->type, ele->inputs[0], '
              'ele->inputs[1],\n'
              '          ele->outputs[0], inputPtr, filterPtr, outputPtr);\n'
              '    }\n'
              '    checkCUDA(cudaEventRecord(endEvent));\n'
              '    checkCUDA(cudaEventSynchronize(endEvent));\n'
              '    float milliseconds;\n'
              '    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '    ele->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2931,
         lineno=264,
         tokens=3,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='5769d35f36182e6730beddb258b42b34e9f6e1d056682b82a91cee19552eb889',
         id=2932,
         lineno=267,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (print_cost)\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '             ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '  }\n'
              '}\n'
              '\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2933,
         lineno=1,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d\n'
              '\n'
              'def resnet_block(input, strides, out_channels, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = make_conv2d(input_tensor=t, filter_')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2934,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2935,
         lineno=1,
         tokens=109,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/resnet50.py\n'
              '  Functions: resnet_block\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args config default discard_iter filter_shape '
              'float32 format global_jit_level graph graph_options help input '
              'input_dictionary input_tensor iterations make_activation '
              'make_conv2d name numpy optimizer_options out_channels '
              'output_nodes padding parse_args parser placeholder print '
              'print_tensorboard random random_sample range relu sess shape '
              'shared_functions strides summary tensorflow time times total '
              'type value writer\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2936,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2937,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2938,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2939,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2940,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2941,
         lineno=7,
         tokens=79,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='def resnet_block(input, strides, out_channels, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = make_conv2d(input_tensor=t, filter_s')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2942,
         lineno=9,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='shape=(3,3,out_channels,out_channels), strides=strides, '
              'padding="SAME", actimode="RELU", name=name+"_conv2")\n'
              '    t = make_conv2d(input_tensor=t, '
              'filter_shape=(1,1,out_channels,out_channels*4), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2943,
         lineno=9,
         tokens=81,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='hape=(3,3,out_channels,out_channels), strides=strides, '
              'padding="SAME", actimode="RELU", name=name+"_conv2")\n'
              '    t = make_conv2d(input_tensor=t, '
              'filter_shape=(1,1,out_channels,out_channels*4), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2944,
         lineno=11,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (strides[2]>1) or (input.shape[1].value != out_channels '
              '* 4):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*4), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argume')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2945,
         lineno=11,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='    if (strides[2]>1) or (input.shape[1].value != out_channels '
              '* 4):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*4), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2946,
         lineno=16,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Whether to run with TensorFlowXLA optimizations')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2947,
         lineno=17,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nt("--print_tensorboard", help="Name of folder to output the '
              'tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(1,64,56,56))\n'
              't = input\n'
              'for i ')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2948,
         lineno=17,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Name of folder to output the tensorboard information')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2949,
         lineno=18,
         tokens=13,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to average for timing (default 5000)')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2950,
         lineno=19,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to not time during warm up (default 1000)')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2951,
         lineno=24,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='in range(3):\n'
              '    t = resnet_block(t, (1,1,1,1), 64, '
              '"resnet_block_1_{}".format(i))\n'
              'strides=(1,1,2,2)\n'
              'for i in range(4):\n'
              '    t = resnet_block(t, strides, 128, '
              '"resnet_block_2_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2952,
         lineno=30,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',1,2,2)\n'
              'for i in range(6):\n'
              '    t = resnet_block(t, strides, 256, '
              '"resnet_block_3_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2,2)\n'
              'for i in range(3):\n'
              '    t = resnet_block(t, strides, 512, '
              '"resnet_block_4_{}".format(i)')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2953,
         lineno=36,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=')\n'
              '    strides=(1,1,1,1)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input] = '
              'np.random.random_sample((1,64,56,56))\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2954,
         lineno=41,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA ON')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2955,
         lineno=44,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA OFF')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2956,
         lineno=50,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n'
              '    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2957,
         lineno=61,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(document_cs='5d9487c1ccf78b203d246939b6a6ac7b7a8cd72233a51e3b6dbe56f2162ec100',
         id=2958,
         lineno=64,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Average inference time of the last ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2959,
         lineno=1,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2960,
         lineno=1,
         tokens=343,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/substitution.cc\n'
              '  Functions: create_avg_pool_conv create_merge_seperable_convs '
              'create_two_pools get_parameter_from_pb input ooc pmc tnc '
              'to_dim_parameter to_tn_parameter\n'
              '  Methods: GraphXfer::GraphXfer GraphXfer::can_match '
              'GraphXfer::create_new_operator '
              'GraphXfer::create_operator_from_pb '
              'GraphXfer::load_graph_xfer_from_pb_file GraphXfer::map_output '
              'GraphXfer::match GraphXfer::new_tensor GraphXfer::run '
              'GraphXfer::unmatch OpX::OpX OpX::add_input_constraint '
              'OpX::add_pm_constraint OpX::get_pm_constraint '
              'PMConstraint::PMConstraint SrcOp::add_constraint SrcOp::match '
              'TNConstraint::TNConstraint TensorX::to_tensor\n'
              '  Variables: activation axis collection count dstIt it2 '
              'mappedInputs newMapInputs newit numDim numOutputs opIt permIdx '
              'srcTen strideH subst\n'
              '  Using: taso\n'
              '  Usages: GraphXfer INVALID_OP OpX PMConstraint TNConstraint '
              'add_constraint add_input_constraint add_pm_constraint can_match '
              'create_activation create_batchnorm create_broadcast_add '
              'create_concat create_conv2d create_conv_add create_conv_batch '
              'create_conv_mul create_conv_relu create_element create_enlarge '
              'create_enlarge_merge_convs create_fuse_conv_batchnorm '
              'create_fuse_conv_batchnorm_alpha_var '
              'create_fuse_conv_batchnorm_bias create_matmul '
              'create_merge_gconv create_merge_group_convs create_mul '
              'create_new_graph create_new_operator create_operator_from_pb '
              'create_pool2d_avg create_split create_transpose '
              'get_pm_constraint load_graph_xfer_from_pb_file make_pair '
              'map_output match new_tensor run to_tensor unmatch\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2961,
         lineno=11,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/substitution.h"\n'
              'using namespace taso;\n'
              '\n'
              'GraphXfer* create_avg_pool_conv(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX weight = subst->new_tensor();\n'
              '  OpX* avg_pool =')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2962,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2963,
         lineno=19,
         tokens=8,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='create_avg_pool_conv',
         body='create_avg_pool_conv(Model* model)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2964,
         lineno=24,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' subst->create_pool2d_avg(input, weight, 1, 1,\n'
              '                                           PD_MODE_SAME,\n'
              '                                           AC_MODE_NONE);\n'
              '  OpX* conv = subst->create_conv2d(input, weight, 1, 1,\n'
              '                                   PD_MODE_SAME,\n'
              '                                   AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(avg_pool->outputs[0], conv->outputs[0]);\n'
              '  subst->srcOps.push_b')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2965,
         lineno=31,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ack(avg_pool);\n'
              '  subst->dstOps.push_back(conv);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* create_two_pools(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX w1 = subst->new_tensor();\n'
              '  //TensorX w2 = subst->new_tensor();\n'
              '  OpX* pool1 = subst->create_pool2d_avg(input, w1, 1, 1,\n'
              '                                        PD_MODE_SAME,\n'
              '                                      ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2966,
         lineno=36,
         tokens=8,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='create_two_pools',
         body='create_two_pools(Model* model)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2967,
         lineno=44,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  AC_MODE_NONE);\n'
              '  //OpX* pool2 = subst->create_pool2d_avg(input, w2, 1, 1,\n'
              '  //                                      PD_MODE_SAME,\n'
              '  //                                      AC_MODE_NONE);\n'
              '  //OpX* add = subst->create_element(pool1->outputs[0], '
              'pool2->outputs[0],\n'
              '  //                                 OP_EW_ADD);\n'
              '  OpX* pool3 = subst->create_conv2d(input, w1, 1, 1,\n'
              '                                    PD_MODE_SAME,\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2968,
         lineno=52,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                                    AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(pool1->outputs[0], pool3->outputs[0]);\n'
              '  subst->srcOps.push_back(pool1);\n'
              '  //subst->srcOps.push_back(pool2);\n'
              '  //subst->srcOps.push_back(add);\n'
              '  subst->dstOps.push_back(pool3);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_conv_relu(Model* model, int '
              'strideH, int strideW, PaddingMode mode)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2969,
         lineno=63,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX weight = subst->new_tensor();\n'
              '  OpX* conv = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode,\n'
              '                                   AC_MODE_NONE);\n'
              '  OpX* relu = subst->create_activation(conv->outputs[0], '
              'OP_RELU);\n'
              '  OpX* fuse = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode,\n'
              '                                   AC_MODE_RELU, false/*isSrc*/')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2970,
         lineno=70,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '  subst->map_output(relu->outputs[0], fuse->outputs[0]);\n'
              '  subst->srcOps.push_back(conv);\n'
              '  subst->srcOps.push_back(relu);\n'
              '  subst->dstOps.push_back(fuse);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_conv_batch(Model* model, int '
              'strideH, int strideW, PaddingMode mode)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX weight = subst->new_tensor();\n'
              '  TensorX w[4];\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2971,
         lineno=84,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 4; i++)\n'
              '    w[i] = subst->new_tensor();\n'
              '  OpX* conv = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode, AC_MODE_NONE);\n'
              '  OpX* batch = subst->create_batchnorm(conv->outputs[0]')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2972,
         lineno=87,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', w[0], w[1], w[2], w[3]);\n'
              '  // OpX* fuse = subst->create_fuse_conv_batchnorm(weight, '
              'w[0], w[1], w[2], w[3], false/*isSrc*/);\n'
              '  OpX* fuse = '
              'subst->create_fuse_conv_batchnorm_alpha_var(weight, w[0], w[3], '
              'fa')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2973,
         lineno=89,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lse/*isSrc*/); // alpha, var\n'
              '  OpX* new_conv = subst->create_conv2d(input, fuse->outputs[0], '
              'strideH, strideW, mode,\n'
              '                                       AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  OpX* bias = subst->create_fuse_conv_batchnorm_bias(w[0], '
              'w[1], w[2], w[3], false);\n'
              '  OpX* add = subst->create_broadcast_add(new_conv->outputs[0], '
              'bias->outputs[0], false);\n'
              '  subst->map_output(batch->outputs[0], add->outputs[')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2974,
         lineno=94,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='0]);\n'
              '  subst->srcOps.push_back(conv);\n'
              '  subst->srcOps.push_back(batch);\n'
              '  subst->dstOps.push_back(fuse);\n'
              '  subst->dstOps.push_back(new_conv);\n'
              '  subst->dstOps.push_back(bias);\n'
              '  subst->dstOps.push_back(add);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_conv_mul(Model* model, int '
              'strideH, int strideW, PaddingMode mode)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  Tenso')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2975,
         lineno=108,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rX weight = subst->new_tensor();\n'
              '  TensorX y = subst->new_tensor();\n'
              '  OpX* conv = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode, AC_MODE_NONE);\n'
              '  OpX* mul = subst->create_element(conv->outputs[0], y, '
              'OP_EW_MUL);\n'
              '  OpX* fuse = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode,\n'
              '                                    AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(mul->outputs[0], fuse->outpu')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2976,
         lineno=114,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ts[0]);\n'
              '  subst->srcOps.push_back(conv);\n'
              '  subst->srcOps.push_back(mul);\n'
              '  subst->dstOps.push_back(fuse);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_conv_add(Model* model, int '
              'strideH, int strideW, PaddingMode mode)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX weight = subst->new_tensor();\n'
              '  TensorX y = subst->new_tensor();\n'
              '  OpX* conv = subst->create_conv2')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2977,
         lineno=127,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d(input, weight, strideH, strideW, mode, AC_MODE_NONE);\n'
              '  OpX* add = subst->create_element(conv->outputs[0], y, '
              'OP_EW_ADD);\n'
              '  OpX* fuse = subst->create_conv2d(input, weight, strideH, '
              'strideW, mode,\n'
              '                                    AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(add->outputs[0], fuse->outputs[0]);\n'
              '  subst->srcOps.push_back(conv);\n'
              '  subst->srcOps.push_back(add);\n'
              '  subst->dstOps.push_back(f')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2978,
         lineno=134,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='use);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_enlarge_merge_convs(Model* model, '
              'ActiMode activation)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX w1 = subst->new_tensor();\n'
              '  TensorX w2 = subst->new_tensor();\n'
              '  OpX* conv1 = subst->create_conv2d(input, w1, 1, 1, '
              'PD_MODE_SAME, activation);\n'
              '  OpX* conv2 = subst->create_conv2d(input, w2, 1, 1, '
              'PD_MODE_SAME, a')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2979,
         lineno=145,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ctivation);\n'
              '  subst->srcOps.push_back(conv1);\n'
              '  subst->srcOps.push_back(conv2);\n'
              '  OpX* enlarge = subst->create_enlarge(w1, w2, '
              'false/*isSrc*/);\n'
              '  OpX* concat = subst->create_concat(0/*axis*/, 4/*dim*/, '
              'enlarge->outputs[0],\n'
              '                                     w2, false/*isSrc*/);\n'
              '  OpX* conv3 = subst->create_conv2d(input, concat->outputs[0], '
              '1, 1,\n'
              '                                    PD_MODE_SAME, activation, fa')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2980,
         lineno=152,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lse/*isSrc*/);\n'
              '  OpX* split = subst->create_split(conv3->outputs[0], '
              '1/*axis*/, 2, false/*isSrc*/);\n'
              '  subst->dstOps.push_back(enlarge);\n'
              '  subst->dstOps.push_back(concat);\n'
              '  subst->dstOps.push_back(conv3);\n'
              '  subst->dstOps.push_back(split);\n'
              '  subst->map_output(conv1->outputs[0], split->outputs[0]);\n'
              '  subst->map_output(conv2->outputs[0], split->outputs[1]);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* GraphXfer::create_merge_gr')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2981,
         lineno=163,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='oup_convs(Model* model,\n'
              '                                               int strideH,\n'
              '                                               int strideW,\n'
              '                                               ActiMode '
              'activation)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX w = subst->new_tensor();\n'
              '  OpX* conv1 = subst->create_conv2d(input, w, strideH, strideW, '
              'PD_MODE_SAME, acti')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2982,
         lineno=171,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='vation);\n'
              '  subst->srcOps.push_back(conv1);\n'
              '  OpX* merge = subst->create_merge_gconv(w, 2/*count*/, '
              'false/*isSrc*/);\n'
              '  OpX* conv2 = subst->create_conv2d(input, merge->outputs[0], '
              'strideH, strideW, PD_MODE_SAME, activation, false/*isSrc*/);\n'
              '  subst->dstOps.push_back(merge);\n'
              '  subst->dstOps.push_back(conv2);\n'
              '  subst->map_output(conv1->outputs[0], conv2->outputs[0]);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'GraphXfer* create_merge_sepe')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2983,
         lineno=181,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rable_convs(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input1 = subst->new_tensor();\n'
              '  TensorX input2 = subst->new_tensor();\n'
              '  TensorX w1 = subst->new_tensor();\n'
              '  TensorX w2 = subst->new_tensor();\n'
              '  TensorX w3 = subst->new_tensor();\n'
              '  TensorX w4 = subst->new_tensor();\n'
              '  OpX* conv1 = subst->create_conv2d(input1, w1, 1, 1, '
              'PD_MODE_SAME,\n'
              '                                    AC_MODE_NONE);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2984,
         lineno=181,
         tokens=11,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='create_merge_seperable_convs',
         body='create_merge_seperable_convs(Model* model)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2985,
         lineno=192,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  OpX* conv2 = subst->create_conv2d(input2, w2, 1, 1, '
              'PD_MODE_SAME,\n'
              '                                    AC_MODE_NONE);\n'
              '  OpX* conv3 = subst->create_conv2d(conv1->outputs[0], w3, 1, '
              '1,\n'
              '                                    PD_MODE_SAME, '
              'AC_MODE_NONE);\n'
              '  OpX* conv4 = subst->create_conv2d(conv2->outputs[0], w4, 1, '
              '1,\n'
              '                                    PD_MODE_SAME, '
              'AC_MODE_NONE);\n'
              '  OpX* add = subst->create_element')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2986,
         lineno=198,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(conv3->outputs[0], conv4->outputs[0],\n'
              '                                   OP_EW_ADD);\n'
              '  OpX* concatIn = subst->create_concat(1/*axis*/, 4/*dim*/, '
              'input1, input2, false/*isSrc*/);\n'
              '  OpX* concat1 = subst->create_concat(0/*axis*/, 4/*dim*/, w1, '
              'w2, false/*isSrc*/);\n'
              '  OpX* concat2 = subst->create_concat(1/*axis*/, 4/*dim*/, w3, '
              'w4, false/*isSrc*/);\n'
              '  OpX* conv5 = subst->create_conv2d(concatIn->outputs[0], '
              'concat1->')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2987,
         lineno=203,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='outputs[0], 1, 1,\n'
              '                                    PD_MODE_SAME, AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  OpX* conv6 = subst->create_conv2d(conv5->outputs[0], '
              'concat2->outputs[0], 1, 1,\n'
              '                                    PD_MODE_SAME,AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(add->outputs[0], conv6->outputs[0]);\n'
              '  subst->srcOps.push_back(conv1);\n'
              '  subst->srcOps.push_back(conv2);\n'
              '  subst->srcOps.push_back(c')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2988,
         lineno=210,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='onv3);\n'
              '  subst->srcOps.push_back(conv4);\n'
              '  subst->srcOps.push_back(add);\n'
              '  subst->dstOps.push_back(concatIn);\n'
              '  subst->dstOps.push_back(concat1);\n'
              '  subst->dstOps.push_back(concat2);\n'
              '  subst->dstOps.push_back(conv5);\n'
              '  subst->dstOps.push_back(conv6);\n'
              '  return subst;\n'
              '}\n'
              '\n'
              'bool get_parameter_from_pb(const GraphSubst::Operator& pbOp,\n'
              '                           PMParameter pm,\n'
              '                           int &value)\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2989,
         lineno=221,
         tokens=83,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='get_parameter_from_pb',
         body='bool get_parameter_from_pb(const GraphSubst::Operator& pbOp,\n'
              '                           PMParameter pm,\n'
              '                           int &value)\n'
              '{\n'
              '  for (int i = 0; i < pbOp.para_size(); i++)\n'
              '    if (pbOp.para(i).key() == pm) {\n'
              '      value = pbOp.para(i).value();\n'
              '      return true;\n'
              '    }\n'
              '  return false;  \n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2990,
         lineno=221,
         tokens=24,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_parameter_from_pb',
         body='get_parameter_from_pb(const GraphSubst::Operator& pbOp,\n'
              '                           PMParameter pm,\n'
              '                           int &value)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2991,
         lineno=225,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < pbOp.para_size(); i++)\n'
              '    if (pbOp.para(i).key() == pm) {\n'
              '      value = pbOp.para(i).value();\n'
              '      return true;\n'
              '    }\n'
              '  return false;  \n'
              '}\n'
              '\n'
              'void GraphXfer::create_operator_from_pb(const '
              'GraphSubst::Operator& pbOp,\n'
              '                                        std::map<int, TensorX>& '
              'mappedInputs,\n'
              '                                        bool isSrcOp)\n'
              '{\n'
              '  // Step 1: create inputs\n'
              '  TensorX inputs[MAX_NUM_INPUTS];\n'
              '  assert(pbOp.input_size() <= MAX_NUM_INPUTS);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2992,
         lineno=233,
         tokens=1166,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::create_operator_from_pb',
         body='void GraphXfer::create_operator_from_pb(const '
              'GraphSubst::Operator& pbOp,\n'
              '                                        std::map<int, TensorX>& '
              'mappedInputs,\n'
              '                                        bool isSrcOp)\n'
              '{\n'
              '  // Step 1: create inputs\n'
              '  TensorX inputs[MAX_NUM_INPUTS];\n'
              '  assert(pbOp.input_size() <= MAX_NUM_INPUTS);\n'
              '  for (int i = 0; i < pbOp.input_size(); i++) {\n'
              '    const GraphSubst::Tensor& tensor = pbOp.input(i);\n'
              '    if (tensor.opid() < 0) {\n'
              '      int opId = tensor.opid();\n'
              '      if (mappedInputs.find(opId) == mappedInputs.end()) {\n'
              '        mappedInputs[opId] = new_tensor();\n'
              '        assert(isSrcOp); // assert we are still in the src '
              'graph\n'
              '      }\n'
              '      inputs[i] = mappedInputs[opId];\n'
              '    } else {\n'
              '      int opId = tensor.opid();\n'
              '      int tsId = tensor.tsid();\n'
              '      if (isSrcOp)\n'
              '        inputs[i] = srcOps[opId]->outputs[tsId];\n'
              '      else\n'
              '        inputs[i] = dstOps[opId]->outputs[tsId];\n'
              '    }\n'
              '  }\n'
              '  // Step 2: create op\n'
              '  OpType type = (OpType) pbOp.type();\n'
              '  OpX* opx = NULL;\n'
              '  switch (type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      int strideH, strideW, padding, activation;\n'
              '      //get_parameter_from_pb(pbOp, PM_KERNEL_H, kernelH);\n'
              '      //get_parameter_from_pb(pbOp, PM_KERNEL_W, kernelW);\n'
              '      assert(get_parameter_from_pb(pbOp, PM_STRIDE_H, '
              'strideH));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_STRIDE_W, '
              'strideW));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_PAD, padding));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_ACTI, '
              'activation));\n'
              '      opx = create_conv2d(inputs[0], inputs[1], strideH, '
              'strideW,\n'
              '          (PaddingMode) padding, (ActiMode) activation, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      int numDim, axis;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_AXIS, axis));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUMDIM, numDim));\n'
              '      opx = create_concat(axis, numDim, pbOp.input_size(), '
              'inputs, isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      opx = create_element(inputs[0], inputs[1], type, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      int numOutputs, axis;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_AXIS, axis));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUM_OUTPUTS, '
              'numOutputs));\n'
              '      opx = create_split(inputs[0], axis, numOutputs, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_TANH:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      opx = create_activation(inputs[0], type);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      opx = create_mul(inputs[0], inputs[1]);\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      //int kernelH, kernelW;\n'
              '      //assert(get_parameter_from_pb(pbOp, PM_KERNEL_H, '
              'kernelH));\n'
              '      //assert(get_parameter_from_pb(pbOp, PM_KERNEL_W, '
              'kernelW));\n'
              '      opx = create_enlarge(inputs[0], inputs[1], isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      int activation;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_ACTI, '
              'activation));\n'
              '      opx = create_matmul(inputs[0], inputs[1], (ActiMode) '
              'activation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      int numDim, permIdx, perm[MAX_DIM], shuffle;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUMDIM, numDim));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_PERM, permIdx));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_OUTSHUFFLE, '
              'shuffle));\n'
              '      for (int i = numDim-1; i >=0; i--) {\n'
              '        perm[i] = permIdx % numDim;\n'
              '        permIdx = permIdx / numDim;\n'
              '      }\n'
              '      assert(permIdx == 0);\n'
              '      for (int i = 0; i < numDim; i++)\n'
              '        for (int j = i + 1; j < numDim; j++)\n'
              '          assert(perm[i] != perm[j]);\n'
              '      opx = create_transpose(inputs[0], numDim, perm, '
              'shuffle);\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_MAX:\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_BATCHNORM:\n'
              '    default:\n'
              '    {\n'
              '      assert(false);\n'
              '    }\n'
              '  }\n'
              '  assert(opx != NULL);\n'
              '  if (isSrcOp)\n'
              '    srcOps.push_back(opx);\n'
              '  else\n'
              '    dstOps.push_back(opx);\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2993,
         lineno=240,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < pbOp.input_size(); i++) {\n'
              '    const GraphSubst::Tensor& tensor = pbOp.input(i);\n'
              '    if (tensor.opid() < 0) {\n'
              '      int opId = tensor.opid();\n'
              '      if (mappedInputs.find(opId) == mappedInputs.end()) {\n'
              '        mappedInputs[opId] = new_tensor();\n'
              '        assert(isSrcOp); // assert we are still in the src '
              'graph\n'
              '      }\n'
              '      inputs[i] = mappedInputs[opId];\n'
              '    } else {\n'
              '      int opId = tensor.opid();\n'
              '      int tsId = tensor.tsid();\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2994,
         lineno=252,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (isSrcOp)\n'
              '        inputs[i] = srcOps[opId]->outputs[tsId];\n'
              '      else\n'
              '        inputs[i] = dstOps[opId]->outputs[tsId];\n'
              '    }\n'
              '  }\n'
              '  // Step 2: create op\n'
              '  OpType type = (OpType) pbOp.type();\n'
              '  OpX* opx = NULL;\n'
              '  switch (type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      int strideH, strideW, padding, activation;\n'
              '      //get_parameter_from_pb(pbOp, PM_KERNEL_H, kernel')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2995,
         lineno=265,
         tokens=11,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='strideH',
         body='int strideH, strideW, padding, activation;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2996,
         lineno=266,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='H);\n'
              '      //get_parameter_from_pb(pbOp, PM_KERNEL_W, kernelW);\n'
              '      assert(get_parameter_from_pb(pbOp, PM_STRIDE_H, '
              'strideH));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_STRIDE_W, '
              'strideW));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_PAD, padding));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_ACTI, '
              'activation));\n'
              '      opx = create_')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2997,
         lineno=272,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='conv2d(inputs[0], inputs[1], strideH, strideW,\n'
              '          (PaddingMode) padding, (ActiMode) activation, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      int numDim, axis;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_AXIS, axis));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUMDIM, numDim));\n'
              '      opx = create_concat(axis, nu')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2998,
         lineno=278,
         tokens=6,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='numDim',
         body='int numDim, axis;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=2999,
         lineno=281,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mDim, pbOp.input_size(), inputs, isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      opx = create_element(inputs[0], inputs[1], type, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      int numOutputs, axis;\n'
              '      assert(get')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3000,
         lineno=294,
         tokens=6,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='numOutputs',
         body='int numOutputs, axis;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3001,
         lineno=295,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_parameter_from_pb(pbOp, PM_AXIS, axis));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUM_OUTPUTS, '
              'numOutputs));\n'
              '      opx = create_split(inputs[0], axis, numOutputs, '
              'isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_TANH:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      opx = create_activation(inputs[0]')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3002,
         lineno=305,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', type);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      opx = create_mul(inputs[0], inputs[1]);\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      //int kernelH, kernelW;\n'
              '      //assert(get_parameter_from_pb(pbOp, PM_KERNEL_H, '
              'kernelH));\n'
              '      //assert(get_pa')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3003,
         lineno=319,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rameter_from_pb(pbOp, PM_KERNEL_W, kernelW));\n'
              '      opx = create_enlarge(inputs[0], inputs[1], isSrcOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 2);\n'
              '      int activation;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_ACTI, '
              'activation));\n'
              '      opx = create_matmul(inputs[0], inputs[1], (ActiMode) act')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3004,
         lineno=326,
         tokens=3,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='activation',
         body='int activation;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3005,
         lineno=328,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ivation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      assert(pbOp.input_size() == 1);\n'
              '      int numDim, permIdx, perm[MAX_DIM], shuffle;\n'
              '      assert(get_parameter_from_pb(pbOp, PM_NUMDIM, numDim));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_PERM, permIdx));\n'
              '      assert(get_parameter_from_pb(pbOp, PM_OUTSHUFFLE, '
              'shuffle));\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3006,
         lineno=334,
         tokens=13,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='numDim',
         body='int numDim, permIdx, perm[MAX_DIM], shuffle;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3007,
         lineno=338,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = numDim-1; i >=0; i--) {\n'
              '        perm[i] = permIdx % numDim;\n'
              '        permIdx = permIdx / numDim;\n'
              '      }\n'
              '      assert(permIdx == 0);\n'
              '      for (int i = 0; i < numDim; i++)\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3008,
         lineno=344,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = i + 1; j < numDim; j++)\n'
              '          assert(perm[i] != perm[j]);\n'
              '      opx = create_transpose(inputs[0], numDim, perm, '
              'shuffle);\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_MAX:\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_BATCHNORM:\n'
              '    default:\n'
              '    {\n'
              '      assert(false);\n'
              '    }\n'
              '  }\n'
              '  assert(opx != NULL);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3009,
         lineno=358,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (isSrcOp)\n'
              '    srcOps.push_back(opx);\n'
              '  else\n'
              '    dstOps.push_back(opx);\n'
              '}\n'
              '\n'
              'void GraphXfer::load_graph_xfer_from_pb_file(Model* model,\n'
              '                                             '
              'std::vector<GraphXfer*>& xfers,\n'
              '                                             std::string '
              'filename)\n'
              '{\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '  GraphSubst::RuleCollection collection;\n'
              '  std::fstream input(filename, ios::in);\n'
              '  assert(collection.ParseFromIstream(&input));\n'
              '  //printf("Number of generated substitutions = %d\\n", '
              'collection.rule_size());\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3010,
         lineno=364,
         tokens=422,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::load_graph_xfer_from_pb_file',
         body='void GraphXfer::load_graph_xfer_from_pb_file(Model* model,\n'
              '                                             '
              'std::vector<GraphXfer*>& xfers,\n'
              '                                             std::string '
              'filename)\n'
              '{\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '  GraphSubst::RuleCollection collection;\n'
              '  std::fstream input(filename, ios::in);\n'
              '  assert(collection.ParseFromIstream(&input));\n'
              '  //printf("Number of generated substitutions = %d\\n", '
              'collection.rule_size());\n'
              '  for (int i = 0; i < collection.rule_size(); i++) {\n'
              '    const GraphSubst::Rule& rule = collection.rule(i);\n'
              '    std::map<int, TensorX> mappedInputs;\n'
              '    GraphXfer* subst = new GraphXfer(model);\n'
              '    for (int j = 0; j < rule.srcop_size(); j++)\n'
              '      subst->create_operator_from_pb(rule.srcop(j), '
              'mappedInputs, true);\n'
              '    for (int j = 0; j < rule.dstop_size(); j++)\n'
              '      subst->create_operator_from_pb(rule.dstop(j), '
              'mappedInputs, false);\n'
              '    for (int j = 0; j < rule.mappedoutput_size(); j++) {\n'
              '      const GraphSubst::MapOutput& mapOutput = '
              'rule.mappedoutput(j);\n'
              '      int srcOpId = mapOutput.srcopid();\n'
              '      int dstOpId = mapOutput.dstopid();\n'
              '      int srcTsId = mapOutput.srctsid();\n'
              '      int dstTsId = mapOutput.dsttsid();\n'
              '      assert(srcOpId < (int)subst->srcOps.size());\n'
              '      assert(dstOpId < (int)subst->dstOps.size());\n'
              '      assert(srcTsId < '
              '(int)subst->srcOps[srcOpId]->outputs.size());\n'
              '      assert(dstTsId < '
              '(int)subst->dstOps[dstOpId]->outputs.size());\n'
              '      '
              'subst->map_output(subst->srcOps[srcOpId]->outputs[srcTsId],\n'
              '                        '
              'subst->dstOps[dstOpId]->outputs[dstTsId]);\n'
              '    }\n'
              '    xfers.push_back(subst);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3011,
         lineno=369,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='collection',
         body='GraphSubst::RuleCollection collection;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3012,
         lineno=370,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='input',
         body='input(filename, ios::in)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3013,
         lineno=373,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < collection.rule_size(); i++) {\n'
              '    const GraphSubst::Rule& rule = collection.rule(i);\n'
              '    std::map<int, TensorX> mappedInputs;\n'
              '    GraphXfer* subst = new GraphXfer(model);\n'
              '    for (int j = 0; j < rule.srcop_size(); j++)\n'
              '      subst->create_operator_from_pb(rule.srcop(j), '
              'mappedInputs, true);\n'
              '    for (int j = 0; j < rule.dstop_size(); j++)\n'
              '      subst->create_operator_from_pb(rule.dstop(j), '
              'mappedInputs, false);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3014,
         lineno=375,
         tokens=11,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='mappedInputs',
         body='std::map<int, TensorX> mappedInputs;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3015,
         lineno=381,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int j = 0; j < rule.mappedoutput_size(); j++) {\n'
              '      const GraphSubst::MapOutput& mapOutput = '
              'rule.mappedoutput(j);\n'
              '      int srcOpId = mapOutput.srcopid();\n'
              '      int dstOpId = mapOutput.dstopid();\n'
              '      int srcTsId = mapOutput.srctsid();\n'
              '      int dstTsId = mapOutput.dsttsid();\n'
              '      assert(srcOpId < (int)subst->srcOps.size());\n'
              '      assert(dstOpId < (int)subst->dstOps.size());\n'
              '      assert(srcTsId < (int)subst->srcOps[srcOpId]->outputs.')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3016,
         lineno=389,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='size());\n'
              '      assert(dstTsId < '
              '(int)subst->dstOps[dstOpId]->outputs.size());\n'
              '      '
              'subst->map_output(subst->srcOps[srcOpId]->outputs[srcTsId],\n'
              '                        '
              'subst->dstOps[dstOpId]->outputs[dstTsId]);\n'
              '    }\n'
              '    xfers.push_back(subst);\n'
              '  }\n'
              '}\n'
              '\n'
              '// Helper functions\n'
              'TNParameter to_tn_parameter(bool isInput, int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return isInput ? IN_0 : OU_0;\n'
              '    case 1: return isInput ? IN_1 : OU_1;\n'
              '    case 2: return isInput ? I')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3017,
         lineno=399,
         tokens=136,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tn_parameter',
         body='TNParameter to_tn_parameter(bool isInput, int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return isInput ? IN_0 : OU_0;\n'
              '    case 1: return isInput ? IN_1 : OU_1;\n'
              '    case 2: return isInput ? IN_2 : OU_2;\n'
              '    case 3: return isInput ? IN_3 : OU_3;\n'
              '    case 4: return isInput ? IN_4 : OU_4;\n'
              '    case 5: return isInput ? IN_5 : OU_5;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3018,
         lineno=399,
         tokens=11,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tn_parameter',
         body='to_tn_parameter(bool isInput, int n)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3019,
         lineno=404,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='N_2 : OU_2;\n'
              '    case 3: return isInput ? IN_3 : OU_3;\n'
              '    case 4: return isInput ? IN_4 : OU_4;\n'
              '    case 5: return isInput ? IN_5 : OU_5;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'DIMParameter to_dim_parameter(')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3020,
         lineno=414,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return DIM_0;\n'
              '    case 1: return DIM_1;\n'
              '    case 2: return DIM_2;\n'
              '    case 3: return DIM_3;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'PMConstraint::PMConstraint(Compare c, PM')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3021,
         lineno=414,
         tokens=69,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='to_dim_parameter',
         body='DIMParameter to_dim_parameter(int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return DIM_0;\n'
              '    case 1: return DIM_1;\n'
              '    case 2: return DIM_2;\n'
              '    case 3: return DIM_3;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3022,
         lineno=414,
         tokens=6,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='to_dim_parameter',
         body='to_dim_parameter(int n)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3023,
         lineno=427,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Parameter p, int v)\n'
              ': comp(c), para(p), value(v) {}\n'
              '\n'
              'TNConstraint::TNConstraint(Compare c, TNParameter p, '
              'DIMParameter d, int v)\n'
              ': singlePara(true), comp(c), para1(p), dim1(d), value(v) {}\n'
              '\n'
              'TNConstraint::TNConstraint(Compare c, TNParameter p1, '
              'DIMParameter d1,\n'
              '                           TNParameter p2, DIMParameter d2)\n'
              ': singlePara(false), comp(c), para1(p1), para2(p2), dim1(d1), '
              'dim2(d2) {}\n'
              '\n'
              'Tensor TensorX::to_tensor(const GraphXfer* xfer) const\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3024,
         lineno=427,
         tokens=27,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='PMConstraint::PMConstraint',
         body='PMConstraint::PMConstraint(Compare c, PMParameter p, int v)\n'
              ': comp(c), para(p), value(v) {}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3025,
         lineno=430,
         tokens=40,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TNConstraint::TNConstraint',
         body='TNConstraint::TNConstraint(Compare c, TNParameter p, '
              'DIMParameter d, int v)\n'
              ': singlePara(true), comp(c), para1(p), dim1(d), value(v) {}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3026,
         lineno=433,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TNConstraint::TNConstraint',
         body='TNConstraint::TNConstraint(Compare c, TNParameter p1, '
              'DIMParameter d1,\n'
              '                           TNParameter p2, DIMParameter d2)\n'
              ': singlePara(false), comp(c), para1(p1), para2(p2), dim1(d1), '
              'dim2(d2) {}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3027,
         lineno=437,
         tokens=123,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TensorX::to_tensor',
         body='Tensor TensorX::to_tensor(const GraphXfer* xfer) const\n'
              '{\n'
              '  if (op != NULL) {\n'
              '    assert(op->mapOp.ptr != NULL);\n'
              '    return op->mapOp.ptr->outputs[idx];\n'
              '  } else {\n'
              '    std::multimap<int, std::pair<Op, int> >::const_iterator '
              'it;\n'
              '    it = xfer->mappedInputs.find(idx);\n'
              '    assert(it != xfer->mappedInputs.end());\n'
              '    Op op = it->second.first;\n'
              '    int outIdx = it->second.second;\n'
              '    return op.ptr->outputs[outIdx];\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3028,
         lineno=439,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (op != NULL) {\n'
              '    assert(op->mapOp.ptr != NULL);\n'
              '    return op->mapOp.ptr->outputs[idx];\n'
              '  } else {\n'
              '    std::multimap<int, std::pair<Op, int> >::const_iterator '
              'it;\n'
              '    it = xfer->mappedInputs.find(idx);\n'
              '    assert(it != xfer->mappedInputs.end());\n'
              '    Op op = it->second.first;\n'
              '    int outIdx = it->second.second;\n'
              '    return op.ptr->outputs[outIdx];\n'
              '  }\n'
              '}\n'
              '\n'
              '//void add_out_edges(TensorX e)\n'
              '//{\n'
              '//  if (e.op != NULL) e.op->numOutEdges ++;\n'
              '//}\n'
              '\n'
              'OpX::OpX(const OpX& _op)\n'
              ': type(_o')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3029,
         lineno=457,
         tokens=52,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(const OpX& _op)\n'
              ': type(_op.type), mapOp(_op.mapOp), inputs(_op.inputs), '
              'outputs(_op.outputs),\n'
              '  pmConstraints(_op.pmConstraints), '
              'tnConstraints(_op.tnConstraints)\n'
              '{}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3030,
         lineno=458,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p.type), mapOp(_op.mapOp), inputs(_op.inputs), '
              'outputs(_op.outputs),\n'
              '  pmConstraints(_op.pmConstraints), '
              'tnConstraints(_op.tnConstraints)\n'
              '{}\n'
              '\n'
              'OpX::OpX(OpType _type, TensorX in1, int numOutputs)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  switch (type) {\n'
              '    case OP_RESHAPE:\n'
              '    case OP_TRANSPOSE:\n'
              '    case OP_RELU:\n'
              '    case OP_TANH:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_MERGE_GCONV:\n'
              '    {\n'
              '      TensorX out(this, 0);\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3031,
         lineno=462,
         tokens=153,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, TensorX in1, int numOutputs)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  switch (type) {\n'
              '    case OP_RESHAPE:\n'
              '    case OP_TRANSPOSE:\n'
              '    case OP_RELU:\n'
              '    case OP_TANH:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_MERGE_GCONV:\n'
              '    {\n'
              '      TensorX out(this, 0);\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '      for (int i = 0; i < numOutputs; i++) {\n'
              '        TensorX out(this, i);\n'
              '        outputs.push_back(out);\n'
              '      }\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3032,
         lineno=479,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < numOutputs; i++) {\n'
              '        TensorX out(this, i);\n'
              '        outputs.push_back(out);\n'
              '      }\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'OpX::OpX(OpType _type, TensorX in1, TensorX in2)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_CONV2D:\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_CONCAT:\n'
              '    ca')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3033,
         lineno=489,
         tokens=136,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, TensorX in1, TensorX in2)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_CONV2D:\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_CONCAT:\n'
              '    case OP_MATMUL:\n'
              '    case OP_MUL:\n'
              '    case OP_ENLARGE:\n'
              '    case OP_BROADCAST_ADD:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3034,
         lineno=501,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='se OP_MATMUL:\n'
              '    case OP_MUL:\n'
              '    case OP_ENLARGE:\n'
              '    case OP_BROADCAST_ADD:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'OpX::OpX(OpType _type, TensorX in1, TensorX in2, TensorX in3)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_FUSE_CONV_BATCHNORM_ALPHA_VAR:\n'
              '      outputs.push_back(out);\n'
              '      ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3035,
         lineno=512,
         tokens=98,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, TensorX in1, TensorX in2, TensorX in3)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_FUSE_CONV_BATCHNORM_ALPHA_VAR:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3036,
         lineno=522,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              'OpX::OpX(OpType _type, TensorX in1, TensorX in2, TensorX in3, '
              'TensorX in4)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  inputs.push_back(in4);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_FUSE_CONV_BATCHNORM_BIAS:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'OpX::OpX(OpType _type, TensorX in1,')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3037,
         lineno=527,
         tokens=110,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, TensorX in1, TensorX in2, TensorX in3, '
              'TensorX in4)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  inputs.push_back(in4);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_FUSE_CONV_BATCHNORM_BIAS:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3038,
         lineno=544,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' TensorX in2, TensorX in3, TensorX in4, TensorX in5)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  inputs.push_back(in4);\n'
              '  inputs.push_back(in5);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_BATCHNORM:\n'
              '    case OP_FUSE_CONV_BATCHNORM:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              '\n'
              'OpX::OpX(OpType _type, int n, TensorX* ins)\n'
              ': type(_type)\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3039,
         lineno=544,
         tokens=127,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, TensorX in1, TensorX in2, TensorX in3, '
              'TensorX in4, TensorX in5)\n'
              ': type(_type)\n'
              '{\n'
              '  inputs.push_back(in1);\n'
              '  inputs.push_back(in2);\n'
              '  inputs.push_back(in3);\n'
              '  inputs.push_back(in4);\n'
              '  inputs.push_back(in5);\n'
              '  TensorX out(this, 0);\n'
              '  switch (type) {\n'
              '    case OP_BATCHNORM:\n'
              '    case OP_FUSE_CONV_BATCHNORM:\n'
              '      outputs.push_back(out);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3040,
         lineno=564,
         tokens=65,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::OpX',
         body='OpX::OpX(OpType _type, int n, TensorX* ins)\n'
              ': type(_type)\n'
              '{\n'
              '  for (int i = 0; i < n; i++) {\n'
              '    inputs.push_back(ins[i]);\n'
              '  }\n'
              '  TensorX out(this, 0);\n'
              '  outputs.push_back(out);\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3041,
         lineno=567,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < n; i++) {\n'
              '    inputs.push_back(ins[i]);\n'
              '  }\n'
              '  TensorX out(this, 0);\n'
              '  outputs.push_back(out);\n'
              '}\n'
              '\n'
              'bool OpX::add_pm_constraint(Compare comp, PMParameter para, int '
              'value)\n'
              '{\n'
              '  PMConstraint pmc(comp, para, value);\n'
              '  pmConstraints.push_back(pmc);\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool OpX::add_input_constraint(Compare comp, TNParameter para,\n'
              '                               DIMParameter dim, int value)\n'
              '{\n'
              '  TNConstraint tnc(c')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3042,
         lineno=574,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::add_pm_constraint',
         body='bool OpX::add_pm_constraint(Compare comp, PMParameter para, int '
              'value)\n'
              '{\n'
              '  PMConstraint pmc(comp, para, value);\n'
              '  pmConstraints.push_back(pmc);\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3043,
         lineno=576,
         tokens=8,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='pmc',
         body='pmc(comp, para, value)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3044,
         lineno=581,
         tokens=50,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::add_input_constraint',
         body='bool OpX::add_input_constraint(Compare comp, TNParameter para,\n'
              '                               DIMParameter dim, int value)\n'
              '{\n'
              '  TNConstraint tnc(comp, para, dim, value);\n'
              '  tnConstraints.push_back(tnc);\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3045,
         lineno=584,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='omp, para, dim, value);\n'
              '  tnConstraints.push_back(tnc);\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool OpX::add_input_constraint(Compare comp,\n'
              '                               TNParameter para1, DIMParameter '
              'dim1,\n'
              '                               TNParameter para2, DIMParameter '
              'dim2)\n'
              '{\n'
              '  TNConstraint tnc(comp, para1, dim1, para2, dim2);\n'
              '  tnConstraints.push_back(tnc);\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool OpX::get_pm_constraint(PMParameter para, int& value) '
              'const\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3046,
         lineno=584,
         tokens=10,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='tnc',
         body='tnc(comp, para, dim, value)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3047,
         lineno=589,
         tokens=66,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::add_input_constraint',
         body='bool OpX::add_input_constraint(Compare comp,\n'
              '                               TNParameter para1, DIMParameter '
              'dim1,\n'
              '                               TNParameter para2, DIMParameter '
              'dim2)\n'
              '{\n'
              '  TNConstraint tnc(comp, para1, dim1, para2, dim2);\n'
              '  tnConstraints.push_back(tnc);\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3048,
         lineno=593,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='tnc',
         body='tnc(comp, para1, dim1, para2, dim2)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3049,
         lineno=598,
         tokens=82,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='OpX::get_pm_constraint',
         body='bool OpX::get_pm_constraint(PMParameter para, int& value) '
              'const\n'
              '{\n'
              '  for (size_t i = 0; i < pmConstraints.size(); i++)\n'
              '    if ((pmConstraints[i].comp == COMPARE_EQ)\n'
              '    && (pmConstraints[i].para == para)) {\n'
              '      value = pmConstraints[i].value;\n'
              '      return true;\n'
              '    }\n'
              '  return false;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3050,
         lineno=600,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < pmConstraints.size(); i++)\n'
              '    if ((pmConstraints[i].comp == COMPARE_EQ)\n'
              '    && (pmConstraints[i].para == para)) {\n'
              '      value = pmConstraints[i].value;\n'
              '      return true;\n'
              '    }\n'
              '  return false;\n'
              '}\n'
              '\n'
              'bool SrcOp::add_constraint(Compare comp, PMParameter para, int '
              'value)\n'
              '{\n'
              '  PMConstraint ooc(comp, para, value);\n'
              '  constraints.push_back(ooc);\n'
              '  return true;\n'
              '}\n'
              '\n'
              'bool SrcOp::match(Op op)\n'
              '{\n'
              '  if (op.guid == 0) return false;\n'
              '  if (type != OP_ANY && type != op.ptr->type)\n'
              '    return false;\n'
              '  bool pass = true;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3051,
         lineno=609,
         tokens=41,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SrcOp::add_constraint',
         body='bool SrcOp::add_constraint(Compare comp, PMParameter para, int '
              'value)\n'
              '{\n'
              '  PMConstraint ooc(comp, para, value);\n'
              '  constraints.push_back(ooc);\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3052,
         lineno=611,
         tokens=8,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='ooc',
         body='ooc(comp, para, value)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3053,
         lineno=616,
         tokens=260,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SrcOp::match',
         body='bool SrcOp::match(Op op)\n'
              '{\n'
              '  if (op.guid == 0) return false;\n'
              '  if (type != OP_ANY && type != op.ptr->type)\n'
              '    return false;\n'
              '  bool pass = true;\n'
              '  for (size_t i = 0; i < constraints.size(); i++) {\n'
              '    PMConstraint ooc = constraints[i];\n'
              '    int actValue = 0;\n'
              '    assert(op.ptr->get_int_parameter(ooc.para, &actValue));\n'
              '    switch (ooc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '        if (actValue != ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_NE:\n'
              '        if (actValue == ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_LT:\n'
              '        if (actValue >= ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_LE:\n'
              '        if (actValue > ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_GT:\n'
              '        if (actValue <= ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_GE:\n'
              '        if (actValue < ooc.value) pass = false;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return pass;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3054,
         lineno=622,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < constraints.size(); i++) {\n'
              '    PMConstraint ooc = constraints[i];\n'
              '    int actValue = 0;\n'
              '    assert(op.ptr->get_int_parameter(ooc.para, &actValue));\n'
              '    switch (ooc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '        if (actValue != ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_NE:\n'
              '        if (actValue == ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_LT:\n'
              '        if (actValue >= ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_LE:\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3055,
         lineno=637,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue > ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_GT:\n'
              '        if (actValue <= ooc.value) pass = false;\n'
              '        break;\n'
              '      case COMPARE_GE:\n'
              '        if (actValue < ooc.value) pass = false;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return pass;\n'
              '}\n'
              '\n'
              '/*\n'
              'SrcEdge::SrcEdge(int _idx, SrcOp* _op)\n'
              ': idx(_idx), op(_op)\n'
              '{}\n'
              '\n'
              'DstEdge::DstEdge(int _idx, DstOp* _op)\n'
              ': idx(_idx), op(_op)\n'
              '{}\n'
              '*/\n'
              '\n'
              'GraphXfer')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3056,
         lineno=662,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::GraphXfer(Model* _model)\n'
              ': model(_model), tensorId(10)\n'
              '{}\n'
              '\n'
              'OpX* GraphXfer::create_activation(TensorX input, OpType type, '
              'bool isSrcOp)\n'
              '{\n'
              '  OpX* activation = new OpX(type, input);\n'
              '  return activation;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_conv2d(TensorX input, TensorX weight,\n'
              '       ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3057,
         lineno=662,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::GraphXfer',
         body='GraphXfer::GraphXfer(Model* _model)\n'
              ': model(_model), tensorId(10)\n'
              '{}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3058,
         lineno=673,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                       //int kernelH, int kernelW,\n'
              '                              int strideH, int strideW,\n'
              '                              PaddingMode padding,\n'
              '                              ActiMode activation,\n'
              '                              bool isSrcOp)\n'
              '{\n'
              '  OpX* conv = new OpX(OP_CONV2D, input, weight);\n'
              '  //conv->add_pm_constraint(COMPARE_EQ, PM_KERNEL_H, kernelH);\n'
              '  //conv->add_pm_constraint(COMPARE_EQ, PM_KERNEL_W, kernelW);\n'
              '  conv->add_pm_constraint(COMPARE_EQ, PM_STRIDE_H, strideH);\n'
              '  conv->add_pm_constraint(COMPARE_EQ, PM_STRIDE_W, str')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3059,
         lineno=683,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ideW);\n'
              '  conv->add_pm_constraint(COMPARE_EQ, PM_PAD, padding);\n'
              '  conv->add_pm_constraint(COMPARE_EQ, PM_ACTI, activation);\n'
              '  //conv->add_input_constraint(COMPARE_EQ, IN_1, DIM_2, '
              'kernelH);\n'
              '  //conv->add_input_constraint(COMPARE_EQ, IN_1, DIM_3, '
              'kernelW);\n'
              '  // The followin')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3060,
         lineno=688,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='g is no longer true because of group conv\n'
              '  //conv->add_input_constraint(COMPARE_EQ, IN_1, DIM_1, IN_0, '
              'DIM_1);\n'
              '  return conv;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_batchnorm(TensorX input, TensorX scale,\n'
              '                                 TensorX bias, TensorX mean,\n'
              '                   ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3061,
         lineno=695,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='              TensorX var, bool isSrcOp)\n'
              '{\n'
              '  OpX* batch = new OpX(OP_BATCHNORM, input, scale, bias, mean, '
              'var);\n'
              '  return batch;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_element(TensorX input0, TensorX input1,\n'
              '                               OpType type, bool isSrcOp)\n'
              '{\n'
              '  OpX* element = new OpX(type, input0, input1);\n'
              '  return element;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_fuse_conv_batchnorm(TensorX conv_w, '
              'TensorX scale,\n'
              '                                           TensorX bias, '
              'TensorX mean,\n'
              '                                           TensorX var, bool '
              'isSrcOp)\n'
              '{\n'
              '  OpX*')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3062,
         lineno=712,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' fuse = new OpX(OP_FUSE_CONV_BATCHNORM, conv_w, scale, bias, '
              'mean, var);\n'
              '  return fuse;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_fuse_conv_batchnorm_alpha_var(TensorX '
              'conv_w, TensorX scale,\n'
              '                                           TensorX var, bool '
              'isSrcOp)\n'
              '{\n'
              '  OpX* fuse = new OpX(OP_FUSE_CONV_BATCHNORM_ALPHA_VAR, conv_w, '
              'scale, var);\n'
              '  return fuse;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_fuse_conv_batchnorm_bias(TensorX scale,\n'
              '                                           TensorX bias, '
              'TensorX mean,\n'
              '                                           TensorX var, bool '
              'isSrcOp)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3063,
         lineno=725,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '{\n'
              '  OpX* fuse = new OpX(OP_FUSE_CONV_BATCHNORM_BIAS, scale, bias, '
              'mean, var);\n'
              '  return fuse;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_broadcast_add(TensorX data, TensorX '
              'bias, bool isSrcOp)\n'
              '{\n'
              '  OpX* fuse = new OpX(OP_BROADCAST_ADD, data, bias);\n'
              '  return fuse;\n'
              '}\n'
              '\n'
              '\n'
              'OpX* GraphXfer::create_pool2d_avg(TensorX input, TensorX '
              'weight,\n'
              '                                  int strideH, int strideW,\n'
              '                                  PaddingMode padding,\n'
              '                                  ActiMode activation,\n'
              '                                  bool isSrcOp)\n'
              '{\n'
              '  OpX* poo')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3064,
         lineno=744,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l = new OpX(OP_POOL2D_AVG, input, weight);\n'
              '  pool->add_pm_constraint(COMPARE_EQ, PM_STRIDE_H, strideH);\n'
              '  pool->add_pm_constraint(COMPARE_EQ, PM_STRIDE_W, strideW);\n'
              '  pool->add_pm_constraint(COMPARE_EQ, PM_PAD, padding);\n'
              '  pool->add_pm_constraint(COMPARE_EQ, PM_ACTI, acti')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3065,
         lineno=748,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='vation);\n'
              '  pool->add_input_constraint(COMPARE_EQ, IN_1, DIM_0, IN_0, '
              'DIM_1);\n'
              '  return pool;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_matmul(TensorX input, TensorX weight,\n'
              '                              ActiMode activation,\n'
              '                              bool isSrcOp)\n'
              '{\n'
              '  OpX* matmul = new ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3066,
         lineno=757,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OpX(OP_MATMUL, input, weight);\n'
              '  matmul->add_pm_constraint(COMPARE_EQ, PM_ACTI, activation);\n'
              '  matmul->add_input_constraint(COMPARE_EQ, IN_1, DIM_0, IN_0, '
              'DIM_1);\n'
              '  return matmul;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_mul(TensorX x, TensorX y, bool isSrcOp)\n'
              '{\n'
              '  OpX* mul = new OpX(OP_M')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3067,
         lineno=765,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='UL, x, y);\n'
              '  mul->add_input_constraint(COMPARE_EQ, IN_0, DIM_ND, 0);\n'
              '  return mul;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_transpose(TensorX input, int numDim, '
              'int* perm,\n'
              '                                 int shuffle)\n'
              '{\n'
              '  OpX* transpose = new OpX(OP_TRANSPOSE, input);\n'
              '  int permIdx = 0;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3068,
         lineno=775,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numDim; i++)\n'
              '    permIdx = permIdx * numDim + perm[i];\n'
              '  transpose->add_pm_constraint(COMPARE_EQ, PM_PERM, permIdx);\n'
              '  transpose->add_pm_constraint(COMPARE_EQ, PM_OUTSHUFFLE, '
              'shuffle);\n'
              '  transpose->add_input_constraint(COMPARE_EQ, IN_0, DIM_ND, '
              'numDim);\n'
              '  return transpose;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_enlarge(TensorX w1, ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3069,
         lineno=783,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TensorX w2, bool isSrcOp)\n'
              '{\n'
              '  OpX* enlarge = new OpX(OP_ENLARGE, w1, w2);\n'
              '  //enlarge->add_pm_constraint(COMPARE_EQ, PM_KERNEL_H, '
              'kernelH);\n'
              '  //enlarge->add_pm_constraint(COMPARE_EQ, PM_KERNEL_W, '
              'kernelW);\n'
              '  enlarge->add_input_constraint(COMPARE_LE, IN_0, DIM_2, IN_1, '
              'DIM_2);\n'
              '  enlarge->add_input_constraint(COMPARE_LE, IN_0, DIM_3, IN_1, '
              'DIM')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3070,
         lineno=789,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_3);\n'
              '  return enlarge;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_merge_gconv(TensorX w, int count, bool '
              'isSrcOp)\n'
              '{\n'
              '  OpX* merge = new OpX(OP_MERGE_GCONV, w);\n'
              '  merge->add_pm_constraint(COMPARE_EQ, PM_MERGE_GCONV_COUNT, '
              'count);\n'
              '  return merge;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_concat(int axis, int numDim, TensorX '
              'in1, TensorX in2, bool isSrcOp)\n'
              '{\n'
              '  TensorX ins[2];\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3071,
         lineno=803,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  ins[0] = in1; ins[1] = in2;\n'
              '  return create_concat(axis, numDim, 2, ins, isSrcOp);\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_concat(int axis, int numDim, int n, '
              'TensorX* ins, bool isSrcOp)\n'
              '{\n'
              '  OpX* concat = new OpX(OP_CONCAT, n, ins);\n'
              '  concat->add_pm_constraint(COMPARE_EQ, PM_AXIS, axis);\n'
              '  concat->add_input_constraint(COMPARE_EQ, IN_0, DIM_ND, '
              'numDim);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3072,
         lineno=812,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 1; i < n; i++) {\n'
              '    TNParameter in_i = to_tn_parameter(true/*is_input*/, i);\n'
              '    concat->add_input_constraint(COMPARE_EQ, IN_0, DIM_ND,\n'
              '                                 in_i, DIM_ND);\n'
              '    for (int j = 0; j < numDim; j++) {\n'
              '      DIMParameter dim_j = to_dim_parameter(j);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3073,
         lineno=818,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (j != axis)\n'
              '        concat->add_input_constraint(COMPARE_EQ, IN_0, dim_j,\n'
              '                                     in_i, dim_j);\n'
              '    }\n'
              '  }\n'
              '  return concat;\n'
              '}\n'
              '\n'
              'OpX* GraphXfer::create_split(TensorX input, int axis, int n, '
              'bool isSrcOp)\n'
              '{\n'
              '  OpX* split = new OpX(OP_SPLIT, input, n);\n'
              '  split->add_pm_constraint(COMPARE_EQ, PM_AXIS, axis);\n'
              '  return split;\n'
              '}\n'
              '\n'
              'TensorX GraphXfer::new_tensor(void)\n'
              '{\n'
              '  TensorX t;\n'
              '  t.op = NULL;\n'
              '  t.idx = tensorId++;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'bool GraphXfer::map_output(Tensor')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3074,
         lineno=833,
         tokens=34,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::new_tensor',
         body='TensorX GraphXfer::new_tensor(void)\n'
              '{\n'
              '  TensorX t;\n'
              '  t.op = NULL;\n'
              '  t.idx = tensorId++;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3075,
         lineno=841,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='X src, TensorX dst)\n'
              '{\n'
              '  mappedOutputs[src] = dst;\n'
              '  return true;\n'
              '}\n'
              '\n'
              '//void GraphXfer::add_src_op(SrcOp* src)\n'
              '//{\n'
              '//  srcInEdges[src];\n'
              '//  srcOutEdges[src];\n'
              '//  srcOps.push_back(src);\n'
              '//}\n'
              '//\n'
              '//void GraphXfer::add_dst_op(DstOp* dst)\n'
              '//{\n'
              '//  dstInEdge')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3076,
         lineno=841,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::map_output',
         body='bool GraphXfer::map_output(TensorX src, TensorX dst)\n'
              '{\n'
              '  mappedOutputs[src] = dst;\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3077,
         lineno=856,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s[dst];\n'
              '//  dstOutEdges[dst];\n'
              '//  dstOps.push_back(dst);\n'
              '//}\n'
              '\n'
              '//void GraphXfer::add_src_edge(SrcOp* srcOp, SrcOp* dstOp, int '
              'srcIdx, int dstIdx)\n'
              '//{\n'
              '//  SubEdge<SrcOp> e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '//  srcInEdges[dstOp].insert(e);\n'
              '//  srcOutEdge')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3078,
         lineno=865,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s[srcOp].insert(e);\n'
              '//}\n'
              '\n'
              '//void GraphXfer::add_dst_edge(DstOp* srcOp, DstOp* dstOp, int '
              'srcIdx, int dstIdx)\n'
              '//{\n'
              '//  SubEdge<DstOp> e(srcOp, dstOp, srcIdx, dstIdx);\n'
              '//  dstInEdges[dstOp].insert(e);\n'
              '//  dstOutEdges[srcOp].insert(e);\n'
              '//}\n'
              '\n'
              '//bool GraphXfer::add_constraint(Compare comp,\n'
              '//                               SrcOp* src, PMParameter '
              'srcPara,\n'
              '//                               SrcOp* dst, PMParameter '
              'dstPara)\n'
              '//{\n'
              '//  TwoOpConstraint gc(comp, src, srcPara, dst, dstPara);\n'
              '//  constraints.pus')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3079,
         lineno=880,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='h_back(gc);\n'
              '//  return true;\n'
              '//}\n'
              '\n'
              '//bool GraphXfer::map_input(SrcOp* src, DstOp* dst)\n'
              '//{\n'
              '//  assert(src->mapInput == NULL);\n'
              '//  assert(dst->mapInput == NULL);\n'
              '//  src->mapInput = dst;\n'
              '//  dst->mapInput = src;\n'
              '//  return true;\n'
              '//}\n'
              '\n'
              '//bool GraphXfer')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3080,
         lineno=893,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::map_output(SrcOp* src, DstOp* dst)\n'
              '//{\n'
              '//  assert(src->mapOutput == NULL);\n'
              '//  assert(dst->mapOutput == NULL);\n'
              '//  src->mapOutput = dst;\n'
              '//  dst->mapOutput = src;\n'
              '//  return true;\n'
              '//}\n'
              '\n'
              'bool GraphXfer::can_match(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n'
              '  if (srcOp->type != op.ptr->type) return false;\n'
              '  // check num input tensors\n'
              '  if ((int)srcOp->inputs.size() != op.ptr->numInputs) return '
              'false;\n'
              '  // check pmConstraints\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3081,
         lineno=902,
         tokens=1184,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::can_match',
         body='bool GraphXfer::can_match(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n'
              '  if (srcOp->type != op.ptr->type) return false;\n'
              '  // check num input tensors\n'
              '  if ((int)srcOp->inputs.size() != op.ptr->numInputs) return '
              'false;\n'
              '  // check pmConstraints\n'
              '  for (size_t i = 0; i < srcOp->pmConstraints.size(); i++) {\n'
              '    PMConstraint pmc = srcOp->pmConstraints[i];\n'
              '    int actValue = 0;\n'
              '    assert(op.ptr->get_int_parameter(pmc.para, &actValue));\n'
              '    //printf("pmc[%d] para(%d) comp(%d) value(%d) '
              'actValue(%d)\\n",\n'
              '    //       i, pmc.para, pmc.comp, pmc.value, actValue);\n'
              '    switch (pmc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '      {\n'
              '        if (actValue != pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_NE:\n'
              '      {\n'
              '        if (actValue == pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LT:\n'
              '      {\n'
              '        if (actValue >= pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LE:\n'
              '      {\n'
              '        if (actValue > pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GT:\n'
              '      {\n'
              '        if (actValue <= pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GE:\n'
              '      {\n'
              '        if (actValue < pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  // check inputs\n'
              '  std::map<int, std::pair<Op, int> > newMapInputs;\n'
              '  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // input tensor\n'
              '      std::multimap<int, std::pair<Op, int> >::const_iterator '
              'it;\n'
              '      it = mappedInputs.find(in.idx);\n'
              '      if (it != mappedInputs.end()) {\n'
              '        Op mappedOp = it->second.first;\n'
              '        int mappedIdx = it->second.second;\n'
              '        if (!(graph->has_edge(mappedOp, op, mappedIdx, i)))\n'
              '          return false;\n'
              '      } else {\n'
              '        std::map<int, std::pair<Op, int> >::const_iterator '
              'newit;\n'
              '        newit = newMapInputs.find(in.idx);\n'
              '        if (newit != newMapInputs.end()) {\n'
              '          Op mappedOp = newit->second.first;\n'
              '          int mappedIdx = newit->second.second;\n'
              '          if (!(graph->has_edge(mappedOp, op, mappedIdx, i)))\n'
              '            return false;\n'
              '        } else {\n'
              '          std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '          std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '          for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '            Edge e = *it2;\n'
              '            if (e.dstIdx == (int)i) {\n'
              '              newMapInputs.insert(std::make_pair(in.idx,\n'
              '                                      std::make_pair(e.srcOp, '
              'e.srcIdx)));\n'
              '            }\n'
              '          }\n'
              '        }\n'
              '        // Do nothing when we check the match\n'
              '        /* mapped in.idx to an op\n'
              '        std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '        std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '        for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '          Edge e = *it2;\n'
              '          if (e.dstIdx == i)\n'
              '            mappedInputs[in.idx] = std::make_pair(e.srcOp, '
              'e.srcIdx);\n'
              '        }*/\n'
              '      }\n'
              '    } else {\n'
              '      // intermediate tensor\n'
              '      assert(in.op->mapOp.ptr != NULL);\n'
              '      if (!(graph->has_edge(in.op->mapOp, op, in.idx, i)))\n'
              '        return false;\n'
              '    }\n'
              '  }\n'
              '  // check tnConstraints\n'
              '  for (size_t i = 0; i < srcOp->tnConstraints.size(); i++) {\n'
              '    TNConstraint tnc = srcOp->tnConstraints[i];\n'
              '    int actValue = 0, expValue = 0;\n'
              '    if (tnc.singlePara) {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      expValue = tnc.value;\n'
              '    } else {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      assert(op.ptr->get_input_parameter(tnc.para2, tnc.dim2, '
              '&expValue));\n'
              '    }\n'
              '    switch (tnc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '      {\n'
              '        if (actValue != expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_NE:\n'
              '      {\n'
              '        if (actValue == expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LT:\n'
              '      {\n'
              '        if (actValue >= expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LE:\n'
              '      {\n'
              '        if (actValue > expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GT:\n'
              '      {\n'
              '        if (actValue <= expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GE:\n'
              '      {\n'
              '        if (actValue < expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3082,
         lineno=908,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < srcOp->pmConstraints.size(); i++) {\n'
              '    PMConstraint pmc = srcOp->pmConstraints[i];\n'
              '    int actValue = 0;\n'
              '    assert(op.ptr->get_int_parameter(pmc.para, &actValue));\n'
              '    //printf("pmc[%d] para(%d) comp(%d) value(%d) '
              'actValue(%d)\\n",\n'
              '    //       i, pmc.para, pmc.comp, pmc.value, actValue);\n'
              '    switch (pmc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '      {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3083,
         lineno=917,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue != pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_NE:\n'
              '      {\n'
              '        if (actValue == pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LT:\n'
              '      {\n'
              '        if (actValue >= pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LE:\n'
              '      {\n'
              '        if (actValue > pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GT:\n'
              '      {\n'
              '        if (actValue <= pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GE:\n'
              '      {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3084,
         lineno=942,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue < pmc.value) return false;\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  // check inputs\n'
              '  std::map<int, std::pair<Op, int> > newMapInputs;\n'
              '  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // input tensor\n'
              '      std::multimap<int, std::pair<Op, int> >::const_iterator '
              'it;\n'
              '      it = mappedInputs.find(in.idx);\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3085,
         lineno=950,
         tokens=18,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='newMapInputs',
         body='std::map<int, std::pair<Op, int> > newMapInputs;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3086,
         lineno=957,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (it != mappedInputs.end()) {\n'
              '        Op mappedOp = it->second.first;\n'
              '        int mappedIdx = it->second.second;\n'
              '        if (!(graph->has_edge(mappedOp, op, mappedIdx, i)))\n'
              '          return false;\n'
              '      } else {\n'
              '        std::map<int, std::pair<Op, int> >::const_iterator '
              'newit;\n'
              '        newit = newMapInputs.find(in.idx);\n'
              '        if (newit != newMapInputs.end()) {\n'
              '          Op mappedOp = newit->second.first;\n'
              '          int mappedIdx = newit->second.second;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3087,
         lineno=963,
         tokens=19,
         depth=8,
         parent_id=None,
         category='variable',
         summary=False,
         name='newit',
         body='std::map<int, std::pair<Op, int> >::const_iterator newit;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3088,
         lineno=968,
         tokens=59,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          if (!(graph->has_edge(mappedOp, op, mappedIdx, i)))\n'
              '            return false;\n'
              '        } else {\n'
              '          std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '          std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3089,
         lineno=972,
         tokens=13,
         depth=10,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3090,
         lineno=973,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '            Edge e = *it2;\n'
              '            if (e.dstIdx == (int)i) {\n'
              '              newMapInputs.insert(std::make_pair(in.idx,\n'
              '                                      std::make_pair(e.srcOp, '
              'e.srcIdx)));\n'
              '            }\n'
              '          }\n'
              '        }\n'
              '        // Do nothing when we check the match\n'
              '        /* mapped in.idx to an op\n'
              '        std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '        std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3091,
         lineno=985,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '          Edge e = *it2;\n'
              '          if (e.dstIdx == i)\n'
              '            mappedInputs[in.idx] = std::make_pair(e.srcOp, '
              'e.srcIdx);\n'
              '        }*/\n'
              '      }\n'
              '    } else {\n'
              '      // intermediate tensor\n'
              '      assert(in.op->mapOp.ptr != NULL);\n'
              '      if (!(graph->has_edge(in.op->mapOp, op, in.idx, i)))\n'
              '        return false;\n'
              '    }\n'
              '  }\n'
              '  // check tnConstraints\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3092,
         lineno=999,
         tokens=49,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < srcOp->tnConstraints.size(); i++) {\n'
              '    TNConstraint tnc = srcOp->tnConstraints[i];\n'
              '    int actValue = 0, expValue = 0;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3093,
         lineno=1002,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (tnc.singlePara) {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      expValue = tnc.value;\n'
              '    } else {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      assert(op.ptr->get_input_parameter(tnc.para2, tnc.dim2, '
              '&expValue));\n'
              '    }\n'
              '    switch (tnc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '      {\n'
              '        if (actValue != expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_NE:\n'
              '      {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3094,
         lineno=1017,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue == expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LT:\n'
              '      {\n'
              '        if (actValue >= expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_LE:\n'
              '      {\n'
              '        if (actValue > expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GT:\n'
              '      {\n'
              '        if (actValue <= expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      case COMPARE_GE:\n'
              '      {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3095,
         lineno=1037,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue < expValue) return false;\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void GraphXfer::match(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3096,
         lineno=1047,
         tokens=199,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::match',
         body='void GraphXfer::match(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n'
              '  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // Update mappedInputs\n'
              '      std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it2;\n'
              '      for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '        Edge e = *it2;\n'
              '        if (e.dstIdx == (int)i) {\n'
              '          mappedInputs.insert(std::make_pair(in.idx,\n'
              '                                  std::make_pair(e.srcOp, '
              'e.srcIdx)));\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  // Map srcOp to Op\n'
              '  srcOp->mapOp = op;\n'
              '  mappedOps[op] = srcOp;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3097,
         lineno=1049,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // Update mappedInputs\n'
              '      std::set<Edge, EdgeCompare> list = '
              'graph->inEdges.find(op)->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it2;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3098,
         lineno=1054,
         tokens=13,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='it2',
         body='std::set<Edge, EdgeCompare>::const_iterator it2;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3099,
         lineno=1055,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '        Edge e = *it2;\n'
              '        if (e.dstIdx == (int)i) {\n'
              '          mappedInputs.insert(std::make_pair(in.idx,\n'
              '                                  std::make_pair(e.srcOp, '
              'e.srcIdx)));\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  // Map srcOp to Op\n'
              '  srcOp->mapOp = op;\n'
              '  mappedOps[op] = srcOp;\n'
              '}\n'
              '\n'
              'void GraphXfer::unmatch(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3100,
         lineno=1069,
         tokens=141,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::unmatch',
         body='void GraphXfer::unmatch(OpX* srcOp, Op op, Graph* graph)\n'
              '{\n'
              '  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // Update mappedInputsa\n'
              '      std::multimap<int, std::pair<Op, int> >::iterator it;\n'
              '      it = mappedInputs.find(in.idx);\n'
              '      mappedInputs.erase(it);\n'
              '    }\n'
              '  }\n'
              '  // Unmap op\n'
              '  mappedOps.erase(op);\n'
              '  srcOp->mapOp.guid = 0;\n'
              '  srcOp->mapOp.ptr = NULL;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3101,
         lineno=1071,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < srcOp->inputs.size(); i++) {\n'
              '    TensorX in = srcOp->inputs[i];\n'
              '    if (in.op == NULL) {\n'
              '      // Update mappedInputsa\n'
              '      std::multimap<int, std::pair<Op, int> >::iterator it;\n'
              '      it = mappedInputs.find(in.idx);\n'
              '      mappedInputs.erase(it);\n'
              '    }\n'
              '  }\n'
              '  // Unmap op\n'
              '  mappedOps.erase(op);\n'
              '  srcOp->mapOp.guid = 0;\n'
              '  srcOp->mapOp.ptr = NULL;\n'
              '}\n'
              '\n'
              'void GraphXfer::run(int depth, Graph* gra')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3102,
         lineno=1086,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ph,\n'
              '                    std::priority_queue<Graph*, '
              'std::vector<Graph*>, GraphCompare>& candidates,\n'
              '                    std::set<size_t>& hashmap, float threshold, '
              'int maxNumOps)\n'
              '{\n'
              '  //printf("run: depth(%d) srcOps.size(%zu) graph.size(%zu) '
              'candidates(%zu)\\n", depth, srcOps.size(), '
              'graph->inEdges.size(), candidates.size());\n'
              '  if (depth >= (int)srcOps.size()) {\n'
              '    // Create dst operators\n'
              '    bool pass = true;\n'
              '    std::vector<OpX*>::const_iterator dstIt;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3103,
         lineno=1086,
         tokens=717,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::run',
         body='void GraphXfer::run(int depth, Graph* graph,\n'
              '                    std::priority_queue<Graph*, '
              'std::vector<Graph*>, GraphCompare>& candidates,\n'
              '                    std::set<size_t>& hashmap, float threshold, '
              'int maxNumOps)\n'
              '{\n'
              '  //printf("run: depth(%d) srcOps.size(%zu) graph.size(%zu) '
              'candidates(%zu)\\n", depth, srcOps.size(), '
              'graph->inEdges.size(), candidates.size());\n'
              '  if (depth >= (int)srcOps.size()) {\n'
              '    // Create dst operators\n'
              '    bool pass = true;\n'
              '    std::vector<OpX*>::const_iterator dstIt;\n'
              '    for (dstIt = dstOps.begin(); dstIt != dstOps.end(); '
              'dstIt++)\n'
              '      if (pass) {\n'
              '        OpX* dstOp = *dstIt;\n'
              '        pass = (pass & create_new_operator(dstOp, '
              'dstOp->mapOp));\n'
              '      }\n'
              '    if (!pass) return;\n'
              '    // Check that output tensors with external edges are '
              'mapped\n'
              '    std::map<Op, OpX*, OpCompare>::const_iterator opIt;\n'
              '    for (opIt = mappedOps.begin(); opIt != mappedOps.end(); '
              'opIt++) {\n'
              '      const std::set<Edge, EdgeCompare>& list = '
              'graph->outEdges[opIt->first];\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '      for (it = list.begin(); it != list.end(); it++)\n'
              '        if (mappedOps.find(it->dstOp) == mappedOps.end()) {\n'
              '          // dstOp is external, (srcOp, srcIdx) must be in '
              'mappedOutputs\n'
              '          TensorX srcTen;\n'
              '          srcTen.op = opIt->second;\n'
              '          srcTen.idx = it->srcIdx;\n'
              '          if (mappedOutputs.find(srcTen) == '
              'mappedOutputs.end()) {\n'
              '            pass = false;\n'
              '            return;\n'
              '          }\n'
              '        }\n'
              '    }\n'
              '    // Generate a new graph by applying xfer rule\n'
              '    Graph* newGraph = create_new_graph(graph);\n'
              '    // Check that the new graph should not have any loop\n'
              '    if (newGraph->has_loop()) {\n'
              '      //printf("Found a new graph with LOOP!!!!\\n");\n'
              '      delete newGraph;\n'
              '      return;\n'
              '    }\n'
              '    // TODO: remove me for better performance\n'
              '    assert(newGraph->check_correctness());\n'
              '    if (newGraph->total_cost() < threshold && '
              '(int)newGraph->inEdges.size() < maxNumOps) {\n'
              '      if (hashmap.find(newGraph->hash()) == hashmap.end()) {\n'
              '        hashmap.insert(newGraph->hash());\n'
              '        candidates.push(newGraph);\n'
              '      }\n'
              '    } else {\n'
              '      delete newGraph;\n'
              '    }\n'
              '  } else {\n'
              '    OpX* srcOp = srcOps[depth];\n'
              '    std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '    for (it = graph->inEdges.begin(); it != '
              'graph->inEdges.end(); it++) {\n'
              '      //printf("can_match(%d)\\n", can_match(srcOp, it->first, '
              'graph));\n'
              '      if (can_match(srcOp, it->first, graph)\n'
              '      && (mappedOps.find(it->first) == mappedOps.end())) {\n'
              '        Op op = it->first;\n'
              '        // Check mapOutput\n'
              '        match(srcOp, op, graph);\n'
              '        run(depth + 1, graph, candidates, hashmap, threshold, '
              'maxNumOps);\n'
              '        unmatch(srcOp, op, graph);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3104,
         lineno=1094,
         tokens=12,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='dstIt',
         body='std::vector<OpX*>::const_iterator dstIt;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3105,
         lineno=1095,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (dstIt = dstOps.begin(); dstIt != dstOps.end(); '
              'dstIt++)\n'
              '      if (pass) {\n'
              '        OpX* dstOp = *dstIt;\n'
              '        pass = (pass & create_new_operator(dstOp, '
              'dstOp->mapOp));\n'
              '      }\n'
              '    if (!pass) return;\n'
              '    // Check that output tensors with external edges are '
              'mapped\n'
              '    std::map<Op, OpX*, OpCompare>::const_iterator opIt;\n'
              '    for (opIt = mappedOps.begin(); opIt != mappedOps.end(); '
              'opIt++) {\n'
              '      const std::set<Edge, EdgeCompare>& list = '
              'graph->outEdges[opIt->first];\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3106,
         lineno=1102,
         tokens=17,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='opIt',
         body='std::map<Op, OpX*, OpCompare>::const_iterator opIt;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3107,
         lineno=1106,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (it = list.begin(); it != list.end(); it++)\n'
              '        if (mappedOps.find(it->dstOp) == mappedOps.end()) {\n'
              '          // dstOp is external, (srcOp, srcIdx) must be in '
              'mappedOutputs\n'
              '          TensorX srcTen;\n'
              '          srcTen.op = opIt->second;\n'
              '          srcTen.idx = it->srcIdx;\n'
              '          if (mappedOutputs.find(srcTen) == '
              'mappedOutputs.end()) {\n'
              '            pass = false;\n'
              '            return;\n'
              '          }\n'
              '        }\n'
              '    }\n'
              '    // Generate a new graph by applying xfer rule\n'
              '    Graph* newGraph = create_new_graph(graph);\n'
              '    // Check that the new graph should not have any loop\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3108,
         lineno=1109,
         tokens=5,
         depth=9,
         parent_id=None,
         category='variable',
         summary=False,
         name='srcTen',
         body='TensorX srcTen;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3109,
         lineno=1121,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (newGraph->has_loop()) {\n'
              '      //printf("Found a new graph with LOOP!!!!\\n");\n'
              '      delete newGraph;\n'
              '      return;\n'
              '    }\n'
              '    // TODO: remove me for better performance\n'
              '    assert(newGraph->check_correctness());\n'
              '    if (newGraph->total_cost() < threshold && '
              '(int)newGraph->inEdges.size() < maxNumOps) {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3110,
         lineno=1129,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (hashmap.find(newGraph->hash()) == hashmap.end()) {\n'
              '        hashmap.insert(newGraph->hash());\n'
              '        candidates.push(newGraph);\n'
              '      }\n'
              '    } else {\n'
              '      delete newGraph;\n'
              '    }\n'
              '  } else {\n'
              '    OpX* srcOp = srcOps[depth];\n'
              '    std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n'
              '    for (it = graph->inEdges.begin(); it != '
              'graph->inEdges.end(); it++) {\n'
              '      //printf("can_match(%d)\\n", can_match(srcOp, it->first, '
              'graph));\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3111,
         lineno=1141,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (can_match(srcOp, it->first, graph)\n'
              '      && (mappedOps.find(it->first) == mappedOps.end())) {\n'
              '        Op op = it->first;\n'
              '        // Check mapOutput\n'
              '        match(srcOp, op, graph);\n'
              '        run(depth + 1, graph, candidates, hashmap, threshold, '
              'maxNumOps);\n'
              '        unmatch(srcOp, op, graph);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'Graph* GraphXfer::create_new_graph(Graph* graph)\n'
              '{\n'
              '  Graph* newGraph = new Graph();\n'
              '  newGraph->subst_history = graph->subst_history;\n'
              '  Graph::GraphSubst subst;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3112,
         lineno=1157,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='subst',
         body='Graph::GraphSubst subst;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3113,
         lineno=1158,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < srcOps.size(); i++) {\n'
              '    Op op = srcOps[i]->mapOp;\n'
              '    subst.srcOps.push_back(op);\n'
              '  }\n'
              '  for (size_t i = 0; i < dstOps.size(); i++) {\n'
              '    Op op = dstOps[i]->mapOp;\n'
              '    subst.dstOps.push_back(op);\n'
              '  }\n'
              '  newGraph->subst_history.push_back(subst);\n'
              '  // Step 1: map dst ops\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator opIt;\n'
              '  std::vector<OpX*>::const_iterator dstIt;\n'
              '  // Step 2: add edges to the graph\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3114,
         lineno=1168,
         tokens=22,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='opIt',
         body='std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator opIt;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3115,
         lineno=1169,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='dstIt',
         body='std::vector<OpX*>::const_iterator dstIt;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3116,
         lineno=1171,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (opIt = graph->inEdges.begin(); opIt != '
              'graph->inEdges.end(); opIt++)\n'
              '    if (mappedOps.find(opIt->first) == mappedOps.end()) {\n'
              '      // Unmapped ops\n'
              '      const std::set<Edge, EdgeCompare>& list = opIt->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '      for (it = list.begin(); it != list.end(); it++)\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3117,
         lineno=1177,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (mappedOps.find(it->srcOp) != mappedOps.end()) {\n'
              '          // mapped src -> unmapped dst\n'
              '          TensorX srcTen;\n'
              '          srcTen.op = mappedOps[it->srcOp];\n'
              '          srcTen.idx = it->srcIdx;\n'
              '          assert(mappedOutputs.find(srcTen) != '
              'mappedOutputs.end());\n'
              '          TensorX dstTen')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3118,
         lineno=1179,
         tokens=5,
         depth=8,
         parent_id=None,
         category='variable',
         summary=False,
         name='srcTen',
         body='TensorX srcTen;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3119,
         lineno=1183,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' = mappedOutputs[srcTen];\n'
              '          newGraph->add_edge(dstTen.op->mapOp, it->dstOp, '
              'dstTen.idx, it->dstIdx);\n'
              '        } else {\n'
              '          // unmapped src -> unmmaped dst\n'
              '          newGraph->add_edge(it->srcOp, it->dstOp, it->srcIdx, '
              'it->dstIdx);\n'
              '        }\n'
              '    }\n'
              '  // Step 3: add edges for mapped ops\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3120,
         lineno=1191,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (dstIt = dstOps.begin(); dstIt != dstOps.end(); dstIt ++) '
              '{\n'
              '    OpX* dstOp = *dstIt;\n'
              '    for (size_t i = 0; i < dstOp->inputs.size(); i++)\n'
              '      if (dstOp->inputs[i].op == NULL) {\n'
              '        // unmapped src -> mapped dst\n'
              '        std::multimap<int, std::pair<Op, int> >::const_iterator '
              'it\n'
              '            = mappedInputs.find(dstOp->inputs[i].idx);\n'
              '        assert(it != mappedInputs.end());\n'
              '        std::pair<Op, int> srcEdge = it->second')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3121,
         lineno=1199,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '        newGraph->add_edge(srcEdge.first, dstOp->mapOp, '
              'srcEdge.second, i);\n'
              '      } else {\n'
              '        // mapped src -> mapped dst\n'
              '        OpX* srcOp = dstOp->inputs[i].op;\n'
              '        int srcIdx = dstOp->inputs[i].idx;\n'
              '        newGraph->add_edge(srcOp->mapOp, dstOp->mapOp, srcIdx, '
              'i);\n'
              '      }\n'
              '  ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3122,
         lineno=1207,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='}\n'
              '  return newGraph;\n'
              '}\n'
              '\n'
              'bool GraphXfer::create_new_operator(const OpX* opx, Op& op)\n'
              '{\n'
              '  switch (opx->type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      Tensor weight = opx->inputs[1].to_tensor(this);\n'
              '      int')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3123,
         lineno=1211,
         tokens=1703,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='GraphXfer::create_new_operator',
         body='bool GraphXfer::create_new_operator(const OpX* opx, Op& op)\n'
              '{\n'
              '  switch (opx->type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      Tensor weight = opx->inputs[1].to_tensor(this);\n'
              '      int strideH, strideW, padding, activation;\n'
              '      assert(opx->get_pm_constraint(PM_STRIDE_H, strideH));\n'
              '      assert(opx->get_pm_constraint(PM_STRIDE_W, strideW));\n'
              '      assert(opx->get_pm_constraint(PM_PAD, padding));\n'
              '      assert(opx->get_pm_constraint(PM_ACTI, activation));\n'
              '      op = model->get_or_create_conv2d(input, weight, strideH, '
              'strideW,\n'
              '                                       (PaddingMode)padding,\n'
              '                                       (ActiMode)activation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor input0 = opx->inputs[0].to_tensor(this);\n'
              '      Tensor input1 = opx->inputs[1].to_tensor(this);\n'
              '      op = model->get_or_create_element(opx->type, input0, '
              'input1);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 5);\n'
              '      Tensor conv_w = opx->inputs[0].to_tensor(this);\n'
              '      Tensor scale = opx->inputs[1].to_tensor(this);\n'
              '      Tensor bias = opx->inputs[2].to_tensor(this);\n'
              '      Tensor mean = opx->inputs[3].to_tensor(this);\n'
              '      Tensor var = opx->inputs[4].to_tensor(this);\n'
              '      op = model->get_or_create_fuse_conv_batchnorm(conv_w, '
              'scale, bias, mean, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM_BIAS:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 4);\n'
              '      Tensor scale = opx->inputs[0].to_tensor(this);\n'
              '      Tensor bias = opx->inputs[1].to_tensor(this);\n'
              '      Tensor mean = opx->inputs[2].to_tensor(this);\n'
              '      Tensor var = opx->inputs[3].to_tensor(this);\n'
              '      op = model->get_or_create_fuse_conv_batchnorm_bias(scale, '
              'bias, mean, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM_ALPHA_VAR:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 3);\n'
              '      Tensor conv_w = opx->inputs[0].to_tensor(this);\n'
              '      Tensor scale = opx->inputs[1].to_tensor(this);\n'
              '      Tensor var = opx->inputs[2].to_tensor(this);\n'
              '      op = '
              'model->get_or_create_fuse_conv_batchnorm_alpha_var(conv_w, '
              'scale, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_BROADCAST_ADD:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor _data = opx->inputs[0].to_tensor(this);\n'
              '      Tensor _bias = opx->inputs[1].to_tensor(this);\n'
              '      op = model->get_or_create_broadcast_add(_data, _bias);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      Tensor weight = opx->inputs[1].to_tensor(this);\n'
              '      int activation;\n'
              '      assert(opx->get_pm_constraint(PM_ACTI, activation));\n'
              '      op = model->get_or_create_matmul(input, weight,\n'
              '                                       (ActiMode)activation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      int permIdx, shuffle;\n'
              '      assert(opx->get_pm_constraint(PM_PERM, permIdx));\n'
              '      assert(opx->get_pm_constraint(PM_OUTSHUFFLE, shuffle));\n'
              '      op = model->get_or_create_transpose(input, permIdx, '
              '(bool)shuffle);\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor w1 = opx->inputs[0].to_tensor(this);\n'
              '      Tensor w2 = opx->inputs[1].to_tensor(this);\n'
              '      //int kernelH, kernelW;\n'
              '      //assert(opx->get_pm_constraint(PM_KERNEL_H, kernelH));\n'
              '      //assert(opx->get_pm_constraint(PM_KERNEL_W, kernelW));\n'
              '      op = model->get_or_create_enlarge(w1, w2);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MERGE_GCONV:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor weight = opx->inputs[0].to_tensor(this);\n'
              '      int count;\n'
              '      assert(opx->get_pm_constraint(PM_MERGE_GCONV_COUNT, '
              'count));\n'
              '      op = model->get_or_create_merge_gconv(weight, count);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              "      // TODO: assume don't need copy for now\n"
              '      Tensor inputs[MAX_NUM_INPUTS];\n'
              '      bool needCopy[MAX_NUM_INPUTS];\n'
              '      for (size_t i = 0; i < opx->inputs.size(); i++) {\n'
              '        inputs[i] = opx->inputs[i].to_tensor(this);\n'
              '        needCopy[i] = false;\n'
              '      }\n'
              '      int axis;\n'
              '      assert(opx->get_pm_constraint(PM_AXIS, axis));\n'
              '      op = model->get_or_create_concat(axis, '
              'opx->inputs.size(), inputs, needCopy);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      int axis;\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      assert(opx->get_pm_constraint(PM_AXIS, axis));\n'
              '      op = model->get_or_create_split(input, axis, '
              'opx->outputs.size());\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_TANH:\n'
              '    case OP_SIGMOID:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      op = model->get_or_create_activation(input, opx->type, '
              'true);\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '    {\n'
              '      printf("opx->type = %d\\n", opx->type);\n'
              '      assert(false);\n'
              '    }\n'
              '  }\n'
              '  // Check operator validness\n'
              '  if (op == Op::INVALID_OP)\n'
              '    return false;\n'
              '  // Check tnConstraints\n'
              '  for (size_t i = 0; i < opx->tnConstraints.size(); i++) {\n'
              '    TNConstraint tnc = opx->tnConstraints[i];\n'
              '    int actValue = 0, expValue = 0;\n'
              '    if (tnc.singlePara) {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      expValue = tnc.value;\n'
              '    } else {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      assert(op.ptr->get_input_parameter(tnc.para2, tnc.dim2, '
              '&expValue));\n'
              '    }\n'
              '    switch (tnc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '        if (actValue != expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_NE:\n'
              '        if (actValue == expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_LT:\n'
              '        if (actValue >= expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_LE:\n'
              '        if (actValue > expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_GT:\n'
              '        if (actValue <= expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_GE:\n'
              '        if (actValue < expValue) return false;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3124,
         lineno=1219,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' strideH, strideW, padding, activation;\n'
              '      assert(opx->get_pm_constraint(PM_STRIDE_H, strideH));\n'
              '      assert(opx->get_pm_constraint(PM_STRIDE_W, strideW));\n'
              '      assert(opx->get_pm_constraint(PM_PAD, padding));\n'
              '      assert(opx->get_pm_constraint(PM_ACTI, activation));\n'
              '      op = model->get_or_create_conv2d(input, weight, strideH, '
              'strideW,\n'
              '                                       (PaddingMode)padding,\n'
              '                                       (ActiMode)activation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Te')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3125,
         lineno=1219,
         tokens=11,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='strideH',
         body='int strideH, strideW, padding, activation;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3126,
         lineno=1233,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsor input0 = opx->inputs[0].to_tensor(this);\n'
              '      Tensor input1 = opx->inputs[1].to_tensor(this);\n'
              '      op = model->get_or_create_element(opx->type, input0, '
              'input1);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 5);\n'
              '      Tensor conv_w = opx-')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3127,
         lineno=1241,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='>inputs[0].to_tensor(this);\n'
              '      Tensor scale = opx->inputs[1].to_tensor(this);\n'
              '      Tensor bias = opx->inputs[2].to_tensor(this);\n'
              '      Tensor mean = opx->inputs[3].to_tensor(this);\n'
              '      Tensor var = opx->inputs[4].to_tensor(this);\n'
              '      op = model->get_or_create_fuse_conv_batchnorm(con')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3128,
         lineno=1246,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='v_w, scale, bias, mean, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM_BIAS:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 4);\n'
              '      Tensor scale = opx->inputs[0].to_tensor(this);\n'
              '      Tensor bias = opx->inputs[1].to_tensor(this);\n'
              '      Tensor mean = opx->inputs[2].to_tensor(this);\n'
              '  ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3129,
         lineno=1255,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    Tensor var = opx->inputs[3].to_tensor(this);\n'
              '      op = model->get_or_create_fuse_conv_batchnorm_bias(scale, '
              'bias, mean, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_FUSE_CONV_BATCHNORM_ALPHA_VAR:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 3);\n'
              '      Tensor conv_w = opx->inputs[0].to_tensor(this)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3130,
         lineno=1262,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '      Tensor scale = opx->inputs[1].to_tensor(this);\n'
              '      Tensor var = opx->inputs[2].to_tensor(this);\n'
              '      op = '
              'model->get_or_create_fuse_conv_batchnorm_alpha_var(conv_w, '
              'scale, var);\n'
              '      break;\n'
              '    }\n'
              '    case OP_BROADCAST_ADD:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tenso')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3131,
         lineno=1271,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r _data = opx->inputs[0].to_tensor(this);\n'
              '      Tensor _bias = opx->inputs[1].to_tensor(this);\n'
              '      op = model->get_or_create_broadcast_add(_data, _bias);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3132,
         lineno=1279,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '      Tensor weight = opx->inputs[1].to_tensor(this);\n'
              '      int activation;\n'
              '      assert(opx->get_pm_constraint(PM_ACTI, activation));\n'
              '      op = model->get_or_create_matmul(input, weight,\n'
              '                                       (ActiMode)activation);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      int permIdx, shuffle;\n'
              '      assert(opx->get_pm_constraint(PM_PERM, permIdx));\n'
              '      assert(opx->get_pm_constraint(PM_OUTSHUFFLE, shuffle));\n'
              '      op = model->get_or_create_transpose')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3133,
         lineno=1281,
         tokens=3,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='activation',
         body='int activation;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3134,
         lineno=1291,
         tokens=6,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='permIdx',
         body='int permIdx, shuffle;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3135,
         lineno=1294,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(input, permIdx, (bool)shuffle);\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 2);\n'
              '      Tensor w1 = opx->inputs[0].to_tensor(this);\n'
              '      Tensor w2 = opx->inputs[1].to_tensor(this);\n'
              '      //int kernelH, kernelW;\n'
              '      //assert(opx->get_pm_constraint(PM_KE')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3136,
         lineno=1303,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='RNEL_H, kernelH));\n'
              '      //assert(opx->get_pm_constraint(PM_KERNEL_W, kernelW));\n'
              '      op = model->get_or_create_enlarge(w1, w2);\n'
              '      break;\n'
              '    }\n'
              '    case OP_MERGE_GCONV:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor weight = opx->inputs[0].to_tensor(this);\n'
              '      int count;\n'
              ' ')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3137,
         lineno=1312,
         tokens=3,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='count',
         body='int count;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3138,
         lineno=1313,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='     assert(opx->get_pm_constraint(PM_MERGE_GCONV_COUNT, '
              'count));\n'
              '      op = model->get_or_create_merge_gconv(weight, count);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              "      // TODO: assume don't need copy for now\n"
              '      Tensor inputs[MAX_NUM_INPUTS];\n'
              '      bool needCopy[MAX_NUM_INPUTS];\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3139,
         lineno=1322,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (size_t i = 0; i < opx->inputs.size(); i++) {\n'
              '        inputs[i] = opx->inputs[i].to_tensor(this);\n'
              '        needCopy[i] = false;\n'
              '      }\n'
              '      int axis;\n'
              '      assert(opx->get_pm_constraint(PM_AXIS, axis));\n'
              '      op = model->get_or_create_concat(axis, '
              'opx->inputs.size(), inputs, needCopy);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      int axis;\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      assert(opx->get_pm_constraint(PM_AXIS, axis)')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3140,
         lineno=1326,
         tokens=3,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='axis',
         body='int axis;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3141,
         lineno=1333,
         tokens=3,
         depth=6,
         parent_id=None,
         category='variable',
         summary=False,
         name='axis',
         body='int axis;')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3142,
         lineno=1335,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '      op = model->get_or_create_split(input, axis, '
              'opx->outputs.size());\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_TANH:\n'
              '    case OP_SIGMOID:\n'
              '    {\n'
              '      assert(opx->inputs.size() == 1);\n'
              '      Tensor input = opx->inputs[0].to_tensor(this);\n'
              '      op = model->get_or_create_activation(input, opx->type, '
              'true);\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '    {\n'
              '      printf("opx->type = %d\\n", opx->type);\n'
              '      assert(false);\n'
              '    }\n'
              '  }\n'
              '  // Check operator validness\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3143,
         lineno=1355,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (op == Op::INVALID_OP)\n'
              '    return false;\n'
              '  // Check tnConstraints\n'
              '  for (size_t i = 0; i < opx->tnConstraints.size(); i++) {\n'
              '    TNConstraint tnc = opx->tnConstraints[i];\n'
              '    int actValue = 0, expValue = 0;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3144,
         lineno=1361,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (tnc.singlePara) {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      expValue = tnc.value;\n'
              '    } else {\n'
              '      assert(op.ptr->get_input_parameter(tnc.para1, tnc.dim1, '
              '&actValue));\n'
              '      assert(op.ptr->get_input_parameter(tnc.para2, tnc.dim2, '
              '&expValue));\n'
              '    }\n'
              '    switch (tnc.comp) {\n'
              '      case COMPARE_EQ:\n'
              '        if (actValue != expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_NE:\n'
              '        if (actValue == expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_LT:\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3145,
         lineno=1376,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (actValue >= expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_LE:\n'
              '        if (actValue > expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_GT:\n'
              '        if (actValue <= expValue) return false;\n'
              '        break;\n'
              '      case COMPARE_GE:\n'
              '        if (actValue < expValue) return false;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}\n'
              '\n'
              '/*\n'
              'void GraphXfer::run(int depth, Graph* graph,\n'
              '                    std::priority_queue<Graph*, '
              'std::vector<Graph*>, GraphCompare>& candidates,\n'
              '                    std::set<size_t>& hashmap, float '
              'threshold)\n'
              '{\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3146,
         lineno=1399,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (depth >= srcOps.size()) {\n'
              '    // Check two op constraints\n'
              '    bool pass = true;\n'
              '    for (size_t i = 0; i < constraints.size(); i++) {\n'
              '      TwoOpConstraint toc = constraints[i];\n'
              '      int value1, value2;\n'
              '      assert(toc.op1->mapOp.ptr != NULL);\n'
              '      assert(toc.op2->mapOp.ptr != NULL);\n'
              '      assert(toc.op1->mapOp.ptr->get_parameter(toc.para1, '
              '&value1));\n'
              '      assert(toc.op2->mapOp.ptr->get_parameter(toc.para2, '
              '&value2));\n'
              '      switch (toc.comp) {\n'
              '        case COMPARE_EQ:\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3147,
         lineno=1411,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          if (value1 != value2) pass = false;\n'
              '          break;\n'
              '        case COMPARE_NE:\n'
              '          if (value1 == value2) pass = false;\n'
              '          break;\n'
              '        case COMPARE_LT:\n'
              '          if (value1 >= value2) pass = false;\n'
              '          break;\n'
              '        case COMPARE_GT:\n'
              '          if (value1 <= value2) pass = false;\n'
              '          break;\n'
              '        default:\n'
              '          assert(false);\n'
              '      }\n'
              '    }\n'
              '    // Generate a new graph by applying xfer rule\n'
              '    if (pass) {\n'
              '      Graph* newGraph = create_new_graph(graph);\n'
              '      //assert(newGraph->check_correctness());\n'
              '      if (newGraph->total_cost() < threshold) {\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3148,
         lineno=1431,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (hashmap.find(newGraph->hash()) == hashmap.end()) {\n'
              '          hashmap.insert(newGraph->hash());\n'
              '          candidates.push(newGraph);\n'
              '        }\n'
              '      } else {\n'
              '        delete newGraph;\n'
              '      }\n'
              '    }\n'
              '  } else {\n'
              '    // Match srcOps[depth];\n'
              '    SrcOp* srcOp = srcOps[depth];\n'
              '    std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator it;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3149,
         lineno=1443,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it = graph->inEdges.begin(); it != '
              'graph->inEdges.end(); it++) {\n'
              '      if (srcOp->match(it->first)\n'
              '      && (mapped.find(it->first) == mapped.end())) {\n'
              '        Op op = it->first;\n'
              '        std::set<SubEdge<SrcOp>, SubEdgeCompare<SrcOp> > list = '
              'srcInEdges[srcOp];\n'
              '        std::set<SubEdge<SrcOp>, SubEdgeCompare<SrcOp> '
              '>::const_iterator it2;\n'
              '        // Check edges in the source subgraph\n'
              '        bool pass = true;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3150,
         lineno=1451,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (it2 = list.begin(); it2 != list.end(); it2++) {\n'
              '          SubEdge<SrcOp> edge = *it2;\n'
              '          if (!graph->has_edge(edge.srcOp->mapOp, op, '
              'edge.srcIdx, edge.dstIdx)) pass = false;\n'
              '        }\n'
              '        // Check mapInput/mapOutput\n'
              '        bool extraInputs = false, extraOutputs = false;\n'
              '        if (srcInEdges[srcOp].size() != '
              'graph->num_in_edges(op))\n'
              '          extraInputs = true;\n'
              '        if (srcOutEdges[srcOp].size() != '
              'graph->num_out_edges(op))\n'
              '          extraOutputs = true;\n'
              '        if (!srcOp->mapInput && extraInputs)\n'
              '          pass = false;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3151,
         lineno=1463,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (!srcOp->mapOutput && extraOutputs)\n'
              '          pass = false;\n'
              '        // Serch for the next op if pass the check\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3152,
         lineno=1466,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (pass) {\n'
              '          srcOp->mapOp = op;\n'
              '          mapped.insert(op);\n'
              '          run(depth + 1, graph, candidates, hashmap, '
              'threshold);\n'
              '          mapped.erase(op);\n'
              '          srcOp->mapOp.guid = 0;\n'
              '          srcOp->mapOp.ptr = NULL;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'Graph* GraphXfer::create_new_graph(Graph* graph)\n'
              '{\n'
              '  Graph* newGraph = new Graph(graph->model);\n'
              '  // Step 1: add operators to the graph\n'
              '  std::vector<DstOp*>::iterator dstIt;\n'
              '  std::map<Op, std::set<Edge, EdgeCompare>, '
              'OpCompare>::const_iterator opIt;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3153,
         lineno=1485,
         tokens=63,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (opIt = graph->inEdges.begin(); opIt != '
              'graph->inEdges.end(); opIt++)\n'
              '    if (mapped.find(opIt->first) == mapped.end()) {\n'
              '      newGraph->inEdges[opIt->first];\n'
              '      newGraph->outEdges[opIt->first];\n'
              '    }\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3154,
         lineno=1490,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (dstIt = dstOps.begin(); dstIt != dstOps.end(); dstIt ++) '
              '{\n'
              '    DstOp* dstOp = *dstIt;\n'
              '    dstOp->mapOp = dstOp->create_operator(graph->model);\n'
              '    newGraph->inEdges[dstOp->mapOp];\n'
              '    newGraph->outEdges[dstOp->mapOp];\n'
              '  }\n'
              '  // Step 2: add edges to the graph\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3155,
         lineno=1497,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (opIt = graph->inEdges.begin(); opIt != '
              'graph->inEdges.end(); opIt++)\n'
              '    if (mapped.find(opIt->first) != mapped.end()) {\n'
              '      // Mapped ops\n'
              '      std::set<Edge, EdgeCompare> list = opIt->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n'
              '      for (it = list.begin(); it != list.end(); it++)\n'
              '        if (mapped.find(it->srcOp) != mapped.end()) {\n'
              '          // mapped src -> mapped dst\n'
              '          // Do nothing!\n'
              '        } else {\n'
              '          // unmapped src -> mapped dst\n'
              '          int i = 0;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3156,
         lineno=1509,
         tokens=16,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          for (i = 0; i < srcOps.size(); i++)\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3157,
         lineno=1510,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (srcOps[i]->mapOp.guid == opIt->first.guid) '
              'break;\n'
              '          assert(i < srcOps.size());\n'
              '          assert(srcOps[i]->mapInput != NULL);\n'
              '          Op op = srcOps[i]->mapInput->mapOp;\n'
              '          Edge e(it->srcOp, op, it->srcIdx, it->dstIdx);\n'
              '          newGraph->inEdges[op].insert(e);\n'
              '          newGraph->outEdges[it->srcOp].insert(e);\n'
              '        }\n'
              '    } else {\n'
              '      // Unmapped ops\n'
              '      std::set<Edge, EdgeCompare> list = opIt->second;\n'
              '      std::set<Edge, EdgeCompare>::const_iterator it;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3158,
         lineno=1522,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (it = list.begin(); it != list.end(); it++)\n'
              '        if (mapped.find(it->srcOp) != mapped.end()) {\n'
              '          // mapped src -> unmapped dst\n'
              '          int i = 0;\n'
              '          for (i = 0; i < srcOps.size(); i++)\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3159,
         lineno=1527,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (srcOps[i]->mapOp.guid == it->srcOp.guid) '
              'break;\n'
              '          assert(i < srcOps.size());\n'
              '          assert(srcOps[i]->mapOutput != NULL);\n'
              '          Op op = srcOps[i]->mapOutput->mapOp;\n'
              '          Edge e(op, opIt->first, it->srcIdx, it->dstIdx);\n'
              '          newGraph->inEdges[opIt->first].insert(e);\n'
              '          newGraph->outEdges[op].insert(e);\n'
              '        } e')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3160,
         lineno=1534,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lse {\n'
              '          // unmapped src -> unmapped dst\n'
              '          Edge e(it->srcOp, opIt->first, it->srcIdx, '
              'it->dstIdx);\n'
              '          newGraph->inEdges[opIt->first].insert(e);\n'
              '          newGraph->outEdges[it->srcOp].insert(e);\n'
              '        }\n'
              '    }\n'
              '  // Step 3: add edges in the dstInEdges\n'
              '  std::map<DstOp*, std::set<SubEdge<DstOp>, '
              'SubEdgeCompare<DstOp> > >::iterator dstOpIt;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3161,
         lineno=1543,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (dstOpIt = dstInEdges.begin(); dstOpIt != '
              'dstInEdges.end(); dstOpIt++) {\n'
              '    std::set<SubEdge<DstOp>, SubEdgeCompare<DstOp> > list = '
              'dstOpIt->second;\n'
              '    std::set<SubEdge<DstOp>, SubEdgeCompare<DstOp> '
              '>::const_iterator it;\n')

Fragment(document_cs='60f4f3d14de370b7b5b8298e0d145722c2f80687c543eb0e2b8c8efee47ad738',
         id=3162,
         lineno=1546,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (it = list.begin(); it != list.end(); it++) {\n'
              '      Op src = it->srcOp->mapOp, dst = dstOpIt->first->mapOp;\n'
              '      Edge e(src, dst, it->srcIdx, it->dstIdx);\n'
              '      newGraph->inEdges[dst].insert(e);\n'
              '      newGraph->outEdges[src].insert(e);\n'
              '    }\n'
              '  }\n'
              '  return newGraph;\n'
              '}\n'
              '*/\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3163,
         lineno=1,
         tokens=131,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TASO: The Tensor Algebra SuperOptimizer for Deep Learning\n'
              '\n'
              'TASO optimizes the computation graphs of DNN models using '
              'automatically generated and verified graph transformations.\n'
              'For an arbitrary DNN model, TASO uses the auto-generated graph '
              'transformations to build a large search space of potential '
              'computation graphs that are equivalent to the original DNN '
              'model.\n'
              'TASO employs a cost-based search algorithm to explore the '
              'space, and automatically discovers highly optimized computation '
              'graphs.\n'
              'TASO outperforms the graph optimizers in existing deep learning '
              'frameworks by [up to '
              '3x](http://theory.stanford.edu/~aiken/publications/papers/sosp19.pdf).\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3164,
         lineno=1,
         tokens=72,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='# TASO: The Tensor Algebra SuperOptimizer for Deep Learning\n'
              '## Install TASO\n'
              '## Use TASO\n'
              '### Optimize ONNX Models\n'
              '### Optimize TensorFlow Models\n'
              '### Optimize PyTorch Models\n'
              '### Optimize Arbitrary DNN Models using the Python Interface\n'
              '#Build DNN model\n'
              '#Optimize DNN model\n'
              '## Publication\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3165,
         lineno=7,
         tokens=47,
         depth=14,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='<div align="center">\n'
              '  <img '
              'src="https://github.com/jiazhihao/TASO/blob/master/figures/inference.png">\n'
              '  End-to-end inference performance comparison on a NVIDIA V100 '
              'GPU.\n'
              '</div>\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3166,
         lineno=12,
         tokens=53,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='## Install TASO\n'
              '\n'
              'See [instructions](INSTALL.md) to install TASO from source.\n'
              'We also provide prebuilt [docker '
              'images](https://github.com/jiazhihao/TASO/blob/master/INSTALL.md) '
              'with all dependencies pre-installed.\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3167,
         lineno=17,
         tokens=107,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='## Use TASO\n'
              '\n'
              'TASO can directly optimize any pre-trained DNN models in '
              '[ONNX](https://onnx.ai), '
              '[TensorFlow](https://www.tensorflow.org/guide/saved_model), and '
              '[PyTorch](https://pytorch.org/docs/stable/onnx.html) graph '
              'formats.\n'
              'TASO also provides a Python interface for optimizing arbitrary '
              'DNN architectures.\n'
              'TASO supports exporting the optimized computation graphs to '
              'ONNX, which can be directly used as inputs by most existing '
              'deep learning frameworks.\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3168,
         lineno=23,
         tokens=131,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='### Optimize ONNX Models\n'
              '\n'
              'TASO can directly optimize pre-trained ONNX models, and this '
              'can be done in just a few lines of Python code.\n'
              'The following code snippet shows how to load a pre-trained DNN '
              'model from ONNX, optimize the model, and save the optimized '
              'model into a ONNX file.\n'
              '```python\n'
              'import taso\n'
              'import onnx\n'
              '\n'
              'old_model = taso.load_onnx("/path/to/load/onnx/model")\n'
              'taso_graph = taso.optimize(old_model)\n'
              'new_model = taso.export_onnx(taso_graph)\n'
              'onnx.save(new_model, "/path/to/save/new/onnx/model")\n'
              '```')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3169,
         lineno=35,
         tokens=62,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'The optimized model has the same accuracy as the original and '
              'can be directly used by existing deep learning frameworks.\n'
              'Some original and TASO-optimized ONNX files are available in '
              'the `onnx` folder.\n'
              '<!-- The following figure shows the end-to-end inference '
              'performance comparison on a NVIDIA V100 GPU. -->\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3170,
         lineno=40,
         tokens=139,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='### Optimize TensorFlow Models\n'
              '\n'
              'TASO can optimize TensorFlow models by converting the model to '
              'ONNX using [tf2onnx](https://github.com/onnx/tensorflow-onnx).\n'
              '\n'
              '* First, install `tf2onnx` from PyPi as follows or [from '
              'source](https://github.com/onnx/tensorflow-onnx).\n'
              '```\n'
              'pip install -U tf2onnx\n'
              '```\n'
              '\n'
              '* Second, convert a TensorFlow model to ONNX using `tf2onnx`.\n'
              '```\n'
              'python -m tf2onnx.convert \\\n'
              '       --saved-model /path/to/tensorflow/saved/model \\\n'
              '       --output /path/to/onnx/model/file\n'
              '```\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3171,
         lineno=55,
         tokens=40,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '* Third, use TASO to optimize the model in ONNX by following '
              'the [above '
              'instructions](https://github.com/jiazhihao/TASO#optimize-onnx-models).\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3172,
         lineno=58,
         tokens=69,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='### Optimize PyTorch Models\n'
              '\n'
              'PyTorch has built-in support for ONNX as a part of the '
              '[torch.onnx](https://pytorch.org/docs/master/onnx.html) '
              'package.\n'
              'TASO can directly optimize PyTorch models in the ONNX format.\n'
              '\n'
              '### Optimize Arbitrary DNN Models using the Python Interface\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3173,
         lineno=64,
         tokens=142,
         depth=13,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'TASO can also optimize arbitrary DNN architectures using the '
              'TASO Python interface. \n'
              'The following code snippet builds the left-most DNN graph '
              'depicted in the figure. TASO automatically performs a series of '
              'non-trivial transformations, and eventually discovers the '
              'right-most DNN graph, which is 1.3x faster on a V100 GPU. More '
              'DNN examples are available in the `examples` folder.\n'
              '\n'
              '<div align="center">\n'
              '  <img '
              'src="https://github.com/jiazhihao/TASO/blob/master/figures/graph_subst.png">\n'
              '</div>\n'
              '\n'
              '```python\n'
              'import taso\n'
              'import onnx\n'
              '\n'
              '#Build DNN model\n'
              'graph = taso.new_graph()\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3174,
         lineno=78,
         tokens=147,
         depth=15,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='input = graph.new_input(dims=(1,128,56,56))\n'
              'w1 = graph.new_weight(dims=(128,128,3,3))\n'
              'w2 = graph.new_weight(dims=(128,128,1,1))\n'
              'w3 = graph.new_weight(dims=(128,128,3,3))\n'
              'left = graph.conv2d(input=input, weight=w1, strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              'left = graph.conv2d(input=left, weight=w3, strides=(1,1), '
              'padding="SAME")\n'
              'right = graph.conv2d(input=input, weight=w2, strides=(1,1), '
              'padding="SAME", activation="RELU")\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3175,
         lineno=85,
         tokens=14,
         depth=15,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='output = graph.add(left, right)\noutput = graph.relu(output)\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3176,
         lineno=87,
         tokens=46,
         depth=13,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '#Optimize DNN model\n'
              'new_graph = taso.optimize(graph)\n'
              'onnx_model = taso.export_onnx(new_graph)\n'
              'onnx.save(onnx_model, "/path/to/save/new/onnx/model")\n'
              '```\n'
              '\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3177,
         lineno=94,
         tokens=94,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='## Publication\n'
              '* Zhihao Jia, Oded Padon, James Thomas, Todd Warszawski, Matei '
              'Zaharia, and Alex Aiken. [TASO: Optimizing Deep Learning '
              'Computation with Automated Generation of Graph '
              'Substitutions](https://cs.stanford.edu/~zhihao/papers/sosp19.pdf). '
              'In Proceedings of the Symposium on Operating Systems Principles '
              '(SOSP), Ontario, Canada, October 2019.\n')

Fragment(document_cs='673cefd128a71251db32d786bad6b83e0aadc26dd51e6939a8c4f7c603bdf166',
         id=3178,
         lineno=96,
         tokens=91,
         depth=13,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '* Zhihao Jia, James Thomas, Todd Warszawski, Mingyu Gao, Matei '
              'Zaharia, and Alex Aiken. [Optimizing DNN Computation with '
              'Relaxed Graph '
              'Substitutions](https://theory.stanford.edu/~aiken/publications/papers/sysml19b.pdf). '
              'In Proceedings of the Conference on Systems and Machine '
              'Learning (SysML), Palo Alto, CA, April 2019.\n'
              '\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3179,
         lineno=1,
         tokens=144,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              '\n'
              'FROM nvidia/cuda:10.0-devel-ubuntu16.04\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3180,
         lineno=1,
         tokens=8,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /docker/Dockerfile\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3181,
         lineno=17,
         tokens=138,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'RUN apt-get update && apt-get install -y '
              '--no-install-recommends wget sudo binutils git && \\\n'
              '    rm -rf /var/lib/apt/lists/*\n'
              '\n'
              'RUN wget -c '
              'http://developer.download.nvidia.com/compute/redist/cudnn/v7.6.0/cudnn-10.0-linux-x64-v7.6.0.64.tgz '
              '&& \\\n'
              '    tar -xzf cudnn-10.0-linux-x64-v7.6.0.64.tgz -C /usr/local '
              '&& \\\n'
              '    rm cudnn-10.0-linux-x64-v7.6.0.64.tgz && \\\n'
              '    ldconfig\n'
              '\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3182,
         lineno=26,
         tokens=137,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='RUN wget -c '
              'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh '
              '&& \\\n'
              '    mv Miniconda3-latest-Linux-x86_64.sh '
              '~/Miniconda3-latest-Linux-x86_64.sh && \\\n'
              '    chmod +x ~/Miniconda3-latest-Linux-x86_64.sh && \\\n'
              '    ~/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda && \\\n'
              '    rm ~/Miniconda3-latest-Linux-x86_64.sh && \\\n'
              '    /opt/conda/bin/conda upgrade --all && \\\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3183,
         lineno=32,
         tokens=30,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='    /opt/conda/bin/conda install conda-build conda-verify && '
              '\\\n'
              '    /opt/conda/bin/conda clean -ya\n')

Fragment(document_cs='681a74c9d463034cb52bb0f56c60dda7651d03794110dc7a526914f27ff566fc',
         id=3184,
         lineno=34,
         tokens=115,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'RUN /opt/conda/bin/conda install cmake make\n'
              'RUN /opt/conda/bin/conda install -c conda-forge protobuf=3.9 '
              'numpy onnx\n'
              'RUN /opt/conda/bin/conda install -c anaconda cython\n'
              '\n'
              'ENV PATH /opt/conda/bin:$PATH\n'
              'ENV TASO_HOME /usr/TASO/\n'
              '\n'
              'COPY install_taso.sh /install/install_taso.sh\n'
              'RUN bash /install/install_taso.sh\n'
              '\n'
              'WORKDIR /usr/TASO\n'
              '#RUN chmod -R a+w /usr/TASO\n')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3185,
         lineno=1,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso\n'
              'import onnx\n'
              '\n'
              'hidden_size = 512\n'
              'length = 5\n'
              '\n'
              'def combine(graph, x, h):\n'
              '    w1 = graph.new_weight(dims=(hidden_size, x.dim(1)))\n'
              '    w2 = graph.new_weight(dims=(hidden_size, h.dim(1)))\n'
              '    return graph.add(graph.matmul(x, w1), graph.matmul(h, w2))\n'
              '\n'
              'def nas_node(graph, input, x):\n'
              '    t = list()\n')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3186,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3187,
         lineno=1,
         tokens=60,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/nasrnn.py\n'
              '  Functions: combine nas_node\n'
              '  Variables and usages: alpha append budget dims export_onnx '
              'graph hidden_size input length matmul midt new_graph new_input '
              'new_weight onnx onnx_model optimize range relu sigmoid state '
              'tanh taso\n')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3188,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3189,
         lineno=7,
         tokens=62,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='combine',
         body='def combine(graph, x, h):\n'
              '    w1 = graph.new_weight(dims=(hidden_size, x.dim(1)))\n'
              '    w2 = graph.new_weight(dims=(hidden_size, h.dim(1)))\n'
              '    return graph.add(graph.matmul(x, w1), graph.matmul(h, w2))')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3190,
         lineno=12,
         tokens=99,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='def nas_node(graph, input, x):\n'
              '    t = list()\n'
              '    for i in range(8):\n'
              '        t.append(combine(graph, x, input))\n'
              '    midt = list()\n'
              '    midt.append(graph.add(graph.relu(t[0]), '
              'graph.sigmoid(t[3])))\n'
              '    midt.append(graph.add(graph.sigmoid(t[1]), '
              'graph.tanh(t[2])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[4]), '
              'graph.tanh(t[5])))\n'
              '    midt.app')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3191,
         lineno=14,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(8):\n'
              '        t.append(combine(graph, x, input))\n'
              '    midt = list()\n'
              '    midt.append(graph.add(graph.relu(t[0]), '
              'graph.sigmoid(t[3])))\n'
              '    midt.append(graph.add(graph.sigmoid(t[1]), '
              'graph.tanh(t[2])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[4]), '
              'graph.tanh(t[5])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[6]), '
              'graph.relu(t[7])))\n'
              '    midt.append(graph.add(graph.sigmoid(midt[1]), '
              'graph.tanh(midt[2])))\n'
              '    midt.append(graph.mul(graph.tanh(m')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3192,
         lineno=20,
         tokens=90,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='end(graph.mul(graph.sigmoid(t[6]), graph.relu(t[7])))\n'
              '    midt.append(graph.add(graph.sigmoid(midt[1]), '
              'graph.tanh(midt[2])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[0]), '
              'graph.tanh(midt[3])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[4]), '
              'graph.tanh(midt[5])))\n'
              '    return graph.tanh(midt[6])')

Fragment(document_cs='6a3f2f27f6132253ee3399826161b31eeeec4db93dcfa9e8a00e1b6981dd7680',
         id=3193,
         lineno=22,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='idt[0]), graph.tanh(midt[3])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[4]), '
              'graph.tanh(midt[5])))\n'
              '    return graph.tanh(midt[6])\n'
              '\n'
              'graph = taso.new_graph()\n'
              'xs = list()\n'
              'for i in range(length):\n'
              '    xs.append(graph.new_input(dims=(1, hidden_size)))\n'
              'state = graph.new_weight(dims=(1, hidden_size))\n'
              'for i in range(length):\n'
              '    state = nas_node(graph, state, xs[i])\n'
              'new_graph = taso.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = taso.export_onnx(new_graph)\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3194,
         lineno=1,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limita')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3195,
         lineno=1,
         tokens=89,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/squeeze.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::squeeze Model::get_or_create_squeeze '
              'Squeeze::Squeeze Squeeze::collect_costs '
              'Squeeze::get_int_parameter Squeeze::~Squeeze '
              'SqueezeKey::SqueezeKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Squeeze SqueezeKey collect_costs get_int_parameter '
              'get_or_create_squeeze squeeze\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3196,
         lineno=13,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tions under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::squeeze(const TensorHandle input,\n'
              '                            const std::vector<int>& axes)\n'
              '{\n'
              '  Op op = model->get_or_create_squeeze(*input, axes);\n'
              '  add_edge(input->op, op, input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_squeeze(const Tensor& input,\n'
              '                                const std::vector<int>& axes)\n'
              '{\n'
              '  // key is (input, axes)\n'
              '  SqueezeKey key(input, axes);\n'
              '  Squeeze* squeezeOp;\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3197,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3198,
         lineno=19,
         tokens=78,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::squeeze',
         body='TensorHandle Graph::squeeze(const TensorHandle input,\n'
              '                            const std::vector<int>& axes)\n'
              '{\n'
              '  Op op = model->get_or_create_squeeze(*input, axes);\n'
              '  add_edge(input->op, op, input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3199,
         lineno=29,
         tokens=127,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_squeeze',
         body='Op Model::get_or_create_squeeze(const Tensor& input,\n'
              '                                const std::vector<int>& axes)\n'
              '{\n'
              '  // key is (input, axes)\n'
              '  SqueezeKey key(input, axes);\n'
              '  Squeeze* squeezeOp;\n'
              '  if (squeeze.find(key) != squeeze.end()) {\n'
              '    squeezeOp = squeeze[key];\n'
              '  } else {\n'
              '    squeezeOp = new Squeeze(this, input, axes);\n'
              '    measure_squeeze_cost(squeezeOp);\n'
              '    squeeze[key] = squeezeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = squeezeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3200,
         lineno=33,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(input, axes)')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3201,
         lineno=35,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (squeeze.find(key) != squeeze.end()) {\n'
              '    squeezeOp = squeeze[key];\n'
              '  } else {\n'
              '    squeezeOp = new Squeeze(this, input, axes);\n'
              '    measure_squeeze_cost(squeezeOp);\n'
              '    squeeze[key] = squeezeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = squeezeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Squeeze::Squeeze(Model* _model, const Tensor& _input,\n'
              '                 const std::vector<int>& _axes)\n'
              ': OpBase(_input, _model, OP_SQUEEZE), axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  int n = 0;\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3202,
         lineno=42,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3203,
         lineno=48,
         tokens=209,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::Squeeze',
         body='Squeeze::Squeeze(Model* _model, const Tensor& _input,\n'
              '                 const std::vector<int>& _axes)\n'
              ': OpBase(_input, _model, OP_SQUEEZE), axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  int n = 0;\n'
              '  for (int i = 0; i < _input.numDim; i++) {\n'
              '    bool squeezed = false;\n'
              '    for (size_t idx = 0; idx < axes.size(); idx++)\n'
              '      if (i == axes[idx])\n'
              '        squeezed = true;\n'
              '    if (!squeezed) {\n'
              '      outputs[0].dim[n] = _input.dim[i];\n'
              '      outputs[0].stride[n] = _input.stride[i];\n'
              '      outputs[0].split[n] = _input.split[i];\n'
              '      n++;\n'
              '    } else {\n'
              '      assert(_input.dim[i] == 1);\n'
              '    }\n'
              '  }\n'
              '  outputs[0].numDim = n;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3204,
         lineno=54,
         tokens=55,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < _input.numDim; i++) {\n'
              '    bool squeezed = false;\n'
              '    for (size_t idx = 0; idx < axes.size(); idx++)\n'
              '      if (i == axes[idx])\n'
              '        squeezed = true;\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3205,
         lineno=59,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (!squeezed) {\n'
              '      outputs[0].dim[n] = _input.dim[i];\n'
              '      outputs[0].stride[n] = _input.stride[i];\n'
              '      outputs[0].split[n] = _input.split[i];\n'
              '      n++;\n'
              '    } else {\n'
              '      assert(_input.dim[i] == 1);\n'
              '    }\n'
              '  }\n'
              '  outputs[0].numDim = n;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Squeeze::~Squeeze(void)\n'
              '{}\n'
              '\n'
              'bool Squeeze::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_paramete')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3206,
         lineno=72,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::~Squeeze',
         body='Squeeze::~Squeeze(void)\n{}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3207,
         lineno=75,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::get_int_parameter',
         body='bool Squeeze::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3208,
         lineno=77,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r(para, value);\n'
              '}\n'
              '\n'
              'void Squeeze::collect_costs(float& exe_time, float& flops,\n'
              '                            float& meme_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Squeeze]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'SqueezeKey::SqueezeKey(const Tensor& input,\n'
              '                      const std::vector<int>& axes)\n'
              '{\n'
              '  int idx = 0;\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3209,
         lineno=80,
         tokens=73,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::collect_costs',
         body='void Squeeze::collect_costs(float& exe_time, float& flops,\n'
              '                            float& meme_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Squeeze]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3210,
         lineno=89,
         tokens=85,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SqueezeKey::SqueezeKey',
         body='SqueezeKey::SqueezeKey(const Tensor& input,\n'
              '                      const std::vector<int>& axes)\n'
              '{\n'
              '  int idx = 0;\n'
              '  for (size_t i = 0; i < axes.size(); i++)\n'
              '    keys[idx++] = axes[i];\n'
              '  input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3211,
         lineno=93,
         tokens=32,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < axes.size(); i++)\n'
              '    keys[idx++] = axes[i];\n'
              '  input.serialize(keys, idx);\n')

Fragment(document_cs='6b081c84e87cf526a212f6946a69b3f4276b7ae504362970c996801495c83685',
         id=3212,
         lineno=96,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3213,
         lineno=1,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='#ifdef TRT\n'
              '#include <algorithm>\n'
              '#include <chrono>\n'
              '#include "xflow/ops.h"\n'
              '#include "xflow/cuda_helper.h"\n'
              '\n'
              '#define TIMING_ITERATIONS 10\n'
              '\n'
              'class SplitPlugin : public IPlugin {\n'
              'public:\n'
              '  SplitPlugin(int nOuts, int *channels_, int axis): '
              'nOuts(nOuts), axis(axis) {\n'
              '    assert(nOuts <= MAX_NUM_OUTPUTS);\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3214,
         lineno=1,
         tokens=233,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/graph_to_trt.cc\n'
              '  Classes: Logger SplitPlugin\n'
              '  Structs: Profiler\n'
              '  Typedefs: Record\n'
              '  Macros: TIMING_ITERATIONS\n'
              '  Functions: Logger SplitPlugin buffers runGraphTRT '
              'safeCudaMalloc\n'
              '  Methods: Graph::buildTRTNetwork Graph::buildTRTNetworkHelper\n'
              '  Fields: mProfile nOuts reportableSeverity\n'
              '  Variables: gLogger gProfiler inputs kernelH new_dims outputs '
              'padH sizeD startD strideD weight_dims\n'
              '  Usages: AC_MODE_NONE AC_MODE_RELU AC_MODE_SIGMOID '
              'OP_BATCHNORM OP_CONCAT OP_CONV2D OP_EW_ADD OP_EW_MUL OP_MATMUL '
              'OP_NOOP OP_POOL2D_AVG OP_POOL2D_MAX OP_RELU OP_RESHAPE '
              'OP_SIGMOID OP_SPLIT OP_TANH buildTRTNetwork '
              'buildTRTNetworkHelper cerr cout endl find_if kAVERAGE kERROR '
              'kFLOAT kINFO kINTERNAL_ERROR kMAX kPROD kRELU kSIGMOID kSUM '
              'kTANH kUNIFORM kWARNING make_pair now\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3215,
         lineno=7,
         tokens=7,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='TIMING_ITERATIONS',
         body='#define TIMING_ITERATIONS 10')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3216,
         lineno=9,
         tokens=539,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='SplitPlugin',
         body='class SplitPlugin : public IPlugin {\n'
              'public:\n'
              '  SplitPlugin(int nOuts, int *channels_, int axis): '
              'nOuts(nOuts), axis(axis) {\n'
              '    assert(nOuts <= MAX_NUM_OUTPUTS);\n'
              '    for (int i = 0; i < nOuts; i++) {\n'
              '      channels[i] = channels_[i];\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int getNbOutputs() const override {\n'
              '    return nOuts;\n'
              '  }\n'
              '\n'
              '  Dims getOutputDimensions(int index, const Dims* inputs, int '
              'nbInputDims) override {\n'
              '    assert(nbInputDims == 1);\n'
              '    assert(inputs[0].nbDims == 3);\n'
              '    int outChannelsSum = 0;\n'
              '    for (int i = 0; i < nOuts; i++) {\n'
              '      outChannelsSum += channels[i];\n'
              '    }\n'
              '    assert(inputs[0].d[axis] == outChannelsSum);\n'
              '    return Dims3{axis == 0 ? channels[index] : inputs[0].d[0],\n'
              '                 axis == 1 ? channels[index] : inputs[0].d[1],\n'
              '                 axis == 2 ? channels[index] : '
              'inputs[0].d[2]};\n'
              '  }\n'
              '\n'
              '  void configure(const Dims* inputDims, int nbInputs, const '
              'Dims* outputDims, int nbOutputs,\n'
              '    int maxBatchSize) override {\n'
              '\n'
              '    assert(maxBatchSize == 1);\n'
              '    d = inputDims[0];\n'
              '  }\n'
              '\n'
              '  int enqueue(int batchSize, const void*const * inputs, void** '
              'outputs, void* workspace,\n'
              '    cudaStream_t stream) override {\n'
              '\n'
              '    /*\n'
              '    TODO replace this -- example for axis == 0\n'
              '    int runningChannels = 0;\n'
              '    for (int i = 0; i < nOuts; i++) {\n'
              '      auto inputSlice = static_cast<const uint32_t*>(inputs[0]) '
              '+ runningChannels * d[1] * d[2];\n'
              '      checkCUDA(cudaMemcpyAsync(outputs[i], inputSlice, '
              'sizeof(uint32_t) * channels[i] * d[1] * d[2],\n'
              '        cudaMemcpyDeviceToDevice, stream));\n'
              '      runningChannels += channels[i];\n'
              '    }\n'
              '    */\n'
              '    return 0;\n'
              '  }\n'
              '\n'
              '  int initialize() override { return 0; }\n'
              '  void terminate() override {}\n'
              '  size_t getWorkspaceSize(int maxBatchSize) const override { '
              'return 0; }\n'
              '  size_t getSerializationSize() override { return 0; }\n'
              '  void serialize(void *buffer) override {}\n'
              'private:\n'
              '  int nOuts, axis;\n'
              '  Dims d;\n'
              '  int channels[MAX_NUM_OUTPUTS];\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3217,
         lineno=11,
         tokens=67,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitPlugin',
         body='SplitPlugin(int nOuts, int *channels_, int axis): nOuts(nOuts), '
              'axis(axis) {\n'
              '    assert(nOuts <= MAX_NUM_OUTPUTS);\n'
              '    for (int i = 0; i < nOuts; i++) {\n'
              '      channels[i] = channels_[i];\n'
              '    }\n'
              '  }')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3218,
         lineno=11,
         tokens=14,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='SplitPlugin',
         body='SplitPlugin(int nOuts, int *channels_, int axis)')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3219,
         lineno=13,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < nOuts; i++) {\n'
              '      channels[i] = channels_[i];\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int getNbOutputs() const override {\n'
              '    return nOuts;\n'
              '  }\n'
              '\n'
              '  Dims getOutputDimensions(int index, const Dims* inputs, int '
              'nbInputDims) override {\n'
              '    assert(nbInputDims == 1);\n'
              '    assert(inputs[0].nbDims == 3);\n'
              '    int outChannelsSum = 0;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3220,
         lineno=26,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < nOuts; i++) {\n'
              '      outChannelsSum += channels[i];\n'
              '    }\n'
              '    assert(inputs[0].d[axis] == outChannelsSum);\n'
              '    return Dims3{axis == 0 ? channels[index] : inputs[0].d[0],\n'
              '                 axis == 1 ? channels[index] : inputs[0].d[1],\n'
              '                 axis == 2 ? channels[index] : '
              'inputs[0].d[2]};\n'
              '  }\n'
              '\n'
              '  void configure(const Dims* input')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3221,
         lineno=35,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Dims, int nbInputs, const Dims* outputDims, int nbOutputs,\n'
              '    int maxBatchSize) override {\n'
              '\n'
              '    assert(maxBatchSize == 1);\n'
              '    d = inputDims[0];\n'
              '  }\n'
              '\n'
              '  int enqueue(int batchSize, const void*const * inputs, void** '
              'outputs, void* workspace,\n'
              '    cudaStream_t stream) override {\n'
              '\n'
              '    /*\n'
              '    TODO replace this -- example for axis == 0\n'
              '    int runningChannels = 0;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3222,
         lineno=48,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < nOuts; i++) {\n'
              '      auto inputSlice = static_cast<const uint32_t*>(inputs[0]) '
              '+ runningChannels * d[1] * d[2];\n'
              '      checkCUDA(cudaMemcpyAsync(outputs[i], inputSlice, '
              'sizeof(uint32_t) * channels[i] * d[1] * d[2],\n'
              '        cudaMemcpyDeviceToDevice, stream));\n'
              '      runningChannels += channels[i];\n'
              '    }\n'
              '    */\n'
              '  ')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3223,
         lineno=55,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  return 0;\n'
              '  }\n'
              '\n'
              '  int initialize() override { return 0; }\n'
              '  void terminate() override {}\n'
              '  size_t getWorkspaceSize(int maxBatchSize) const override { '
              'return 0; }\n'
              '  size_t getSerializationSize() override { return 0; }\n'
              '  void serialize(void *buffer) override {}\n'
              'private:\n'
              '  int nOuts, axis;\n'
              '  Dims d;\n'
              '  int channels[MAX_NUM_OUTPUTS];\n'
              '};\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3224,
         lineno=64,
         tokens=7,
         depth=3,
         parent_id=None,
         category='field',
         summary=False,
         name='nOuts',
         body='int nOuts, axis;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3225,
         lineno=68,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Logger : public ILogger\n'
              '{\n'
              'public:\n'
              '\n'
              '    Logger(): Logger(Severity::kWARNING) {}\n'
              '\n'
              '    Logger(Severity severity): reportableSeverity(severity) {}\n'
              '\n'
              '    void log(Severity severity, const char* msg) override\n'
              '    {\n'
              '        // suppress messages with severity enum value greater '
              'than the reportable\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3226,
         lineno=69,
         tokens=191,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='Logger',
         body='class Logger : public ILogger\n'
              '{\n'
              'public:\n'
              '\n'
              '    Logger(): Logger(Severity::kWARNING) {}\n'
              '\n'
              '    Logger(Severity severity): reportableSeverity(severity) {}\n'
              '\n'
              '    void log(Severity severity, const char* msg) override\n'
              '    {\n'
              '        // suppress messages with severity enum value greater '
              'than the reportable\n'
              '        if (severity > reportableSeverity) return;\n'
              '\n'
              '        switch (severity)\n'
              '        {\n'
              '        case Severity::kINTERNAL_ERROR: std::cerr << '
              '"INTERNAL_ERROR: "; break;\n'
              '        case Severity::kERROR: std::cerr << "ERROR: "; break;\n'
              '        case Severity::kWARNING: std::cerr << "WARNING: "; '
              'break;\n'
              '        case Severity::kINFO: std::cerr << "INFO: "; break;\n'
              '        default: std::cerr << "UNKNOWN: "; break;\n'
              '        }\n'
              '        std::cerr << msg << std::endl;\n'
              '    }\n'
              '\n'
              '    Severity reportableSeverity{Severity::kWARNING};\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3227,
         lineno=73,
         tokens=10,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='Logger',
         body='Logger(): Logger(Severity::kWARNING) {}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3228,
         lineno=73,
         tokens=2,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='Logger',
         body='Logger()')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3229,
         lineno=75,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='Logger',
         body='Logger(Severity severity): reportableSeverity(severity) {}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3230,
         lineno=75,
         tokens=5,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='Logger',
         body='Logger(Severity severity)')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3231,
         lineno=80,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (severity > reportableSeverity) return;\n'
              '\n'
              '        switch (severity)\n'
              '        {\n'
              '        case Severity::kINTERNAL_ERROR: std::cerr << '
              '"INTERNAL_ERROR: "; break;\n'
              '        case Severity::kERROR: std::cerr << "ERROR: "; break;\n'
              '        case Severity::kWARNING: std::cerr << "WARNING: "; '
              'break;\n'
              '        case Severity::kINFO: std::cerr << "INFO: "; break;\n'
              '        default: std::cerr << "UNKNOWN: "; break;\n'
              '        }\n'
              '        std::cerr << msg << std::endl;\n'
              '    }\n'
              '\n'
              '    Severity reportableSeverity{Severity::kWARNING};\n'
              '};\n'
              '\n'
              'static Logger gLogger;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3232,
         lineno=93,
         tokens=10,
         depth=3,
         parent_id=None,
         category='field',
         summary=False,
         name='reportableSeverity',
         body='Severity reportableSeverity{Severity::kWARNING};')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3233,
         lineno=96,
         tokens=5,
         depth=1,
         parent_id=None,
         category='variable',
         summary=False,
         name='gLogger',
         body='static Logger gLogger;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3234,
         lineno=97,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct Profiler : public IProfiler\n'
              '{\n'
              '    typedef std::pair<std::string, float> Record;\n'
              '    std::vector<Record> mProfile;\n'
              '\n'
              '    virtual void reportLayerTime(const char* layerName, float '
              'ms)\n'
              '    {\n'
              '        auto record = std::find_if(mProfile.begin(), '
              'mProfile.end(), [&](const Record& r){ return r.first == '
              'layerName; });\n'
              '        if (record == mProfile.end())\n'
              '            mProfile.push_back(std::make_pair(layerName, ms));\n'
              '        else\n'
              '            record->second += ms;\n'
              '    }\n'
              '\n'
              '    void printLayerTimes()\n'
              '    {\n'
              '        float totalTime = 0;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3235,
         lineno=98,
         tokens=223,
         depth=2,
         parent_id=None,
         category='struct',
         summary=False,
         name='Profiler',
         body='struct Profiler : public IProfiler\n'
              '{\n'
              '    typedef std::pair<std::string, float> Record;\n'
              '    std::vector<Record> mProfile;\n'
              '\n'
              '    virtual void reportLayerTime(const char* layerName, float '
              'ms)\n'
              '    {\n'
              '        auto record = std::find_if(mProfile.begin(), '
              'mProfile.end(), [&](const Record& r){ return r.first == '
              'layerName; });\n'
              '        if (record == mProfile.end())\n'
              '            mProfile.push_back(std::make_pair(layerName, ms));\n'
              '        else\n'
              '            record->second += ms;\n'
              '    }\n'
              '\n'
              '    void printLayerTimes()\n'
              '    {\n'
              '        float totalTime = 0;\n'
              '        for (size_t i = 0; i < mProfile.size(); i++)\n'
              '        {\n'
              '            printf("%s %4.3fms\\n", mProfile[i].first.c_str(), '
              'mProfile[i].second / TIMING_ITERATIONS); // %-400.400s\n'
              '            totalTime += mProfile[i].second;\n'
              '        }\n'
              '        printf("Time over all layers: %4.3f\\n", totalTime / '
              'TIMING_ITERATIONS);\n'
              '    }\n'
              '\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3236,
         lineno=98,
         tokens=226,
         depth=1,
         parent_id=None,
         category='variable',
         summary=False,
         name='gProfiler',
         body='struct Profiler : public IProfiler\n'
              '{\n'
              '    typedef std::pair<std::string, float> Record;\n'
              '    std::vector<Record> mProfile;\n'
              '\n'
              '    virtual void reportLayerTime(const char* layerName, float '
              'ms)\n'
              '    {\n'
              '        auto record = std::find_if(mProfile.begin(), '
              'mProfile.end(), [&](const Record& r){ return r.first == '
              'layerName; });\n'
              '        if (record == mProfile.end())\n'
              '            mProfile.push_back(std::make_pair(layerName, ms));\n'
              '        else\n'
              '            record->second += ms;\n'
              '    }\n'
              '\n'
              '    void printLayerTimes()\n'
              '    {\n'
              '        float totalTime = 0;\n'
              '        for (size_t i = 0; i < mProfile.size(); i++)\n'
              '        {\n'
              '            printf("%s %4.3fms\\n", mProfile[i].first.c_str(), '
              'mProfile[i].second / TIMING_ITERATIONS); // %-400.400s\n'
              '            totalTime += mProfile[i].second;\n'
              '        }\n'
              '        printf("Time over all layers: %4.3f\\n", totalTime / '
              'TIMING_ITERATIONS);\n'
              '    }\n'
              '\n'
              '} gProfiler;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3237,
         lineno=100,
         tokens=12,
         depth=4,
         parent_id=None,
         category='typedef',
         summary=False,
         name='Record',
         body='typedef std::pair<std::string, float> Record;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3238,
         lineno=101,
         tokens=9,
         depth=4,
         parent_id=None,
         category='field',
         summary=False,
         name='mProfile',
         body='std::vector<Record> mProfile;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3239,
         lineno=115,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (size_t i = 0; i < mProfile.size(); i++)\n'
              '        {\n'
              '            printf("%s %4.3fms\\n", mProfile[i].first.c_str(), '
              'mProfile[i].second / TIMING_ITERATIONS); // %-400.400s\n'
              '            totalTime += mProfile[i].second;\n'
              '        }\n'
              '        printf("Time over all layers: %4.3f\\n", totalTime / '
              'TIMING_ITERATIONS);\n'
              '    }\n'
              '\n'
              '} gProfiler;\n'
              '\n'
              'void* safeCudaMalloc(size_t memSize)\n'
              '{\n'
              '    void* deviceMem;\n'
              '    checkCUDA(cudaMalloc(&deviceMem, memSize));\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3240,
         lineno=125,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='safeCudaMalloc',
         body='safeCudaMalloc(size_t memSize)')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3241,
         lineno=129,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (deviceMem == nullptr)\n'
              '    {\n'
              '        std::cerr << "Out of memory" << std::endl;\n'
              '        exit(1);\n'
              '    }\n'
              '    return deviceMem;\n'
              '}\n'
              '\n'
              'void Graph::buildTRTNetworkHelper(INetworkDefinition *network, '
              'std::map<SrcEdge, ITensor *, SrcEdgeCompare>& outputs, Edge '
              'fullEdge) {\n'
              '  SrcEdge edge(fullEdge.srcIdx, fullEdge.srcOp);\n'
              '  if (outputs.find(edge) != outputs.end()) {\n'
              '    return;\n'
              '  }\n'
              '\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[edge.op];\n'
              '  std::vector<ITensor *> inputs;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3242,
         lineno=137,
         tokens=2361,
         depth=1,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::buildTRTNetworkHelper',
         body='void Graph::buildTRTNetworkHelper(INetworkDefinition *network, '
              'std::map<SrcEdge, ITensor *, SrcEdgeCompare>& outputs, Edge '
              'fullEdge) {\n'
              '  SrcEdge edge(fullEdge.srcIdx, fullEdge.srcOp);\n'
              '  if (outputs.find(edge) != outputs.end()) {\n'
              '    return;\n'
              '  }\n'
              '\n'
              '  std::set<Edge, EdgeCompare> inList = inEdges[edge.op];\n'
              '  std::vector<ITensor *> inputs;\n'
              '  for (auto it = inList.begin(); it != inList.end(); it++) {\n'
              '    if (it->srcOp.guid > GUID_PRESERVED) {\n'
              '      buildTRTNetworkHelper(network, outputs, *it);\n'
              '      inputs.push_back(outputs[(SrcEdge) {it->srcIdx, '
              'it->srcOp}]);\n'
              '    } else if (it->srcOp.guid == GUID_WEIGHT) {\n'
              '      assert(edge.op.ptr->type == OpBase::OP_NOOP);\n'
              '      return;\n'
              '    }\n'
              '  }\n'
              '  if (inputs.size() == 0) {\n'
              '    Tensor input = edge.op.ptr->inputs[0];\n'
              '    Dims d;\n'
              '    d.nbDims = input.numDim;\n'
              '    for (int i = 0; i < d.nbDims; i++) {\n'
              '      d.d[i] = input.dim[i];\n'
              '    }\n'
              '    char name[255];\n'
              '    sprintf(name, "in%zd", edge.op.guid);\n'
              '    ITensor *trt_input = network->addInput(name, '
              'DataType::kFLOAT, d);\n'
              '    outputs[edge] = trt_input;\n'
              '    return;\n'
              '  }\n'
              '\n'
              '  switch (edge.op.ptr->type) {\n'
              '    case OpBase::OP_CONV2D:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      assert(inputs[0]->getDimensions().nbDims == 4);\n'
              '      Conv2D* conv = (Conv2D*) edge.op.ptr;\n'
              '      int inputC = inputs[0]->getDimensions().d[1];\n'
              '      int kernelH, kernelW, outputC, padH, padW;\n'
              '      kernelH = conv->inputs[1].dim[2];\n'
              '      kernelW = conv->inputs[1].dim[3];\n'
              '      outputC = conv->inputs[1].dim[0];\n'
              '      assert(inputC % conv->inputs[1].dim[1] == 0);\n'
              '      int groups = inputC / conv->inputs[1].dim[1];\n'
              '      conv->get_padding(&padH, &padW);\n'
              '      int numWeights = kernelH * kernelW * outputC * '
              'conv->inputs[1].dim[1];\n'
              '      auto trt_conv = network->addConvolution(*inputs[0], '
              'outputC, DimsHW{kernelH, kernelW},\n'
              '        (Weights) {DataType::kFLOAT, malloc(sizeof(uint32_t) * '
              'numWeights), numWeights}, // TODO memory leak\n'
              '        (Weights) {DataType::kFLOAT, nullptr, 0});\n'
              '      char name[255];\n'
              '      sprintf(name, "conv%zd:%dx%d/%dx%d/%d/%d",\n'
              '        edge.op.guid, kernelH, kernelW, conv->strideH, '
              'conv->strideW, inputC, outputC);\n'
              '      trt_conv->setNbGroups(groups);\n'
              '      trt_conv->setName(name);\n'
              '      trt_conv->setStride(DimsHW{conv->strideH, '
              'conv->strideW});\n'
              '      trt_conv->setPadding(DimsHW{padH, padW});\n'
              '      outputs[edge] = trt_conv->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_POOL2D_MAX:\n'
              '    case OpBase::OP_POOL2D_AVG:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      Pool2D* pool = (Pool2D*) edge.op.ptr;\n'
              '      int padH, padW;\n'
              '      pool->get_padding(&padH, &padW);\n'
              '      auto trt_pool = network->addPooling(*inputs[0],\n'
              '        pool->type == OpBase::OP_POOL2D_MAX ? PoolingType::kMAX '
              ': PoolingType::kAVERAGE,\n'
              '        DimsHW{pool->kernelH, pool->kernelW});\n'
              '      trt_pool->setStride(DimsHW{pool->strideH, '
              'pool->strideW});\n'
              '      trt_pool->setPadding(DimsHW{padH, padW});\n'
              '      outputs[edge] = trt_pool->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_RELU:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kRELU)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_TANH:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kTANH)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_SIGMOID:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kSIGMOID)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_BATCHNORM:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      float scale_param = 5.0f;\n'
              '      float shift_param = 1.0f;\n'
              '      outputs[edge] = network->addScale(*inputs[0], '
              'ScaleMode::kUNIFORM,\n'
              '        (Weights) {DataType::kFLOAT, &shift_param, 1}, '
              '(Weights) {DataType::kFLOAT, &scale_param, 1},\n'
              '        (Weights) {DataType::kFLOAT, nullptr, '
              '0})->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_SPLIT:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      Split *split = (Split *) edge.op.ptr;\n'
              '      /*\n'
              '      SplitPlugin *trt_split_plugin = new '
              'SplitPlugin(edge.op.ptr->numOutputs, split->sizes, '
              'split->axis); // TODO memory leak\n'
              '      auto trt_split_layer = network->addPlugin(&inputs[0], 1, '
              '*trt_split_plugin);\n'
              '      for (int i = 0; i < trt_split_layer->getNbOutputs(); i++) '
              '{\n'
              '        outputs[(SrcEdge) {i, edge.op}] = '
              'trt_split_layer->getOutput(i);\n'
              '      }\n'
              '      */\n'
              '      Dims startD;\n'
              '      startD.nbDims = split->inputs[0].numDim;\n'
              '      for (int i = 0; i < startD.nbDims; i++) {\n'
              '        startD.d[i] = 0;\n'
              '      }\n'
              '      Dims sizeD;\n'
              '      sizeD.nbDims = split->inputs[0].numDim;\n'
              '      for (int i = 0; i < sizeD.nbDims; i++) {\n'
              '        sizeD.d[i] = split->inputs[0].dim[i];\n'
              '      }\n'
              '      Dims strideD;\n'
              '      strideD.nbDims = split->inputs[0].numDim;\n'
              '      for (int i = 0; i < strideD.nbDims; i++) {\n'
              '        strideD.d[i] = 1;\n'
              '      }\n'
              '      int cumDim = 0;\n'
              '      for (int i = 0; i < split->numOutputs; i++) {\n'
              '        startD.d[split->axis] = cumDim;\n'
              '        sizeD.d[split->axis] = split->sizes[i];\n'
              '        outputs[(SrcEdge) {i, edge.op}] =\n'
              '          network->addSlice(*inputs[0], startD, sizeD, '
              'strideD)->getOutput(0);\n'
              '        cumDim += split->sizes[i];\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_RESHAPE:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      auto trt_reshape = network->addShuffle(*inputs[0]);\n'
              '      Dims new_dims;\n'
              '      new_dims.nbDims = edge.op.ptr->outputs[0].numDim;\n'
              '      for (int i = 0; i < new_dims.nbDims; i++) {\n'
              '        new_dims.d[i] = edge.op.ptr->outputs[0].dim[i];\n'
              '      }\n'
              '      trt_reshape->setReshapeDimensions(new_dims);\n'
              '      outputs[edge] = trt_reshape->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_EW_ADD:\n'
              '    case OpBase::OP_EW_MUL:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      outputs[edge] = network->addElementWise(*inputs[0], '
              '*inputs[1],\n'
              '        edge.op.ptr->type == OpBase::OP_EW_ADD ? '
              'ElementWiseOperation::kSUM : '
              'ElementWiseOperation::kPROD)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_MATMUL:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      Matmul *matmul = (Matmul *) edge.op.ptr;\n'
              '      Dims weight_dims;\n'
              '      weight_dims.nbDims = matmul->inputs[1].numDim;\n'
              '      for (int i = 0; i < weight_dims.nbDims; i++) {\n'
              '        weight_dims.d[i] = matmul->inputs[1].dim[i];\n'
              '      }\n'
              '      char name[255];\n'
              '      sprintf(name, "matmul%zd_weights", edge.op.guid);\n'
              '      ITensor *trt_weight_matrix = network->addInput(name, '
              'DataType::kFLOAT, weight_dims);\n'
              '      auto trt_mm = network->addMatrixMultiply(*inputs[0], '
              'false, *trt_weight_matrix, false);\n'
              '      if (matmul->activation != OpBase::AC_MODE_NONE) {\n'
              '        ActivationType at = matmul->activation == '
              'OpBase::AC_MODE_RELU ? ActivationType::kRELU :\n'
              '          matmul->activation == OpBase::AC_MODE_SIGMOID ? '
              'ActivationType::kSIGMOID : ActivationType::kTANH;\n'
              '        outputs[edge] = '
              'network->addActivation(*trt_mm->getOutput(0), '
              'at)->getOutput(0);\n'
              '      } else {\n'
              '        outputs[edge] = trt_mm->getOutput(0);\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_NOOP:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = inputs[0];\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_CONCAT:\n'
              '    {\n'
              '      assert(inputs.size() > 1);\n'
              '      Concat *concat = (Concat *) edge.op.ptr;\n'
              '      // Concat weights: directly return\n'
              '      if (inputs[0] == NULL)\n'
              '        return;\n'
              '      int nd = inputs[0]->getDimensions().nbDims;\n'
              '      for (int i = 0; i < inputs.size(); i++) {\n'
              '        assert(inputs[i]->getDimensions().nbDims == nd);\n'
              '        for (int j = 0; j < nd; j++)\n'
              '          if (j !=concat->axis) {\n'
              '            assert(inputs[i]->getDimensions().d[j] == '
              'inputs[0]->getDimensions().d[j]);\n'
              '          }\n'
              '      }\n'
              '      auto trt_concat = network->addConcatenation(&inputs[0], '
              'inputs.size());\n'
              '      trt_concat->setAxis(concat->axis);\n'
              '      outputs[edge] = trt_concat->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3243,
         lineno=144,
         tokens=9,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputs',
         body='std::vector<ITensor *> inputs;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3244,
         lineno=145,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto it = inList.begin(); it != inList.end(); it++) {\n'
              '    if (it->srcOp.guid > GUID_PRESERVED) {\n'
              '      buildTRTNetworkHelper(network, outputs, *it);\n'
              '      inputs.push_back(outputs[(SrcEdge) {it->srcIdx, '
              'it->srcOp}]);\n'
              '    } else if (it->srcOp.guid == GUID_WEIGHT) {\n'
              '      assert(edge.op.ptr->type == OpBase::OP_NOOP);\n'
              '      return;\n'
              '    }\n'
              '  }\n'
              '  if (inputs.size() == 0) {\n'
              '    Tensor input = edge.op.ptr->inputs[0];\n'
              '    Dims d;\n'
              '    d.nbDims = input.numDim;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3245,
         lineno=158,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < d.nbDims; i++) {\n'
              '      d.d[i] = input.dim[i];\n'
              '    }\n'
              '    char name[255];\n'
              '    sprintf(name, "in%zd", edge.op.guid);\n'
              '    ITensor *trt_input = network->addInput(name, '
              'DataType::kFLOAT, d);\n'
              '    outputs[edge] = trt_input;\n'
              '    return;\n'
              '  }\n'
              '\n'
              '  switch (edge.op.ptr->type) {\n'
              '    case OpBase::OP_CONV2D:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      assert(inputs[0]->getDimensions().nbDims == 4);\n'
              '      Conv2D* c')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3246,
         lineno=173,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='onv = (Conv2D*) edge.op.ptr;\n'
              '      int inputC = inputs[0]->getDimensions().d[1];\n'
              '      int kernelH, kernelW, outputC, padH, padW;\n'
              '      kernelH = conv->inputs[1].dim[2];\n'
              '      kernelW = conv->inputs[1].dim[3];\n'
              '      outputC = conv->inputs[1].dim[0];\n'
              '      assert(inputC % conv->inputs[1].dim[1] == 0);\n'
              '      int groups = inputC / conv->inputs[1].dim[1];\n'
              '      conv->get_padding(&padH, &padW);\n'
              '      int numWeights = kernelH *')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3247,
         lineno=175,
         tokens=16,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='kernelH',
         body='int kernelH, kernelW, outputC, padH, padW;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3248,
         lineno=182,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' kernelW * outputC * conv->inputs[1].dim[1];\n'
              '      auto trt_conv = network->addConvolution(*inputs[0], '
              'outputC, DimsHW{kernelH, kernelW},\n'
              '        (Weights) {DataType::kFLOAT, malloc(sizeof(uint32_t) * '
              'numWeights), numWeights}, // TODO memory leak\n'
              '        (Weights) {DataType::kFLOAT, nullptr, 0});\n'
              '      char name[255];\n'
              '      sprintf(name, "conv%zd:%dx%d/%dx%d/%d/%d",\n'
              '        edge.op.guid, kernelH, kernelW, conv->strideH, c')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3249,
         lineno=188,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='onv->strideW, inputC, outputC);\n'
              '      trt_conv->setNbGroups(groups);\n'
              '      trt_conv->setName(name);\n'
              '      trt_conv->setStride(DimsHW{conv->strideH, '
              'conv->strideW});\n'
              '      trt_conv->setPadding(DimsHW{padH, padW});\n'
              '      outputs[edge] = trt_conv->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_POOL2D_MAX:\n'
              '    case OpBase::OP_POOL2D_AVG:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      Pool2D* pool = (Pool2D*) edge.op.ptr;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3250,
         lineno=200,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '      int padH, padW;\n'
              '      pool->get_padding(&padH, &padW);\n'
              '      auto trt_pool = network->addPooling(*inputs[0],\n'
              '        pool->type == OpBase::OP_POOL2D_MAX ? PoolingType::kMAX '
              ': PoolingType::kAVERAGE,\n'
              '        DimsHW{pool->kernelH, pool->kernelW});\n'
              '      trt_pool->setStride(DimsHW{pool->strideH, '
              'pool->strideW});\n'
              '      trt_pool->setPadding(DimsHW{padH, padW});\n'
              '      outputs[edge] = trt_pool->getOutput(0);\n'
              '      break;\n'
              ' ')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3251,
         lineno=201,
         tokens=7,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3252,
         lineno=210,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   }\n'
              '    case OpBase::OP_RELU:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kRELU)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_TANH:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kTANH)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_SIGMOID:\n'
              '    {\n'
              '      assert(inputs.size(')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3253,
         lineno=225,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=') == 1);\n'
              '      outputs[edge] = network->addActivation(*inputs[0], '
              'ActivationType::kSIGMOID)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_BATCHNORM:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      float scale_param = 5.0f;\n'
              '      float shift_param = 1.0f;\n'
              '      outputs[edge] = network->addScale(*inputs[0], '
              'ScaleMode::kUNIFORM,\n'
              '        (Weights) {DataType::kFLOAT, &shift_param, 1}, '
              '(Weights) {DataType::kFLOAT, &scale_')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3254,
         lineno=235,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='param, 1},\n'
              '        (Weights) {DataType::kFLOAT, nullptr, '
              '0})->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_SPLIT:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      Split *split = (Split *) edge.op.ptr;\n'
              '      /*\n'
              '      SplitPlugin *trt_split_plugin = new '
              'SplitPlugin(edge.op.ptr->numOutputs, split->sizes, '
              'split->axis); // TODO memory leak\n'
              '      auto trt_split_layer = network->addPlugin(&inputs[0], 1, '
              '*trt_split_plugin);\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3255,
         lineno=246,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < trt_split_layer->getNbOutputs(); i++) '
              '{\n'
              '        outputs[(SrcEdge) {i, edge.op}] = '
              'trt_split_layer->getOutput(i);\n'
              '      }\n'
              '      */\n'
              '      Dims startD;\n'
              '      startD.nbDims = split->inputs[0].numDim;\n'
              '      for (int i = 0; i < startD.nbDims; i++) {\n'
              '        startD.d[i] = 0;\n'
              '      }\n'
              '      Dims sizeD;\n'
              '      sizeD.nbDims = split->inputs[0].numDim;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3256,
         lineno=250,
         tokens=4,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='startD',
         body='Dims startD;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3257,
         lineno=255,
         tokens=4,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='sizeD',
         body='Dims sizeD;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3258,
         lineno=257,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < sizeD.nbDims; i++) {\n'
              '        sizeD.d[i] = split->inputs[0].dim[i];\n'
              '      }\n'
              '      Dims strideD;\n'
              '      strideD.nbDims = split->inputs[0].numDim;\n'
              '      for (int i = 0; i < strideD.nbDims; i++) {\n'
              '        strideD.d[i] = 1;\n'
              '      }\n'
              '      int cumDim = 0;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3259,
         lineno=260,
         tokens=4,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='strideD',
         body='Dims strideD;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3260,
         lineno=266,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < split->numOutputs; i++) {\n'
              '        startD.d[split->axis] = cumDim;\n'
              '        sizeD.d[split->axis] = split->sizes[i];\n'
              '        outputs[(SrcEdge) {i, edge.op}] =\n'
              '          network->addSlice(*inputs[0], startD, sizeD, '
              'strideD)->getOutput(0);\n'
              '  ')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3261,
         lineno=271,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      cumDim += split->sizes[i];\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_RESHAPE:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      auto trt_reshape = network->addShuffle(*inputs[0]);\n'
              '      Dims new_dims;\n'
              '      new_dims.nbDims = edge.op.ptr->outputs[0].numDim;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3262,
         lineno=279,
         tokens=4,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='new_dims',
         body='Dims new_dims;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3263,
         lineno=281,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < new_dims.nbDims; i++) {\n'
              '        new_dims.d[i] = edge.op.ptr->outputs[0].dim[i];\n'
              '      }\n'
              '      trt_reshape->setReshapeDimensions(new_dims);\n'
              '      outputs[edge] = trt_reshape->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_EW_ADD:\n'
              '    case OpBase::OP_EW_MUL:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      outputs[edge] = network->addEle')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3264,
         lineno=292,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mentWise(*inputs[0], *inputs[1],\n'
              '        edge.op.ptr->type == OpBase::OP_EW_ADD ? '
              'ElementWiseOperation::kSUM : '
              'ElementWiseOperation::kPROD)->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_MATMUL:\n'
              '    {\n'
              '      assert(inputs.size() == 2);\n'
              '      Matmul *matmul = (Matmul *) edge.op.ptr;\n'
              '      Dims weight_dims;\n'
              '      weight_dims.nbDims = matmul->inputs[1].numDim;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3265,
         lineno=300,
         tokens=4,
         depth=7,
         parent_id=None,
         category='variable',
         summary=False,
         name='weight_dims',
         body='Dims weight_dims;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3266,
         lineno=302,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < weight_dims.nbDims; i++) {\n'
              '        weight_dims.d[i] = matmul->inputs[1].dim[i];\n'
              '      }\n'
              '      char name[255];\n'
              '      sprintf(name, "matmul%zd_weights", edge.op.guid);\n'
              '      ITensor *trt_weight_matrix = network->addInput(name, '
              'DataType::kFLOAT, weight_dims);\n'
              '      auto trt_mm = network->addMatrixMultiply(*inputs[0], '
              'false, *trt_weight_matrix, false);\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3267,
         lineno=309,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (matmul->activation != OpBase::AC_MODE_NONE) {\n'
              '        ActivationType at = matmul->activation == '
              'OpBase::AC_MODE_RELU ? ActivationType::kRELU :\n'
              '          matmul->activation == OpBase::AC_MODE_SIGMOID ? '
              'ActivationType::kSIGMOID : ActivationType::kTANH;\n'
              '        outputs[edge] = '
              'network->addActivation(*trt_mm->getOutput(0), '
              'at)->getOutput(0);\n'
              '     ')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3268,
         lineno=313,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' } else {\n'
              '        outputs[edge] = trt_mm->getOutput(0);\n'
              '      }\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_NOOP:\n'
              '    {\n'
              '      assert(inputs.size() == 1);\n'
              '      outputs[edge] = inputs[0];\n'
              '      break;\n'
              '    }\n'
              '    case OpBase::OP_CONCAT:\n'
              '    {\n'
              '      assert(inputs.size() > 1);\n'
              '      Concat *concat = (Concat *) edge.op.ptr;\n'
              '      // Concat weights: directly return\n'
              '      if (inputs[0] == NULL)\n'
              '        return;\n'
              '      int nd = inputs[0]->getDimensions().nbDims;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3269,
         lineno=332,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < inputs.size(); i++) {\n'
              '        assert(inputs[i]->getDimensions().nbDims == nd);\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3270,
         lineno=334,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (int j = 0; j < nd; j++)\n'
              '          if (j !=concat->axis) {\n'
              '            assert(inputs[i]->getDimensions().d[j] == '
              'inputs[0]->getDimensions().d[j]);\n'
              '          }\n'
              '      }\n'
              '      auto trt_concat = network->addConcatenation(&inputs[0], '
              'inputs.size());\n'
              '      trt_concat->setAxis(concat->axis);\n'
              '      outputs[edge] = trt_concat->getOutput(0);\n'
              '      break;\n'
              '    }\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Graph::buildTRTNetwork(INetworkDefinition *network) {\n'
              '  std::map<SrcEdge, ITensor *, SrcEdgeCompare> outputs;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3271,
         lineno=349,
         tokens=180,
         depth=1,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::buildTRTNetwork',
         body='void Graph::buildTRTNetwork(INetworkDefinition *network) {\n'
              '  std::map<SrcEdge, ITensor *, SrcEdgeCompare> outputs;\n'
              '  for (auto it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (outEdges.find(it->first) != outEdges.end()) {\n'
              '      if (outEdges[it->first].size() > 0)\n'
              '        continue;\n'
              '    }\n'
              '    //if (outEdges.find(it->first) == outEdges.end()) {\n'
              '      assert(it->first.ptr->numOutputs == 1);\n'
              '      Edge outEdge(it->first, it->first, 0, 0); // will '
              'immediately be converted to SrcEdge\n'
              '      buildTRTNetworkHelper(network, outputs, outEdge);\n'
              '      network->markOutput(*outputs[(SrcEdge) {0, it->first}]);\n'
              '    //}\n'
              '  }\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3272,
         lineno=350,
         tokens=16,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputs',
         body='std::map<SrcEdge, ITensor *, SrcEdgeCompare> outputs;')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3273,
         lineno=351,
         tokens=35,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto it = inEdges.begin(); it != inEdges.end(); it++) {\n'
              '    if (outEdges.find(it->first) != outEdges.end()) {\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3274,
         lineno=353,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (outEdges[it->first].size() > 0)\n'
              '        continue;\n'
              '    }\n'
              '    //if (outEdges.find(it->first) == outEdges.end()) {\n'
              '      assert(it->first.ptr->numOutputs == 1);\n'
              '      Edge outEdge(it->first, it->first, 0, 0); // will '
              'immediately be converted to SrcEdge\n'
              '      buildTRTNetworkHelper(network, outputs, outEdge);\n'
              '      network->markOutput(*outputs[(SrcEdge) {0, it->first}]);\n'
              '    //}\n'
              '  }\n'
              '}\n'
              '\n'
              'void runGraphTRT(Graph *graph) {\n'
              '  IBuilder* builder = createInferBuilder(gLogger);\n'
              '  INetworkDefinition* network = builder->c')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3275,
         lineno=365,
         tokens=451,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='runGraphTRT',
         body='void runGraphTRT(Graph *graph) {\n'
              '  IBuilder* builder = createInferBuilder(gLogger);\n'
              '  INetworkDefinition* network = builder->createNetwork();\n'
              '  graph->buildTRTNetwork(network);\n'
              '  IRuntime* runtime = createInferRuntime(gLogger);\n'
              '\n'
              '  builder->setMaxBatchSize(1);\n'
              '  builder->setMaxWorkspaceSize(1 << 30);\n'
              '\n'
              '  ICudaEngine* engine = builder->buildCudaEngine(*network);\n'
              '  network->destroy();\n'
              '  builder->destroy();\n'
              '\n'
              '  IExecutionContext* context = '
              'engine->createExecutionContext();\n'
              '  context->setProfiler(&gProfiler);\n'
              '  int batchSize = 1;\n'
              '\n'
              '  int nbBindings = engine->getNbBindings();\n'
              '  //assert(nbBindings == 2);\n'
              '\n'
              '  std::vector<void*> buffers(nbBindings);\n'
              '\n'
              '  for (int i = 0; i < nbBindings; ++i) {\n'
              '    Dims dims = engine->getBindingDimensions(i);\n'
              '    //assert(dims.nbDims == 3);\n'
              '    int64_t v = 1;\n'
              '    for (int j = 0; j < dims.nbDims; j++) {\n'
              '      v *= dims.d[j];\n'
              '    }\n'
              '    buffers[i] = safeCudaMalloc(sizeof(uint32_t) * v);\n'
              '  }\n'
              '\n'
              '  int numberRun = TIMING_ITERATIONS;\n'
              '  float total = 0, ms;\n'
              '  for (int run = 0; run < numberRun; run++) {\n'
              '      auto t_start = '
              'std::chrono::high_resolution_clock::now();\n'
              '      context->execute(batchSize, &buffers[0]);\n'
              '      auto t_end = std::chrono::high_resolution_clock::now();\n'
              '      ms = std::chrono::duration<float, std::milli>(t_end - '
              't_start).count();\n'
              '      total += ms;\n'
              '  }\n'
              '\n'
              '  total /= numberRun;\n'
              '  std::cout << "Average over " << numberRun << " runs is " << '
              'total << " ms." << std::endl;\n'
              '\n'
              '  for (int bindingIdx = 0; bindingIdx < nbBindings; '
              '++bindingIdx) {\n'
              '    checkCUDA(cudaFree(buffers[bindingIdx]));\n'
              '  }\n'
              '\n'
              '  context->destroy();\n'
              '  engine->destroy();\n'
              '  gProfiler.printLayerTimes();\n'
              '}')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3276,
         lineno=365,
         tokens=8,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='runGraphTRT',
         body='runGraphTRT(Graph *graph)')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3277,
         lineno=367,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='reateNetwork();\n'
              '  graph->buildTRTNetwork(network);\n'
              '  IRuntime* runtime = createInferRuntime(gLogger);\n'
              '\n'
              '  builder->setMaxBatchSize(1);\n'
              '  builder->setMaxWorkspaceSize(1 << 30);\n'
              '\n'
              '  ICudaEngine* engine = builder->buildCudaEngine(*network);\n'
              '  network->destroy();\n'
              '  builder->destroy();\n'
              '\n'
              '  IExecutionContext* context = '
              'engine->createExecutionContext();\n'
              '  context->setProfiler(&gProfiler);\n'
              '  int batchSize = 1;\n'
              '\n'
              '  int nbBindings = engine->getNbBindings();\n'
              '  //assert(nbBindings == 2);\n'
              '\n'
              '  std::vector<void*> buffers(nbBindings);\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3278,
         lineno=385,
         tokens=4,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='buffers',
         body='buffers(nbBindings)')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3279,
         lineno=386,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  for (int i = 0; i < nbBindings; ++i) {\n'
              '    Dims dims = engine->getBindingDimensions(i);\n'
              '    //assert(dims.nbDims == 3);\n'
              '    int64_t v = 1;\n'
              '    for (int j = 0; j < dims.nbDims; j++) {\n'
              '      v *= dims.d[j];\n'
              '    }\n'
              '    buffers[i] = safeCudaMalloc(sizeof(uint32_t) * v);\n'
              '  }\n'
              '\n'
              '  int numberRun = TIMING_ITERATIONS;\n'
              '  float total = 0, ms;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3280,
         lineno=399,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int run = 0; run < numberRun; run++) {\n'
              '      auto t_start = '
              'std::chrono::high_resolution_clock::now();\n'
              '      context->execute(batchSize, &buffers[0]);\n'
              '      auto t_end = std::chrono::high_resolution_clock::now();\n'
              '      ms = std::chrono::duration<float, std::milli>(t_end - '
              't_start).count();\n'
              '      total += ms;\n'
              '  }\n'
              '\n'
              '  total /= numberRun;\n'
              '  std::cout << "Average over " << numberRun << " runs is " << '
              'total << " ms." << std::endl;\n')

Fragment(document_cs='6ccb18782cb99ec82bcdfe6a11154e710746ab9250985874ef77ca4274c40d3a',
         id=3281,
         lineno=409,
         tokens=55,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  for (int bindingIdx = 0; bindingIdx < nbBindings; '
              '++bindingIdx) {\n'
              '    checkCUDA(cudaFree(buffers[bindingIdx]));\n'
              '  }\n'
              '\n'
              '  context->destroy();\n'
              '  engine->destroy();\n'
              '  gProfiler.printLayerTimes();\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3282,
         lineno=1,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3283,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/batchnorm.cc\n'
              '  Functions: key\n'
              '  Methods: BatchNorm::BatchNorm BatchNorm::collect_costs '
              'BatchNorm::get_float_parameter BatchNorm::get_int_parameter '
              'BatchNorm::~BatchNorm BatchNormKey::BatchNormKey '
              'Graph::batchnorm Model::get_or_create_batchnorm\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: BatchNorm BatchNormKey batchnorm collect_costs '
              'get_float_parameter get_int_parameter get_or_create_batchnorm\n')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3284,
         lineno=11,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::batchnorm(const TensorHandle _input,\n'
              '                              const TensorHandle _scale,\n'
              '                              const TensorHandle _bias,\n'
              '   ')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3285,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3286,
         lineno=19,
         tokens=194,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::batchnorm',
         body='TensorHandle Graph::batchnorm(const TensorHandle _input,\n'
              '                              const TensorHandle _scale,\n'
              '                              const TensorHandle _bias,\n'
              '                              const TensorHandle _mean,\n'
              '                              const TensorHandle _var,\n'
              '                              const float _epsilon)\n'
              '{\n'
              '  Op op = model->get_or_create_batchnorm(*_input, *_scale, '
              '*_bias,\n'
              '                                         *_mean, *_var, '
              '_epsilon);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_scale->op, op, _scale->idx, 1);\n'
              '  add_edge(_bias->op, op, _bias->idx, 2);\n'
              '  add_edge(_mean->op, op, _mean->idx, 3);\n'
              '  add_edge(_var->op, op, _var->idx, 4);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3287,
         lineno=22,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                           const TensorHandle _mean,\n'
              '                              const TensorHandle _var,\n'
              '                              const float _epsilon)\n'
              '{\n'
              '  Op op = model->get_or_create_batchnorm(*_input, *_scale, '
              '*_bias,\n'
              '                                         *_mean, *_var, '
              '_epsilon);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_scale->op, op, _scale->idx, 1);\n'
              '  add_edge(_bias->op')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3288,
         lineno=30,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', op, _bias->idx, 2);\n'
              '  add_edge(_mean->op, op, _mean->idx, 3);\n'
              '  add_edge(_var->op, op, _var->idx, 4);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_batchnorm(const Tensor& _input,\n'
              '                                  const Tensor& _scale,\n'
              '                                  const Tensor& _bias,\n'
              '                                  const Tensor& _mean,')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3289,
         lineno=38,
         tokens=177,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_batchnorm',
         body='Op Model::get_or_create_batchnorm(const Tensor& _input,\n'
              '                                  const Tensor& _scale,\n'
              '                                  const Tensor& _bias,\n'
              '                                  const Tensor& _mean,\n'
              '                                  const Tensor& _var,\n'
              '                                  const float _epsilon)\n'
              '{\n'
              '  // key is (inputN, inputC, inputH, inputW)\n'
              '  BatchNormKey key(_input);\n'
              '  BatchNorm* bnOp;\n'
              '  if(batchnorm.find(key) != batchnorm.end()) {\n'
              '    bnOp = batchnorm[key];\n'
              '  } else {\n'
              '    bnOp = new BatchNorm(this, _input, _scale, _bias, _mean, '
              '_var, _epsilon);\n'
              '    measure_batchnorm_cost(bnOp);\n'
              '    batchnorm[key] = bnOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = bnOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3290,
         lineno=41,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '                                  const Tensor& _var,\n'
              '                                  const float _epsilon)\n'
              '{\n'
              '  // key is (inputN, inputC, inputH, inputW)\n'
              '  BatchNormKey key(_input);\n'
              '  BatchNorm* bnOp;\n'
              '  if(batchnorm.find(key) != batchnorm.end()) {\n'
              '    bnOp = batchnorm[key];\n'
              '  } else {\n'
              '    bnOp = new BatchNorm(this, _input, _scale, _bias, _mean, '
              '_var, _epsilon);\n'
              '    measure_batchnorm_cost(bnOp);\n'
              '  ')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3291,
         lineno=46,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input)')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3292,
         lineno=53,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  batchnorm[key] = bnOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = bnOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'BatchNorm::BatchNorm(Model* _model,\n'
              '                     const Tensor& _input,\n'
              '                     const Tensor& _scale,\n'
              '                     const Tensor& _bias,\n'
              '                     const Tensor& _mean,\n'
              '                     const Tensor& _var,\n'
              '                     const float _epsilon)\n'
              ': OpBa')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3293,
         lineno=55,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3294,
         lineno=61,
         tokens=141,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::BatchNorm',
         body='BatchNorm::BatchNorm(Model* _model,\n'
              '                     const Tensor& _input,\n'
              '                     const Tensor& _scale,\n'
              '                     const Tensor& _bias,\n'
              '                     const Tensor& _mean,\n'
              '                     const Tensor& _var,\n'
              '                     const float _epsilon)\n'
              ': OpBase(_input, _scale, _bias, _mean, _var, _model, '
              'OP_BATCHNORM)\n'
              '{\n'
              '  epsilon = _epsilon < 0 ? get_min_epsilon() : _epsilon;\n'
              '  assert(epsilon >= get_min_epsilon());\n'
              '  assert(_input.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3295,
         lineno=68,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='se(_input, _scale, _bias, _mean, _var, _model, OP_BATCHNORM)\n'
              '{\n'
              '  epsilon = _epsilon < 0 ? get_min_epsilon() : _epsilon;\n'
              '  assert(epsilon >= get_min_epsilon());\n'
              '  assert(_input.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'BatchNorm::~BatchNorm(void)\n'
              '{}\n'
              '\n'
              'bool BatchNorm::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3296,
         lineno=78,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::~BatchNorm',
         body='BatchNorm::~BatchNorm(void)\n{}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3297,
         lineno=81,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::get_int_parameter',
         body='bool BatchNorm::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3298,
         lineno=84,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'bool BatchNorm::get_float_parameter(PMParameter para, float* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_EPSILON:\n'
              '    {\n'
              '      *value = epsilon;\n'
              '      return true;\n'
              '    }\n'
              '    default:\n'
              '      return OpBase::get_float_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void BatchNorm::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3299,
         lineno=86,
         tokens=61,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::get_float_parameter',
         body='bool BatchNorm::get_float_parameter(PMParameter para, float* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_EPSILON:\n'
              '    {\n'
              '      *value = epsilon;\n'
              '      return true;\n'
              '    }\n'
              '    default:\n'
              '      return OpBase::get_float_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3300,
         lineno=99,
         tokens=215,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::collect_costs',
         body='void BatchNorm::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize * 2;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[BatchNorm]: i(%d %d %d %d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3301,
         lineno=105,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize * 2;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[BatchNorm]: i(%d %d %d %d) cost(%.4lf)')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3302,
         lineno=112,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (_input)\n'
              'BatchNormKey::BatchNormKey(const Tensor& _input)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3303,
         lineno=118,
         tokens=53,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNormKey::BatchNormKey',
         body='BatchNormKey::BatchNormKey(const Tensor& _input)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='7238a42c02ddb728c9e358d0667e14615897fbfd8d1b8a1d6ad97e89b378df0c',
         id=3304,
         lineno=122,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3305,
         lineno=1,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='#ifndef _CUDA_HELPER_H_\n'
              '#define _CUDA_HELPER_H_\n'
              '\n'
              '#include <sstream>\n'
              '#include <iostream>\n'
              '#include "taso/ops.h"\n'
              '#include <cudnn.h>\n'
              '\n'
              '#define FatalError(s) do '
              '{                                             \\\n'
              '    std::stringstream _where, '
              '_message;                                \\\n'
              "    _where << __FILE__ << ':' << "
              '__LINE__;                             \\\n'
              '    _message << std::string(s) + "\\n" << __FILE__ << \':\' << '
              '__LINE__;  \\\n'
              '    std::cerr << _message.str() << '
              '"\\nAborting...\\n";                  \\\n'
              '    '
              'exit(1);                                                           '
              '\\\n'
              '} while(0)\n'
              '\n'
              '#define checkCUDNN(status) do '
              '{                                        \\\n'
              '    std::stringstream '
              '_error;                                          \\\n')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3306,
         lineno=1,
         tokens=55,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /include/taso/cuda_helper.h\n'
              '  Macros: CUDA_KERNEL_LOOP FatalError _CUDA_HELPER_H_ checkCUDA '
              'checkCUDNN\n'
              '  Functions: GET_BLOCKS assign_kernel copy_kernel '
              'get_activation_mode helperSetBroadcastableTensorDescriptor '
              'helperSetTensorDescriptor\n')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3307,
         lineno=2,
         tokens=6,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CUDA_HELPER_H_',
         body='#define _CUDA_HELPER_H_')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3308,
         lineno=9,
         tokens=92,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='FatalError',
         body='#define FatalError(s) do '
              '{                                             \\\n'
              '    std::stringstream _where, '
              '_message;                                \\\n'
              "    _where << __FILE__ << ':' << "
              '__LINE__;                             \\\n'
              '    _message << std::string(s) + "\\n" << __FILE__ << \':\' << '
              '__LINE__;  \\\n'
              '    std::cerr << _message.str() << '
              '"\\nAborting...\\n";                  \\\n'
              '    '
              'exit(1);                                                           '
              '\\\n'
              '} while(0)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3309,
         lineno=17,
         tokens=73,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='checkCUDNN',
         body='#define checkCUDNN(status) do '
              '{                                        \\\n'
              '    std::stringstream '
              '_error;                                          \\\n'
              '    if (status != CUDNN_STATUS_SUCCESS) '
              '{                              \\\n'
              '      _error << "CUDNN failure: " << '
              'cudnnGetErrorString(status);      \\\n'
              '      '
              'FatalError(_error.str());                                        '
              '\\\n'
              '    '
              '}                                                                  '
              '\\\n'
              '} while(0)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3310,
         lineno=19,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (status != CUDNN_STATUS_SUCCESS) '
              '{                              \\\n'
              '      _error << "CUDNN failure: " << '
              'cudnnGetErrorString(status);      \\\n'
              '      '
              'FatalError(_error.str());                                        '
              '\\\n'
              '    '
              '}                                                                  '
              '\\\n'
              '} while(0)\n'
              '\n'
              '#define checkCUDA(status) do '
              '{                                         \\\n'
              '    std::stringstream '
              '_error;                                          \\\n'
              '    if (status != 0) '
              '{                                                 \\\n'
              '      _error << "Cuda failure: " << '
              'status;                            \\\n'
              '      '
              'FatalError(_error.str());                                        '
              '\\\n'
              '    '
              '}                                                                  '
              '\\\n'
              '} while(0)\n'
              '\n'
              '// CUDA: grid stride looping\n'
              '#define CUDA_KERNEL_LOOP(i, n) \\\n')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3311,
         lineno=25,
         tokens=62,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='checkCUDA',
         body='#define checkCUDA(status) do '
              '{                                         \\\n'
              '    std::stringstream '
              '_error;                                          \\\n'
              '    if (status != 0) '
              '{                                                 \\\n'
              '      _error << "Cuda failure: " << '
              'status;                            \\\n'
              '      '
              'FatalError(_error.str());                                        '
              '\\\n'
              '    '
              '}                                                                  '
              '\\\n'
              '} while(0)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3312,
         lineno=34,
         tokens=38,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='#define CUDA_KERNEL_LOOP(i, n) \\\n'
              '  for (int i = blockIdx.x * blockDim.x + threadIdx.x; i < (n); '
              'i += blockDim.x * gridDim.x)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3313,
         lineno=35,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = blockIdx.x * blockDim.x + threadIdx.x; i < (n); '
              'i += blockDim.x * gridDim.x)\n'
              '\n'
              'const int CUDA_NUM_THREADS = 1024;\n'
              'const int BLOCK_SIZE_LIMIT = 32768;\n'
              '\n'
              '// CUDA: number of blocks for threads.\n'
              'inline int GET_BLOCKS(const int N)\n'
              '{\n'
              '  int ret = (N + CUDA_NUM_THREADS - 1) / CUDA_NUM_THREADS;\n'
              '  return (ret > BLOCK_SIZE_LIMIT) ? BLOCK_SIZE_LIMIT : ret;\n'
              '}\n'
              '\n'
              'void helperSetTensorDescriptor(const taso::Tensor& tensor,\n'
              '                               cudnnTensorD')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3314,
         lineno=41,
         tokens=45,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='GET_BLOCKS',
         body='inline int GET_BLOCKS(const int N)\n'
              '{\n'
              '  int ret = (N + CUDA_NUM_THREADS - 1) / CUDA_NUM_THREADS;\n'
              '  return (ret > BLOCK_SIZE_LIMIT) ? BLOCK_SIZE_LIMIT : ret;\n'
              '}')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3315,
         lineno=41,
         tokens=6,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='GET_BLOCKS',
         body='GET_BLOCKS(const int N)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3316,
         lineno=47,
         tokens=21,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetTensorDescriptor',
         body='helperSetTensorDescriptor(const taso::Tensor& tensor,\n'
              '                               cudnnTensorDescriptor_t '
              'tensorDesc)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3317,
         lineno=48,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='escriptor_t tensorDesc);\n'
              '\n'
              'void helperSetBroadcastableTensorDescriptor(const taso::Tensor& '
              'input,\n'
              '                                            const taso::Tensor& '
              'output,\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc);\n'
              '\n'
              '__global__\n'
              'void assign_kernel(float* ptr, int size, float value);\n'
              '\n'
              '__global__\n'
              'void copy_kernel(float* dst, const float* src, int size);\n'
              '\n'
              'cudnnActivationMode_t get_activation_mode(taso::ActiMode '
              'activation);\n'
              '#endif\n')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3318,
         lineno=50,
         tokens=32,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='helperSetBroadcastableTensorDescriptor',
         body='helperSetBroadcastableTensorDescriptor(const taso::Tensor& '
              'input,\n'
              '                                            const taso::Tensor& '
              'output,\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3319,
         lineno=55,
         tokens=12,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='assign_kernel(float* ptr, int size, float value)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3320,
         lineno=58,
         tokens=14,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='copy_kernel(float* dst, const float* src, int size)')

Fragment(document_cs='7583d6338a2d6725c81904dca3d635d72cfc2079e5f0e0981bd48dfc9172c7cf',
         id=3321,
         lineno=60,
         tokens=11,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_mode',
         body='get_activation_mode(taso::ActiMode activation)')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3322,
         lineno=1,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for t')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3323,
         lineno=1,
         tokens=72,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/fuse_conv_batchnorm_bias_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP fuse_conv_batchnorm_bias_kernel\n'
              '  Methods: FuseConvBatchNormBias::forward '
              'FuseConvBatchNormBias::map FuseConvBatchNormBias::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3324,
         lineno=12,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='he specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void fuse_conv_batchnorm_bias_kernel(int volume,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* beta,\n'
              '                                DATATYPE* mean,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  // int i = blockIdx.x * blockDim.x +')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3325,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3326,
         lineno=20,
         tokens=104,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_bias_kernel',
         body='__global__\n'
              'void fuse_conv_batchnorm_bias_kernel(int volume,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* beta,\n'
              '                                DATATYPE* mean,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  // int i = blockIdx.x * blockDim.x + threadIdx.x;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / sqrt(var[i] + '
              'CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3327,
         lineno=21,
         tokens=40,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_bias_kernel',
         body='fuse_conv_batchnorm_bias_kernel(int volume,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* beta,\n'
              '                                DATATYPE* mean,\n'
              '                                DATATYPE* var)')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3328,
         lineno=28,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' threadIdx.x;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / sqrt(var[i] + '
              'CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 1);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  asse')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3329,
         lineno=29,
         tokens=43,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / sqrt(var[i] + '
              'CUDNN_BN_MIN_EPSILON);\n'
              '  }')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3330,
         lineno=29,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3331,
         lineno=35,
         tokens=94,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::map',
         body='void FuseConvBatchNormBias::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 1);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  assert(inputs[3].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3332,
         lineno=39,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rt(inputs[2].numDim == 1);\n'
              '  assert(inputs[3].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outpu')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3333,
         lineno=45,
         tokens=25,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::unmap',
         body='void FuseConvBatchNormBias::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3334,
         lineno=47,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ts[0].data_ptr));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::forward(bool block)\n'
              '{\n'
              '  int volume = outputs[0].volume();\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* beta_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* mean_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[3].data_ptr;\n'
              '  '
              'fuse_conv_batchnorm_bias_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      volume, (DATATYPE*)outputs[0].data_ptr, scale_ptr, '
              'beta_ptr, mean_ptr, var_ptr);\n')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3335,
         lineno=50,
         tokens=155,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::forward',
         body='void FuseConvBatchNormBias::forward(bool block)\n'
              '{\n'
              '  int volume = outputs[0].volume();\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* beta_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* mean_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[3].data_ptr;\n'
              '  '
              'fuse_conv_batchnorm_bias_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      volume, (DATATYPE*)outputs[0].data_ptr, scale_ptr, '
              'beta_ptr, mean_ptr, var_ptr);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='791d40e77e2af7a45bbf83c257b9fc2e876a2fdb04e53742f34cb068c8279d11',
         id=3336,
         lineno=59,
         tokens=14,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n    checkCUDA(cudaDeviceSynchronize());\n}\n\n\n')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3337,
         lineno=1,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed o')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3338,
         lineno=1,
         tokens=140,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/fuse_conv_batchnorm_alpha_var.cc\n'
              '  Functions: key\n'
              '  Methods: FuseConvBatchNormAlphaVar::FuseConvBatchNormAlphaVar '
              'FuseConvBatchNormAlphaVar::collect_costs '
              'FuseConvBatchNormAlphaVar::get_int_parameter '
              'FuseConvBatchNormAlphaVar::~FuseConvBatchNormAlphaVar '
              'FuseConvBatchNormAlphaVarKey::FuseConvBatchNormAlphaVarKey '
              'Model::get_or_create_fuse_conv_batchnorm_alpha_var\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: FuseConvBatchNormAlphaVar '
              'FuseConvBatchNormAlphaVarKey collect_costs get_int_parameter '
              'get_or_create_fuse_conv_batchnorm_alpha_var\n')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3339,
         lineno=10,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='n an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              '// // Preproccessing weights to merge conv and batchnorm\n'
              '// TensorHandle Graph::fuse_conv_batchnorm_alpha_var(const '
              'TensorHandle _conv')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3340,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3341,
         lineno=20,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_w,\n'
              '//                                         const TensorHandle '
              '_scale,\n'
              '//                                         const TensorHandle '
              '_var)\n'
              '// {\n'
              '//   Op op = '
              'model->get_or_create_fuse_conv_batchnorm_alpha_var(\n'
              '//       *_conv_w, *_scale, *_var);\n'
              '//   add_edge(_conv_w->op, op, _conv_w->idx, 0);\n'
              '//   add_edge(_scale->op, op, _scale->idx, 1);\n'
              '//   add_edge(_var->op, op, _var->idx, 2)')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3342,
         lineno=28,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '//   TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '//   t->op = op;\n'
              '//   return t;\n'
              '// }\n'
              '\n'
              'Op Model::get_or_create_fuse_conv_batchnorm_alpha_var(const '
              'Tensor& _conv_w,\n'
              '                                            const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormAlphaVarKey key(_conv_w);\n'
              '  FuseConvBatchNormAlphaVar* fuseOp;\n')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3343,
         lineno=34,
         tokens=197,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_fuse_conv_batchnorm_alpha_var',
         body='Op Model::get_or_create_fuse_conv_batchnorm_alpha_var(const '
              'Tensor& _conv_w,\n'
              '                                            const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormAlphaVarKey key(_conv_w);\n'
              '  FuseConvBatchNormAlphaVar* fuseOp;\n'
              '  if (fuse_conv_batchnorm_alpha_var.find(key) != '
              'fuse_conv_batchnorm_alpha_var.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm_alpha_var[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNormAlphaVar(this, _conv_w, '
              '_scale, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm_alpha_var[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3344,
         lineno=38,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_conv_w)')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3345,
         lineno=40,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (fuse_conv_batchnorm_alpha_var.find(key) != '
              'fuse_conv_batchnorm_alpha_var.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm_alpha_var[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNormAlphaVar(this, _conv_w, '
              '_scale, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm_alpha_var[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_un')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3346,
         lineno=49,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3347,
         lineno=50,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ique_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'FuseConvBatchNormAlphaVar::FuseConvBatchNormAlphaVar(Model* '
              '_model,\n'
              '                                     const Tensor& _conv_w,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_conv_w, _scale, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM_ALPHA_VAR)\n'
              '{\n'
              '  assert(_conv_w.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _conv')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3348,
         lineno=55,
         tokens=106,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::FuseConvBatchNormAlphaVar',
         body='FuseConvBatchNormAlphaVar::FuseConvBatchNormAlphaVar(Model* '
              '_model,\n'
              '                                     const Tensor& _conv_w,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_conv_w, _scale, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM_ALPHA_VAR)\n'
              '{\n'
              '  assert(_conv_w.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _conv_w;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3349,
         lineno=63,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_w;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'FuseConvBatchNormAlphaVar::~FuseConvBatchNormAlphaVar(void)\n'
              '{}\n'
              '\n'
              'bool FuseConvBatchNormAlphaVar::get_int_parameter(PMParameter '
              'para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::collect_costs(float& exe_time, '
              'float& flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3350,
         lineno=67,
         tokens=16,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::~FuseConvBatchNormAlphaVar',
         body='FuseConvBatchNormAlphaVar::~FuseConvBatchNormAlphaVar(void)\n{}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3351,
         lineno=70,
         tokens=34,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::get_int_parameter',
         body='bool FuseConvBatchNormAlphaVar::get_int_parameter(PMParameter '
              'para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3352,
         lineno=75,
         tokens=154,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::collect_costs',
         body='void FuseConvBatchNormAlphaVar::collect_costs(float& exe_time, '
              'float& flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNormAlphaVar]: i(%d %d %d '
              '%d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3353,
         lineno=80,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNormAlphaVar]: i(%d %d %d '
              '%d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], i')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3354,
         lineno=84,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nputs[0].dim[2], inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (_conv_w)\n'
              'FuseConvBatchNormAlphaVarKey::FuseConvBatchNormAlphaVarKey(const '
              'Tensor& _conv_w)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _conv_w.serialize(keys, idx);\n')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3355,
         lineno=89,
         tokens=63,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVarKey::FuseConvBatchNormAlphaVarKey',
         body='FuseConvBatchNormAlphaVarKey::FuseConvBatchNormAlphaVarKey(const '
              'Tensor& _conv_w)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _conv_w.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='791fb2dc2a3158a2f4883819af955f8fd301107c9256309530f0301de84c8bbe',
         id=3356,
         lineno=93,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3357,
         lineno=1,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific languag')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3358,
         lineno=1,
         tokens=77,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/mul.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::mul Model::get_or_create_mul Mul::Mul '
              'Mul::collect_costs Mul::get_int_parameter Mul::~Mul '
              'MulKey::MulKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Mul MulKey collect_costs get_int_parameter '
              'get_or_create_mul mul\n')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3359,
         lineno=12,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::mul(const TensorHandle x,\n'
              '                        const TensorHandle y)\n'
              '{\n'
              '  Op op = model->get_or_create_mul(*x, *y);\n'
              '  add_edge(x->op, op, x->idx, 0);\n'
              '  add_edge(y->op, op, y->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_mul(const Tensor& x,\n'
              '                            const Tensor& y)\n'
              '{\n'
              '  MulKey key(x, y);\n'
              '  Mul* mulOp;\n')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3360,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3361,
         lineno=19,
         tokens=91,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::mul',
         body='TensorHandle Graph::mul(const TensorHandle x,\n'
              '                        const TensorHandle y)\n'
              '{\n'
              '  Op op = model->get_or_create_mul(*x, *y);\n'
              '  add_edge(x->op, op, x->idx, 0);\n'
              '  add_edge(y->op, op, y->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3362,
         lineno=30,
         tokens=110,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_mul',
         body='Op Model::get_or_create_mul(const Tensor& x,\n'
              '                            const Tensor& y)\n'
              '{\n'
              '  MulKey key(x, y);\n'
              '  Mul* mulOp;\n'
              '  if (mul.find(key) != mul.end()) {\n'
              '    mulOp = mul[key];\n'
              '  } else {\n'
              '    mulOp = new Mul(this, x, y);\n'
              '    measure_mul_cost(mulOp);\n'
              '    mul[key] = mulOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = mulOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3363,
         lineno=33,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(x, y)')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3364,
         lineno=35,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mul.find(key) != mul.end()) {\n'
              '    mulOp = mul[key];\n'
              '  } else {\n'
              '    mulOp = new Mul(this, x, y);\n'
              '    measure_mul_cost(mulOp);\n'
              '    mul[key] = mulOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = mulOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Mul::Mul(Model* _model, const Tensor& x, const Tensor& y)\n'
              ': OpBase(x, y, _model, OP_MUL)\n'
              '{\n'
              '  // TODO: support broadcast\n'
              '  // Currently assume _y.numDim = 0\n'
              '  int numDim = x.numDim;\n'
              '  assert(y.numDim == 0);\n')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3365,
         lineno=42,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3366,
         lineno=48,
         tokens=186,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::Mul',
         body='Mul::Mul(Model* _model, const Tensor& x, const Tensor& y)\n'
              ': OpBase(x, y, _model, OP_MUL)\n'
              '{\n'
              '  // TODO: support broadcast\n'
              '  // Currently assume _y.numDim = 0\n'
              '  int numDim = x.numDim;\n'
              '  assert(y.numDim == 0);\n'
              '  for (int i = 0; i < y.numDim; i++)\n'
              '    assert(x.dim[i] == y.dim[i]);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = numDim;\n'
              '  for (int i = 0; i < numDim-1; i++) {\n'
              '    outputs[0].dim[i] = x.dim[i];\n'
              '    outputs[0].stride[i] = x.stride[i];\n'
              '    outputs[0].split[i] = x.split[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3367,
         lineno=55,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < y.numDim; i++)\n'
              '    assert(x.dim[i] == y.dim[i]);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = numDim;\n'
              '  for (int i = 0; i < numDim-1; i++) {\n'
              '    outputs[0].dim[i] = x.dim[i];\n'
              '    outputs[0].stride[i] = x.stride[i];\n'
              '    outputs[0].split[i] = x.split[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Mul::~Mul(void)\n'
              '{}\n'
              '\n'
              'bool Mul::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para,')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3368,
         lineno=67,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::~Mul',
         body='Mul::~Mul(void)\n{}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3369,
         lineno=70,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::get_int_parameter',
         body='bool Mul::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3370,
         lineno=72,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' value);\n'
              '}\n'
              '\n'
              'void Mul::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // TODO: to be implemented\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'MulKey::MulKey(const Tensor& _x, const Tensor& _y)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _x.serialize(keys, idx);\n'
              '  _y.serialize(keys, idx);\n')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3371,
         lineno=75,
         tokens=41,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::collect_costs',
         body='void Mul::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // TODO: to be implemented\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3372,
         lineno=82,
         tokens=65,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MulKey::MulKey',
         body='MulKey::MulKey(const Tensor& _x, const Tensor& _y)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _x.serialize(keys, idx);\n'
              '  _y.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='7980ce7da448eba45afca747f15e959990c5124e5b4efb7fa5f510bab9957591',
         id=3373,
         lineno=87,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3374,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import onnx\n'
              '\n'
              'import taso as ts\n'
              '\n'
              'def resnet_block(graph, input, strides, out_channels, '
              'shared_w=None):\n'
              '    if shared_w is not None:\n'
              '        w1 = shared_w[0]\n'
              '        w2 = shared_w[1]\n'
              '        w3 = shared_w[2]\n'
              '        w4 = shared_w[3]\n'
              '    else:\n'
              '        w1 = None\n'
              '        w2 = None\n'
              '        w3 = None\n'
              '        w4 = None\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3375,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3376,
         lineno=1,
         tokens=102,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/batched_resnet.py\n'
              '  Functions: main resnet_block resnet_model '
              'shared_resnet_model\n'
              '  Variables and usages: ArgumentParser action activation '
              'add_argument all_w alpha append argparse args budget conv2d '
              'default description dims export_onnx graph help input '
              'input_size new_graph new_input new_weight num_models '
              'num_shared_blocks onnx optimize optimized_model original_model '
              'out_channels padding parse_args parser range relu save '
              'save_graphs shared_w split strides taso tuple type use_shared_w '
              'weight weights\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3377,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3378,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3379,
         lineno=6,
         tokens=147,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='def resnet_block(graph, input, strides, out_channels, '
              'shared_w=None):\n'
              '    if shared_w is not None:\n'
              '        w1 = shared_w[0]\n'
              '        w2 = shared_w[1]\n'
              '        w3 = shared_w[2]\n'
              '        w4 = shared_w[3]\n'
              '    else:\n'
              '        w1 = None\n'
              '        w2 = None\n'
              '        w3 = None\n'
              '        w4 = None\n'
              '\n'
              '    if w1 is None:\n'
              '        w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3380,
         lineno=17,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    if w1 is None:\n'
              '        w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    if w2 is None:\n'
              '        w2 = '
              'graph.new_weight(dims=(out_channels,t.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3381,
         lineno=23,
         tokens=134,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='    if w2 is None:\n'
              '        w2 = '
              'graph.new_weight(dims=(out_channels,t.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    if w3 is None:\n'
              '        w3 = '
              'graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n'
              '    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3382,
         lineno=28,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if w3 is None:\n'
              '        w3 = '
              'graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n'
              '    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3383,
         lineno=33,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if w4 is None:\n'
              '            w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return (graph.relu(graph.add(input, t)), [w1, w2, w3, w4])\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3384,
         lineno=33,
         tokens=83,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_block',
         body='        if w4 is None:\n'
              '            w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return (graph.relu(graph.add(input, t)), [w1, w2, w3, w4])')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3385,
         lineno=39,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def resnet_model(graph, input, all_w=None, '
              'num_shared_blocks=None):\n'
              '    if all_w is None:\n'
              '        use_shared_w = False\n'
              '        all_w = []\n'
              '    else:\n'
              '        use_shared_w = True\n'
              '    t = input\n'
              '    j = 0\n'
              '    for i in range(3):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '    strides = (2,2)\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3386,
         lineno=40,
         tokens=147,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_model',
         body='def resnet_model(graph, input, all_w=None, '
              'num_shared_blocks=None):\n'
              '    if all_w is None:\n'
              '        use_shared_w = False\n'
              '        all_w = []\n'
              '    else:\n'
              '        use_shared_w = True\n'
              '    t = input\n'
              '    j = 0\n'
              '    for i in range(3):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '    strides = (2,2)\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3387,
         lineno=57,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(4):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, strides, 128,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, strides, 128)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '        strides = (1,1)\n'
              '    return all_w\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3388,
         lineno=57,
         tokens=88,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnet_model',
         body='    for i in range(4):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, strides, 128,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, strides, 128)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '        strides = (1,1)\n'
              '    return all_w')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3389,
         lineno=67,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def shared_resnet_model(graph, input, num_models, '
              'num_shared_blocks):\n'
              '    all_w = resnet_model(graph, input)\n'
              '    for i in range(1, num_models):\n'
              '        resnet_model(graph, input, all_w, num_shared_blocks)\n'
              '    return graph\n'
              '\n'
              'def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    shared_resnet_model(graph, input, args.num_models, '
              'args.num_shared_blocks)\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3390,
         lineno=68,
         tokens=56,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='shared_resnet_model',
         body='def shared_resnet_model(graph, input, num_models, '
              'num_shared_blocks):\n'
              '    all_w = resnet_model(graph, input)\n'
              '    for i in range(1, num_models):\n'
              '        resnet_model(graph, input, all_w, num_shared_blocks)\n'
              '    return graph')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3391,
         lineno=74,
         tokens=140,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    shared_resnet_model(graph, input, args.num_models, '
              'args.num_shared_blocks)\n'
              '    if args.save_graphs:\n'
              '        original_model = ts.export_onnx(graph)\n'
              "        onnx.save(original_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_graphs:\n'
              '        optimized_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(optimized_model, 'optimized_model.onnx')")

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3392,
         lineno=79,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if args.save_graphs:\n'
              '        original_model = ts.export_onnx(graph)\n'
              "        onnx.save(original_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_graphs:\n'
              '        optimized_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(optimized_model, 'optimized_model.onnx')\n")

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3393,
         lineno=86,
         tokens=4,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='optimized_model.onnx')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3394,
         lineno=87,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              "if __name__=='__main__':\n"
              "    parser=argparse.ArgumentParser(description='')\n"
              "    parser.add_argument('--num_models', type=int, default=1,\n"
              "                        help='Number of parallel models')\n"
              "    parser.add_argument('--num_shared_blocks', type=int, "
              'default=0,\n'
              "                        help='Number of shared blocks')\n"
              "    parser.add_argument('--input_size', type=str, "
              "default='1x3x32x32',\n"
              '                        help=\'Input size ("NxCxHxW")\')\n'
              "    parser.add_argument('--save_graphs', action='store_true', "
              'default=False,\n'
              "                        help=('If set, saves original and "
              "optimized models in '\n"
              "                              'ONNX form'))\n"
              '    args = parser.parse_args()\n'
              '    main(args)\n')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3395,
         lineno=91,
         tokens=4,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Number of parallel models')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3396,
         lineno=93,
         tokens=4,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Number of shared blocks')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3397,
         lineno=95,
         tokens=10,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Input size ("NxCxHxW")')

Fragment(document_cs='7a20f005cc887b7c288120ca2aff28fe33331eee8978a209521b3c86ae93989a',
         id=3398,
         lineno=97,
         tokens=10,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='If set, saves original and optimized models in ')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3399,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is di')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3400,
         lineno=1,
         tokens=66,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/concat_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP assign_with_stride\n'
              '  Methods: Concat::forward Concat::map Concat::unmap '
              'Model::measure_concat_cost\n'
              '  Variables: milliseconds\n'
              '  Using: taso\n'
              '  Usages: forward map measure_concat_cost unmap\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3401,
         lineno=10,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='stributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Concat::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volu')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3402,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3403,
         lineno=20,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::map',
         body='void Concat::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3404,
         lineno=22,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='me();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Concat::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              '__global__\n'
              'void assign_with_stride(DATATYPE* dst,\n'
              '                        const DATATYPE* src,\n'
              '                        int num_blocks,\n'
              '                        int dst_blk_size,\n'
              '                        int src_blk_size)\n'
              '{\n'
              '  assert(s')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3405,
         lineno=26,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::unmap',
         body='void Concat::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3406,
         lineno=31,
         tokens=129,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_with_stride',
         body='__global__\n'
              'void assign_with_stride(DATATYPE* dst,\n'
              '                        const DATATYPE* src,\n'
              '                        int num_blocks,\n'
              '                        int dst_blk_size,\n'
              '                        int src_blk_size)\n'
              '{\n'
              '  assert(src_blk_size <= dst_blk_size);\n'
              '  CUDA_KERNEL_LOOP(i, num_blocks * src_blk_size)\n'
              '  {\n'
              '    int blk_idx = i / src_blk_size;\n'
              '    int blk_offset = i % src_blk_size;\n'
              '    int src_offset = blk_idx * src_blk_size + blk_offset;\n'
              '    int dst_offset = blk_idx * dst_blk_size + blk_offset;\n'
              '    dst[dst_offset] = src[src_offset];\n'
              '  }\n'
              '}')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3407,
         lineno=32,
         tokens=33,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_with_stride',
         body='assign_with_stride(DATATYPE* dst,\n'
              '                        const DATATYPE* src,\n'
              '                        int num_blocks,\n'
              '                        int dst_blk_size,\n'
              '                        int src_blk_size)')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3408,
         lineno=38,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rc_blk_size <= dst_blk_size);\n'
              '  CUDA_KERNEL_LOOP(i, num_blocks * src_blk_size)\n'
              '  {\n'
              '    int blk_idx = i / src_blk_size;\n'
              '    int blk_offset = i % src_blk_size;\n'
              '    int src_offset = blk_idx * src_blk_size + blk_offset;\n'
              '    int dst_offset = blk_idx * dst_blk_size + blk_offset;\n'
              '    dst[dst_offset] = src[src_offset];\n'
              '  }\n'
              '}\n'
              '\n'
              'void Concat::forward(bool block)\n'
              '{\n'
              '  int offset = 0;\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3409,
         lineno=39,
         tokens=79,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, num_blocks * src_blk_size)\n'
              '  {\n'
              '    int blk_idx = i / src_blk_size;\n'
              '    int blk_offset = i % src_blk_size;\n'
              '    int src_offset = blk_idx * src_blk_size + blk_offset;\n'
              '    int dst_offset = blk_idx * dst_blk_size + blk_offset;\n'
              '    dst[dst_offset] = src[src_offset];\n'
              '  }')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3410,
         lineno=39,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, num_blocks * src_blk_size)')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3411,
         lineno=49,
         tokens=441,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::forward',
         body='void Concat::forward(bool block)\n'
              '{\n'
              '  int offset = 0;\n'
              '  for (int i = 0; i < numInputs; i++) {\n'
              '    //if (needCopy[i]) {\n'
              '    int dst_blk_size = 1, src_blk_size = 1, num_blocks = 1;\n'
              '    for (int j = inputs[i].numDim-1; j >= 0; j--)\n'
              '      if (j >= axis) {\n'
              '        dst_blk_size *= outputs[0].dim[j];\n'
              '        src_blk_size *= inputs[i].dim[j];\n'
              '      } else {\n'
              '        num_blocks *= outputs[0].dim[j];\n'
              '      }\n'
              '    assert(inputs[i].data_ptr != NULL);\n'
              '    assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(\n'
              '        ((DATATYPE*)outputs[0].data_ptr) + offset, '
              '(DATATYPE*)inputs[i].data_ptr,\n'
              '        num_blocks, dst_blk_size, src_blk_size);\n'
              '    offset += src_blk_size;\n'
              '  }\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '  //FIXME\n'
              '  //DATATYPE* print_vals = (DATATYPE*) '
              'malloc(outputs[0].volume() * sizeof(DATATYPE));\n'
              '  //checkCUDA(cudaMemcpy(print_vals, outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE), cudaMemcpyDefault));\n'
              '  //for (int i = 0; i < outputs[0].volume(); i++)\n'
              '  //  printf("output[%d]: %.4lf\\n", i, print_vals[i]);\n'
              '  //for (int i = 0; i < numInputs; i++) {\n'
              '  //  checkCUDA(cudaMemcpy(print_vals, inputs[i].data_ptr, '
              'inputs[i].volume() * sizeof(DATATYPE), cudaMemcpyDefault));\n'
              '  //  printf("concat_forward: inputs[%d].ptr=%p\\n", i, '
              'inputs[i].data_ptr);\n'
              '  //  for (int j = 0; j < inputs[i].volume(); j++)\n'
              '  //    printf("input[%d][%d]: %.4lf\\n", i, j, '
              'print_vals[j]);\n'
              '  //}\n'
              '}')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3412,
         lineno=52,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numInputs; i++) {\n'
              '    //if (needCopy[i]) {\n'
              '    int dst_blk_size = 1, src_blk_size = 1, num_blocks = 1;\n'
              '    for (int j = inputs[i].numDim-1; j >= 0; j--)\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3413,
         lineno=56,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (j >= axis) {\n'
              '        dst_blk_size *= outputs[0].dim[j];\n'
              '        src_blk_size *= inputs[i].dim[j];\n'
              '      } else {\n'
              '        num_blocks *= outputs[0].dim[j];\n'
              '      }\n'
              '    assert(inputs[i].data_ptr != NULL);\n'
              '    assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(\n'
              '        ((DATATYPE*)outputs[0].data_ptr) + offset, '
              '(DATATYPE*)inputs[i].data_ptr,\n'
              '        num_blocks, dst_blk_size, src_blk_size);\n'
              '    offset += src_blk_size;\n'
              '  }\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3414,
         lineno=68,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '  //FIXME\n'
              '  //DATATYPE* print_vals = (DATATYPE*) '
              'malloc(outputs[0].volume() * sizeof(DATATYPE));\n'
              '  //checkCUDA(cudaMemcpy(print_vals, outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE), cudaMemcpyDefault));\n'
              '  //for (int i = 0; i < outputs[0].volume(); i++)\n'
              '  //  printf("output[%d]: %.4lf\\n", i, print_vals[i]);\n'
              '  //for (int i = 0; i < numInputs; i++) {\n'
              '  //  checkCUDA(')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3415,
         lineno=76,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='cudaMemcpy(print_vals, inputs[i].data_ptr, inputs[i].volume() * '
              'sizeof(DATATYPE), cudaMemcpyDefault));\n'
              '  //  printf("concat_forward: inputs[%d].ptr=%p\\n", i, '
              'inputs[i].data_ptr);\n'
              '  //  for (int j = 0; j < inputs[i].volume(); j++)\n'
              '  //    printf("input[%d][%d]: %.4lf\\n", i, j, '
              'print_vals[j]);\n'
              '  //}\n'
              '}\n'
              '\n'
              'void Model::measure_concat_cost(Concat* concat)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3416,
         lineno=83,
         tokens=340,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_concat_cost',
         body='void Model::measure_concat_cost(Concat* concat)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    int offset = 0;\n'
              '    // TODO: remove needCopy and should not include operators\n'
              '    // that can be preproceed\n'
              '    for (int j = 0; j < concat->numInputs; j++) \n'
              '      if (concat->needCopy[j]) {\n'
              '        int dst_blk_size = 1, src_blk_size = 1, num_blocks = '
              '1;\n'
              '        for (int d = concat->inputs[j].numDim-1; d >= 0; d--)\n'
              '          if (d >= concat->axis) {\n'
              '            dst_blk_size *= concat->outputs[0].dim[d];\n'
              '            src_blk_size *= concat->inputs[j].dim[d];\n'
              '          } else {\n'
              '            num_blocks *= concat->outputs[0].dim[d];\n'
              '          }\n'
              '        '
              'assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(\n'
              '            ((DATATYPE*)outputPtr) + offset, '
              '(DATATYPE*)inputPtr,\n'
              '            num_blocks, dst_blk_size, src_blk_size);\n'
              '        offset += src_blk_size;\n'
              '      }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  concat->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Concat]: cost(%.4lf)\\n", '
              'concat->runtime);\n'
              '}')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3417,
         lineno=87,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    int offset = 0;\n'
              '    // TODO: remove needCopy and should not include operators\n'
              '    // that can be preproceed\n'
              '    for (int j = 0; j < concat->numInputs; j++) \n'
              '      if (concat->needCopy[j]) {\n'
              '        int dst_blk_size = 1, src_blk_size = 1, num_blocks = '
              '1;\n'
              '        for (int d = concat->inputs[j].numDim-1; d >= 0; d--)\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3418,
         lineno=95,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          if (d >= concat->axis) {\n'
              '            dst_blk_size *= concat->outputs[0].dim[d];\n'
              '            src_blk_size *= concat->inputs[j].dim[d];\n'
              '          } else {\n'
              '            num_blocks *= concat->outputs[0].dim[d];\n'
              '          }\n'
              '        '
              'assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(\n'
              '            ((DATATYPE*)outputPt')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3419,
         lineno=102,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r) + offset, (DATATYPE*)inputPtr,\n'
              '            num_blocks, dst_blk_size, src_blk_size);\n'
              '        offset += src_blk_size;\n'
              '      }\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  concat->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Concat]: cost(%.4lf)\\n", '
              'concat->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='7e46e45f4f3fac5f38e7e945e899d1e49bc920ee15da6dbf1e72cf457ced0687',
         id=3420,
         lineno=109,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3421,
         lineno=1,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitati')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3422,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/resize_mkl.cc\n'
              '  Methods: Model::measure_resize_cost Resize::forward '
              'Resize::map Resize::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_resize_cost unmap\n')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3423,
         lineno=13,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Resize::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(out')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3424,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3425,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3426,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::map',
         body='void Resize::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3427,
         lineno=25,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='putSize));\n'
              '}\n'
              '\n'
              'void Resize::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Resize::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_resize_cost(Resize* resize)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3428,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::unmap',
         body='void Resize::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3429,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::forward',
         body='void Resize::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='7e715837fd25a44791cbc3f530a64bb63d9b0fd65bf6a94071fa1a6537d620e7',
         id=3430,
         lineno=42,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_resize_cost',
         body='void Model::measure_resize_cost(Resize* resize)\n'
              '{\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3431,
         lineno=1,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHO')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3432,
         lineno=1,
         tokens=91,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/reshape.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::reshape Model::get_or_create_reshape '
              'Reshape::Reshape Reshape::collect_costs '
              'Reshape::get_int_parameter Reshape::~Reshape '
              'ReshapeKey::ReshapeKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: NO_SPLIT Reshape ReshapeKey collect_costs '
              'get_int_parameter get_or_create_reshape reshape\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3433,
         lineno=11,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='UT WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::reshape(const TensorHandle _input,\n'
              '                            const std::vector<int>& _shape)\n'
              '{\n'
              '  std::vector<int> myshape = _shape;\n'
              '  // replace zeros with input dims\n'
              '  for (size_t i = 0; i < myshape.size(); i++)\n'
              '    if (myshape[i] == 0)\n'
              '      myshape[i] = _input->dim[i];\n'
              '  int input_size = _input->volume();\n'
              '  // replace -1 with actual size\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3434,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3435,
         lineno=19,
         tokens=273,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reshape',
         body='TensorHandle Graph::reshape(const TensorHandle _input,\n'
              '                            const std::vector<int>& _shape)\n'
              '{\n'
              '  std::vector<int> myshape = _shape;\n'
              '  // replace zeros with input dims\n'
              '  for (size_t i = 0; i < myshape.size(); i++)\n'
              '    if (myshape[i] == 0)\n'
              '      myshape[i] = _input->dim[i];\n'
              '  int input_size = _input->volume();\n'
              '  // replace -1 with actual size\n'
              '  for (size_t i = 0; i < myshape.size(); i++)\n'
              '    if (myshape[i] != -1) {\n'
              '      assert(input_size % myshape[i] == 0);\n'
              '      input_size /= myshape[i];\n'
              '    }\n'
              '  for (size_t i = 0; i < myshape.size(); i++)\n'
              '    if (myshape[i] == -1) {\n'
              '      myshape[i] = input_size;\n'
              '      input_size = 1;\n'
              '    }\n'
              '  assert(input_size == 1);\n'
              '  Op op = model->get_or_create_reshape(*_input, myshape);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3436,
         lineno=29,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < myshape.size(); i++)\n'
              '    if (myshape[i] != -1) {\n'
              '      assert(input_size % myshape[i] == 0);\n'
              '      input_size /= myshape[i];\n'
              '    }\n'
              '  for (size_t i = 0; i < myshape.size(); i++)\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3437,
         lineno=35,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (myshape[i] == -1) {\n'
              '      myshape[i] = input_size;\n'
              '      input_size = 1;\n'
              '    }\n'
              '  assert(input_size == 1);\n'
              '  Op op = model->get_or_create_reshape(*_input, myshape);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_reshape(Tensor _input,\n'
              '                                const std::vector<int>& '
              '_shape)\n'
              '{\n'
              '  ReshapeKey key(_input, _shape);\n'
              '  Reshape* reshapeOp;\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3438,
         lineno=47,
         tokens=123,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_reshape',
         body='Op Model::get_or_create_reshape(Tensor _input,\n'
              '                                const std::vector<int>& '
              '_shape)\n'
              '{\n'
              '  ReshapeKey key(_input, _shape);\n'
              '  Reshape* reshapeOp;\n'
              '  if (reshape.find(key) != reshape.end()) {\n'
              '    reshapeOp = reshape[key];\n'
              '  } else {\n'
              '    reshapeOp = new Reshape(this, _input, _shape);\n'
              '    measure_reshape_cost(reshapeOp);\n'
              '    reshape[key] = reshapeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = reshapeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3439,
         lineno=50,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _shape)')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3440,
         lineno=52,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (reshape.find(key) != reshape.end()) {\n'
              '    reshapeOp = reshape[key];\n'
              '  } else {\n'
              '    reshapeOp = new Reshape(this, _input, _shape);\n'
              '    measure_reshape_cost(reshapeOp);\n'
              '    reshape[key] = reshapeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr =')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3441,
         lineno=59,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3442,
         lineno=61,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' reshapeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Reshape::Reshape(Model* _model, Tensor _input,\n'
              '                 const std::vector<int>& _shape)\n'
              '\n'
              ': OpBase(_input, _model, OP_RESHAPE)\n'
              '{\n'
              '  int size = 1;\n'
              '  // set dims and strides\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _shape.size();\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3443,
         lineno=65,
         tokens=162,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::Reshape',
         body='Reshape::Reshape(Model* _model, Tensor _input,\n'
              '                 const std::vector<int>& _shape)\n'
              '\n'
              ': OpBase(_input, _model, OP_RESHAPE)\n'
              '{\n'
              '  int size = 1;\n'
              '  // set dims and strides\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _shape.size();\n'
              '  for (int i = _shape.size() - 1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _shape[i];\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= _shape[i];\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  assert(_input.volume() == size);\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3444,
         lineno=74,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = _shape.size() - 1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _shape[i];\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= _shape[i];\n'
              '    outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  assert(_input.volume() == size);\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Reshape::~Reshape(void)\n'
              '{}\n'
              '\n'
              'bool Reshape::get_int_parameter(PMParameter para, i')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3445,
         lineno=84,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::~Reshape',
         body='Reshape::~Reshape(void)\n{}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3446,
         lineno=87,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nt* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Reshape::collect_costs(float& exe_time, float& flops,\n'
              '                            float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}\n'
              '\n'
              'ReshapeKey::ReshapeKey(Tensor _input, const std::vector<int>& '
              'shape)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = shape.size();\n'
              '  for (size_t i = 0; i < shape.size(); i++)\n'
              '    keys[idx++] = shape[i];\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3447,
         lineno=87,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::get_int_parameter',
         body='bool Reshape::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3448,
         lineno=92,
         tokens=36,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::collect_costs',
         body='void Reshape::collect_costs(float& exe_time, float& flops,\n'
              '                            float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3449,
         lineno=98,
         tokens=93,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ReshapeKey::ReshapeKey',
         body='ReshapeKey::ReshapeKey(Tensor _input, const std::vector<int>& '
              'shape)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = shape.size();\n'
              '  for (size_t i = 0; i < shape.size(); i++)\n'
              '    keys[idx++] = shape[i];\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='7e98f30d0c677c9454f68af1b8ed28cce1e67560d893d1a02349f9e873c4eb33',
         id=3450,
         lineno=105,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3451,
         lineno=1,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3452,
         lineno=1,
         tokens=97,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/activation.cc\n'
              '  Functions: key\n'
              '  Methods: Activation::Activation Activation::collect_costs '
              'Activation::get_int_parameter Activation::~Activation '
              'ActivationKey::ActivationKey Graph::leakyrelu Graph::relu '
              'Graph::sigmoid Graph::tanh Model::get_or_create_activation\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Activation ActivationKey INVALID_OP collect_costs '
              'get_int_parameter get_or_create_activation leakyrelu relu '
              'sigmoid tanh\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3453,
         lineno=12,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::leakyrelu(const TensorHandle _input, float '
              'alpha, bool _inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, '
              'OP_LEAKYRELU, _inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::relu(const TensorHandle _input, bool '
              '_inPlace)\n'
              '{\n'
              '  Op op')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3454,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3455,
         lineno=19,
         tokens=100,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::leakyrelu',
         body='TensorHandle Graph::leakyrelu(const TensorHandle _input, float '
              'alpha, bool _inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, '
              'OP_LEAKYRELU, _inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3456,
         lineno=29,
         tokens=92,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::relu',
         body='TensorHandle Graph::relu(const TensorHandle _input, bool '
              '_inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, OP_RELU, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3457,
         lineno=31,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' = model->get_or_create_activation(*_input, OP_RELU, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::sigmoid(const Ten')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3458,
         lineno=39,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sorHandle _input, bool _inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, OP_SIGMOID, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3459,
         lineno=39,
         tokens=93,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::sigmoid',
         body='TensorHandle Graph::sigmoid(const TensorHandle _input, bool '
              '_inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, OP_SIGMOID, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3460,
         lineno=46,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::tanh(const TensorHandle _input, bool '
              '_inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, OP_TANH, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.p')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3461,
         lineno=49,
         tokens=94,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::tanh',
         body='TensorHandle Graph::tanh(const TensorHandle _input, bool '
              '_inPlace)\n'
              '{\n'
              '  Op op = model->get_or_create_activation(*_input, OP_TANH, '
              '_inPlace);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3462,
         lineno=54,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_activation(Tensor _input, OpType _type, '
              'bool _inPlace)\n'
              '{\n'
              '  // keys are (inputN, inputC, inputH, inputW, _type, '
              '_inPlace)\n'
              '  ActivationKey key(_input, _type, _inPlace);\n'
              '  Activation* actOp;\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3463,
         lineno=59,
         tokens=149,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_activation',
         body='Op Model::get_or_create_activation(Tensor _input, OpType _type, '
              'bool _inPlace)\n'
              '{\n'
              '  // keys are (inputN, inputC, inputH, inputW, _type, '
              '_inPlace)\n'
              '  ActivationKey key(_input, _type, _inPlace);\n'
              '  Activation* actOp;\n'
              '  if (activation.find(key) != activation.end()) {\n'
              '    actOp = activation[key];\n'
              '  } else {\n'
              '    actOp = new Activation(this, _input, _type, _inPlace);\n'
              '    measure_activation_cost(actOp);\n'
              '    activation[key] = actOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = actOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3464,
         lineno=62,
         tokens=11,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type, _inPlace)')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3465,
         lineno=64,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation.find(key) != activation.end()) {\n'
              '    actOp = activation[key];\n'
              '  } else {\n'
              '    actOp = new Activation(this, _input, _type, _inPlace);\n'
              '    measure_activation_cost(actOp);\n'
              '    activation[key] = actOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = actOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Activation::Activation(Model* _model, Tensor _input, OpType '
              '_type, bool _inPlace)\n'
              ': OpBase(_input, _model, _typ')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3466,
         lineno=71,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3467,
         lineno=77,
         tokens=68,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::Activation',
         body='Activation::Activation(Model* _model, Tensor _input, OpType '
              '_type, bool _inPlace)\n'
              ': OpBase(_input, _model, _type), inPlace(_inPlace)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3468,
         lineno=78,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e), inPlace(_inPlace)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Activation::~Activation(void)\n'
              '{\n'
              '}\n'
              '\n'
              'bool Activation::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Activation::collect_costs(float& exe_time, float& flops,\n'
              '                               float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3469,
         lineno=85,
         tokens=7,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::~Activation',
         body='Activation::~Activation(void)\n{\n}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3470,
         lineno=89,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::get_int_parameter',
         body='bool Activation::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3471,
         lineno=94,
         tokens=200,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::collect_costs',
         body='void Activation::collect_costs(float& exe_time, float& flops,\n'
              '                               float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  if (type == OP_RELU)\n'
              '    flops += 0; // relu does not involve flops\n'
              '  else\n'
              '    flops += outputSize;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Activation]: mode(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         type, runtime, exe_time);\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3472,
         lineno=98,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  if (type == OP_RELU)\n'
              '    flops += 0; // relu does not involve flops\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3473,
         lineno=106,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  else\n'
              '    flops += outputSize;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Activation]: mode(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         type, runtime, exe_time);\n'
              '}\n'
              '\n'
              '// Key ordering: type, inPlace, _input\n'
              'ActivationKey::ActivationKey(Tensor _input, OpType _type, bool '
              '_inPlace)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  keys[idx++] = (int)(_inPlace);\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3474,
         lineno=115,
         tokens=79,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ActivationKey::ActivationKey',
         body='ActivationKey::ActivationKey(Tensor _input, OpType _type, bool '
              '_inPlace)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  keys[idx++] = (int)(_inPlace);\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='801a1ae81ad130b2b7d10c8d8964963d228c3a0b1e6d7f9ba27c92abcb77bd36',
         id=3475,
         lineno=121,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3476,
         lineno=1,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, ei')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3477,
         lineno=1,
         tokens=65,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/enlarge_mkl.cc\n'
              '  Functions: enlarge_kernel\n'
              '  Methods: Enlarge::forward Enlarge::map Enlarge::unmap '
              'Model::measure_enlarge_cost\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_enlarge_cost unmap\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3478,
         lineno=11,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ther express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void enlarge_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, '
              'int volume,\n'
              '    const int dstH, const int dstW, const int srcH, const int '
              'srcW) {\n'
              '  int offH = (dstH - srcH) / 2;\n'
              '  int offW = (dstW - srcW) / 2;\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3479,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3480,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3481,
         lineno=21,
         tokens=220,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_kernel',
         body='void enlarge_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, '
              'int volume,\n'
              '    const int dstH, const int dstW, const int srcH, const int '
              'srcW) {\n'
              '  int offH = (dstH - srcH) / 2;\n'
              '  int offW = (dstW - srcW) / 2;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int h = (i % (dstH * dstW)) / dstW - offH;\n'
              '    int w = (i % (dstH * dstW)) % dstW - offW;\n'
              '    if (h < 0 || h >= srcH || w < 0 || w >= srcW)\n'
              '      dstPtr[i] = 0.0f;\n'
              '    else {\n'
              '      int offset = (i / (dstH * dstW)) * (srcH * srcW) + h * '
              'srcW + w;\n'
              '      dstPtr[i] = srcPtr[offset];\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3482,
         lineno=21,
         tokens=41,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_kernel',
         body='enlarge_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, int '
              'volume,\n'
              '    const int dstH, const int dstW, const int srcH, const int '
              'srcW)')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3483,
         lineno=26,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < volume; i++) {\n'
              '    int h = (i % (dstH * dstW)) / dstW - offH;\n'
              '    int w = (i % (dstH * dstW)) % dstW - offW;\n'
              '    if (h < 0 || h >= srcH || w < 0 || w >= srcW)\n'
              '      dstPtr[i] = 0.0f;\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3484,
         lineno=31,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    else {\n'
              '      int offset = (i / (dstH * dstW)) * (srcH * srcW) + h * '
              'srcW + w;\n'
              '      dstPtr[i] = srcPtr[offset];\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'void Enlarge::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Enlarge::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // fre')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3485,
         lineno=38,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::map',
         body='void Enlarge::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3486,
         lineno=45,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::unmap',
         body='void Enlarge::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3487,
         lineno=49,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Enlarge::forward(bool block)\n'
              '{\n'
              '  enlarge_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume(),\n'
              '      outputs[0].dim[2], outputs[0].dim[3], inputs[0].dim[2], '
              'inputs[0].dim[3]);\n'
              '}\n'
              '\n'
              'void Model::measure_enlarge_cost(Enlarge* enl)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3488,
         lineno=54,
         tokens=74,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::forward',
         body='void Enlarge::forward(bool block)\n'
              '{\n'
              '  enlarge_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume(),\n'
              '      outputs[0].dim[2], outputs[0].dim[3], inputs[0].dim[2], '
              'inputs[0].dim[3]);\n'
              '}')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3489,
         lineno=60,
         tokens=197,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_enlarge_cost',
         body='void Model::measure_enlarge_cost(Enlarge* enl)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    enlarge_kernel(outputPtr, inputPtr, '
              'enl->outputs[0].volume(),\n'
              '      enl->outputs[0].dim[2], enl->outputs[0].dim[3],\n'
              '      enl->inputs[0].dim[2], enl->inputs[0].dim[3]);\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  enl->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Enlarge]: cost(%.4lf)\\n", '
              'enl->runtime);\n'
              '}')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3490,
         lineno=64,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    enlarge_kernel(outputPtr, inputPtr, '
              'enl->outputs[0].volume(),\n'
              '      enl->outputs[0].dim[2], enl->outputs[0].dim[3],\n'
              '      enl->inputs[0].dim[2], enl->inputs[0].dim[3]);\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  enl->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n')

Fragment(document_cs='8074788ae7a729e0ab5790372bf5b27e2874b8c6343dbd016115e806e5f616d9',
         id=3491,
         lineno=75,
         tokens=28,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Enlarge]: cost(%.4lf)\\n", '
              'enl->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3492,
         lineno=1,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso\n'
              'import onnx\n'
              'import argparse\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("-f", "--file", help="Path to input ONNX '
              'file", required=True)\n'
              '\n'
              'args = parser.parse_args()\n'
              '\n'
              '#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/squeezenet1.1.onnx")\n'
              '#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/bertsquad10.onnx")\n'
              'graph = taso.load_onnx(args.file)\n'
              '#graph = xflow.load("/home/ubuntu/resnext')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3493,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3494,
         lineno=1,
         tokens=57,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/test_onnx.py\n'
              '  Variables and usages: ArgumentParser add_argument alpha '
              'argparse args budget check_model checker cost export_onnx file '
              'format graph help load_onnx new_graph onnx onnx_model optimize '
              'parse_args parser print print_subst required save taso\n')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3495,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3496,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3497,
         lineno=6,
         tokens=6,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Path to input ONNX file')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3498,
         lineno=10,
         tokens=25,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/squeezenet1.1.onnx")')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3499,
         lineno=11,
         tokens=22,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/bertsquad10.onnx")')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3500,
         lineno=13,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='-101.onnx") \n'
              '#graph = '
              'xflow.load("/home/ubuntu/ONNXModel/inception_v2/model.onnx")\n'
              'print(" original_cost = {}".format(graph.cost()))\n'
              'new_graph = taso.optimize(graph, alpha = 1.0, budget = 100, '
              'print_subst=True)\n'
              'print("optimized_cost = {}".format(new_graph.cost()))\n'
              'onnx_model = taso.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "{}.taso.onnx".format(args.file))\n')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3501,
         lineno=13,
         tokens=17,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#graph = xflow.load("/home/ubuntu/resnext-101.onnx") ')

Fragment(document_cs='80dc6fc70e08b6583c31f32d64f8571fdec10264ddbd5fabd8ffa90068608b73',
         id=3502,
         lineno=14,
         tokens=21,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#graph = '
              'xflow.load("/home/ubuntu/ONNXModel/inception_v2/model.onnx")')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3503,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS O')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3504,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/cast_kernel.cu\n'
              '  Methods: Cast::forward Cast::map Cast::unmap '
              'Model::measure_cast_cost\n'
              '  Using: taso\n'
              '  Usages: forward map measure_cast_cost unmap\n')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3505,
         lineno=11,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='F ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Cast::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void Cast::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Cast::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_cast_cost(Cast* cast)\n'
              '{\n'
              '  cast->runtime = 0;\n')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3506,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3507,
         lineno=20,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::map',
         body='void Cast::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3508,
         lineno=25,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::unmap',
         body='void Cast::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3509,
         lineno=30,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::forward',
         body='void Cast::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3510,
         lineno=36,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_cast_cost',
         body='void Model::measure_cast_cost(Cast* cast)\n'
              '{\n'
              '  cast->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Cast]: type(%d) cost(%.4lf)\\n",\n'
              '           cast->type, cast->runtime);\n'
              '}')

Fragment(document_cs='845d7550572047dc24409ff68318c616c2f23c4cc704be4a0b4ab68edea1ac02',
         id=3511,
         lineno=39,
         tokens=36,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Cast]: type(%d) cost(%.4lf)\\n",\n'
              '           cast->type, cast->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3512,
         lineno=1,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3513,
         lineno=1,
         tokens=56,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/topk_kernel.cu\n'
              '  Methods: Model::measure_topk_cost TopK::forward TopK::map '
              'TopK::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_topk_cost unmap\n')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3514,
         lineno=12,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void TopK::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '  checkCUDA(cudaMalloc(&outputs[1].data_ptr, '
              'outputs[1].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void TopK::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(outputs[1].data_ptr));\n'
              '}\n'
              '\n'
              'void TopK::forward(bool block)\n'
              '{\n')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3515,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3516,
         lineno=20,
         tokens=69,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::map',
         body='void TopK::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '  checkCUDA(cudaMalloc(&outputs[1].data_ptr, '
              'outputs[1].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3517,
         lineno=27,
         tokens=34,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::unmap',
         body='void TopK::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(outputs[1].data_ptr));\n'
              '}')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3518,
         lineno=33,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::forward',
         body='void TopK::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3519,
         lineno=35,
         tokens=49,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_topk_cost(TopK* topk)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  topk->runtime = 0;\n'
              '}\n')

Fragment(document_cs='8d0c961f74e313f8aa49bace93c36c4e5bf13b5f57934f4008076a3eec027c43',
         id=3520,
         lineno=39,
         tokens=35,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_topk_cost',
         body='void Model::measure_topk_cost(TopK* topk)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  topk->runtime = 0;\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3521,
         lineno=1,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for t')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3522,
         lineno=1,
         tokens=80,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/concat_mkl.cc\n'
              '  Functions: create_net inputMems\n'
              '  Methods: Concat::forward Concat::map Concat::unmap '
              'Model::measure_concat_cost\n'
              '  Variables: args inputMemDescs inputPtrs outputMem\n'
              '  Using: dnnl taso\n'
              '  Usages: concat forward map measure_concat_cost primitive_desc '
              'unmap\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3523,
         lineno=12,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='he specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              '#include <vector>\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(Concat* concat, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    std::vector<memory>& inputMems, memory& outputMem,\n'
              '    std::vector<void*> inputPtrs, void* outputPtr) {\n'
              '  // data descriptors.\n'
              '  auto outputMemDesc = get_memory_desc(concat->outputs[0]);\n'
              '  std::vector<memory::desc> inputMemDescs;\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3524,
         lineno=19,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3525,
         lineno=20,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3526,
         lineno=22,
         tokens=353,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Concat* concat, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    std::vector<memory>& inputMems, memory& outputMem,\n'
              '    std::vector<void*> inputPtrs, void* outputPtr) {\n'
              '  // data descriptors.\n'
              '  auto outputMemDesc = get_memory_desc(concat->outputs[0]);\n'
              '  std::vector<memory::desc> inputMemDescs;\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    '
              'inputMemDescs.push_back(get_memory_desc(concat->inputs[i]));\n'
              '  }\n'
              '  // data memories.\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  assert(inputMems.size() == (size_t)concat->numInputs);\n'
              '  assert(inputPtrs.size() == (size_t)concat->numInputs);\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    inputMems[i] = memory(inputMemDescs[i], eng, '
              'inputPtrs[i]);\n'
              '  }\n'
              '  // operator primitives.\n'
              '  auto concatPrimDesc = concat::primitive_desc(concat->axis, '
              'inputMemDescs, eng);\n'
              '  assert(concatPrimDesc.dst_desc() == outputMemDesc);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  DNNLNet::value_type::second_type args;\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    args[DNNL_ARG_MULTIPLE_SRC + i] = inputMems[i];\n'
              '  }\n'
              '  args[DNNL_ARG_DST] = outputMem;\n'
              '  net.push_back({::dnnl::concat(concatPrimDesc), args});\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3527,
         lineno=22,
         tokens=53,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Concat* concat, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    std::vector<memory>& inputMems, memory& outputMem,\n'
              '    std::vector<void*> inputPtrs, void* outputPtr)')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3528,
         lineno=27,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMemDescs',
         body='std::vector<memory::desc> inputMemDescs;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3529,
         lineno=28,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    '
              'inputMemDescs.push_back(get_memory_desc(concat->inputs[i]));\n'
              '  }\n'
              '  // data memories.\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  assert(inputMems.size() == (size_t)concat->numInputs);\n'
              '  assert(inputPtrs.size() == (size_t)concat->numInputs);\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3530,
         lineno=35,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    inputMems[i] = memory(inputMemDescs[i], eng, '
              'inputPtrs[i]);\n'
              '  }\n'
              '  // operator primitives.\n'
              '  auto concatPrimDesc = concat::primitive_desc(concat->axis, '
              'inputMemDescs, eng);\n'
              '  assert(concatPrimDesc.dst_desc() == outputMemDesc);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  DNNLNet::value_type::second_type args;\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3531,
         lineno=43,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='args',
         body='DNNLNet::value_type::second_type args;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3532,
         lineno=44,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    args[DNNL_ARG_MULTIPLE_SRC + i] = inputMems[i];\n'
              '  }\n'
              '  args[DNNL_ARG_DST] = outputMem;\n'
              '  net.push_back({::dnnl::concat(concatPrimDesc), args});\n'
              '}\n'
              '\n'
              'void Concat::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory outputMem;\n'
              '  std::vector<memory> inputMems(numInputs);\n'
              '  std::vector<void*> inputPtrs;\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3533,
         lineno=51,
         tokens=143,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::map',
         body='void Concat::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory outputMem;\n'
              '  std::vector<memory> inputMems(numInputs);\n'
              '  std::vector<void*> inputPtrs;\n'
              '  for (int i = 0; i < numInputs; i++) '
              'inputPtrs.push_back(inputs[i].data_ptr);\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMems, outputMem,\n'
              '      inputPtrs, outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3534,
         lineno=57,
         tokens=4,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputMem',
         body='memory outputMem;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3535,
         lineno=58,
         tokens=6,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='inputMems',
         body='inputMems(numInputs)')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3536,
         lineno=59,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputPtrs',
         body='std::vector<void*> inputPtrs;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3537,
         lineno=60,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numInputs; i++) '
              'inputPtrs.push_back(inputs[i].data_ptr);\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMems, outputMem,\n'
              '      inputPtrs, outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void Concat::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Concat::forward(bool block)\n'
              '{\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3538,
         lineno=66,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::unmap',
         body='void Concat::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3539,
         lineno=75,
         tokens=40,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Concat::forward',
         body='void Concat::forward(bool block)\n'
              '{\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3540,
         lineno=77,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_concat_cost(Concat* concat)\n'
              '{\n'
              '  memory outputMem;\n'
              '  std::vector<memory> inputMems(concat->numInputs);\n'
              '  std::vector<void*> inputPtrs;\n'
              '  for (int i = 0; i < concat->numInputs; i++) '
              'inputPtrs.push_back(inputPtr);\n'
              '  create_net(concat, net, eng, strm,\n'
              '      inputMems, outputMem,\n'
              '      inputPtrs, outputPtr);\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3541,
         lineno=81,
         tokens=281,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_concat_cost',
         body='void Model::measure_concat_cost(Concat* concat)\n'
              '{\n'
              '  memory outputMem;\n'
              '  std::vector<memory> inputMems(concat->numInputs);\n'
              '  std::vector<void*> inputPtrs;\n'
              '  for (int i = 0; i < concat->numInputs; i++) '
              'inputPtrs.push_back(inputPtr);\n'
              '  create_net(concat, net, eng, strm,\n'
              '      inputMems, outputMem,\n'
              '      inputPtrs, outputPtr);\n'
              '\n'
              '  for (const auto& m : inputMems)\n'
              '    assert(m.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  concat->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Concat]: cost(%.4lf)\\n", '
              'concat->runtime);\n'
              '}')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3542,
         lineno=83,
         tokens=4,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputMem',
         body='memory outputMem;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3543,
         lineno=85,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputPtrs',
         body='std::vector<void*> inputPtrs;')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3544,
         lineno=90,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  for (const auto& m : inputMems)\n'
              '    assert(m.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n')

Fragment(document_cs='8faf2f28c86759877691170d2676984b843e48cb54a4566e82e33fd538e1a7be',
         id=3545,
         lineno=101,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  concat->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Concat]: cost(%.4lf)\\n", '
              'concat->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3546,
         lineno=1,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expr')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3547,
         lineno=1,
         tokens=43,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/constant_kernel.cu\n'
              '  Methods: Constant::forward Constant::map Constant::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3548,
         lineno=11,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ess or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Constant::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Constant::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Constant::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3549,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3550,
         lineno=20,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::map',
         body='void Constant::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3551,
         lineno=26,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::unmap',
         body='void Constant::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='916342889838f2efd3925fa09c86c6aa6572a8b8ae855a6b32d350362ee1ee99',
         id=3552,
         lineno=31,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Constant::forward',
         body='void Constant::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3553,
         lineno=1,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See ')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3554,
         lineno=1,
         tokens=100,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/matmul.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::fc Graph::matmul Matmul::Matmul '
              'Matmul::collect_costs Matmul::get_int_parameter Matmul::~Matmul '
              'MatmulKey::MatmulKey Model::get_or_create_matmul\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP Matmul MatmulKey NO_SPLIT collect_costs fc '
              'get_int_parameter get_or_create_matmul matmul rand\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3555,
         lineno=12,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='the License for the specific language governing permissions '
              'and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::fc(const TensorHandle _input,\n'
              '                       int _outputC,\n'
              '                       ActiMode acti)\n'
              '{\n'
              '  assert(_input->numDim == 2);\n'
              '  const int dims[2] = {_outputC, _input->dim[1]};\n'
              '  int total = dims[0] * dims[1];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3556,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3557,
         lineno=19,
         tokens=156,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::fc',
         body='TensorHandle Graph::fc(const TensorHandle _input,\n'
              '                       int _outputC,\n'
              '                       ActiMode acti)\n'
              '{\n'
              '  assert(_input->numDim == 2);\n'
              '  const int dims[2] = {_outputC, _input->dim[1]};\n'
              '  int total = dims[0] * dims[1];\n'
              '  // Randomly initialize weights\n'
              '  DATATYPE* data = (DATATYPE*) malloc(total * '
              'sizeof(DATATYPE));\n'
              '  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(2, dims, data);\n'
              '  free(data);\n'
              '  return matmul(_input, weight, acti);\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3558,
         lineno=28,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < total; i++)\n'
              '    data[i] = (DATATYPE)std::rand() / RAND_MAX;\n'
              '  TensorHandle weight = new_weight(2, dims, data);\n'
              '  free(data);\n'
              '  return matmul(_input, weight, acti);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::matmul(const TensorHandle _input,\n'
              '                           const TensorHandle _weight,\n'
              '                           ActiMode acti)\n'
              '{\n'
              '  Op op = model->')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3559,
         lineno=35,
         tokens=119,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::matmul',
         body='TensorHandle Graph::matmul(const TensorHandle _input,\n'
              '                           const TensorHandle _weight,\n'
              '                           ActiMode acti)\n'
              '{\n'
              '  Op op = model->get_or_create_matmul(*_input, *_weight, '
              'acti);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_weight->op, op, _weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3560,
         lineno=39,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='get_or_create_matmul(*_input, *_weight, acti);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(_weight->op, op, _weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_matmul(Tensor _input, Tensor _weight,\n'
              '                               ActiMode _acti)\n'
              '{\n'
              '  if (_input.numDim != _weight.numDim)\n'
              '    return Op::INVALID_OP;\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3561,
         lineno=48,
         tokens=252,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_matmul',
         body='Op Model::get_or_create_matmul(Tensor _input, Tensor _weight,\n'
              '                               ActiMode _acti)\n'
              '{\n'
              '  if (_input.numDim != _weight.numDim)\n'
              '    return Op::INVALID_OP;\n'
              '  for (int i = 0; i < _input.numDim - 2; i++)\n'
              '    if (_input.dim[i] != _weight.dim[i])\n'
              '      return Op::INVALID_OP;\n'
              '  if (_input.dim[_input.numDim-1] != '
              '_weight.dim[_weight.numDim-2])\n'
              '    return Op::INVALID_OP;\n'
              '  // key is (inputX, inputN, inputC, outputC, acti)\n'
              '  MatmulKey key(_input, _weight, _acti);\n'
              '  Matmul* matmulOp;\n'
              '  if (matmul.find(key) != matmul.end()) {\n'
              '    matmulOp = matmul[key];\n'
              '  } else {\n'
              '    matmulOp = new Matmul(this, _input, _weight, _acti);\n'
              '    measure_matmul_cost(matmulOp);\n'
              '    matmul[key] = matmulOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = matmulOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3562,
         lineno=53,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < _input.numDim - 2; i++)\n'
              '    if (_input.dim[i] != _weight.dim[i])\n'
              '      return Op::INVALID_OP;\n'
              '  if (_input.dim[_input.numDim-1] != '
              '_weight.dim[_weight.numDim-2])\n'
              '    return Op::INVALID_OP;\n'
              '  // key is (inputX, inputN, inputC, outputC, acti)\n'
              '  MatmulKey key(_input, _weight, _acti);\n'
              '  Matmul* matmulOp;\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3563,
         lineno=59,
         tokens=11,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _weight, _acti)')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3564,
         lineno=61,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (matmul.find(key) != matmul.end()) {\n'
              '    matmulOp = matmul[key];\n'
              '  } else {\n'
              '    matmulOp = new Matmul(this, _input, _weight, _acti);\n'
              '    measure_matmul_cost(matmulOp);\n'
              '    matmul[key] = matmulOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3565,
         lineno=68,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3566,
         lineno=70,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='.ptr = matmulOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Matmul::Matmul(Model* _model, Tensor _input, Tensor _weight, '
              'ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, OP_MATMUL), '
              'activation(_activation)\n'
              '{\n'
              '  int numDim = _input.numDim;\n'
              '  assert(numDim == _weight.numDim);\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3567,
         lineno=74,
         tokens=321,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::Matmul',
         body='Matmul::Matmul(Model* _model, Tensor _input, Tensor _weight, '
              'ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, OP_MATMUL), '
              'activation(_activation)\n'
              '{\n'
              '  int numDim = _input.numDim;\n'
              '  assert(numDim == _weight.numDim);\n'
              '  for (int i = 0; i < numDim - 2; i++)\n'
              '    assert(_input.dim[i] == _weight.dim[i]);\n'
              '  assert(_input.dim[numDim-1] == _weight.dim[numDim-2]);\n'
              '  numOutputs = 1;\n'
              '  // set dims and strides\n'
              '  outputs[0].numDim = numDim;\n'
              '  for (int i = 0; i < numDim-1; i++)\n'
              '    outputs[0].dim[i] = _input.dim[i];\n'
              '  outputs[0].dim[numDim-1] = _weight.dim[numDim-1];\n'
              '  set_layout();\n'
              '  // set SplitInfo\n'
              '  for (int i = 0; i < numDim-2; i++) {\n'
              '    if (_input.split[i] == _weight.split[i])\n'
              '      outputs[0].split[i] = _input.split[i];\n'
              '    else\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  outputs[0].split[numDim-2] = _input.split[numDim-2];\n'
              '  outputs[0].split[numDim-1] = _weight.split[numDim-1];\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3568,
         lineno=79,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numDim - 2; i++)\n'
              '    assert(_input.dim[i] == _weight.dim[i]);\n'
              '  assert(_input.dim[numDim-1] == _weight.dim[numDim-2]);\n'
              '  numOutputs = 1;\n'
              '  // set dims and strides\n'
              '  outputs[0].numDim = numDim;\n'
              '  for (int i = 0; i < numDim-1; i++)\n'
              '    outputs[0].dim[i] = _input.dim[i];\n'
              '  outputs[0].dim[numDim-1] = _weight.dim[numDim-1];\n'
              '  set_layout();\n'
              '  // set SplitInfo\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3569,
         lineno=90,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numDim-2; i++) {\n'
              '    if (_input.split[i] == _weight.split[i])\n'
              '      outputs[0].split[i] = _input.split[i];\n'
              '    else\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  outputs[0].split[numDim-2] = _input.split[numDim-2];\n'
              '  outputs[0].split[numDim-1] = _weight.split[numDim-1];\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Matmul::~Matmul(void)\n'
              '{}\n'
              '\n'
              'bool Matmul::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) ')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3570,
         lineno=101,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::~Matmul',
         body='Matmul::~Matmul(void)\n{}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3571,
         lineno=104,
         tokens=60,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::get_int_parameter',
         body='bool Matmul::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_ACTI:\n'
              '      *value = (int) activation;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3572,
         lineno=106,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='{\n'
              '    case PM_ACTI:\n'
              '      *value = (int) activation;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Matmul::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3573,
         lineno=115,
         tokens=230,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::collect_costs',
         body='void Matmul::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  assert(inputs[0].numDim == inputs[1].numDim);\n'
              '  flops += outputSize * inputs[0].dim[inputs[0].numDim-1];\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Matmul]: %s %s cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         inputs[0].to_string("input").c_str(),\n'
              '         inputs[1].to_string("weight").c_str(),\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3574,
         lineno=119,
         tokens=31,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3575,
         lineno=121,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  assert(inputs[0].numDim == inputs[1].numDim);\n'
              '  flops += outputSize * inputs[0].dim[inputs[0].numDim-1];\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Matmul]: %s %s cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         inputs[0].to_s')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3576,
         lineno=130,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tring("input").c_str(),\n'
              '         inputs[1].to_string("weight").c_str(),\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (inputN, inputC, outputC, acti)\n'
              'MatmulKey::MatmulKey(Tensor _input, Tensor _weight, ActiMode '
              '_mode)\n'
              '{\n'
              '  assert(_input.numDim == _weight.numDim);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = (int)(_mode);\n'
              '  _input.serialize(keys, idx);\n'
              '  _weight.serialize(keys, idx);\n')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3577,
         lineno=136,
         tokens=92,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MatmulKey::MatmulKey',
         body='MatmulKey::MatmulKey(Tensor _input, Tensor _weight, ActiMode '
              '_mode)\n'
              '{\n'
              '  assert(_input.numDim == _weight.numDim);\n'
              '  int idx = 0;\n'
              '  keys[idx++] = (int)(_mode);\n'
              '  _input.serialize(keys, idx);\n'
              '  _weight.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='9310f030c8a7e9f7dd93ad542368f0730c205e5f1469066778ec862317bdff09',
         id=3578,
         lineno=143,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3579,
         lineno=1,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the Licen')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3580,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/transpose_mkl.cc\n'
              '  Methods: Model::measure_transpose_cost Transpose::forward '
              'Transpose::map Transpose::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_transpose_cost unmap\n')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3581,
         lineno=12,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='se for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Transpose::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  assert(outputs[0].volume() == inputs[0].volume());\n'
              '  // for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}\n'
              '\n'
              'void Transpose::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '}\n'
              '\n'
              'void Transpose::forward(bool block)\n'
              '{\n')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3582,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3583,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3584,
         lineno=21,
         tokens=57,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::map',
         body='void Transpose::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  assert(outputs[0].volume() == inputs[0].volume());\n'
              '  // for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3585,
         lineno=29,
         tokens=19,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::unmap',
         body='void Transpose::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '}')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3586,
         lineno=35,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::forward',
         body='void Transpose::forward(bool block)\n'
              '{\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3587,
         lineno=37,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_transpose_cost(Transpose* transpose)\n'
              '{\n'
              '  // Transpose requires no kernel launch\n'
              '  transpose->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Transpose]: cost(%.4lf)\\n", '
              'transpose->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='9ac7b922b8dfb406c60b1c012134d20f022ab91ea701f9c3a6e2daa99f95eb3b',
         id=3588,
         lineno=40,
         tokens=57,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_transpose_cost',
         body='void Model::measure_transpose_cost(Transpose* transpose)\n'
              '{\n'
              '  // Transpose requires no kernel launch\n'
              '  transpose->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Transpose]: cost(%.4lf)\\n", '
              'transpose->runtime);\n'
              '}')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3589,
         lineno=1,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the ')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3590,
         lineno=1,
         tokens=77,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP '
              'fuse_conv_batchnorm_alpha_var_kernel\n'
              '  Methods: FuseConvBatchNormAlphaVar::forward '
              'FuseConvBatchNormAlphaVar::map '
              'FuseConvBatchNormAlphaVar::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3591,
         lineno=12,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void fuse_conv_batchnorm_alpha_var_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3592,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3593,
         lineno=20,
         tokens=121,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_alpha_var_kernel',
         body='__global__\n'
              'void fuse_conv_batchnorm_alpha_var_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3594,
         lineno=21,
         tokens=44,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_alpha_var_kernel',
         body='fuse_conv_batchnorm_alpha_var_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3595,
         lineno=29,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(i')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3596,
         lineno=29,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3597,
         lineno=29,
         tokens=58,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3598,
         lineno=36,
         tokens=83,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::map',
         body='void FuseConvBatchNormAlphaVar::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3599,
         lineno=39,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3600,
         lineno=45,
         tokens=26,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::unmap',
         body='void FuseConvBatchNormAlphaVar::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3601,
         lineno=47,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='[0].data_ptr));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormAlphaVar::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1]')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3602,
         lineno=50,
         tokens=165,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormAlphaVar::forward',
         body='void FuseConvBatchNormAlphaVar::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  '
              'fuse_conv_batchnorm_alpha_var_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,\n'
              '      conv_w_ptr, scale_ptr, var_ptr);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='9c649407dd8b1adf67d3fe05f8aafb95aeffde75cbf0ad898e9876730594cad6',
         id=3603,
         lineno=55,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='.data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  '
              'fuse_conv_batchnorm_alpha_var_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,\n'
              '      conv_w_ptr, scale_ptr, var_ptr);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              '\n')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3604,
         lineno=1,
         tokens=150,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TASO Installation\n'
              '\n'
              'TASO can be built from source code using the following '
              'instructions.\n'
              'We also provide prebuilt TASO docker images with all '
              'dependencies preinstalled.\n'
              '\n'
              '## Install from Source\n'
              '\n'
              '### Prerequisties\n'
              '\n'
              '* CMAKE 3.2 or higher\n'
              '* ProtocolBuffer 3.6.1 or higher\n'
              '* Cython 0.28 or higher\n'
              '* ONNX 1.5 or higher\n'
              '* CUDA 9.0 or higher and CUDNN 7.0 or higher\n'
              '\n'
              '### Build TASO Runtime\n'
              '\n'
              '* To get started, clone the TASO source code from github.\n'
              '```\n'
              'git clone --recursive https://www.github.com/jiazhihao/taso\n'
              'cd taso\n'
              '```')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3605,
         lineno=1,
         tokens=26,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='# TASO Installation\n'
              '## Install from Source\n'
              '### Prerequisties\n'
              '### Build TASO Runtime\n'
              '## Docker Images\n')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3606,
         lineno=22,
         tokens=131,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'The `TASO_HOME` environment is used for building and running '
              'TASO. You can add the following line in `~/.bashrc`.\n'
              '```\n'
              'export TASO_HOME=/path/to/taso\n'
              '```\n'
              '\n'
              '* Build the TASO runtime library. The configuration of the TASO '
              'runtime can be modified by `config.cmake`. The default '
              'configuration builds the CUDA backend and automatically finds '
              'the CUDA libraries (e.g., cuDNN, cuBLAS). You can manually '
              'choose a CUDA path by changing `set(USE_CUDA ON)` to '
              '`set(USE_CUDA /path/to/cuda/library`). MKL support is coming '
              'soon.\n'
              '```')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3607,
         lineno=29,
         tokens=40,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              'mkdir build; cd build; cmake ..\n'
              'sudo make install -j 4\n'
              '```\n'
              '\n'
              '* Install the TASO python package.\n'
              '```\n'
              'cd ../python\n'
              'python setup.py install\n'
              '```\n'
              '\n')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3608,
         lineno=40,
         tokens=136,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='## Docker Images\n'
              '\n'
              'We require '
              '[docker](https://docs.docker.com/engine/installation/) and '
              '[nvidia-docker](https://github.com/NVIDIA/nvidia-docker/) to '
              'run the TASO [docker images](https://hub.docker.com/u/tasoml).\n'
              '\n'
              '* First, clone the TASO gitpub repository to obtain the '
              'necessary scripts\n'
              '```\n'
              'git clone --recursive https://www.github.com/jiazhihao/taso\n'
              '```\n'
              '\n'
              '* Second, we can use the following command to run a TASO docker '
              'image for CUDA 10.0.\n'
              '```\n'
              '/path/to/taso/docker/run_docker.sh tasoml/cuda100\n'
              '```\n')

Fragment(document_cs='9da68e5c8e8e35c9336ce9ef57fe3bf6359f0eaa752539e3fabdc0fde552c3c3',
         id=3609,
         lineno=53,
         tokens=36,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '* You are ready to use TASO now. Try some of our example DNN '
              'architectures.\n'
              '```\n'
              'python /path/to/taso/examples/resnext10.py\n'
              '```\n')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3610,
         lineno=1,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or imp')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3611,
         lineno=1,
         tokens=56,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/reshape_kernel.cu\n'
              '  Methods: Model::measure_reshape_cost Reshape::forward '
              'Reshape::map Reshape::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_reshape_cost unmap\n')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3612,
         lineno=11,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Reshape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Reshape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Reshape::forward(bool block)\n'
              '{\n')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3613,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3614,
         lineno=20,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::map',
         body='void Reshape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3615,
         lineno=27,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::unmap',
         body='void Reshape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3616,
         lineno=32,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::forward',
         body='void Reshape::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3617,
         lineno=34,
         tokens=49,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_reshape_cost(Reshape* reshape)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  reshape->runtime = 0;\n'
              '}\n')

Fragment(document_cs='a246fa24decd632fb535186dea0c07dbeb49d1ee8f7db3e1b8e253b52c12e19f',
         id=3618,
         lineno=38,
         tokens=35,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_reshape_cost',
         body='void Model::measure_reshape_cost(Reshape* reshape)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  reshape->runtime = 0;\n'
              '}')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3619,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='#! /usr/bin/python\n'
              '\n'
              'import sys\n'
              'import os\n'
              'from itertools import product\n'
              '\n'
              'import z3\n'
              'from z3 import ForAll\n'
              '\n'
              "T = z3.DeclareSort('T')\n"
              'P = z3.IntSort()\n'
              '\n'
              'OP_INPUT, \\\n'
              'OP_WEIGHT, \\\n'
              'OP_ANY, \\\n'
              'OP_CONV2D, \\\n'
              'OP_DROPOUT, \\\n'
              'OP_LINEAR, \\\n'
              'OP_POOL2D_MAX, \\\n'
              'OP_POOL2D_AVG, \\\n'
              'OP_RELU, \\\n'
              'OP_SIGMOID, \\\n'
              'OP')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3620,
         lineno=1,
         tokens=347,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /verify/verify.py\n'
              '  Functions: to_z3\n'
              '  Variables and usages: AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH Const Consts D DeclareSort ForAll '
              'Function IntSort N OP_ANY OP_BATCHNORM OP_CONCAT '
              'OP_CONSTANT_ICONV OP_CONSTANT_IMM OP_CONSTANT_ONE '
              'OP_CONSTANT_POOL OP_CONV2D OP_DROPOUT OP_ENLARGE OP_EW_ADD '
              'OP_EW_MUL OP_INPUT OP_LINEAR OP_MATMUL OP_MERGE_GCONV OP_MUL '
              'OP_POOL2D_AVG OP_POOL2D_MAX OP_RELU OP_RESHAPE OP_SIGMOID '
              'OP_SPLIT OP_TANH OP_TRANSPOSE OP_WEIGHT P PD_MODE_SAME '
              'PD_MODE_VALID PM_ACTI PM_AXIS PM_GROUP PM_KERNEL_H PM_KERNEL_W '
              'PM_MERGE_GCONV_COUNT PM_NUMDIM PM_NUM_INPUTS PM_NUM_OUTPUTS '
              'PM_OP_TYPE PM_OUTSHUFFLE PM_PAD PM_PERM PM_STRIDE_H PM_STRIDE_W '
              'ParseFromString RuleCollection Solver T Tensor acti append args '
              'argv axioms basename blacklist check concat_0 const_iconv_0 '
              'const_imm_0 const_one_0 const_pool_0 conv2d_0 dstOp dstOpId '
              'dstTsId dst_tensor enlarge_0 enumerate ewadd_0 ewmul_0 exit '
              'format globals input itertools lemmas mappedOutput matmul_0 '
              'name opId open operator_data output para params path '
              'pool2d_avg_0 pool2d_max_0 print product range read relu_0 '
              'repeat rule rules rules_pb2 scalar_mul_0 split_0 split_1 srcOp '
              'srcOpId srcTsId src_tensor tensor transpose_0 tsId tuple type '
              'unsat value values\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3621,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3622,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3623,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3624,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3625,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3626,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3627,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3628,
         lineno=23,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_TANH, \\\n'
              'OP_BATCHNORM, \\\n'
              'OP_CONCAT, \\\n'
              'OP_SPLIT, \\\n'
              'OP_RESHAPE, \\\n'
              'OP_TRANSPOSE, \\\n'
              'OP_EW_ADD, \\\n'
              'OP_EW_MUL, \\\n'
              'OP_MATMUL, \\\n'
              'OP_MUL, \\\n'
              'OP_ENLARGE, \\\n'
              'OP_MERGE_GCONV, \\\n'
              'OP_CONSTANT_IMM, \\\n'
              'OP_CONSTANT_ICONV, \\\n'
              'OP_CONSTANT_ONE, \\\n'
              'OP_CONSTANT_POOL = range(26)\n'
              '\n'
              'PM_OP_TYPE, \\\n'
              'PM_NUM_INPUTS, \\\n'
              'PM')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3629,
         lineno=42,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_NUM_OUTPUTS, \\\n'
              'PM_GROUP, \\\n'
              'PM_KERNEL_H, \\\n'
              'PM_KERNEL_W, \\\n'
              'PM_STRIDE_H, \\\n'
              'PM_STRIDE_W, \\\n'
              'PM_PAD, \\\n'
              'PM_ACTI, \\\n'
              'PM_NUMDIM, \\\n'
              'PM_AXIS, \\\n'
              'PM_PERM, \\\n'
              'PM_OUTSHUFFLE, \\\n'
              'PM_MERGE_GCONV_COUNT = range(15)\n'
              '\n'
              'AC_MODE_NONE, \\\n'
              'AC_MODE_SIGMOID, \\\n'
              'AC_MODE_RELU, \\\n'
              'AC_MODE_TANH = range(4)\n'
              '\n'
              'PD_MODE_SAME')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3630,
         lineno=61,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', \\\n'
              'PD_MODE_VALID = range(2)\n'
              '\n'
              '# map opId to (name, (key,rng)*, input arity, outputa arity, '
              'possible input dimensions)\n'
              'operator_data = {\n'
              "    OP_CONSTANT_POOL: ('const_pool', ((PM_KERNEL_H, {3}), "
              '(PM_KERNEL_W, {3})), 0, 1, {}),\n'
              "    OP_CONSTANT_ICONV: ('const_iconv', ((PM_KERNEL_H, {3})")

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3631,
         lineno=64,
         tokens=25,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# map opId to (name, (key,rng)*, input arity, outputa arity, '
              'possible input dimensions)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3632,
         lineno=67,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=', (PM_KERNEL_W, {3})), 0, 1, {}),\n'
              "    OP_CONSTANT_IMM: ('const_imm', (), 0, 1, {}),\n"
              "    OP_CONSTANT_ONE: ('const_one', (), 0, 1, {}),\n"
              "    OP_CONV2D: ('conv2d', ((PM_STRIDE_H, {1,2}), (PM_STRIDE_W, "
              '{1,2}), (PM_PAD, {0,1}), (PM_ACTI, {AC_MODE_NONE, '
              'AC_MODE_RELU})), 2, 1, {4}),\n'
              '    OP_')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3633,
         lineno=71,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="POOL2D_MAX: ('pool2d_max', ((PM_KERNEL_H, {3}), (PM_KERNEL_W, "
              '{3}), (PM_STRIDE_H, {1, 2}), (PM_STRIDE_W, {1,2}), (PM_PAD, '
              '{0,1})), 1, 1, {4}),\n'
              "    OP_POOL2D_AVG: ('pool2d_avg', ((PM_KERNEL_H, {3}), "
              '(PM_KERNEL_W, {3}), (PM_STRIDE_H, {1, 2}), (PM_STRIDE_W, '
              '{1,2}), (PM_PAD, {0,1})), 1, ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3634,
         lineno=72,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='1, {4}),\n'
              "    OP_RELU: ('relu', (), 1, 1, {2, 3, 4}),\n"
              "    OP_CONCAT: ('concat', ((PM_AXIS, {0, 1, 2, 3}),), 2, 1, "
              '{2,3,4}),\n'
              "    OP_SPLIT: ('split', ((PM_AXIS, {0, 1, 2, 3}),), 1, 2, "
              '{2,3,4}),\n'
              "    OP_TRANSPOSE: ('transpose', (), 1, 1, {2}),\n"
              "    OP_ENLARGE: ('enlarge', ((PM_KERNEL_H, {")

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3635,
         lineno=77,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3}), (PM_KERNEL_W, {3})), 1, 1, {4}),\n'
              "    OP_EW_ADD: ('ewadd', (), 2, 1, {2,3,4}),\n"
              "    OP_EW_MUL: ('ewmul', (), 2, 1, {2,3,4}),\n"
              "    OP_MATMUL: ('matmul', (), 2, 1, {2}),\n"
              "    OP_MUL: ('scalar_mul', (), 2, 1, {2, 3, 4}) # multiply a "
              'tensor (first argument) with a scalar (0-D tensor)\n'
              '}\n'
              '\n'
              'for d in operator_data.values():\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3636,
         lineno=81,
         tokens=16,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# multiply a tensor (first argument) with a scalar (0-D tensor)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3637,
         lineno=85,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(d[3]):\n'
              "        name = '{}_{}'.format(d[0], i)\n"
              '        globals()[name] = z3.Function(name, *( len(d[1]) * [P] '
              '+ d[2] * [T] + [T]))\n'
              '\n'
              "x,y,z,w, one = z3.Consts('x y z w one', T)\n"
              "sx, sy, kx, ky, pad, acti, ax = z3.Consts('sx sy kx ky pad acti "
              "ax', P)\n"
              '\n'
              'N = [1,2,3,4] # change this to control number of combinations '
              'for symbolic validation, e.')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3638,
         lineno=90,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='sx sy kx ky pad acti ax')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3639,
         lineno=92,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='g., [1,2], [1,3] or [3,4] each provide a reasonable experiment '
              'to run and go for coffee (assuming 8 cores)\n'
              'D = [1,3]\n'
              '\n'
              '# list of axioms with list of possible values for '
              'verify_axioms.py. possible values are actual values for '
              'parameters, and shapes for tensors\n'
              'axioms = [\n'
              '\n'
              '    # ewadd and ewmul are associative, commutative and '
              'distributive\n'
              '\n'
              '    # ewadd is ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3640,
         lineno=92,
         tokens=48,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# change this to control number of combinations for symbolic '
              'validation, e.g., [1,2], [1,3] or [3,4] each provide a '
              'reasonable experiment to run and go for coffee (assuming 8 '
              'cores)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3641,
         lineno=95,
         tokens=28,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# list of axioms with list of possible values for '
              'verify_axioms.py. possible values are actual values for '
              'parameters, and shapes for tensors')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3642,
         lineno=98,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewadd and ewmul are associative, commutative and distributive')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3643,
         lineno=100,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='associative\n'
              '    (ForAll([x,y,z], ewadd_0(x,ewadd_0(y, z)) == '
              'ewadd_0(ewadd_0(x,y),z)),\n'
              '     lambda : [(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewadd is commutative\n'
              '    (ForAll([x,y], ewadd_0(x,y) == ewadd_0(y, x)),\n'
              '     lambda : [(s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewmul is associative\n'
              '    (Fo')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3644,
         lineno=100,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewadd is associative')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3645,
         lineno=104,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewadd is commutative')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3646,
         lineno=108,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewmul is associative')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3647,
         lineno=109,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rAll([x,y,z], ewmul_0(x,ewmul_0(y, z)) == '
              'ewmul_0(ewmul_0(x,y),z)),\n'
              '     lambda :[(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewmul is commutative\n'
              '    (ForAll([x,y], ewmul_0(x,y) == ewmul_0(y, x)),\n'
              '     lambda : [(s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewadd and ewmul are distributive\n'
              '    (ForAll([x,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3648,
         lineno=112,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewmul is commutative')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3649,
         lineno=116,
         tokens=9,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewadd and ewmul are distributive')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3650,
         lineno=117,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='y,z], ewmul_0(ewadd_0(x,y), z) == ewadd_0(ewmul_0(x, z), '
              'ewmul_0(y, z))),\n'
              '     lambda : [(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul axioms\n'
              '\n'
              '    # scalar_mul is associative\n'
              '    (ForAll([x,y,w], scalar_mul_0(scalar_mul_0(x,y),w) == '
              'scalar_mul_0(x,scalar_mul_0(y,w))),\n'
              '     lambda : [(s,(),()) for dim in [2,3,4] for s i')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3651,
         lineno=122,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul is associative')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3652,
         lineno=124,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='n product(N, repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul distributes over ewadd\n'
              '    (ForAll([x,y,w], scalar_mul_0(ewadd_0(x,y),w) == '
              'ewadd_0(scalar_mul_0(x,w), scalar_mul_0(y,w))),\n'
              '     lambda : [(s,s,()) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul commutes with ewmul\n'
              '    (ForAll([x,y,w], scalar_mul_0(ewmul_0(x,y),w) == '
              'ewmul_0(x,scal')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3653,
         lineno=126,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul distributes over ewadd')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3654,
         lineno=130,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul commutes with ewmul')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3655,
         lineno=131,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ar_mul_0(y,w))),\n'
              '     lambda : [(s,s,()) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul commutes with transpose\n'
              '    (ForAll([x, w], scalar_mul_0(transpose_0(x), w) == '
              'transpose_0(scalar_mul_0(x, w))),\n'
              '     lambda : [(s,()) for s in product(N, repeat=2)] ),\n'
              '\n'
              '    # scalar_mul commutes with matmul (note that the other is '
              'obtained ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3656,
         lineno=134,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul commutes with transpose')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3657,
         lineno=138,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='using transpose)\n'
              '    (ForAll([x,y,w], scalar_mul_0(matmul_0(x,y),w) == '
              'matmul_0(x,scalar_mul_0(y,w))),\n'
              '     lambda : [((n1,n2),(n2, n3),()) for n1,n2,n3 in '
              'product(N,repeat=3) ]),\n'
              '\n'
              '    # scalar_mul and concat\n'
              '    (ForAll([ax,x,y,w], scalar_mul_0(concat_0(ax, x, y), w) == '
              'concat_0(ax, scalar_mul_0(x, w), scalar_mul_0(y, w))),\n'
              '     lambda : [(ax,s1,s2,())\n'
              '               for dim in [2,3,4]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3658,
         lineno=138,
         tokens=18,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul commutes with matmul (note that the other is '
              'obtained using transpose)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3659,
         lineno=142,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul and concat')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3660,
         lineno=146,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3661,
         lineno=148,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # scalar_mul and conv2d\n'
              '\n'
              '    (ForAll([sx,sy,pad,acti,x,y,w], '
              'conv2d_0(sx,sy,pad,acti,scalar_mul_0(x,w),y) == '
              'conv2d_0(sx,sy,pad,acti,x,scalar_mul_0(y,w))),\n'
              '     lambda : [(sx, sy, pad, acti, (n,c,h,w), (c1,c,d1,d2), '
              '())\n'
              '               for sx in [1,2]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3662,
         lineno=152,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# scalar_mul and conv2d')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3663,
         lineno=157,
         tokens=61,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '               for d1 in D\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3664,
         lineno=162,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx,sy,pad,x,y,w], '
              'scalar_mul_0(conv2d_0(sx,sy,pad,AC_MODE_NONE,x,y),w) == '
              'conv2d_0(sx,sy,pad,AC_MODE_NONE,scalar_mul_0(x,w),y)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2), ())\n'
              '               for sx in [1,2]\n'
              '               for sy in [1,2]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3665,
         lineno=170,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '               for d1 in D\n'
              '               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # relu axioms\n'
              '\n'
              "    # doesn't seem like this is needed\n"
              '    # relu is idempotent\n'
              '    #(ForAll([x], relu_0(x) == relu_0(relu_0(x))),\n'
              '    # lambda : [(s,) for dim in [2,3,4')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3666,
         lineno=179,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="# doesn't seem like this is needed")

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3667,
         lineno=180,
         tokens=6,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# relu is idempotent')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3668,
         lineno=181,
         tokens=22,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#(ForAll([x], relu_0(x) == relu_0(relu_0(x))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3669,
         lineno=182,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='] for s in product(N, repeat=dim)] ),\n'
              '\n'
              '    # relu and conv2d\n'
              '    (ForAll([sx, sy, pad, x, y], relu_0(conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, y)) == conv2d_0(sx, sy, pad, AC_MODE_RELU, x, '
              'y)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3670,
         lineno=182,
         tokens=27,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# lambda : [(s,) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3671,
         lineno=187,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '               for d1 in D\n'
              '               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # relu and concat\n'
              '    (ForAll([ax, x, y], relu_0(concat_0(ax, x, y)) == '
              'concat_0(ax, relu_0(x), relu_0(y))),\n'
              '     lambda : [(ax,s1,s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3672,
         lineno=199,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n'
              '               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # relu and transpose commute\n'
              '    (ForAll([x], relu_0(transpose_0(x)) == '
              'transpose_0(relu_0(x))),\n'
              '     lambda : [(s,) for s in product(N, repeat=2)] ),\n'
              '\n'
              '   # conv2d axioms\n'
              ' ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3673,
         lineno=206,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# relu and transpose commute')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3674,
         lineno=211,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   (ForAll([sx, sy, pad, x, y, z], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, ewadd_0(y, z)) == ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, y), conv2d_0(sx, sy, pad, AC_MODE_NONE, '
              'x, z))),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2), '
              '(c1,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3675,
         lineno=213,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '               for d1 in D\n'
              '               for d2 in D\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3676,
         lineno=219,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '               # if (\n'
              '               #     1 + (h + 2 * vpx - d1) / sx > 0 and\n'
              '               #     1 + (w + 2 * vpy - d2) / sy > 0 and\n'
              '               #     (vpx != 1 or d1 != 1) and\n'
              '               #     (vpy != 1 or d2 != ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3677,
         lineno=221,
         tokens=23,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     1 + (h + 2 * vpx - d1) / sx > 0 and')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3678,
         lineno=222,
         tokens=23,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     1 + (w + 2 * vpy - d2) / sy > 0 and')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3679,
         lineno=223,
         tokens=16,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     (vpx != 1 or d1 != 1) and')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3680,
         lineno=224,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='1)\n'
              '               # )\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, x, y, z], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, ewadd_0(x, y), z) == ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, z), conv2d_0(sx, sy, pad, AC_MODE_NONE, '
              'y, z))),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (n,c,h,w), '
              '(c1,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3681,
         lineno=224,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     (vpy != 1 or d2 != 1)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3682,
         lineno=230,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '               for d1 in D\n'
              '               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # a special axiom for conv and matmul\n'
              '\n'
              '    (ForAll([sx, sy, pad, x, y, z, w], ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, y),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3683,
         lineno=239,
         tokens=9,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# a special axiom for conv and matmul')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3684,
         lineno=241,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' conv2d_0(sx, sy, pad, AC_MODE_NONE, z, w)) == conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, concat_0(1, x, z), concat_0(1, y, w))),\n'
              '     lambda : [(sx, sy, pad, (n,c1,h,w), (co,c1,d1,d2), '
              '(n,c2,h,w), (co,c2,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3685,
         lineno=243,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c1,c2,co,h,w in product(N,repeat=6)\n'
              '               for d1 in D\n'
              '               for d2 in D\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3686,
         lineno=249,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # concat axioms\n'
              '\n'
              '    # matmul and concat\n'
              '    (ForAll([x, y, z, w], ewadd_0(matmul_0(x, y), matmul_0(z, '
              'w)) == matmul_0(concat_0(1, x, z), concat_0(0, y, w))),\n'
              '     la')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3687,
         lineno=256,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mbda :[((n1,n2),(n2, n3),(n1,n4),(n4,n3)) for n1,n2,n3,n4 in '
              'product(N,repeat=4)]),\n'
              '\n'
              '\n'
              '    (ForAll([ax, x, y, z, w], concat_0(ax, ewadd_0(x, y), '
              'ewadd_0(z, w)) == ewadd_0(concat_0(ax, x, z), concat_0(ax, y, '
              'w))),\n'
              '     lambda : [(ax,s1,s1,s2,s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3688,
         lineno=261,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n'
              '               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([ax, x, y, z, w], concat_0(ax, ewmul_0(x, y), '
              'ewmul_0(z, w)) == ewmul_0(concat_0(ax, x, z), concat_0(ax, y, '
              'w))),\n'
              '     lambda : [(ax,s1,s1,s2,s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3689,
         lineno=270,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n'
              '               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, acti, x, y, z], concat_0(0, '
              'conv2d_0(sx, sy, pad, acti, x, z')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3690,
         lineno=277,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='), conv2d_0(sx, sy, pad, acti, y, z)) == conv2d_0(sx, sy, pad, '
              'acti, concat_0(0, x, y), z)),\n'
              '     lambda : [(sx, sy, pad, acti, (n1,c,h,w), (n2,c,h,w), '
              '(c1,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3691,
         lineno=279,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '               for n1,n2,c,h,w,c1 in product(N,repeat=6)\n'
              '               for d1 in D\n'
              '               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, acti, x, y, z], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3692,
         lineno=289,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='conv2d_0(sx, sy, pad, acti, x, z)) == conv2d_0(sx, sy, pad, '
              'acti, x, concat_0(0, y, z))),\n'
              '     lambda :[(sx, sy, pad, acti, (n,c,h,w), (c1,c,d1,d2), '
              '(c2,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3693,
         lineno=291,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='              for sx in [1,2]\n'
              '              for sy in [1,2]\n'
              '              for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '              for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '              for n,c,h,w,c1,c2 in product(N,repeat=6)\n'
              '              for d1 in D\n'
              '              for d2 in D\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3694,
         lineno=298,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='              if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # matmul\n'
              '    (ForAll([x, y, z], matmul_0(x, matmul_0(y, z)) == '
              'matmul_0(matmul_0(x, y), z)),\n'
              '     lambda :\n'
              '     # TODO: 3D matmul: [((n1, n2, n3), (n1, n3, n4), (n1, n4, '
              'n5))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3695,
         lineno=304,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' for n1,n2,n3,n4,n5 in product(N,repeat=5) ] +\n'
              '     [((n1, n2), (n2, n3), (n3, n4)) for n1, n2, n3, n4 in '
              'product(N, repeat=4)]\n'
              '    ),\n'
              '\n'
              '    # split and concat\n'
              '    (ForAll([ax, x, y], split_0(ax, concat_0(ax, x, y)) == x),\n'
              '     lambda : [(ax, s1, s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3696,
         lineno=304,
         tokens=61,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: 3D matmul: [((n1, n2, n3), (n1, n3, n4), (n1, n4, n5)) '
              'for n1,n2,n3,n4,n5 in product(N,repeat=5) ] +')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3697,
         lineno=311,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n'
              '               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([ax, x, y], split_1(ax, concat_0(ax, x, y)) == y),\n'
              '     lambda : [(ax, s1, s2)\n'
              '               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in product(N, repeat=dim)\n'
              '               for ax in range(dim)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3698,
         lineno=324,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # split, concat, and matmul\n'
              '\n'
              '    (ForAll([x, y, z], matmul_0(x, concat_0(1, y, z)) == '
              'concat_0(1, matmul_0(x, y), matmul_0(x, z))),\n'
              '     lambda : [((n1, n2), (n2, n3), (n2, n4)) for n1,n2,n3,n4 '
              'in product(N,r')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3699,
         lineno=327,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# split, concat, and matmul')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3700,
         lineno=330,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='epeat=4) ]),\n'
              '\n'
              '    # matmul and ewadd\n'
              '\n'
              '    (ForAll([x, y, z], matmul_0(x, ewadd_0(y, z)) == '
              'ewadd_0(matmul_0(x, y), matmul_0(x, z))),\n'
              '     lambda : [((n1,n2), (n2,n3), (n2,n3)) for n1,n2,n3 in '
              'product(N,repeat=3) ]),\n'
              '\n'
              '    # transpose\n'
              '\n'
              '    (ForAll([x], transpose_0(transpose_0(x)) == x),\n'
              '     l')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3701,
         lineno=340,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ambda : [((n1, n2),) for n1,n2 in product(N,repeat=2)]),\n'
              '\n'
              '    (ForAll([x,y], transpose_0(matmul_0(x,y)) == '
              'matmul_0(transpose_0(y), transpose_0(x))  ),\n'
              '     lambda : [((n1, n2),(n2,n3)) for n1,n2,n3 in '
              'product(N,repeat=3)]),\n'
              '\n'
              '    (ForAll([x,y], transpose_0(concat_0(0, x, y)) == '
              'concat_0(1, ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3702,
         lineno=345,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='transpose_0(x), transpose_0(y))),\n'
              '     lambda : [((n1, n2), (n3,n2)) for n1,n2,n3 in '
              'product(N,repeat=3)]),\n'
              '\n'
              '    # concat geometry\n'
              '\n'
              '    (ForAll([x,y,z,w], concat_0(0, concat_0(1, x, y), '
              'concat_0(1, z, w)) == concat_0(1, concat_0(0, x, z), '
              'concat_0(0, y, w))),\n'
              '     lambda : [(s1, s2, s3, s4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3703,
         lineno=352,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for dim in [2,3,4]\n'
              '               for s1 in product(N, repeat=dim)\n'
              '               for s2 in (tuple(s1[i] if i != 1 else n2 for i '
              'in range(dim)) for n2 in N)\n'
              '               for s3 in (tuple(s1[i] if i != 0 else n3 for i '
              'in range(dim)) for n3 in N)\n'
              '               for s4 in [tuple(s2[i] if i != 0 else s3[i] for '
              'i in range(dim))]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3704,
         lineno=357,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (\n'
              '                       s1[1] + s2[1] == s3[1] + s4[1] and\n'
              '                       s1[0] + s3[0] == s2[0] + s4[0]\n'
              '               )\n'
              '     ]),\n'
              '\n'
              '    # transpose and elementwise opertions\n'
              '\n'
              '    (ForAll([x,y], transpose_0(ewadd_0(x,y)) == '
              'ewadd_0(transpose_0(x), transpose_0(y))),\n'
              '     lambda : [((n1, n2), (n1,n2)) for n1,n2 in '
              'product(N,repeat=2)]),\n'
              '\n'
              '    (ForAll([x,y], transpos')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3705,
         lineno=363,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# transpose and elementwise opertions')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3706,
         lineno=368,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e_0(ewmul_0(x,y)) == ewmul_0(transpose_0(x), transpose_0(y))),\n'
              '     lambda :[((n1, n2), (n1,n2)) for n1,n2 in '
              'product(N,repeat=2)]),\n'
              '\n'
              '    # pooling and concat\n'
              '\n'
              '    (ForAll([kx, ky, sx, sy, pad, x,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3707,
         lineno=371,
         tokens=4,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# pooling and concat')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3708,
         lineno=373,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' y], concat_0(1, pool2d_avg_0(kx, ky, sx, sy, pad, x), '
              'pool2d_avg_0(kx, ky, sx, sy, pad, y)) == pool2d_avg_0(kx, ky, '
              'sx, sy, pad, concat_0(1, x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3709,
         lineno=375,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for d1 in D\n'
              '               for d2 in D\n'
              '               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for s1 in product(N, repeat=4)\n'
              '               for s2 in product(N, repeat=4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3710,
         lineno=382,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (all(s1[i] == s2[i] or i == 1 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '     ]),\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3711,
         lineno=386,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    (ForAll([kx, ky, sx, sy, pad, x, y], concat_0(0, '
              'pool2d_max_0(kx, ky, sx, sy, pad, x), pool2d_max_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_max_0(kx, ky, sx, sy, pad, concat_0(0, '
              'x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3712,
         lineno=389,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for d1 in D\n'
              '               for d2 in D\n'
              '               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for s1 in product(N, repeat=4)\n'
              '               for s2 in product(N, repeat=4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3713,
         lineno=396,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (all(s1[i] == s2[i] or i == 0 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '     ]),\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3714,
         lineno=400,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    (ForAll([kx, ky, sx, sy, pad, x, y], concat_0(1, '
              'pool2d_max_0(kx, ky, sx, sy, pad, x), pool2d_max_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_max_0(kx, ky, sx, sy, pad, concat_0(1, '
              'x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3715,
         lineno=403,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for d1 in D\n'
              '               for d2 in D\n'
              '               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for s1 in product(N, repeat=4)\n'
              '               for s2 in product(N, repeat=4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3716,
         lineno=410,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (all(s1[i] == s2[i] or i == 1 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '  ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3717,
         lineno=413,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='   ]),\n'
              '\n'
              '    # property of const_pool\n'
              '    (ForAll([sx, sy, pad, x, kx, ky], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, const_pool_0(kx, ky)) == pool2d_avg_0(kx, ky, '
              'sx, sy, pad, x)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), d1, d2)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3718,
         lineno=415,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# property of const_pool')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3719,
         lineno=418,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '               for n,c,h,w in product(N,repeat=4)\n'
              '               for d1 in D\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3720,
         lineno=423,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # conv2d and const_iconv\n'
              '    (ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, x, const_iconv_0(kx, ky)) == x),\n'
              '     lambda : [(d1, d2, (n,c,h,w))\n'
              '               for d1 in D\n'
              '               for d2 in D\n'
              '               for n,c,h,w in product(N,repeat=4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3721,
         lineno=427,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# conv2d and const_iconv')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3722,
         lineno=433,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # matmul and const_imm\n'
              '    (ForAll([x], matmul_0(x, const_imm_0()) == x),\n'
              '     lambda : [((n1,n2),) for n1,n2 in product(N, repeat=2) '
              ']),\n'
              '\n'
              '    # ewmul and const_one\n'
              '    (ForAll([x], ewmul_0(x, const_one_0()) == x),\n'
              '     lambda :[(s,) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # const_i')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3723,
         lineno=436,
         tokens=6,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# matmul and const_imm')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3724,
         lineno=440,
         tokens=6,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ewmul and const_one')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3725,
         lineno=444,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='conv and const_pool\n'
              '    (ForAll([kx, ky], pool2d_avg_0(kx, ky, 1, 1, PD_MODE_SAME, '
              'const_iconv_0(kx, ky)) == const_pool_0(kx, ky)),\n'
              '     None),\n'
              '\n'
              '    # enlarge axioms\n'
              '    (ForAll([sx, sy, act')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3726,
         lineno=444,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# const_iconv and const_pool')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3727,
         lineno=449,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='i, kx, ky, x, y], conv2d_0(sx, sy, PD_MODE_SAME, acti, x, y) == '
              'conv2d_0(sx, sy, PD_MODE_SAME, acti, x, enlarge_0(kx, ky, '
              'y))),\n'
              '     lambda : [(sx, sy, acti, kx, ky, (n,c,h,w), (c1,c,d1,d2))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3728,
         lineno=451,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for sx in [1,2]\n'
              '               for sy in [1,2]\n'
              '               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '               for kx, ky, d1, d2 in product(D, repeat=4)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3729,
         lineno=455,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '     ]),\n'
              '\n'
              '    #(ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, const_iconv_0(kx, ky), conv2d_0(1, 1, '
              'PD_MODE_SAME, AC_MODE_NONE, const_iconv_0(kx, ky), x)) == '
              'enlarge_0(kx, ky, x)),\n'
              '    # None),\n'
              '\n'
              '    #(ForAll([kx, ky, x], enl')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3730,
         lineno=458,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#(ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, const_iconv_0(kx, ky), conv2d_0(1, 1, '
              'PD_MODE_SAME, AC_MODE_NONE, const_iconv_0(kx, ky), x)) == '
              'enlarge_0(kx, ky, x)),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3731,
         lineno=461,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='arge_0(kx, ky, ewmul_0(x, pool2d_max_0(kx, ky, 1, 1, '
              'PD_MODE_SAME, x))) == ewmul_0(enlarge_0(kx, ky, x), '
              'pool2d_max_0(kx, ky, 1, 1, PD_MODE_SAME, enlarge_0(kx, ky, '
              'x)))),\n'
              '    # None),\n'
              '\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewadd_0(x, y)) '
              '== ewadd_0(enlarge_0(kx, ky, x), enlarge_0(kx, k')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3732,
         lineno=461,
         tokens=98,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#(ForAll([kx, ky, x], enlarge_0(kx, ky, ewmul_0(x, '
              'pool2d_max_0(kx, ky, 1, 1, PD_MODE_SAME, x))) == '
              'ewmul_0(enlarge_0(kx, ky, x), pool2d_max_0(kx, ky, 1, 1, '
              'PD_MODE_SAME, enlarge_0(kx, ky, x)))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3733,
         lineno=464,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='y, y))),\n'
              '#     lambda : [(kx, ky, s, s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewmul_0(x, y)) '
              '== ewmul_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),\n'
              '#     lambda : [(kx, ky, s,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3734,
         lineno=464,
         tokens=57,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewadd_0(x, y)) '
              '== ewadd_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3735,
         lineno=465,
         tokens=14,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s, s)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3736,
         lineno=466,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3737,
         lineno=467,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3738,
         lineno=470,
         tokens=57,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewmul_0(x, y)) '
              '== ewmul_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3739,
         lineno=471,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, w], enlarge_0(kx, ky, scalar_mul_0(x, '
              'w)) == scalar_mul_0(enlarge_0(kx, ky, x), w)),\n'
              '#     lambda : [(kx, ky, s, ())\n'
              '#               for kx, ky in product(D,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3740,
         lineno=471,
         tokens=14,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s, s)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3741,
         lineno=472,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3742,
         lineno=473,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3743,
         lineno=476,
         tokens=49,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x, w], enlarge_0(kx, ky, scalar_mul_0(x, '
              'w)) == scalar_mul_0(enlarge_0(kx, ky, x), w)),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3744,
         lineno=477,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s, ())')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3745,
         lineno=478,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(0, x, '
              'y)) == concat_0(0, enlarge_0(kx, ky, x), enlarge_0(kx, ky, '
              'y))),\n'
              '#     lambda : [(kx, ky, s1, s2)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#             ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3746,
         lineno=478,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3747,
         lineno=479,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3748,
         lineno=482,
         tokens=60,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(0, x, '
              'y)) == concat_0(0, enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3749,
         lineno=483,
         tokens=16,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s1, s2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3750,
         lineno=484,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3751,
         lineno=485,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for s1 in product(N, repeat=4)\n'
              '#               for s2 in product(N, repeat=4)\n'
              '#               if all(s1[i] == s2[i] or i == 0 for i in '
              'range(4))\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(1, x, '
              'y)) == concat_0(1, enlarge_0(kx, ky, x), enlarge_0(kx, ky, '
              'y))),\n'
              '#     lam')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3752,
         lineno=485,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s1 in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3753,
         lineno=486,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s2 in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3754,
         lineno=487,
         tokens=25,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               if all(s1[i] == s2[i] or i == 0 for i in '
              'range(4))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3755,
         lineno=490,
         tokens=60,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(1, x, '
              'y)) == concat_0(1, enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3756,
         lineno=491,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='bda : [(kx, ky, s1, s2)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s1 in product(N, repeat=4)\n'
              '#               for s2 in product(N, repeat=4)\n'
              '#               if all(s1[i] == s2[i] or i == 1 for i in '
              'range(4))\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x], enlarge_0(kx, ky, rel')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3757,
         lineno=491,
         tokens=16,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s1, s2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3758,
         lineno=492,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3759,
         lineno=493,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s1 in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3760,
         lineno=494,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s2 in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3761,
         lineno=495,
         tokens=25,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               if all(s1[i] == s2[i] or i == 1 for i in '
              'range(4))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3762,
         lineno=498,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='u_0(x)) == relu_0(enlarge_0(kx, ky, x))),\n'
              '#     lambda : [(kx, ky, s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '    # concat is associative (wrong axiom - makes many others '
              'redundant)\n'
              '    # (ForAll([ax, x, y, z], concat_0(ax, x,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3763,
         lineno=498,
         tokens=41,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#    (ForAll([kx, ky, x], enlarge_0(kx, ky, relu_0(x)) == '
              'relu_0(enlarge_0(kx, ky, x))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3764,
         lineno=499,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     lambda : [(kx, ky, s)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3765,
         lineno=500,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for kx, ky in product(D, repeat=2)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3766,
         lineno=501,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#               for s in product(N, repeat=4)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3767,
         lineno=504,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# concat is associative (wrong axiom - makes many others '
              'redundant)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3768,
         lineno=505,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' concat_0(ax, y,z)) == concat_0(ax, concat_0(ax, x, y), z)),\n'
              '    #  lambda : [(ax, s1, s2, s3)\n'
              '    #            for dim in [2,3,4]\n'
              '    #            for s1 in product(N, repeat=dim)\n'
              '    #            for s2 in product(N, repeat=dim)\n'
              '    #            for s3 in product(N, repeat=dim)\n'
              '    #        ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3769,
         lineno=505,
         tokens=45,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# (ForAll([ax, x, y, z], concat_0(ax, x, concat_0(ax, y,z)) == '
              'concat_0(ax, concat_0(ax, x, y), z)),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3770,
         lineno=506,
         tokens=16,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#  lambda : [(ax, s1, s2, s3)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3771,
         lineno=507,
         tokens=12,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            for dim in [2,3,4]')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3772,
         lineno=508,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            for s1 in product(N, repeat=dim)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3773,
         lineno=509,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            for s2 in product(N, repeat=dim)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3774,
         lineno=510,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            for s3 in product(N, repeat=dim)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3775,
         lineno=511,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for ax in range(dim)\n'
              '    #            if all(s1[i] == s2[i] == s3[i] or i == ax for '
              'i in range(dim))\n'
              '    #  ]),\n'
              '\n'
              '    # grouped convolution (wrong axiom - caught with N=[1,3])\n'
              '    # (ForAll([sx, sy, pad, acti, x, y, z, w], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), conv2d_0(sx, sy, pad, ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3776,
         lineno=511,
         tokens=8,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            for ax in range(dim)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3777,
         lineno=512,
         tokens=28,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#            if all(s1[i] == s2[i] == s3[i] or i == ax for i in '
              'range(dim))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3778,
         lineno=515,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# grouped convolution (wrong axiom - caught with N=[1,3])')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3779,
         lineno=516,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='acti, z, w)) == conv2d_0(sx, sy, pad, acti, concat_0(1, x, z), '
              'concat_0(0, y, w))),\n'
              '    #  lambda :[(sx, sy, pad, acti, (n,cx,h,w), (c1y,c2,d1,d2), '
              '(n,cz,h,w), (c1w,c2,d1,d2))\n'
              '    #           for sx in [1,2]\n'
              '    #           for sy in [1,2]\n'
              '    #           for pad in [PD_MODE_SAME, PD_MODE_VALID')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3780,
         lineno=516,
         tokens=102,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# (ForAll([sx, sy, pad, acti, x, y, z, w], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), conv2d_0(sx, sy, pad, acti, '
              'z, w)) == conv2d_0(sx, sy, pad, acti, concat_0(1, x, z), '
              'concat_0(0, y, w))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3781,
         lineno=517,
         tokens=50,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#  lambda :[(sx, sy, pad, acti, (n,cx,h,w), (c1y,c2,d1,d2), '
              '(n,cz,h,w), (c1w,c2,d1,d2))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3782,
         lineno=518,
         tokens=10,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for sx in [1,2]')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3783,
         lineno=519,
         tokens=10,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for sy in [1,2]')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3784,
         lineno=520,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=']\n'
              '    #           for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '    #           for n,cx,h,w,c1y,c2,cz,c1w in '
              'product(N,repeat=8)\n'
              '    #           for d1 in D\n'
              '    #           for d2 in D\n'
              '    #           if all([\n'
              '    #                   h >= d1,\n'
              '    #                   w >= d2,\n'
              '    #                  ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3785,
         lineno=520,
         tokens=15,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for pad in [PD_MODE_SAME, PD_MODE_VALID]')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3786,
         lineno=521,
         tokens=16,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for acti in [AC_MODE_NONE, AC_MODE_RELU]')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3787,
         lineno=522,
         tokens=26,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for n,cx,h,w,c1y,c2,cz,c1w in product(N,repeat=8)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3788,
         lineno=523,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for d1 in D')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3789,
         lineno=524,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           for d2 in D')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3790,
         lineno=525,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#           if all([')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3791,
         lineno=526,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   h >= d1,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3792,
         lineno=527,
         tokens=7,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   w >= d2,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3793,
         lineno=528,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' cx % c2 == 0,\n'
              '    #                   cz % c2 == 0,\n'
              '    #                   (cx // c2) > 0 and c1y % (cx // c2) == '
              '0,\n'
              '    #                   (cz // c2) > 0 and c1w % (cz // c2) == '
              '0,\n'
              '    #                   ((cx + cz) // c2) > 0 and (c1w + c1y) % '
              '((cx + cz) // c2) == 0,\n'
              '    #           ])\n'
              '   ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3794,
         lineno=528,
         tokens=10,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   cx % c2 == 0,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3795,
         lineno=529,
         tokens=10,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   cz % c2 == 0,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3796,
         lineno=530,
         tokens=26,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   (cx // c2) > 0 and c1y % (cx // c2) == 0,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3797,
         lineno=531,
         tokens=26,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   (cz // c2) > 0 and c1w % (cz // c2) == 0,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3798,
         lineno=532,
         tokens=38,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#                   ((cx + cz) // c2) > 0 and (c1w + c1y) % '
              '((cx + cz) // c2) == 0,')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3799,
         lineno=534,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' #  ]),\n'
              '\n'
              ']\n'
              '\n'
              '# lemmas are implied by the axioms (which is checked using Z3), '
              'and\n'
              '# then also assumed to help with verification of '
              'transformations\n'
              'lemmas = [\n'
              '    # lemmas about const_imm\n'
              '    transpose_0(const_imm_0()) == const_imm_0(),\n'
              '    ForAll([x], matmul_0(const_imm_0(), x) == x),\n'
              '\n'
              '    # lemm')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3800,
         lineno=538,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# lemmas are implied by the axioms (which is checked using Z3), '
              'and')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3801,
         lineno=539,
         tokens=10,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# then also assumed to help with verification of transformations')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3802,
         lineno=541,
         tokens=6,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# lemmas about const_imm')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3803,
         lineno=545,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='a about pool2d_avg and concat along axis 0\n'
              '    ForAll([kx, ky, sx, sy, pad, x, y], concat_0(0, '
              'pool2d_avg_0(kx, ky, sx, sy, pad, x), pool2d_avg_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_avg_0(kx, ky, sx, sy, pad, concat_0(0, '
              'x, y))),\n'
              '\n'
              '    # other implied properties not used as lemmas for now\n'
              '    # F')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3804,
         lineno=545,
         tokens=13,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# lemma about pool2d_avg and concat along axis 0')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3805,
         lineno=548,
         tokens=11,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# other implied properties not used as lemmas for now')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3806,
         lineno=549,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='orAll([x, y, z], matmul_0(ewadd_0(x, y), z) == '
              'ewadd_0(matmul_0(x, z), matmul_0(y, z))),\n'
              '    # ForAll([x,y], transpose_0(concat_0(1, x, y)) == '
              'concat_0(0, transpose_0(x), transpose_0(y))),\n'
              '    # ForAll([x, y, z], matmul_0(concat_0(0, x, y), z) == '
              'concat_0(0, matmul_0(x, z), matmul_0(y, z))),\n'
              ']\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3807,
         lineno=549,
         tokens=46,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ForAll([x, y, z], matmul_0(ewadd_0(x, y), z) == '
              'ewadd_0(matmul_0(x, z), matmul_0(y, z))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3808,
         lineno=550,
         tokens=37,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ForAll([x,y], transpose_0(concat_0(1, x, y)) == concat_0(0, '
              'transpose_0(x), transpose_0(y))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3809,
         lineno=551,
         tokens=49,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# ForAll([x, y, z], matmul_0(concat_0(0, x, y), z) == '
              'concat_0(0, matmul_0(x, z), matmul_0(y, z))),')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3810,
         lineno=553,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def to_z3(tensor, ops):\n'
              '    if tensor.opId < 0:\n'
              '        # an input tensor\n'
              "        return z3.Const('input_{}'.format(-tensor.opId), T)\n"
              '    else:\n'
              '        op = ops[tensor.opId]\n'
              '        d = operator_data[op.type]\n'
              '        #print(op.type, d)\n'
              '        assert tensor.tsId <= d[3]\n'
              "        f = globals()['{}_{}'.format(d[0], tensor.tsId)]\n"
              '        params = {}\n'
              '        for p in op.para:\n'
              '            params[p.key] = p.value\n'
              '        args = []\n'
              '        for k, rng in d[1]:\n'
              '            v = params[k]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3811,
         lineno=554,
         tokens=120,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='to_z3',
         body='def to_z3(tensor, ops):\n'
              '    if tensor.opId < 0:\n'
              '        # an input tensor\n'
              "        return z3.Const('input_{}'.format(-tensor.opId), T)\n"
              '    else:\n'
              '        op = ops[tensor.opId]\n'
              '        d = operator_data[op.type]\n'
              '        #print(op.type, d)\n'
              '        assert tensor.tsId <= d[3]\n'
              "        f = globals()['{}_{}'.format(d[0], tensor.tsId)]\n"
              '        params = {}\n'
              '        for p in op.para:\n'
              '            params[p.key] = p.value\n'
              '        args = []\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3812,
         lineno=568,
         tokens=78,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='to_z3',
         body='        for k, rng in d[1]:\n'
              '            v = params[k]\n'
              '            if (v not in rng):\n'
              '                print(k, v, rng)\n'
              '                assert False\n'
              '            assert v in rng\n'
              '            assert type(v) is int\n'
              '            args.append(v)\n'
              '        args += [to_z3(x, ops) for x in op.input]\n'
              '        return f(*args)')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3813,
         lineno=570,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            if (v not in rng):\n'
              '                print(k, v, rng)\n'
              '                assert False\n'
              '            assert v in rng\n'
              '            assert type(v) is int\n'
              '            args.append(v)\n'
              '        args += [to_z3(x, ops) for x in op.input]\n'
              '        return f(*args)\n'
              '\n'
              "if __name__ == '__main__':\n"
              '\n'
              '    if len(sys.argv) != 2:\n'
              '        print("Usage:", sys.argv[0], "<graph substitutions '
              'file>")\n'
              '        sys.exit(-1)\n'
              '\n'
              '    import rules_pb2\n'
              '    rules = rules_pb2.RuleCollection()\n'
              '    rules.ParseFromString(open(sys.argv[1], "rb").read())\n'
              '\n'
              '    # print("Axioms:\\n{')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3814,
         lineno=582,
         tokens=5,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='<graph substitutions file>')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3815,
         lineno=585,
         tokens=1,
         depth=3,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3816,
         lineno=589,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='}".format([a for a, b in axioms]))\n'
              '\n'
              '    blacklist = {\n'
              '        # some substitutions that are known to be incorrect and '
              'should be skipped\n'
              "        #'nasnet_subst.pb': [166, 167, 186, 187, 222, 223, 224, "
              '225, 226, 227, 283, 284, 290, 291, 298, 299],\n'
              "        #'gra")

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3817,
         lineno=589,
         tokens=20,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# print("Axioms:\\n{}".format([a for a, b in axioms]))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3818,
         lineno=592,
         tokens=13,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# some substitutions that are known to be incorrect and should '
              'be skipped')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3819,
         lineno=593,
         tokens=55,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="#'nasnet_subst.pb': [166, 167, 186, 187, 222, 223, 224, 225, "
              '226, 227, 283, 284, 290, 291, 298, 299],')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3820,
         lineno=594,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="ph_subst.pb': [178, 179, 387, 405, 429, 443, 444, 485, 486, "
              '487, 488, 489, 490, 548, 549, 555, 556, 563, 564],\n'
              "        #'graph_subst.pb': [201, 202, 209, 247, 259, 264, 265, "
              '316, 527, 528, 529, 532, 573, 584, 585, 586, 607, 627, 628, '
              '670, 671, 672, 673, 674, ')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3821,
         lineno=594,
         tokens=63,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="#'graph_subst.pb': [178, 179, 387, 405, 429, 443, 444, 485, "
              '486, 487, 488, 489, 490, 548, 549, 555, 556, 563, 564],')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3822,
         lineno=595,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='675, 740, 741, 751, 752, 761, 762],\n'
              "        'graph_subst.pb': [202, 209, 254, 255, 260, 307, 308, "
              '518, 536, 560, 580, 581, 620, 621, 622, 623, 624, 625, 681, '
              '682, 688, 689, 695, 696, 697],\n'
              "        'new_graph_subst.pb': [],\n"
              '    }[os.path.basename(sys.argv[1])]\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3823,
         lineno=595,
         tokens=99,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body="#'graph_subst.pb': [201, 202, 209, 247, 259, 264, 265, 316, "
              '527, 528, 529, 532, 573, 584, 585, 586, 607, 627, 628, 670, '
              '671, 672, 673, 674, 675, 740, 741, 751, 752, 761, 762],')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3824,
         lineno=599,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    for i, rule in enumerate(rules.rule):\n'
              '        if i in blacklist:\n'
              '            continue\n'
              '        # print("Verifying rule: {} with {} '
              'outputs\\n".format(rule, len(rule.mappedOutput)))\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3825,
         lineno=603,
         tokens=22,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# print("Verifying rule: {} with {} outputs\\n".format(rule, '
              'len(rule.mappedOutput)))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3826,
         lineno=604,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for output in rule.mappedOutput:\n'
              '            # print("Verifing output: {}".format(output))\n'
              '            src_tensor = rules_pb2.Tensor(opId=output.srcOpId, '
              'tsId=output.srcTsId)\n'
              '            dst_tensor = rules_pb2.Tensor(opId=output.dstOpId, '
              'tsId=output.dstTsId)\n'
              '            src = to_z3(src_tensor, rule.srcOp)\n'
              '            dst = to_z3(dst_tensor, rule.dstOp)\n'
              '            print("Z3 expression:\\n{}\\n".format(src == dst))\n'
              '            s = z3.Solver()\n'
              '            for a, b in axioms:\n'
              '                s.add(a)\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3827,
         lineno=605,
         tokens=12,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# print("Verifing output: {}".format(output))')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3828,
         lineno=610,
         tokens=7,
         depth=12,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Z3 expression:\\n{}\\n')

Fragment(document_cs='a3199e42bd428df2ea84b20cc6f50b39ff1b1f978625049996690a3940f34ced',
         id=3829,
         lineno=614,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for lem in lemmas:\n'
              '                s.add(lem)\n'
              '            s.add(src != dst)\n'
              '            print("Checking... ({})".format(i))\n'
              '            if s.check() == z3.unsat:\n'
              '                print("Proved!")\n'
              '            else:\n'
              '                assert False\n'
              "        print('\\n' + '='*80)\n"
              '    print "Done"\n')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3830,
         lineno=1,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_matmul\n'
              '\n'
              'def attention(input, heads):\n'
              '    d_model = input.shape[1].value\n'
              '    q = make_matmul(input, d_model)\n'
              '    k = make_matmul(input, d_model)\n'
              '    v = make_matmul(input, d_model)\n'
              '    # reshape query, key, value\n'
              '    q = tf.reshape(q, shap')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3831,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3832,
         lineno=1,
         tokens=100,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/bert.py\n'
              '  Functions: attention\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session action add_argument append '
              'argparse args config d_model default discard_iter float32 '
              'global_jit_level graph graph_options heads help input '
              'input_dictionary iterations logits make_matmul matmul numpy '
              'optimizer_options output output_nodes parse_args parser perm '
              'placeholder print print_tensorboard random random_sample range '
              'relu reshape sess shape shared_functions summary tensorflow '
              'time times total transpose type value writer\n')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3833,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3834,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3835,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3836,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3837,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3838,
         lineno=7,
         tokens=127,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='def attention(input, heads):\n'
              '    d_model = input.shape[1].value\n'
              '    q = make_matmul(input, d_model)\n'
              '    k = make_matmul(input, d_model)\n'
              '    v = make_matmul(input, d_model)\n'
              '    # reshape query, key, value\n'
              '    q = tf.reshape(q, shape=(64,16,64))\n'
              '    k = tf.reshape(k, shape=(64,16,64))\n'
              '    v = tf.reshape(v, shape=(64,16,64))\n'
              '    # transpose q, k, v for batched matmul\n'
              '    q = tf.transpose(q, perm=(')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3839,
         lineno=12,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# reshape query, key, value')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3840,
         lineno=13,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e=(64,16,64))\n'
              '    k = tf.reshape(k, shape=(64,16,64))\n'
              '    v = tf.reshape(v, shape=(64,16,64))\n'
              '    # transpose q, k, v for batched matmul\n'
              '    q = tf.transpose(q, perm=(1,0,2))\n'
              '    k = tf.transpose(k, perm=(1,0,2))\n'
              '    v = tf.transpos')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3841,
         lineno=16,
         tokens=12,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# transpose q, k, v for batched matmul')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3842,
         lineno=17,
         tokens=123,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='attention',
         body='1,0,2))\n'
              '    k = tf.transpose(k, perm=(1,0,2))\n'
              '    v = tf.transpose(v, perm=(1,0,2))\n'
              '    logits = tf.matmul(q, k)\n'
              '    output = tf.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = tf.transpose(output, perm=(1,0,2))\n'
              '    output = tf.reshape(output, shape=(64, 1024))\n'
              '    # a final linear layer\n'
              '    output = make_matmul(tf.nn.relu(make_matmul(input, '
              '4*d_model)), d_model)\n'
              '    return output')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3843,
         lineno=19,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e(v, perm=(1,0,2))\n'
              '    logits = tf.matmul(q, k)\n'
              '    output = tf.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = tf.transpose(output, perm=(1,0,2))\n'
              '    output = tf.reshape(output, shape=(64, 1024))\n'
              '    # a final linear layer\n'
              '    output = make_matmul(tf.nn.relu(make_matmul(input, '
              '4*d_model)), d_model)\n'
              '    return output\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3844,
         lineno=22,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# transpose the output back')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3845,
         lineno=25,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# a final linear layer')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3846,
         lineno=30,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(64,1024))\n'
              'input_dic')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3847,
         lineno=30,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Whether to run with TensorFlowXLA optimizations')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3848,
         lineno=31,
         tokens=9,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Name of folder to output the tensorboard information')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3849,
         lineno=32,
         tokens=13,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to average for timing (default 5000)')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3850,
         lineno=33,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='How many iterations to not time during warm up (default 1000)')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3851,
         lineno=37,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tionary = {}\n'
              'input_dictionary[input] = np.random.random_sample((64, 1024))\n'
              't = input\n'
              'for i in range(12):\n'
              '    t = attention(t, 16)\n'
              '\n'
              'output_nodes = [t]\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3852,
         lineno=47,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA ON')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3853,
         lineno=50,
         tokens=8,
         depth=7,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring inference performance with XLA OFF')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3854,
         lineno=52,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n'
              '    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3855,
         lineno=63,
         tokens=65,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(document_cs='a3a087558ed2368ad7bc6d3b81b812c0b91bd820779c816faa65c304957cf608',
         id=3856,
         lineno=66,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Average inference time of the last ')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3857,
         lineno=1,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR ')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3858,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/ops_mkl.cc\n'
              '  Methods: Model::Model Model::copy_memory '
              'Model::measure_oplist_runtime\n'
              '  Using: taso\n'
              '  Usages: Model allocate_memory copy_memory cpu engine '
              'measure_oplist_runtime stream\n')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3859,
         lineno=11,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='CONDITIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'Model::Model()\n'
              ': isTraining(false), print_cost(false)\n'
              '{\n'
              '  global_unique_id = 100;\n'
              '  workSpaceSize = WORK_SPACE_SIZE;\n'
              '  eng = dnnl::engine(dnnl::engine::kind::cpu, 0);\n'
              '  strm = dnnl::stream(eng);\n'
              '  CHECK_N')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3860,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3861,
         lineno=20,
         tokens=259,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::Model',
         body='Model::Model()\n'
              ': isTraining(false), print_cost(false)\n'
              '{\n'
              '  global_unique_id = 100;\n'
              '  workSpaceSize = WORK_SPACE_SIZE;\n'
              '  eng = dnnl::engine(dnnl::engine::kind::cpu, 0);\n'
              '  strm = dnnl::stream(eng);\n'
              '  CHECK_NE(nullptr, workSpace = '
              '(DATATYPE*)malloc(workSpaceSize));\n'
              '  // allocate tensors for measuring performance\n'
              '  CHECK_NE(nullptr, inputPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, biasPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, outputPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, filterPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  // create tensors for batch norm\n'
              '  CHECK_NE(nullptr, scalePtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, runningMean = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, runningVar = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, saveMean = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, saveVar = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '}')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3862,
         lineno=27,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='E(nullptr, workSpace = (DATATYPE*)malloc(workSpaceSize));\n'
              '  // allocate tensors for measuring performance\n'
              '  CHECK_NE(nullptr, inputPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, biasPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, outputPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, filterPtr = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  // create tensors for batch norm\n'
              '  CHECK_NE(nullptr, scale')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3863,
         lineno=34,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Ptr = (DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, runningMean = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, runningVar = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, saveMean = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '  CHECK_NE(nullptr, saveVar = '
              '(DATATYPE*)malloc(MAX_TENSOR_SIZE));\n'
              '}\n'
              '\n'
              'float Model::measure_oplist_runtime(const std::vector<OpBase*>& '
              'opBaseList) {\n'
              '  const int num_runs = 100;\n'
              '  // warmup\n'
              '  for (int times = 0; times < num_runs; times++)\n')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3864,
         lineno=41,
         tokens=161,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_oplist_runtime',
         body='float Model::measure_oplist_runtime(const std::vector<OpBase*>& '
              'opBaseList) {\n'
              '  const int num_runs = 100;\n'
              '  // warmup\n'
              '  for (int times = 0; times < num_runs; times++)\n'
              '    for (size_t i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  // measure runtime\n'
              '  auto beg = microsecond_timer();\n'
              '  for (int times = 0; times < num_runs; times++) {\n'
              '    for (size_t i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '  return (end - beg) / 1.e3 / num_runs;\n'
              '}')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3865,
         lineno=45,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (size_t i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  // measure runtime\n'
              '  auto beg = microsecond_timer();\n'
              '  for (int times = 0; times < num_runs; times++) {\n'
              '    for (size_t i = 0; i < opBaseList.size(); i++)\n'
              '      opBaseList[i]->forward();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '  return (end - beg) / 1.e3 / num_runs;\n'
              '}\n'
              '\n'
              'void* Model::allocate_memory(size_t size, const DATATYPE* '
              'data_initial) {\n'
              '  void* ptr;\n')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3866,
         lineno=59,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (size == 0) {\n'
              '    // Note: Special value for zero-sized tensor\n'
              '    ptr = (void*) 0x1;\n'
              '  } else {\n'
              '    CHECK_NE(nullptr, ptr = malloc(size));\n'
              '  }\n'
              '  if (data_initial != NULL) {\n'
              '    memcpy(ptr, data_initial, size);\n'
              '  }\n'
              '  return ptr;\n'
              '}\n'
              '\n'
              'bool Model::copy_memory(DATATYPE* dst, const DATATYPE* src, '
              'size_t size) {\n'
              '  memcpy(dst, src, size);\n'
              '  return true;\n'
              '}\n')

Fragment(document_cs='a6efb889f25fa6e6f458df43b9def41e1c98742bb19fe372adf5ffe0ecc5bb91',
         id=3867,
         lineno=71,
         tokens=35,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::copy_memory',
         body='bool Model::copy_memory(DATATYPE* dst, const DATATYPE* src, '
              'size_t size) {\n'
              '  memcpy(dst, src, size);\n'
              '  return true;\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3868,
         lineno=1,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the Licen')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3869,
         lineno=1,
         tokens=93,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/conv2d_mkl.cc\n'
              '  Functions: create_net\n'
              '  Methods: Conv2D::forward Conv2D::map Conv2D::unmap '
              'Model::measure_conv2d_cost\n'
              '  Variables: inputMem padH\n'
              '  Using: dnnl taso\n'
              '  Usages: convolution_direct desc dims forward '
              'forward_inference goihw map measure_conv2d_cost primitive_desc '
              'unmap x\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3870,
         lineno=10,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='se is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(Conv2D* conv, DNNLNet& net, eng')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3871,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3872,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3873,
         lineno=21,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ine& eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& filterMem, '
              'memory& biasMem,\n'
              '    void* inputPtr, void* outputPtr, void* filterPtr, void* '
              'biasPtr) {\n'
              '  // dimensions.\n'
              '  int inputC = conv->inputs[0].dim[1];\n'
              '  int outputC = conv->outputs[0].dim[1];\n'
              '  assert(outputC == conv->inputs[1].dim[0]);\n'
              '  int kernelH = conv->inputs[1].dim[2];\n'
              '  int kernelW = conv-')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3874,
         lineno=21,
         tokens=65,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Conv2D* conv, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    memory& inputMem, memory& outputMem, memory& filterMem, '
              'memory& biasMem,\n'
              '    void* inputPtr, void* outputPtr, void* filterPtr, void* '
              'biasPtr)')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3875,
         lineno=21,
         tokens=1045,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Conv2D* conv, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& filterMem, '
              'memory& biasMem,\n'
              '    void* inputPtr, void* outputPtr, void* filterPtr, void* '
              'biasPtr) {\n'
              '  // dimensions.\n'
              '  int inputC = conv->inputs[0].dim[1];\n'
              '  int outputC = conv->outputs[0].dim[1];\n'
              '  assert(outputC == conv->inputs[1].dim[0]);\n'
              '  int kernelH = conv->inputs[1].dim[2];\n'
              '  int kernelW = conv->inputs[1].dim[3];\n'
              '  int groups = inputC / conv->inputs[1].dim[1];\n'
              '  assert(conv->inputs[1].default_layout());\n'
              '  int padH, padW;\n'
              '  conv->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memory::dims inputSize = '
              'memory::dims(conv->inputs[0].dim, conv->inputs[0].dim + '
              'conv->inputs[0].numDim);\n'
              '  const memory::dims outputSize = '
              'memory::dims(conv->outputs[0].dim, conv->outputs[0].dim + '
              'conv->outputs[0].numDim);\n'
              '  const memory::dims filterSize = { groups, outputC / groups, '
              'inputC / groups, kernelH, kernelW };\n'
              '  const memory::dims biasSize = { outputC };\n'
              '  const memory::dims strideSize = { conv->strideH, '
              'conv->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(conv->inputs[0]);\n'
              '  auto outputMemDesc = get_memory_desc(conv->outputs[0]);\n'
              '  auto filterMemDesc = memory::desc(filterSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::goihw);\n'
              '  auto biasMemDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  filterMem = memory(filterMemDesc, eng, filterPtr);\n'
              '  biasMem = memory(biasMemDesc, eng, biasPtr);\n'
              '  // operator primitives.\n'
              '  auto convInputMemDesc = memory::desc(inputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convOutputMemDesc = memory::desc(outputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convFilterMemDesc = memory::desc(filterSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convBiasMemDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, '
              'DNNL_FMT_ANY);\n'
              '  auto convOpDesc = convolution_forward::desc(\n'
              '      prop_kind::forward_inference, '
              'algorithm::convolution_direct,\n'
              '      convInputMemDesc, convFilterMemDesc, convBiasMemDesc, '
              'convOutputMemDesc,\n'
              '      strideSize, paddingSize, paddingSize);\n'
              '  auto convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, eng);\n'
              '  if (conv->activation != AC_MODE_NONE) {\n'
              '    auto convAttr = get_activation_attr(conv->activation);\n'
              '    convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, convAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  auto convInputMem = inputMem;\n'
              '  auto convOutputMem = outputMem;\n'
              '  auto convFilterMem = filterMem;\n'
              '  auto convBiasMem = biasMem;\n'
              '  if (convPrimDesc.src_desc() != inputMem.get_desc()) {\n'
              '    convInputMem = memory(convPrimDesc.src_desc(), eng);\n'
              '    net.push_back({reorder(inputMem, convInputMem),\n'
              '        {{DNNL_ARG_FROM, inputMem}, {DNNL_ARG_TO, '
              'convInputMem}}});\n'
              '  }\n'
              '  if (convPrimDesc.weights_desc() != filterMem.get_desc()) {\n'
              '    convFilterMem = memory(convPrimDesc.weights_desc(), eng);\n'
              '    reorder(filterMem, convFilterMem).execute(strm, filterMem, '
              'convFilterMem);\n'
              '    strm.wait();\n'
              '  }\n'
              '  assert(convPrimDesc.bias_desc() == biasMem.get_desc());\n'
              '  net.push_back({convolution_forward(convPrimDesc),\n'
              '      {{DNNL_ARG_SRC, convInputMem},\n'
              '      {DNNL_ARG_WEIGHTS, convFilterMem},\n'
              '      {DNNL_ARG_BIAS, convBiasMem},\n'
              '      {DNNL_ARG_DST, convOutputMem}}});\n'
              '  if (convPrimDesc.dst_desc() != outputMem.get_desc()) {\n'
              '    convOutputMem = memory(convPrimDesc.dst_desc(), eng);\n'
              '    net.push_back({reorder(convOutputMem, outputMem),\n'
              '        {{DNNL_ARG_FROM, convOutputMem}, {DNNL_ARG_TO, '
              'outputMem}}});\n'
              '  }\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3876,
         lineno=29,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='>inputs[1].dim[3];\n'
              '  int groups = inputC / conv->inputs[1].dim[1];\n'
              '  assert(conv->inputs[1].default_layout());\n'
              '  int padH, padW;\n'
              '  conv->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memory::dims inputSize = '
              'memory::dims(conv->inputs[0].dim, conv->inputs[0].dim + '
              'conv->inputs[0].numDim);\n'
              '  const memory::dims outputSize = '
              'memory::dims(conv->outputs[0].dim, conv->output')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3877,
         lineno=32,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3878,
         lineno=36,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s[0].dim + conv->outputs[0].numDim);\n'
              '  const memory::dims filterSize = { groups, outputC / groups, '
              'inputC / groups, kernelH, kernelW };\n'
              '  const memory::dims biasSize = { outputC };\n'
              '  const memory::dims strideSize = { conv->strideH, '
              'conv->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(conv->inputs[0')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3879,
         lineno=42,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=']);\n'
              '  auto outputMemDesc = get_memory_desc(conv->outputs[0]);\n'
              '  auto filterMemDesc = memory::desc(filterSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::goihw);\n'
              '  auto biasMemDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  filterMem = m')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3880,
         lineno=49,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='emory(filterMemDesc, eng, filterPtr);\n'
              '  biasMem = memory(biasMemDesc, eng, biasPtr);\n'
              '  // operator primitives.\n'
              '  auto convInputMemDesc = memory::desc(inputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convOutputMemDesc = memory::desc(outputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convFilterMemDesc = memory::desc(filterSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convBiasMe')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3881,
         lineno=55,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convOpDesc = convolution_forward::desc(\n'
              '      prop_kind::forward_inference, '
              'algorithm::convolution_direct,\n'
              '      convInputMemDesc, convFilterMemDesc, convBiasMemDesc, '
              'convOutputMemDesc,\n'
              '      strideSize, paddingSize, paddingSize);\n'
              '  auto convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, eng);\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3882,
         lineno=61,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (conv->activation != AC_MODE_NONE) {\n'
              '    auto convAttr = get_activation_attr(conv->activation);\n'
              '    convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, convAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  auto convInputMem = inputMem;\n'
              '  auto convOutputMem = outputMem;\n'
              '  auto convFilterMem = filterMem;\n'
              '  auto convBiasMem = biasMem;\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3883,
         lineno=71,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (convPrimDesc.src_desc() != inputMem.get_desc()) {\n'
              '    convInputMem = memory(convPrimDesc.src_desc(), eng);\n'
              '    net.push_back({reorder(inputMem, convInputMem),\n'
              '        {{DNNL_ARG_FROM, inputMem}, {DNNL_ARG_TO, '
              'convInputMem}}});\n'
              '  }\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3884,
         lineno=76,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (convPrimDesc.weights_desc() != filterMem.get_desc()) {\n'
              '    convFilterMem = memory(convPrimDesc.weights_desc(), eng);\n'
              '    reorder(filterMem, convFilterMem).execute(strm, filterMem, '
              'convFilterMem);\n'
              '    strm.wait();\n'
              '  }\n'
              '  assert(convPrimDesc.bias_desc() == biasMem.get_desc());\n'
              '  net.push_back({convolution_forward(convPrimDesc),\n'
              '      {{DNNL_ARG_SRC, convInputMem},\n'
              '      {DNNL_ARG_WEIGHTS, convFilterMem},\n'
              '      {DNNL_ARG_BIAS, convBiasMem},\n'
              '      {DNNL_ARG_DST, convOutputMem}}});\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3885,
         lineno=87,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (convPrimDesc.dst_desc() != outputMem.get_desc()) {\n'
              '    convOutputMem = memory(convPrimDesc.dst_desc(), eng);\n'
              '    net.push_back({reorder(convOutputMem, outputMem),\n'
              '        {{DNNL_ARG_FROM, convOutputMem}, {DNNL_ARG_TO, '
              'outputMem}}});\n'
              '  }\n'
              '}\n'
              '\n'
              'void Conv2D::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  CHECK_NE(nullptr, biasPtr = malloc(outputs[0].dim[1])')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3886,
         lineno=94,
         tokens=139,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::map',
         body='void Conv2D::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  CHECK_NE(nullptr, biasPtr = malloc(outputs[0].dim[1]));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem, filterMem, biasMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem, filterMem, biasMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr, '
              'inputs[1].data_ptr, biasPtr);\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3887,
         lineno=99,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem, filterMem, biasMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem, filterMem, biasMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr, '
              'inputs[1].data_ptr, biasPtr);\n'
              '}\n'
              '\n'
              'void Conv2D::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  free(biasPtr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '  biasPtr = nullptr;\n'
              '}\n'
              '\n'
              'void Conv2D::forward(bool block)\n'
              '{\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3888,
         lineno=101,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem, filterMem, biasMem;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3889,
         lineno=107,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::unmap',
         body='void Conv2D::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  free(biasPtr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '  biasPtr = nullptr;\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3890,
         lineno=118,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Conv2D::forward',
         body='void Conv2D::forward(bool block)\n'
              '{\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3891,
         lineno=120,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_conv2d_cost(Conv2D* conv)\n'
              '{\n'
              '  memory inputMem, outputMem, filterMem, biasMem;\n'
              '  create_net(conv, net, eng, strm,\n'
              '      inputMem, outputMem, filterMem, biasMem,\n'
              '      inputPtr, outputPtr, filterPtr, biasPtr);\n'
              '  int padH, padW;\n'
              '  conv->get_paddi')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3892,
         lineno=124,
         tokens=428,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_conv2d_cost',
         body='void Model::measure_conv2d_cost(Conv2D* conv)\n'
              '{\n'
              '  memory inputMem, outputMem, filterMem, biasMem;\n'
              '  create_net(conv, net, eng, strm,\n'
              '      inputMem, outputMem, filterMem, biasMem,\n'
              '      inputPtr, outputPtr, filterPtr, biasPtr);\n'
              '  int padH, padW;\n'
              '  conv->get_padding(&padH, &padW);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(filterMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(biasMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  conv->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d %d) cost(%.4lf)\\n",\n'
              '           conv->inputs[0].dim[0], conv->inputs[0].dim[1], '
              'conv->inputs[0].dim[2], conv->inputs[0].dim[3],\n'
              '           conv->inputs[1].dim[0], conv->inputs[1].dim[1], '
              'conv->inputs[1].dim[2], conv->inputs[1].dim[3],\n'
              '           conv->strideH, conv->strideW, padH, padW, '
              'conv->runtime);\n'
              '}')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3893,
         lineno=126,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem, filterMem, biasMem;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3894,
         lineno=130,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3895,
         lineno=131,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ng(&padH, &padW);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(filterMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(biasMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3896,
         lineno=140,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  conv->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3897,
         lineno=152,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d %d) cost(%.4lf)\\n",\n'
              '           conv->inputs[0].dim[0], conv->inputs[0].dim[1], '
              'conv->inputs[0].dim[2], con')

Fragment(document_cs='a763eedf29b6f6b2c12c5da5bf74c60ed3963189161c7858fb0c1a9f920b8b74',
         id=3898,
         lineno=154,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='v->inputs[0].dim[3],\n'
              '           conv->inputs[1].dim[0], conv->inputs[1].dim[1], '
              'conv->inputs[1].dim[2], conv->inputs[1].dim[3],\n'
              '           conv->strideH, conv->strideW, padH, padW, '
              'conv->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3899,
         lineno=1,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='from itertools import chain, product\n'
              'import datetime\n'
              'from multiprocessing.pool import Pool, cpu_count\n'
              '\n'
              'import z3\n'
              '\n'
              'import verify\n'
              'from verify import P, T\n'
              'from verify import (\n'
              '    AC_MODE_NONE,\n'
              '    AC_MODE_SIGMOID,\n'
              '    AC_MODE_RELU,\n'
              '    AC_MODE_TANH,\n'
              '    PD_MODE_SAME,\n'
              '    PD_MODE_VALID\n'
              ')\n'
              '\n'
              '\n'
              'now = datetime.datetime.now\n'
              '\n'
              '\n'
              'def get_id(x):\n'
              '    return z3.Z3_get_ast_id(x.ctx_ref(), x.as_ast())\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3900,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3901,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3902,
         lineno=1,
         tokens=322,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /verify/validate_axioms.py\n'
              '  Functions: _shape body_to_function check_axiom concat_0 '
              'const_iconv_0 const_imm_0 const_one_0 const_pool_0 conv2d_0 '
              'enlarge_0 eq ewadd_0 ewmul_0 get_id matmul_0 minimize_core '
              'minimize_core_aux2 pool2d_avg_0 pool2d_max_0 print_function '
              'relu_0 require scalar_mul_0 split_0 split_1 transpose_0 z3max\n'
              '  Classes: BadShapeError MagicConst Tensor\n'
              '  Methods: __getitem__ __init__ __setitem__ _ones _tensor '
              '_zeros convert function tensor to_tensor zeros\n'
              '  Variables and usages: A AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH And B Bool BoolVal C Const '
              'Exception Function I If Implies Not P PD_MODE_SAME '
              'PD_MODE_VALID Pool Real RealSort RealVal S Solver T '
              'Z3_get_ast_id _relu _to_tensor acti append apply_async as_ast '
              'as_long axioms body callback chain check claim classmethod '
              'close core cpu_count ctx_ref data datetime decl enumerate flags '
              'format func get_var_index globals group group_idx is_app '
              'is_forall is_int_value is_sat is_var itertools join lemmas '
              'middle model multiprocessing n_proved n_skipped name new_core '
              'num_args num_vars object pool posH posW prefix print product '
              'range results reversed shape sort space spaces splits to_assume '
              'totalPadH totalPadW total_combinations tuple type unknown unsat '
              'unsat_core value values var_name var_sort variables verify\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3903,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3904,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3905,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3906,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3907,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3908,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3909,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3910,
         lineno=9,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3911,
         lineno=9,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3912,
         lineno=22,
         tokens=22,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_id',
         body='def get_id(x):\n'
              '    return z3.Z3_get_ast_id(x.ctx_ref(), x.as_ast())')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3913,
         lineno=24,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def minimize_core_aux2(s, core):\n'
              '    mus = []\n'
              '    ids = set()\n'
              '    while core != []:\n'
              '        c = core[0]\n'
              '        new_core = mus + core[1:]\n'
              '        is_sat = s.check(new_core)\n'
              '        if is_sat != z3.unsat:\n'
              '            mus = mus + [c]\n'
              '            ids.add(get_id(c))\n'
              '            core = core[1:]\n'
              '        else:\n'
              '            core = s.unsat_core()\n'
              '            core = [c for c in core if get_id(c) not in ids]\n'
              '    return mus\n'
              '\n'
              'def minimize_core(s):\n'
              '    core = list(s.unsat_core())\n'
              '    core = minimize_core_aux2(s, core)\n'
              '    return core\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3914,
         lineno=25,
         tokens=113,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='minimize_core_aux2',
         body='def minimize_core_aux2(s, core):\n'
              '    mus = []\n'
              '    ids = set()\n'
              '    while core != []:\n'
              '        c = core[0]\n'
              '        new_core = mus + core[1:]\n'
              '        is_sat = s.check(new_core)\n'
              '        if is_sat != z3.unsat:\n'
              '            mus = mus + [c]\n'
              '            ids.add(get_id(c))\n'
              '            core = core[1:]\n'
              '        else:\n'
              '            core = s.unsat_core()\n'
              '            core = [c for c in core if get_id(c) not in ids]\n'
              '    return mus')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3915,
         lineno=41,
         tokens=28,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='minimize_core',
         body='def minimize_core(s):\n'
              '    core = list(s.unsat_core())\n'
              '    core = minimize_core_aux2(s, core)\n'
              '    return core')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3916,
         lineno=45,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def _shape(T):\n'
              '    s = ()\n'
              '    while type(T) is list:\n'
              '        s = s + (len(T),)\n'
              '        T = T[0]\n'
              '    return tuple(s)\n'
              '\n'
              '\n'
              'class Tensor(object):\n'
              '    def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3917,
         lineno=47,
         tokens=39,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='_shape',
         body='def _shape(T):\n'
              '    s = ()\n'
              '    while type(T) is list:\n'
              '        s = s + (len(T),)\n'
              '        T = T[0]\n'
              '    return tuple(s)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3918,
         lineno=55,
         tokens=134,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='Tensor',
         body='class Tensor(object):\n'
              '    def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits\n'
              '\n'
              '    def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3919,
         lineno=56,
         tokens=73,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__init__',
         body='def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3920,
         lineno=65,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x\n'
              '\n'
              '    def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value\n'
              '\n'
              '    @classmethod\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3921,
         lineno=66,
         tokens=53,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__getitem__',
         body='def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3922,
         lineno=73,
         tokens=147,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='Tensor',
         body='\n'
              '    def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value\n'
              '\n'
              '    @classmethod\n'
              '    def zeros(cls, s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))\n'
              '\n'
              '    @classmethod\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3923,
         lineno=74,
         tokens=81,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__setitem__',
         body='def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3924,
         lineno=86,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    def zeros(cls, s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))\n'
              '\n'
              '    @classmethod\n'
              "    def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n'
              '        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3925,
         lineno=86,
         tokens=54,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='zeros',
         body='def zeros(cls, s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3926,
         lineno=88,
         tokens=28,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='_zeros',
         body='def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3927,
         lineno=93,
         tokens=73,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='Tensor',
         body="    def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n'
              '        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3928,
         lineno=93,
         tokens=72,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='tensor',
         body="def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n'
              '        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3929,
         lineno=95,
         tokens=40,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='_tensor',
         body='def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in range(s[0])]")

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3930,
         lineno=98,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'class MagicConst(object):\n'
              '    def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor\n'
              '\n'
              '    def to_tensor(self, s):\n'
              '        return self._to_tensor(s)\n'
              '\n'
              '\n'
              'class BadShapeError(Exception):\n'
              '    pass\n'
              '\n'
              '\n'
              'def require(b):\n'
              '    if not b:\n'
              '        raise BadShapeError()\n'
              '\n'
              '\n'
              '_relu = z3.Function("relu", z3.RealSort(), z3.RealSort())\n'
              '\n'
              '\n'
              'def matmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor((None, B.shape[0]))\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3931,
         lineno=100,
         tokens=42,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='MagicConst',
         body='class MagicConst(object):\n'
              '    def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor\n'
              '\n'
              '    def to_tensor(self, s):\n'
              '        return self._to_tensor(s)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3932,
         lineno=101,
         tokens=19,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='__init__',
         body='def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3933,
         lineno=104,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tensor',
         body='def to_tensor(self, s):\n        return self._to_tensor(s)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3934,
         lineno=108,
         tokens=8,
         depth=1,
         parent_id=None,
         category='class',
         summary=False,
         name='BadShapeError',
         body='class BadShapeError(Exception):\n    pass')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3935,
         lineno=112,
         tokens=15,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='require',
         body='def require(b):\n    if not b:\n        raise BadShapeError()')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3936,
         lineno=120,
         tokens=78,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='matmul_0',
         body='def matmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor((None, B.shape[0]))\n'
              '    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor((A.shape[1], None))\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3937,
         lineno=124,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor((A.shape[1], None))\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    if len(sa) == len(sb) == 2:\n'
              '        require(sa[1] == sb[0])\n'
              '        C = Tensor([[sum(A[i,k] * B[k,j] for k in range(sa[1])) '
              'for j in range(sb[1])] for i in range(sa[0])])\n'
              '        C.splits = (A.splits[0], B.splits[1])\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3938,
         lineno=129,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='matmul_0',
         body='    if len(sa) == len(sb) == 2:\n'
              '        require(sa[1] == sb[0])\n'
              '        C = Tensor([[sum(A[i,k] * B[k,j] for k in range(sa[1])) '
              'for j in range(sb[1])] for i in range(sa[0])])\n'
              '        C.splits = (A.splits[0], B.splits[1])\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3939,
         lineno=133,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif len(sa) == len(sb) == 3:\n'
              '        require(False) # TODO: split matmul into 2D and 3D '
              'operators\n'
              '        require(sa[2] == sb[1])\n'
              '        require(sa[0] == sb[0])\n'
              '        C = Tensor([[[sum(A[n,i,k] * B[n,k,j] for k in '
              'range(sa[2])) for j in range(sb[2])] for i in range(sa[1])] for '
              'n in range(sa[0])])\n'
              '        C.splits = ((), A.splits[1], B.splits[2])\n'
              '    else:\n'
              '        assert False\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3940,
         lineno=133,
         tokens=135,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='matmul_0',
         body='    elif len(sa) == len(sb) == 3:\n'
              '        require(False) # TODO: split matmul into 2D and 3D '
              'operators\n'
              '        require(sa[2] == sb[1])\n'
              '        require(sa[0] == sb[0])\n'
              '        C = Tensor([[[sum(A[n,i,k] * B[n,k,j] for k in '
              'range(sa[2])) for j in range(sb[2])] for i in range(sa[1])] for '
              'n in range(sa[0])])\n'
              '        C.splits = ((), A.splits[1], B.splits[2])\n'
              '    else:\n'
              '        assert False\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3941,
         lineno=134,
         tokens=15,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: split matmul into 2D and 3D operators')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3942,
         lineno=142,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def transpose_0(A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 2)\n'
              '    C = Tensor([[A[i,j] for i in range(sa[0])] for j in '
              'range(sa[1])])\n'
              '    C.splits = (A.splits[1], A.splits[0])\n'
              '    return C\n'
              '\n'
              '\n'
              'def conv2d_0(sx, sy, pad, acti, A, B):\n'
              '    assert acti in [AC_MODE_NONE, AC_MODE_RELU] # TODO: handle '
              'other modes\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3943,
         lineno=144,
         tokens=68,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='transpose_0',
         body='def transpose_0(A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 2)\n'
              '    C = Tensor([[A[i,j] for i in range(sa[0])] for j in '
              'range(sa[1])])\n'
              '    C.splits = (A.splits[1], A.splits[0])\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3944,
         lineno=152,
         tokens=62,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='def conv2d_0(sx, sy, pad, acti, A, B):\n'
              '    assert acti in [AC_MODE_NONE, AC_MODE_RELU] # TODO: handle '
              'other modes\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3945,
         lineno=153,
         tokens=6,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: handle other modes')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3946,
         lineno=156,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if isinstance(B, MagicConst):\n'
              '        B = B.to_tensor((sa[1], 1, None, None))\n'
              '    sb = B.shape\n'
              '    require(len(sa) == len(sb) == 4)\n'
              '    # require(sa[1] == sb[1]) # non-grouped convolution\n'
              '    require(sa[1] % sb[1] == 0) # grouped convolution\n'
              '    group = sa[1] / sb[1]\n'
              '    require(sb[0] % group == 0) # grouped convolution\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3947,
         lineno=156,
         tokens=123,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='    if isinstance(B, MagicConst):\n'
              '        B = B.to_tensor((sa[1], 1, None, None))\n'
              '    sb = B.shape\n'
              '    require(len(sa) == len(sb) == 4)\n'
              '    # require(sa[1] == sb[1]) # non-grouped convolution\n'
              '    require(sa[1] % sb[1] == 0) # grouped convolution\n'
              '    group = sa[1] / sb[1]\n'
              '    require(sb[0] % group == 0) # grouped convolution\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3948,
         lineno=160,
         tokens=16,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# require(sa[1] == sb[1]) # non-grouped convolution')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3949,
         lineno=161,
         tokens=3,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# grouped convolution')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3950,
         lineno=163,
         tokens=3,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# grouped convolution')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3951,
         lineno=165,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n'
              '        if sa[2] % sx == 0:\n'
              '            totalPadH = max(sb[2] - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(sb[2] - (sa[2] % sx), 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3952,
         lineno=165,
         tokens=100,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n'
              '        if sa[2] % sx == 0:\n'
              '            totalPadH = max(sb[2] - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(sb[2] - (sa[2] % sx), 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3953,
         lineno=172,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(sb[3] - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(sb[3] - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3954,
         lineno=172,
         tokens=83,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(sb[3] - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(sb[3] - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3955,
         lineno=178,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - sb[2]) / sx + 1\n'
              '        oy = (sa[3] - sb[3]) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sb[0], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3956,
         lineno=178,
         tokens=105,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - sb[2]) / sx + 1\n'
              '        oy = (sa[3] - sb[3]) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sb[0], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3957,
         lineno=189,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    group_idx = c / (sb[0] / group)\n'
              '                    value = 0\n'
              '                    for cin in range(sb[1]):\n'
              '                        for kh in range(sb[2]):\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3958,
         lineno=189,
         tokens=74,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    group_idx = c / (sb[0] / group)\n'
              '                    value = 0\n'
              '                    for cin in range(sb[1]):\n'
              '                        for kh in range(sb[2]):\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3959,
         lineno=197,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                            for kw in range(sb[3]):\n'
              '                                posH = h * sx + kh - px\n'
              '                                posW = w * sy + kw - py\n'
              '                                assert -px <= posH <= sa[2] + '
              'px, posH\n'
              '                                assert -py <= posW <= sa[3] + '
              'py, (posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3960,
         lineno=197,
         tokens=86,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='                            for kw in range(sb[3]):\n'
              '                                posH = h * sx + kh - px\n'
              '                                posW = w * sy + kw - py\n'
              '                                assert -px <= posH <= sa[2] + '
              'px, posH\n'
              '                                assert -py <= posW <= sa[3] + '
              'py, (posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3961,
         lineno=202,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                                if posH >= 0 and posH < sa[2] '
              'and posW >= 0 and posW < sa[3]:\n'
              '                                    value += '
              'A[n,cin+group_idx*sb[1],posH,posW] * B[c,cin,kh,kw]\n'
              '                    C[n,c,h,w] = value if acti == AC_MODE_NONE '
              'else _relu(value)\n'
              '    C.splits = (A.splits[0], B.splits[0], (), ())\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3962,
         lineno=202,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d_0',
         body='                                if posH >= 0 and posH < sa[2] '
              'and posW >= 0 and posW < sa[3]:\n'
              '                                    value += '
              'A[n,cin+group_idx*sb[1],posH,posW] * B[c,cin,kh,kw]\n'
              '                    C[n,c,h,w] = value if acti == AC_MODE_NONE '
              'else _relu(value)\n'
              '    C.splits = (A.splits[0], B.splits[0], (), ())\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3963,
         lineno=207,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def const_pool_0(kx, ky):\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3964,
         lineno=209,
         tokens=108,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='const_pool_0',
         body='def const_pool_0(kx, ky):\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3965,
         lineno=210,
         tokens=90,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tensor',
         body='def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3966,
         lineno=221,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def const_iconv_0(kx, ky):\n'
              '    assert kx % 2 == 1\n'
              '    assert ky % 2 == 1\n'
              '    middle = (kx // 2, ky // 2)\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)\n'
              '\n'
              '\n'
              'def const_imm_0():\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3967,
         lineno=223,
         tokens=142,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='const_iconv_0',
         body='def const_iconv_0(kx, ky):\n'
              '    assert kx % 2 == 1\n'
              '    assert ky % 2 == 1\n'
              '    middle = (kx // 2, ky // 2)\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3968,
         lineno=227,
         tokens=87,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tensor',
         body='def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3969,
         lineno=240,
         tokens=128,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='const_imm_0',
         body='def const_imm_0():\n'
              '    def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I\n'
              '    return MagicConst(to_tensor)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3970,
         lineno=241,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I\n'
              '    return MagicConst(to_tensor)\n'
              '\n'
              '\n'
              'def const_one_0():\n'
              '    def to_tensor(s):\n'
              '        assert all(x > 0 for x in s)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3971,
         lineno=241,
         tokens=113,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tensor',
         body='def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3972,
         lineno=258,
         tokens=67,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='const_one_0',
         body='def const_one_0():\n'
              '    def to_tensor(s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))\n'
              '    return MagicConst(to_tensor)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3973,
         lineno=259,
         tokens=53,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='to_tensor',
         body='def to_tensor(s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3974,
         lineno=261,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))\n'
              '    return MagicConst(to_tensor)\n'
              '\n'
              '\n'
              'def pool2d_avg_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3975,
         lineno=261,
         tokens=28,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='_ones',
         body='def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3976,
         lineno=267,
         tokens=109,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_avg_0',
         body='def pool2d_avg_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n'
              '    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3977,
         lineno=272,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n'
              '        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3978,
         lineno=275,
         tokens=128,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_avg_0',
         body='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n'
              '        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3979,
         lineno=279,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3980,
         lineno=285,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3981,
         lineno=285,
         tokens=102,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_avg_0',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3982,
         lineno=296,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    value = 0\n'
              '                    for kh in range(kx):\n'
              '                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3983,
         lineno=296,
         tokens=135,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_avg_0',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    value = 0\n'
              '                    for kh in range(kx):\n'
              '                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3984,
         lineno=307,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value += A[n,c,posH,posW]\n'
              '                    C[n,c,h,w] = value / z3.RealVal(kx * ky)\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3985,
         lineno=307,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_avg_0',
         body='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value += A[n,c,posH,posW]\n'
              '                    C[n,c,h,w] = value / z3.RealVal(kx * ky)\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3986,
         lineno=312,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def z3max(x, y):\n'
              '    if x is None:\n'
              '        assert y is not None\n'
              '        return y\n'
              '    elif y is None:\n'
              '        return x\n'
              '    else:\n'
              '        return z3.If(x > y, x, y)\n'
              '\n'
              '\n'
              'def pool2d_max_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3987,
         lineno=314,
         tokens=51,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='z3max',
         body='def z3max(x, y):\n'
              '    if x is None:\n'
              '        assert y is not None\n'
              '        return y\n'
              '    elif y is None:\n'
              '        return x\n'
              '    else:\n'
              '        return z3.If(x > y, x, y)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3988,
         lineno=324,
         tokens=109,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_max_0',
         body='def pool2d_max_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n'
              '    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3989,
         lineno=329,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n'
              '        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3990,
         lineno=332,
         tokens=128,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_max_0',
         body='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n'
              '        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3991,
         lineno=336,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3992,
         lineno=342,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3993,
         lineno=342,
         tokens=102,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_max_0',
         body='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3994,
         lineno=353,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    value = None\n'
              '                    for kh in range(kx):\n'
              '                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3995,
         lineno=353,
         tokens=134,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_max_0',
         body='    for n in range(so[0]):\n'
              '        for c in range(so[1]):\n'
              '            for h in range(so[2]):\n'
              '                for w in range(so[3]):\n'
              '                    value = None\n'
              '                    for kh in range(kx):\n'
              '                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3996,
         lineno=364,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value = z3max(value, '
              'A[n,c,posH,posW])\n'
              '                    C[n,c,h,w] = value\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3997,
         lineno=364,
         tokens=78,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d_max_0',
         body='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value = z3max(value, '
              'A[n,c,posH,posW])\n'
              '                    C[n,c,h,w] = value\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3998,
         lineno=369,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def ewadd_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] + B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=3999,
         lineno=371,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='ewadd_0',
         body='def ewadd_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] + B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4000,
         lineno=381,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def ewmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor(B.shape)\n'
              '    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor(A.shape)\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4001,
         lineno=383,
         tokens=130,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='ewmul_0',
         body='def ewmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor(B.shape)\n'
              '    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor(A.shape)\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4002,
         lineno=399,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def scalar_mul_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sb == ())\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[()]\n'
              '    C.splits = A.splits\n'
              '    return C\n'
              '\n'
              '\n'
              'def relu_0(A):\n'
              '    sa = A.shape\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = _relu(A[ii])\n'
              '    C.splits = A.splits\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4003,
         lineno=401,
         tokens=71,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='scalar_mul_0',
         body='def scalar_mul_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sb == ())\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[()]\n'
              '    C.splits = A.splits\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4004,
         lineno=412,
         tokens=56,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='relu_0',
         body='def relu_0(A):\n'
              '    sa = A.shape\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = _relu(A[ii])\n'
              '    C.splits = A.splits\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4005,
         lineno=419,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def concat_0(d, A,B):\n'
              '    require(A.dim == B.dim and d < A.dim)\n'
              '    require(all(i == d or A.shape[i] == B.shape[i] for i in '
              'range(A.dim)))\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '+ B.shape[i] for i in range(A.dim)))\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4006,
         lineno=421,
         tokens=76,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='concat_0',
         body='def concat_0(d, A,B):\n'
              '    require(A.dim == B.dim and d < A.dim)\n'
              '    require(all(i == d or A.shape[i] == B.shape[i] for i in '
              'range(A.dim)))\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '+ B.shape[i] for i in range(A.dim)))\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4007,
         lineno=425,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for ii in product(*[range(n) for n in C.shape]):\n'
              '        if ii[d] < A.shape[d]:\n'
              '            C[ii] = A[ii]\n'
              '        else:\n'
              '            jj = list(ii)\n'
              '            jj[d] -= A.shape[d]\n'
              '            C[ii] = B[tuple(jj)]\n'
              '    C.splits = tuple(\n'
              '        (A.shape[d], A.splits[d], B.splits[d]) if i == d else\n'
              '        A.splits[i] if A.splits[i]==B.splits[i] else\n'
              '        ()\n'
              '        for i in range(C.dim)\n'
              '    )\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4008,
         lineno=425,
         tokens=125,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='concat_0',
         body='    for ii in product(*[range(n) for n in C.shape]):\n'
              '        if ii[d] < A.shape[d]:\n'
              '            C[ii] = A[ii]\n'
              '        else:\n'
              '            jj = list(ii)\n'
              '            jj[d] -= A.shape[d]\n'
              '            C[ii] = B[tuple(jj)]\n'
              '    C.splits = tuple(\n'
              '        (A.shape[d], A.splits[d], B.splits[d]) if i == d else\n'
              '        A.splits[i] if A.splits[i]==B.splits[i] else\n'
              '        ()\n'
              '        for i in range(C.dim)\n'
              '    )\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4009,
         lineno=439,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def split_0(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else s for i in '
              'range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        C[ii] = A[ii]\n'
              '    C.splits = tuple(A.splits[i] if i != d else l for  i in '
              'range(A.dim))\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4010,
         lineno=441,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='split_0',
         body='def split_0(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else s for i in '
              'range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        C[ii] = A[ii]\n'
              '    C.splits = tuple(A.splits[i] if i != d else l for  i in '
              'range(A.dim))\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4011,
         lineno=450,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def split_1(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '- s for i in range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        jj = list(ii)\n'
              '        jj[d] += s\n'
              '        C[ii] = A[tuple(jj)]\n'
              '    C.splits = tuple(A.splits[i] if i != d else r for  i in '
              'range(A.dim))\n'
              '    return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4012,
         lineno=452,
         tokens=131,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='split_1',
         body='def split_1(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '- s for i in range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        jj = list(ii)\n'
              '        jj[d] += s\n'
              '        C[ii] = A[tuple(jj)]\n'
              '    C.splits = tuple(A.splits[i] if i != d else r for  i in '
              'range(A.dim))\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4013,
         lineno=463,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def enlarge_0(kx, ky, A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    sc = (sa[0], sa[1], max(sa[2], kx), max(sa[3], ky))\n'
              '    C = Tensor.zeros(sc)\n'
              '    dx = (sc[2] - sa[2]) // 2\n'
              '    dy = (sc[3] - sa[3]) // 2\n'
              '    for n in range(sa[0]):\n'
              '        for c in range(sa[1]):\n'
              '            for h in range(sa[2]):\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4014,
         lineno=465,
         tokens=121,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_0',
         body='def enlarge_0(kx, ky, A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    sc = (sa[0], sa[1], max(sa[2], kx), max(sa[3], ky))\n'
              '    C = Tensor.zeros(sc)\n'
              '    dx = (sc[2] - sa[2]) // 2\n'
              '    dy = (sc[3] - sa[3]) // 2\n'
              '    for n in range(sa[0]):\n'
              '        for c in range(sa[1]):\n'
              '            for h in range(sa[2]):\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4015,
         lineno=475,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                for w in range(sa[3]):\n'
              '                    C[n, c, h + dx, w + dy] = A[n, c, h, w]\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ()) # TODO: '
              'compute split tree for other dimensions?\n'
              '    return C\n'
              '\n'
              '\n'
              '# def one():\n'
              '#     C = Tensor.zeros(())\n'
              '#     C[()] = 1\n'
              '#     return C\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4016,
         lineno=475,
         tokens=66,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='enlarge_0',
         body='                for w in range(sa[3]):\n'
              '                    C[n, c, h + dx, w + dy] = A[n, c, h, w]\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ()) # TODO: '
              'compute split tree for other dimensions?\n'
              '    return C')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4017,
         lineno=477,
         tokens=10,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: compute split tree for other dimensions?')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4018,
         lineno=482,
         tokens=8,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#     C = Tensor.zeros(())')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4019,
         lineno=485,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def eq(S,T):\n'
              '    assert S.shape == T.shape, (S.shape, T.shape)\n'
              '    assert S.splits == T.splits, "{} != {}".format(S.splits, '
              'T.splits)\n'
              '    if S == T:\n'
              '        print "syntactic equality detected"\n'
              '        return z3.BoolVal(True)\n'
              '    else:\n'
              '        return z3.And(*[S[ii] == T[ii] for ii in '
              'product(*[range(n) for n in S.shape])])\n'
              '\n'
              '\n'
              'def body_to_function(variables, body):\n'
              "    assert body.decl().name() == '='\n"
              '    assert body.num_args() == 2\n'
              '    t1, t2 = body.arg(0), body.arg(1)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4020,
         lineno=487,
         tokens=98,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='eq',
         body='def eq(S,T):\n'
              '    assert S.shape == T.shape, (S.shape, T.shape)\n'
              '    assert S.splits == T.splits, "{} != {}".format(S.splits, '
              'T.splits)\n'
              '    if S == T:\n'
              '        print "syntactic equality detected"\n'
              '        return z3.BoolVal(True)\n'
              '    else:\n'
              '        return z3.And(*[S[ii] == T[ii] for ii in '
              'product(*[range(n) for n in S.shape])])')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4021,
         lineno=491,
         tokens=5,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='syntactic equality detected')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4022,
         lineno=497,
         tokens=127,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='body_to_function',
         body='def body_to_function(variables, body):\n'
              "    assert body.decl().name() == '='\n"
              '    assert body.num_args() == 2\n'
              '    t1, t2 = body.arg(0), body.arg(1)\n'
              '\n'
              '    def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4023,
         lineno=501,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]\n'
              '\n'
              '    def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, '
              'vs[::-1]))\n'
              '\n'
              '    return function\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4024,
         lineno=502,
         tokens=79,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='convert',
         body='def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4025,
         lineno=510,
         tokens=47,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='body_to_function',
         body='\n'
              '    def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, '
              'vs[::-1]))\n'
              '\n'
              '    return function')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4026,
         lineno=511,
         tokens=42,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='function',
         body='def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, vs[::-1]))')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4027,
         lineno=513,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# TODO: check value types')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4028,
         lineno=517,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def check_axiom(s):\n'
              '    """Based on z3.prove, adapted for multiprocessing by '
              'forking at the right place"""\n'
              '    global func\n'
              '    msg = str(list(s))\n'
              '    try:\n'
              '        vs = tuple(\n'
              '            s[i] if v.sort() == P else\n'
              "            Tensor.tensor(s[i], 't{}'.format(i))\n")

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4029,
         lineno=519,
         tokens=69,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='check_axiom',
         body='def check_axiom(s):\n'
              '    """Based on z3.prove, adapted for multiprocessing by '
              'forking at the right place"""\n'
              '    global func\n'
              '    msg = str(list(s))\n'
              '    try:\n'
              '        vs = tuple(\n'
              '            s[i] if v.sort() == P else\n'
              "            Tensor.tensor(s[i], 't{}'.format(i))\n")

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4030,
         lineno=520,
         tokens=17,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Based on z3.prove, adapted for multiprocessing by forking at '
              'the right place')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4031,
         lineno=527,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for i, v in enumerate(variables)\n'
              '        )\n'
              '        assert tuple(x if type(x) is int else x.shape for x in '
              'vs) == s\n'
              '        claim = func(*vs)\n'
              '        s = z3.Solver()\n'
              '        s.add(_relu(0) == 0) # assume relu(0) = 0\n'
              '        s.add(z3.Not(claim))\n'
              '        r = s.check()\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4032,
         lineno=527,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='check_axiom',
         body='            for i, v in enumerate(variables)\n'
              '        )\n'
              '        assert tuple(x if type(x) is int else x.shape for x in '
              'vs) == s\n'
              '        claim = func(*vs)\n'
              '        s = z3.Solver()\n'
              '        s.add(_relu(0) == 0) # assume relu(0) = 0\n'
              '        s.add(z3.Not(claim))\n'
              '        r = s.check()\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4033,
         lineno=532,
         tokens=9,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# assume relu(0) = 0')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4034,
         lineno=535,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if r == z3.unsat:\n'
              '            return "{} proved".format(msg)\n'
              '        elif r == z3.unknown:\n'
              '            return "{} failed to prove\\n".format(msg)\n'
              '        elif r == z3.sat:\n'
              '            return "{} counterexample\\n{}".format(msg, '
              's.model())\n'
              '        else:\n'
              '            assert False, r\n'
              '    except BadShapeError:\n'
              '        return "{} skipped".format(msg)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4035,
         lineno=535,
         tokens=80,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='check_axiom',
         body='        if r == z3.unsat:\n'
              '            return "{} proved".format(msg)\n'
              '        elif r == z3.unknown:\n'
              '            return "{} failed to prove\\n".format(msg)\n'
              '        elif r == z3.sat:\n'
              '            return "{} counterexample\\n{}".format(msg, '
              's.model())\n'
              '        else:\n'
              '            assert False, r\n'
              '    except BadShapeError:\n'
              '        return "{} skipped".format(msg)')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4036,
         lineno=538,
         tokens=5,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='{} failed to prove\\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4037,
         lineno=540,
         tokens=5,
         depth=11,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='{} counterexample\\n{}')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4038,
         lineno=545,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def print_function(x):\n'
              '    print x\n'
              '\n'
              '\n'
              "if __name__ == '__main__':\n"
              '\n'
              '    if False:\n'
              '        print "Checking that axioms imply lemmas"\n'
              '        axioms = verify.axioms\n'
              '        lemmas = verify.lemmas\n'
              '        to_assume = [a for a, b in axioms]\n'
              '        for i, lem in enumerate(lemmas):\n'
              '            s = z3.Solver()\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4039,
         lineno=547,
         tokens=8,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='print_function',
         body='def print_function(x):\n    print x')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4040,
         lineno=554,
         tokens=7,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Checking that axioms imply lemmas')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4041,
         lineno=560,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for a in to_assume:\n'
              '                s.add(a)\n'
              '            s.add(z3.Not(lem))\n'
              '            print("Checking lemmas[{}]: {}".format(i, lem))\n'
              '            # print(s)\n'
              '            if s.check() == z3.unsat:\n'
              '                print("Proved!")\n'
              '                to_assume.append(lem)\n'
              '            else:\n'
              '                assert False\n'
              "        print 'Done' + '\\n'*2\n"
              '\n'
              '\n'
              '    if False:\n'
              '        print "Checking axiom redundancies"\n'
              '        axioms = verify.axioms\n'
              "        flags = [z3.Bool('f{}'.format(i)) for i in "
              'range(len(axioms))]\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4042,
         lineno=563,
         tokens=7,
         depth=12,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Checking lemmas[{}]: {}')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4043,
         lineno=574,
         tokens=4,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Checking axiom redundancies')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4044,
         lineno=577,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for i, (a,b) in reversed(list(enumerate(axioms))):\n'
              '            s = z3.Solver()\n'
              '            s.set("timeout", 10000)\n'
              '            for j, (aa, bb) in enumerate(axioms):\n'
              '                if i == j:\n'
              '                    continue\n'
              '                s.add(z3.Implies(flags[j], aa))\n'
              '            s.add(z3.Not(a))\n'
              '            print("Checking axiom {}".format(i))\n'
              '            if s.check(flags) == z3.unsat:\n'
              '                print "Redundant!"\n'
              '                print axioms[i][0]\n'
              '                core = minimize_core(s)\n'
              '                print "core: {}".format(core)\n'
              '                print s.check(core)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4045,
         lineno=592,
         tokens=46,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                for x in core:\n'
              '                    j = int(str(x)[1:])\n'
              '                    print j, axioms[j][0]\n'
              '                assert False\n'
              '            else:\n'
              '                pass\n'
              "        print 'Done' + '\\n'*2\n")

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4046,
         lineno=599,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              '    if True:\n'
              '        print "Symbolically checking axioms for small tensors"\n'
              '        axioms = verify.axioms[-7:] #[35:]\n'
              '        total_combinations = 0\n'
              '        print now(), "Checking {} '
              'axioms...".format(len(axioms))\n'
              '        spaces = [b() if b is not None else None for a,b in '
              'axioms]\n'
              '        print now(), "Checking a total of {} '
              'combinations...\\n".format(sum(len(x) if x is not None else 0 '
              'for x in spaces))\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4047,
         lineno=602,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Symbolically checking axioms for small tensors')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4048,
         lineno=605,
         tokens=5,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Checking {} axioms...')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4049,
         lineno=607,
         tokens=8,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Checking a total of {} combinations...\\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4050,
         lineno=608,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        for (a,b), space in zip(axioms, spaces):\n'
              '            if space is None:\n'
              '                continue\n'
              '            print now(), "Checking:\\n{}".format(a)\n'
              '            assert a.is_forall()\n'
              '            variables = [z3.Const(a.var_name(i), a.var_sort(i)) '
              'for i in range(a.num_vars())]\n'
              '            assert all(len(x) == len(variables) for x in '
              'space)\n'
              '            func = body_to_function(variables, a.body())\n'
              '            n_proved = 0\n'
              '            n_skipped = 0\n'
              '            print "checking {} '
              'combinations...".format(len(space))\n'
              '            total_combinations += len(space)\n'
              '            pool = Pool(cpu_count()) # fork after computing '
              'func\n'
              '            results = []\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4051,
         lineno=618,
         tokens=4,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='checking {} combinations...')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4052,
         lineno=620,
         tokens=5,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# fork after computing func')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4053,
         lineno=622,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for s in space:\n'
              '                if False:\n'
              '                    # this is useful for better error '
              'reporting\n'
              '                    st = check_axiom(s)\n'
              '                    print st\n'
              "                    if 'skipped' in st:\n"
              '                        n_skipped += 1\n'
              '                    else:\n'
              '                        n_proved += 1\n'
              '                else:\n'
              '                    '
              'results.append(pool.apply_async(check_axiom, [s], '
              'callback=print_function))\n'
              '            # get all results, in order to raise exceptions if '
              'they occurred\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4054,
         lineno=624,
         tokens=8,
         depth=9,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# this is useful for better error reporting')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4055,
         lineno=633,
         tokens=13,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# get all results, in order to raise exceptions if they occurred')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4056,
         lineno=634,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='            for r in results:\n'
              '                st = r.get(10**10)\n'
              "                if 'skipped' in st:\n"
              '                    n_skipped += 1\n'
              '                else:\n'
              '                    n_proved += 1\n'
              '            pool.close()\n'
              '            pool.join()\n'
              '            print now(), "checked {}, skipped '
              '{}\\n".format(n_proved, n_skipped)\n'
              '        print now(), "Done (total of {} '
              'combinations)".format(total_combinations)\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4057,
         lineno=642,
         tokens=5,
         depth=10,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='checked {}, skipped {}\\n')

Fragment(document_cs='a840dd5607001b1b04f8d27ead0f09e5fdb6fb4caa2fe3ec824f9a0afb2aaa55',
         id=4058,
         lineno=643,
         tokens=7,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Done (total of {} combinations)')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4059,
         lineno=1,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * dist')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4060,
         lineno=1,
         tokens=89,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/enlarge.cc\n'
              '  Functions: key\n'
              '  Methods: Enlarge::Enlarge Enlarge::collect_costs '
              'Enlarge::get_int_parameter Enlarge::~Enlarge '
              'EnlargeKey::EnlargeKey Graph::enlarge '
              'Model::get_or_create_enlarge\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Enlarge EnlargeKey INVALID_OP collect_costs enlarge '
              'get_int_parameter get_or_create_enlarge\n')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4061,
         lineno=10,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ributed under the License is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              '// Enlarge the third and forth dimension of _w1 to')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4062,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4063,
         lineno=19,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' the same size as _w2\n'
              'TensorHandle Graph::enlarge(const TensorHandle _w1,\n'
              '                            const TensorHandle _w2)\n'
              '{\n'
              '  // Currently the weight being enlarged must be 4D:\n'
              '  // Cout, Cin, KerelH, KernelW\n'
              '  assert(_w1->numDim == 4);\n'
              '  assert(_w2->numDim == 4);\n'
              '  assert(_w1->dim[2] <= _w2->dim[2]);\n'
              '  assert(_w1->dim[3] <= _w2->dim[3]')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4064,
         lineno=20,
         tokens=205,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::enlarge',
         body='TensorHandle Graph::enlarge(const TensorHandle _w1,\n'
              '                            const TensorHandle _w2)\n'
              '{\n'
              '  // Currently the weight being enlarged must be 4D:\n'
              '  // Cout, Cin, KerelH, KernelW\n'
              '  assert(_w1->numDim == 4);\n'
              '  assert(_w2->numDim == 4);\n'
              '  assert(_w1->dim[2] <= _w2->dim[2]);\n'
              '  assert(_w1->dim[3] <= _w2->dim[3]);\n'
              '  Op op = model->get_or_create_enlarge(*_w1, *_w2);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_w1->op, op, _w1->idx, 0);\n'
              '  add_edge(_w2->op, op, _w2->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4065,
         lineno=28,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '  Op op = model->get_or_create_enlarge(*_w1, *_w2);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_w1->op, op, _w1->idx, 0);\n'
              '  add_edge(_w2->op, op, _w2->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_enlarge(Tensor _w1, Tensor _w2)\n'
              '{\n'
              '  // Check 1: w1 and w2 must both have 4D\n')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4066,
         lineno=38,
         tokens=223,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_enlarge',
         body='Op Model::get_or_create_enlarge(Tensor _w1, Tensor _w2)\n'
              '{\n'
              '  // Check 1: w1 and w2 must both have 4D\n'
              '  if (_w1.numDim != 4 || _w2.numDim != 4)\n'
              '    return Op::INVALID_OP;\n'
              '  // Check 2: w1 is smaller than w2\n'
              '  if (_w1.dim[2] > _w2.dim[2] || _w1.dim[3] > _w2.dim[3])\n'
              '    return Op::INVALID_OP;\n'
              '  EnlargeKey key(_w1, _w2);\n'
              '  Enlarge* enlargeOp;\n'
              '  if (enlarge.find(key) != enlarge.end()) {\n'
              '    enlargeOp = enlarge[key];\n'
              '  } else {\n'
              '    enlargeOp = new Enlarge(this, _w1, _w2);\n'
              '    measure_enlarge_cost(enlargeOp);\n'
              '    enlarge[key] = enlargeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = enlargeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4067,
         lineno=41,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (_w1.numDim != 4 || _w2.numDim != 4)\n'
              '    return Op::INVALID_OP;\n'
              '  // Check 2: w1 is smaller than w2\n'
              '  if (_w1.dim[2] > _w2.dim[2] || _w1.dim[3] > _w2.dim[3])\n'
              '    return Op::INVALID_OP;\n'
              '  EnlargeKey key(_w1, _w2);\n'
              '  Enlarge* enlargeOp;\n')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4068,
         lineno=46,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_w1, _w2)')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4069,
         lineno=48,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (enlarge.find(key) != enlarge.end()) {\n'
              '    enlargeOp = enlarge[key];\n'
              '  } else {\n'
              '    enlargeOp = new Enlarge(this, _w1, _w2);\n'
              '    measure_enlarge_cost(enlargeOp);\n'
              '    enlarge[key] = enlargeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_un')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4070,
         lineno=55,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4071,
         lineno=56,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ique_id ++;\n'
              '  ret.ptr = enlargeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Enlarge::Enlarge(Model* _model, Tensor _w1, Tensor _w2)\n'
              ': OpBase(_w1, _w2, _model, OP_ENLARGE)\n'
              '{\n'
              '  assert(_w1.numDim == 4);\n'
              '  assert(_w2.numDim == 4);\n'
              '  assert(_w1.dim[2] <= _w2.dim')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4072,
         lineno=61,
         tokens=328,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::Enlarge',
         body='Enlarge::Enlarge(Model* _model, Tensor _w1, Tensor _w2)\n'
              ': OpBase(_w1, _w2, _model, OP_ENLARGE)\n'
              '{\n'
              '  assert(_w1.numDim == 4);\n'
              '  assert(_w2.numDim == 4);\n'
              '  assert(_w1.dim[2] <= _w2.dim[2]);\n'
              '  assert(_w1.dim[3] <= _w2.dim[3]);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _w1.numDim;\n'
              '  outputs[0].dim[0] = _w1.dim[0];\n'
              '  outputs[0].dim[1] = _w1.dim[1];\n'
              '  outputs[0].dim[2] = _w2.dim[2];\n'
              '  outputs[0].dim[3] = _w2.dim[3];\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _w1.split[0];\n'
              '  outputs[0].split[1] = _w1.split[1];\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4073,
         lineno=66,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='[2]);\n'
              '  assert(_w1.dim[3] <= _w2.dim[3]);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _w1.numDim;\n'
              '  outputs[0].dim[0] = _w1.dim[0];\n'
              '  outputs[0].dim[1] = _w1.dim[1];\n'
              '  outputs[0].dim[2] = _w2.dim[2];\n'
              '  outputs[0].dim[3] = _w2.dim[3];\n'
              '  o')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4074,
         lineno=74,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='utputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '  outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '  outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '  // Se')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4075,
         lineno=78,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t SplitInfo\n'
              '  outputs[0].split[0] = _w1.split[0];\n'
              '  outputs[0].split[1] = _w1.split[1];\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Enlarge::~Enlarge(void)\n'
              '{}\n'
              '\n'
              'bool Enlarge::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    //case PM_KERNEL_H:\n'
              '    //  *value = kernelH;\n'
              '    //  return true;\n'
              '    //case PM_KERNEL_W:\n'
              '    //  *value = kernelW;\n'
              '    //  return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Enlarge::collect_costs(')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4076,
         lineno=84,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::~Enlarge',
         body='Enlarge::~Enlarge(void)\n{}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4077,
         lineno=87,
         tokens=85,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::get_int_parameter',
         body='bool Enlarge::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    //case PM_KERNEL_H:\n'
              '    //  *value = kernelH;\n'
              '    //  return true;\n'
              '    //case PM_KERNEL_W:\n'
              '    //  *value = kernelW;\n'
              '    //  return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4078,
         lineno=101,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='float& exe_time, float& flops,\n'
              '                            float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = outputs[0].volume();\n'
              '  int inputSize = inputs[0].volume();\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize;\n'
              '  num_kernels += 1;\n'
              '}\n'
              '\n'
              '// keys are (kernelH, kernelW, _weight)\n'
              'EnlargeKey::EnlargeKey(Tensor _w1, Tensor _w2)\n'
              '{\n'
              '  assert(_w1.numDim == 4);\n'
              '  int idx = 0;\n'
              '  _w1.serialize(keys, idx);\n'
              '  _w2.serialize(keys, idx);\n')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4079,
         lineno=101,
         tokens=83,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Enlarge::collect_costs',
         body='void Enlarge::collect_costs(float& exe_time, float& flops,\n'
              '                            float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = outputs[0].volume();\n'
              '  int inputSize = inputs[0].volume();\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize + outputSize;\n'
              '  num_kernels += 1;\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4080,
         lineno=113,
         tokens=77,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='EnlargeKey::EnlargeKey',
         body='EnlargeKey::EnlargeKey(Tensor _w1, Tensor _w2)\n'
              '{\n'
              '  assert(_w1.numDim == 4);\n'
              '  int idx = 0;\n'
              '  _w1.serialize(keys, idx);\n'
              '  _w2.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='a8dd1f7e79f36fea6b8b7407e15b9e6b904b721626ed652c0bf2c260a47ff809',
         id=4081,
         lineno=119,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4082,
         lineno=1,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='// Generated by the protocol buffer compiler.  DO NOT EDIT!\n'
              '// source: rules.proto\n'
              '\n'
              '#ifndef PROTOBUF_INCLUDED_rules_2eproto\n'
              '#define PROTOBUF_INCLUDED_rules_2eproto\n'
              '\n'
              '#include <string>\n'
              '\n'
              '#include <google/protobuf/stubs/common.h>\n'
              '\n'
              '#if GOOGLE_PROTOBUF_VERSION < 3006001\n'
              '#error This file was generated by a newer version of protoc '
              'which is\n'
              '#error incompatible with your Protocol Buffer headers.  Please '
              'update\n'
              '#error your headers.\n'
              '#endif\n'
              '#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION\n'
              '#error This file was generated by an older version of protoc '
              'which is\n'
              '#error incompatible with your Protocol Buffer headers.  Please\n'
              '#error regenerate this file with a newer ver')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4083,
         lineno=1,
         tokens=907,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/generator/rules.pb.h\n'
              '  Classes: MapOutput MapOutputDefaultTypeInternal Operator '
              'OperatorDefaultTypeInternal Parameter '
              'ParameterDefaultTypeInternal Rule RuleCollection '
              'RuleCollectionDefaultTypeInternal RuleDefaultTypeInternal '
              'Tensor TensorDefaultTypeInternal\n'
              '  Structs: TableStruct\n'
              '  Macros: PROTOBUF_INCLUDED_rules_2eproto '
              'PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto\n'
              '  Functions: AddDescriptors MapOutput Operator Parameter Rule '
              'RuleCollection Tensor swap\n'
              '  Methods: MapOutput::clear_dstopid MapOutput::clear_dsttsid '
              'MapOutput::clear_has_dstopid MapOutput::clear_has_dsttsid '
              'MapOutput::clear_has_srcopid MapOutput::clear_has_srctsid '
              'MapOutput::clear_srcopid MapOutput::clear_srctsid '
              'MapOutput::dstopid MapOutput::dsttsid MapOutput::has_dstopid '
              'MapOutput::has_dsttsid MapOutput::has_srcopid '
              'MapOutput::has_srctsid MapOutput::set_dstopid '
              'MapOutput::set_dsttsid MapOutput::set_has_dstopid '
              'MapOutput::set_has_dsttsid MapOutput::set_has_srcopid '
              'MapOutput::set_has_srctsid MapOutput::set_srcopid '
              'MapOutput::set_srctsid MapOutput::srcopid MapOutput::srctsid '
              'Operator::clear_has_type Operator::clear_input '
              'Operator::clear_para Operator::clear_type Operator::has_type '
              'Operator::input_size Operator::para_size Operator::set_has_type '
              'Operator::set_type Operator::type Parameter::clear_has_key '
              'Parameter::clear_has_value Parameter::clear_key '
              'Parameter::clear_value Parameter::has_key Parameter::has_value '
              'Parameter::key Parameter::set_has_key Parameter::set_has_value '
              'Parameter::set_key Parameter::set_value Parameter::value '
              'Rule::clear_dstop Rule::clear_mappedoutput Rule::clear_srcop '
              'Rule::dstop_size Rule::mappedoutput_size Rule::srcop_size '
              'RuleCollection::clear_rule RuleCollection::rule_size '
              'Tensor::clear_has_opid Tensor::clear_has_tsid '
              'Tensor::clear_opid Tensor::clear_tsid Tensor::has_opid '
              'Tensor::has_tsid Tensor::opid Tensor::set_has_opid '
              'Tensor::set_has_tsid Tensor::set_opid Tensor::set_tsid '
              'Tensor::tsid\n'
              '  Fields: _cached_size_ _has_bits_ _internal_metadata_ dstop_ '
              'dstopid_ dsttsid_ input_ kDstOpFieldNumber kDstOpIdFieldNumber '
              'kDstTsIdFieldNumber kIndexInFileMessages kInputFieldNumber '
              'kKeyFieldNumber kMappedOutputFieldNumber kOpIdFieldNumber '
              'kParaFieldNumber kRuleFieldNumber kSrcOpFieldNumber '
              'kSrcOpIdFieldNumber kSrcTsIdFieldNumber kTsIdFieldNumber '
              'kTypeFieldNumber kValueFieldNumber key_ mappedoutput_ opid_ '
              'para_ rule_ srcop_ srcopid_ srctsid_ tsid_ type_ value_\n'
              '  Variables: _MapOutput_default_instance_ '
              '_Operator_default_instance_ _Parameter_default_instance_ '
              '_RuleCollection_default_instance_ _Rule_default_instance_ '
              '_Tensor_default_instance_\n'
              '  Namespaces: GraphSubst google protobuf '
              'protobuf_rules_2eproto\n'
              '  Usages: add_dstop add_input add_mappedoutput add_para '
              'add_rule add_srcop clear_dstop clear_dstopid clear_dsttsid '
              'clear_has_dstopid clear_has_dsttsid clear_has_key '
              'clear_has_opid clear_has_srcopid clear_has_srctsid '
              'clear_has_tsid clear_has_type clear_has_value clear_input '
              'clear_key clear_mappedoutput clear_opid clear_para clear_rule '
              'clear_srcop clear_srcopid clear_srctsid clear_tsid clear_type '
              'clear_value dstop dstop_size dstopid dsttsid has_dstopid '
              'has_dsttsid has_key has_opid has_srcopid has_srctsid has_tsid '
              'has_type has_value input input_size key mappedoutput '
              'mappedoutput_size move mutable_dstop mutable_input '
              'mutable_mappedoutput mutable_para mutable_rule mutable_srcop '
              'opid para para_size rule rule_size set_dstopid set_dsttsid '
              'set_has_dstopid set_has_dsttsid set_has_key set_has_opid '
              'set_has_srcopid set_has_srctsid set_has_tsid set_has_type '
              'set_has_value set_key set_opid set_srcopid set_srctsid set_tsid '
              'set_type set_value srcop srcop_size srcopid srctsid tsid type '
              'value\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4084,
         lineno=5,
         tokens=11,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='PROTOBUF_INCLUDED_rules_2eproto',
         body='#define PROTOBUF_INCLUDED_rules_2eproto')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4085,
         lineno=19,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sion of protoc.\n'
              '#endif\n'
              '\n'
              '#include <google/protobuf/io/coded_stream.h>\n'
              '#include <google/protobuf/arena.h>\n'
              '#include <google/protobuf/arenastring.h>\n'
              '#include <google/protobuf/generated_message_table_driven.h>\n'
              '#include <google/protobuf/generated_message_util.h>\n'
              '#include <google/protobuf/inlined_string_field.h>\n'
              '#include <google/proto')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4086,
         lineno=28,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='buf/metadata.h>\n'
              '#include <google/protobuf/message.h>\n'
              '#include <google/protobuf/repeated_field.h>  // IWYU pragma: '
              'export\n'
              '#include <google/protobuf/extension_set.h>  // IWYU pragma: '
              'export\n'
              '#include <google/protobuf/unknown_field_set.h>\n'
              '// @@protoc_insertion_point(includes)\n'
              '#define PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto \n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4087,
         lineno=34,
         tokens=14,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto',
         body='#define PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4088,
         lineno=35,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'namespace protobuf_rules_2eproto {\n'
              '// Internal implementation detail -- do not use these members.\n'
              'struct TableStruct {\n'
              '  static const ::google::protobuf::internal::ParseTableField '
              'entries[];\n'
              '  static const '
              '::google::protobuf::internal::AuxillaryParseTableField aux[];\n'
              '  static const ::google::protobuf::internal::ParseTable '
              'schema[6];\n'
              '  static const ::google::protobuf::internal::FieldMetadata '
              'field_metadata[];\n'
              '  static const ::google::protobuf::internal::SerializationTable '
              'serialization_table[];\n'
              '  static const ::google::prot')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4089,
         lineno=36,
         tokens=13,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='protobuf_rules_2eproto',
         body="namespace b'protobuf_rules_2eproto' {...}")

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4090,
         lineno=38,
         tokens=95,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TableStruct',
         body='struct TableStruct {\n'
              '  static const ::google::protobuf::internal::ParseTableField '
              'entries[];\n'
              '  static const '
              '::google::protobuf::internal::AuxillaryParseTableField aux[];\n'
              '  static const ::google::protobuf::internal::ParseTable '
              'schema[6];\n'
              '  static const ::google::protobuf::internal::FieldMetadata '
              'field_metadata[];\n'
              '  static const ::google::protobuf::internal::SerializationTable '
              'serialization_table[];\n'
              '  static const ::google::protobuf::uint32 offsets[];\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4091,
         lineno=44,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='obuf::uint32 offsets[];\n'
              '};\n'
              'void AddDescriptors();\n'
              '}  // namespace protobuf_rules_2eproto\n'
              'namespace GraphSubst {\n'
              'class MapOutput;\n'
              'class MapOutputDefaultTypeInternal;\n'
              'extern MapOutputDefaultTypeInternal '
              '_MapOutput_default_instance_;\n'
              'class Operator;\n'
              'class OperatorDefaultTypeInternal;\n'
              'extern OperatorDefaultTypeInternal '
              '_Operator_default_instance_;\n'
              'class Parameter;\n'
              'class ParameterDefaultTypeInternal;\n'
              'extern ParameterDefaultTypeInternal '
              '_Parameter_default_instance_;\n'
              'class Rule;\n'
              'class RuleDefaultTypeInternal;\n'
              'extern RuleDefaultTyp')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4092,
         lineno=46,
         tokens=3,
         depth=4,
         parent_id=None,
         category='function',
         summary=False,
         name='AddDescriptors',
         body='AddDescriptors()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4093,
         lineno=48,
         tokens=9,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='GraphSubst',
         body="namespace b'GraphSubst' {...}")

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4094,
         lineno=49,
         tokens=3,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='MapOutput',
         body='class MapOutput')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4095,
         lineno=50,
         tokens=6,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='MapOutputDefaultTypeInternal',
         body='class MapOutputDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4096,
         lineno=51,
         tokens=12,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_MapOutput_default_instance_',
         body='extern MapOutputDefaultTypeInternal '
              '_MapOutput_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4097,
         lineno=52,
         tokens=2,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Operator',
         body='class Operator')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4098,
         lineno=53,
         tokens=5,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OperatorDefaultTypeInternal',
         body='class OperatorDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4099,
         lineno=54,
         tokens=10,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Operator_default_instance_',
         body='extern OperatorDefaultTypeInternal _Operator_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4100,
         lineno=55,
         tokens=2,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Parameter',
         body='class Parameter')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4101,
         lineno=56,
         tokens=5,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='ParameterDefaultTypeInternal',
         body='class ParameterDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4102,
         lineno=57,
         tokens=10,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Parameter_default_instance_',
         body='extern ParameterDefaultTypeInternal '
              '_Parameter_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4103,
         lineno=58,
         tokens=2,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Rule',
         body='class Rule')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4104,
         lineno=59,
         tokens=5,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleDefaultTypeInternal',
         body='class RuleDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4105,
         lineno=60,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eInternal _Rule_default_instance_;\n'
              'class RuleCollection;\n'
              'class RuleCollectionDefaultTypeInternal;\n'
              'extern RuleCollectionDefaultTypeInternal '
              '_RuleCollection_default_instance_;\n'
              'class Tensor;\n'
              'class TensorDefaultTypeInternal;\n'
              'extern TensorDefaultTypeInternal _Tensor_default_instance_;\n'
              '}  // namespace GraphSubst\n'
              'namespace google {\n'
              'namespace protobuf {\n'
              'template<> ::GraphSubst::MapOutput* '
              'Arena::CreateMaybeMessage<::GraphSubst::MapOutput>(Arena*);\n'
              'template<> ::GraphSubst::Operator* '
              'Arena::CreateMaybeMessage<::GraphSubst::Operator>(')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4106,
         lineno=60,
         tokens=10,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Rule_default_instance_',
         body='extern RuleDefaultTypeInternal _Rule_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4107,
         lineno=61,
         tokens=3,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleCollection',
         body='class RuleCollection')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4108,
         lineno=62,
         tokens=6,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleCollectionDefaultTypeInternal',
         body='class RuleCollectionDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4109,
         lineno=63,
         tokens=12,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_RuleCollection_default_instance_',
         body='extern RuleCollectionDefaultTypeInternal '
              '_RuleCollection_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4110,
         lineno=64,
         tokens=2,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Tensor',
         body='class Tensor')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4111,
         lineno=65,
         tokens=5,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='TensorDefaultTypeInternal',
         body='class TensorDefaultTypeInternal')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4112,
         lineno=66,
         tokens=10,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='_Tensor_default_instance_',
         body='extern TensorDefaultTypeInternal _Tensor_default_instance_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4113,
         lineno=68,
         tokens=7,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='google',
         body="namespace b'google' {...}")

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4114,
         lineno=69,
         tokens=7,
         depth=3,
         parent_id=None,
         category='namespace',
         summary=False,
         name='protobuf',
         body="namespace b'protobuf' {...}")

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4115,
         lineno=71,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Arena*);\n'
              'template<> ::GraphSubst::Parameter* '
              'Arena::CreateMaybeMessage<::GraphSubst::Parameter>(Arena*);\n'
              'template<> ::GraphSubst::Rule* '
              'Arena::CreateMaybeMessage<::GraphSubst::Rule>(Arena*);\n'
              'template<> ::GraphSubst::RuleCollection* '
              'Arena::CreateMaybeMessage<::GraphSubst::RuleCollection>(Arena*);\n'
              'template<> ::GraphSubst::Tensor* '
              'Arena::CreateMaybeMessage<::GraphSubst::Tensor>(Arena*);\n'
              '}  // namespace protobuf\n'
              '}  // namespace google\n'
              'namespace GraphSubst {\n'
              '\n'
              '// '
              '===================================================================\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4116,
         lineno=78,
         tokens=9,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='GraphSubst',
         body="namespace b'GraphSubst' {...}")

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4117,
         lineno=81,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Parameter : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Parameter) '
              '*/ {\n'
              ' public:\n'
              '  Parameter();\n'
              '  virtual ~Parameter();\n'
              '\n'
              '  Parameter(const Parameter& from);\n'
              '\n'
              '  inline Parameter& operator=(const Parameter& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Parameter(Parameter&& from) noexcept\n'
              '    : Parameter() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Parameter& operator=(Parameter&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4118,
         lineno=82,
         tokens=920,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Parameter',
         body='class Parameter : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Parameter) '
              '*/ {\n'
              ' public:\n'
              '  Parameter();\n'
              '  virtual ~Parameter();\n'
              '\n'
              '  Parameter(const Parameter& from);\n'
              '\n'
              '  inline Parameter& operator=(const Parameter& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Parameter(Parameter&& from) noexcept\n'
              '    : Parameter() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Parameter& operator=(Parameter&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Parameter& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Parameter* internal_default_instance() {\n'
              '    return reinterpret_cast<const Parameter*>(\n'
              '               &_Parameter_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    0;\n'
              '\n'
              '  void Swap(Parameter* other);\n'
              '  friend void swap(Parameter& a, Parameter& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Parameter* New() const final {\n'
              '    return CreateMaybeMessage<Parameter>(NULL);\n'
              '  }\n'
              '\n'
              '  Parameter* New(::google::protobuf::Arena* arena) const final '
              '{\n'
              '    return CreateMaybeMessage<Parameter>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Parameter& from);\n'
              '  void MergeFrom(const Parameter& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Parameter* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 key = 1;\n'
              '  bool has_key() const;\n'
              '  void clear_key();\n'
              '  static const int kKeyFieldNumber = 1;\n'
              '  ::google::protobuf::int32 key() const;\n'
              '  void set_key(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 value = 2;\n'
              '  bool has_value() const;\n'
              '  void clear_value();\n'
              '  static const int kValueFieldNumber = 2;\n'
              '  ::google::protobuf::int32 value() const;\n'
              '  void set_value(::google::protobuf::int32 value);\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.Parameter)\n'
              ' private:\n'
              '  void set_has_key();\n'
              '  void clear_has_key();\n'
              '  void set_has_value();\n'
              '  void clear_has_value();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t RequiredFieldsByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 key_;\n'
              '  ::google::protobuf::int32 value_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4119,
         lineno=84,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Parameter',
         body='Parameter()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4120,
         lineno=87,
         tokens=6,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Parameter',
         body='Parameter(const Parameter& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4121,
         lineno=94,
         tokens=6,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='Parameter',
         body='Parameter(Parameter&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4122,
         lineno=94,
         tokens=24,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Parameter',
         body='Parameter(Parameter&& from) noexcept\n'
              '    : Parameter() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4123,
         lineno=101,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* d')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4124,
         lineno=115,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='escriptor();\n'
              '  static const Parameter& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Parameter* internal_default_instance() {\n'
              '    return reinterpret_cast<const Parameter*>(\n'
              '               &_Parameter_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    0;\n'
              '\n'
              '  void Swap(Parameter* other);\n'
              '  friend void swap(Parameter& a, Parameter& b) {\n'
              '    a.Swap(')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4125,
         lineno=123,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    0;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4126,
         lineno=127,
         tokens=9,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(Parameter& a, Parameter& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4127,
         lineno=127,
         tokens=20,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(Parameter& a, Parameter& b) {\n    a.Swap(&b);\n  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4128,
         lineno=128,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Parameter* New() const final {\n'
              '    return CreateMaybeMessage<Parameter>(NULL);\n'
              '  }\n'
              '\n'
              '  Parameter* New(::google::protobuf::Arena* arena) const final '
              '{\n'
              '    return CreateMaybeMessage<Parameter>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void Co')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4129,
         lineno=142,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='pyFrom(const Parameter& from);\n'
              '  void MergeFrom(const Parameter& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* InternalSerializeWithCachedSizesTo')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4130,
         lineno=152,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Array(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Parameter* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return N')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4131,
         lineno=166,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 key = 1;\n'
              '  bool has_key() const;\n'
              '  void clear_key();\n'
              '  static const int kKeyFieldNumber = 1;\n'
              '  ::google::protobuf::int32 key() const;\n'
              '  void set_key(::google::protobuf::int32 value);\n'
              '\n'
              '  //')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4132,
         lineno=179,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kKeyFieldNumber',
         body='static const int kKeyFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4133,
         lineno=183,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' required int32 value = 2;\n'
              '  bool has_value() const;\n'
              '  void clear_value();\n'
              '  static const int kValueFieldNumber = 2;\n'
              '  ::google::protobuf::int32 value() const;\n'
              '  void set_value(::google::protobuf::int32 value);\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.Parameter)\n'
              ' private:\n'
              '  void set_has_key();\n'
              '  void clear_has_key();\n'
              '  void set_has_value();\n'
              '  void clear_has_value();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t Required')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4134,
         lineno=186,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kValueFieldNumber',
         body='static const int kValueFieldNumber = 2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4135,
         lineno=198,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='FieldsByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 key_;\n'
              '  ::google::protobuf::int32 value_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '-------------------------------------------------------------------\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4136,
         lineno=200,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4137,
         lineno=201,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4138,
         lineno=202,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4139,
         lineno=203,
         tokens=9,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='key_',
         body='::google::protobuf::int32 key_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4140,
         lineno=204,
         tokens=9,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='value_',
         body='::google::protobuf::int32 value_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4141,
         lineno=208,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Tensor : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Tensor) */ '
              '{\n'
              ' public:\n'
              '  Tensor();\n'
              '  virtual ~Tensor();\n'
              '\n'
              '  Tensor(const Tensor& from);\n'
              '\n'
              '  inline Tensor& operator=(const Tensor& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Tensor(Tensor&& from) noexcept\n'
              '    : Tensor() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Tensor& operator=(Tensor&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4142,
         lineno=209,
         tokens=942,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Tensor',
         body='class Tensor : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Tensor) */ '
              '{\n'
              ' public:\n'
              '  Tensor();\n'
              '  virtual ~Tensor();\n'
              '\n'
              '  Tensor(const Tensor& from);\n'
              '\n'
              '  inline Tensor& operator=(const Tensor& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Tensor(Tensor&& from) noexcept\n'
              '    : Tensor() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Tensor& operator=(Tensor&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Tensor& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Tensor* internal_default_instance() {\n'
              '    return reinterpret_cast<const Tensor*>(\n'
              '               &_Tensor_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    1;\n'
              '\n'
              '  void Swap(Tensor* other);\n'
              '  friend void swap(Tensor& a, Tensor& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Tensor* New() const final {\n'
              '    return CreateMaybeMessage<Tensor>(NULL);\n'
              '  }\n'
              '\n'
              '  Tensor* New(::google::protobuf::Arena* arena) const final {\n'
              '    return CreateMaybeMessage<Tensor>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Tensor& from);\n'
              '  void MergeFrom(const Tensor& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Tensor* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 opId = 1;\n'
              '  bool has_opid() const;\n'
              '  void clear_opid();\n'
              '  static const int kOpIdFieldNumber = 1;\n'
              '  ::google::protobuf::int32 opid() const;\n'
              '  void set_opid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 tsId = 2;\n'
              '  bool has_tsid() const;\n'
              '  void clear_tsid();\n'
              '  static const int kTsIdFieldNumber = 2;\n'
              '  ::google::protobuf::int32 tsid() const;\n'
              '  void set_tsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Tensor)\n'
              ' private:\n'
              '  void set_has_opid();\n'
              '  void clear_has_opid();\n'
              '  void set_has_tsid();\n'
              '  void clear_has_tsid();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t RequiredFieldsByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 opid_;\n'
              '  ::google::protobuf::int32 tsid_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4143,
         lineno=211,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4144,
         lineno=214,
         tokens=6,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(const Tensor& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4145,
         lineno=221,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(Tensor&& from) noexcept\n'
              '    : Tensor() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4146,
         lineno=221,
         tokens=7,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='Tensor',
         body='Tensor(Tensor&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4147,
         lineno=228,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descrip')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4148,
         lineno=242,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tor* descriptor();\n'
              '  static const Tensor& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Tensor* internal_default_instance() {\n'
              '    return reinterpret_cast<const Tensor*>(\n'
              '               &_Tensor_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    1;\n'
              '\n'
              '  void Swap(Tensor* other);\n'
              '  friend void swap(Tensor& a, Tensor& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4149,
         lineno=250,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4150,
         lineno=254,
         tokens=10,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(Tensor& a, Tensor& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4151,
         lineno=254,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(Tensor& a, Tensor& b) {\n    a.Swap(&b);\n  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4152,
         lineno=258,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Tensor* New() const final {\n'
              '    return CreateMaybeMessage<Tensor>(NULL);\n'
              '  }\n'
              '\n'
              '  Tensor* New(::google::protobuf::Arena* arena) const final {\n'
              '    return CreateMaybeMessage<Tensor>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Ten')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4153,
         lineno=269,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sor& from);\n'
              '  void MergeFrom(const Tensor& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      boo')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4154,
         lineno=280,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l deterministic, ::google::protobuf::uint8* target) const '
              'final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Tensor* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  pu')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4155,
         lineno=295,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='blic:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 opId = 1;\n'
              '  bool has_opid() const;\n'
              '  void clear_opid();\n'
              '  static const int kOpIdFieldNumber = 1;\n'
              '  ::google::protobuf::int32 opid() const;\n'
              '  void set_opid(::google::protobuf::int32 value);\n'
              '\n'
              '  // r')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4156,
         lineno=306,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kOpIdFieldNumber',
         body='static const int kOpIdFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4157,
         lineno=310,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='equired int32 tsId = 2;\n'
              '  bool has_tsid() const;\n'
              '  void clear_tsid();\n'
              '  static const int kTsIdFieldNumber = 2;\n'
              '  ::google::protobuf::int32 tsid() const;\n'
              '  void set_tsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Tensor)\n'
              ' private:\n'
              '  void set_has_opid();\n'
              '  void clear_has_opid();\n'
              '  void set_has_tsid();\n'
              '  void clear_has_tsid();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t RequiredFields')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4158,
         lineno=313,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kTsIdFieldNumber',
         body='static const int kTsIdFieldNumber = 2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4159,
         lineno=325,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 opid_;\n'
              '  ::google::protobuf::int32 tsid_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '-------------------------------------------------------------------\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4160,
         lineno=327,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4161,
         lineno=328,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4162,
         lineno=329,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4163,
         lineno=330,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='opid_',
         body='::google::protobuf::int32 opid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4164,
         lineno=331,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='tsid_',
         body='::google::protobuf::int32 tsid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4165,
         lineno=335,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Operator : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Operator) '
              '*/ {\n'
              ' public:\n'
              '  Operator();\n'
              '  virtual ~Operator();\n'
              '\n'
              '  Operator(const Operator& from);\n'
              '\n'
              '  inline Operator& operator=(const Operator& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Operator(Operator&& from) noexcept\n'
              '    : Operator() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Operator& operator=(Operator&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4166,
         lineno=336,
         tokens=1106,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Operator',
         body='class Operator : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Operator) '
              '*/ {\n'
              ' public:\n'
              '  Operator();\n'
              '  virtual ~Operator();\n'
              '\n'
              '  Operator(const Operator& from);\n'
              '\n'
              '  inline Operator& operator=(const Operator& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Operator(Operator&& from) noexcept\n'
              '    : Operator() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Operator& operator=(Operator&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Operator& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Operator* internal_default_instance() {\n'
              '    return reinterpret_cast<const Operator*>(\n'
              '               &_Operator_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    2;\n'
              '\n'
              '  void Swap(Operator* other);\n'
              '  friend void swap(Operator& a, Operator& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Operator* New() const final {\n'
              '    return CreateMaybeMessage<Operator>(NULL);\n'
              '  }\n'
              '\n'
              '  Operator* New(::google::protobuf::Arena* arena) const final '
              '{\n'
              '    return CreateMaybeMessage<Operator>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Operator& from);\n'
              '  void MergeFrom(const Operator& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Operator* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  int input_size() const;\n'
              '  void clear_input();\n'
              '  static const int kInputFieldNumber = 2;\n'
              '  ::GraphSubst::Tensor* mutable_input(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor '
              '>*\n'
              '      mutable_input();\n'
              '  const ::GraphSubst::Tensor& input(int index) const;\n'
              '  ::GraphSubst::Tensor* add_input();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Tensor >&\n'
              '      input() const;\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  int para_size() const;\n'
              '  void clear_para();\n'
              '  static const int kParaFieldNumber = 3;\n'
              '  ::GraphSubst::Parameter* mutable_para(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter '
              '>*\n'
              '      mutable_para();\n'
              '  const ::GraphSubst::Parameter& para(int index) const;\n'
              '  ::GraphSubst::Parameter* add_para();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Parameter >&\n'
              '      para() const;\n'
              '\n'
              '  // required int32 type = 1;\n'
              '  bool has_type() const;\n'
              '  void clear_type();\n'
              '  static const int kTypeFieldNumber = 1;\n'
              '  ::google::protobuf::int32 type() const;\n'
              '  void set_type(::google::protobuf::int32 value);\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Operator)\n'
              ' private:\n'
              '  void set_has_type();\n'
              '  void clear_has_type();\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor > '
              'input_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter '
              '> para_;\n'
              '  ::google::protobuf::int32 type_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4167,
         lineno=338,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Operator',
         body='Operator()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4168,
         lineno=341,
         tokens=6,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Operator',
         body='Operator(const Operator& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4169,
         lineno=348,
         tokens=7,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='Operator',
         body='Operator(Operator&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4170,
         lineno=348,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Operator',
         body='Operator(Operator&& from) noexcept\n'
              '    : Operator() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4171,
         lineno=355,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Operator& default_instance();\n'
              '\n'
              '  static void InitAsDefau')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4172,
         lineno=372,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ltInstance();  // FOR INTERNAL USE ONLY\n'
              '  static inline const Operator* internal_default_instance() {\n'
              '    return reinterpret_cast<const Operator*>(\n'
              '               &_Operator_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    2;\n'
              '\n'
              '  void Swap(Operator* other);\n'
              '  friend void swap(Operator& a, Operator& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Operator* New() const final {\n'
              '    return CreateMaybeMessage<Operator>(NULL);\n'
              '  }\n'
              '\n'
              '  ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4173,
         lineno=377,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4174,
         lineno=381,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(Operator& a, Operator& b) {\n    a.Swap(&b);\n  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4175,
         lineno=381,
         tokens=10,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(Operator& a, Operator& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4176,
         lineno=391,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Operator* New(::google::protobuf::Arena* arena) const final {\n'
              '    return CreateMaybeMessage<Operator>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Operator& from);\n'
              '  void MergeFrom(const Operator& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4177,
         lineno=403,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Operator* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4178,
         lineno=416,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' const {\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  int input_size() const;\n'
              '  void clear_input();\n'
              '  static const int kInputFieldNumber = 2;\n'
              '  ::GraphSubst::Tensor* mutable_input(int index);\n'
              '  ::google::protobuf::Repea')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4179,
         lineno=433,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kInputFieldNumber',
         body='static const int kInputFieldNumber = 2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4180,
         lineno=435,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tedPtrField< ::GraphSubst::Tensor >*\n'
              '      mutable_input();\n'
              '  const ::GraphSubst::Tensor& input(int index) const;\n'
              '  ::GraphSubst::Tensor* add_input();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Tensor >&\n'
              '      input() const;\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  int para_size() const;\n'
              '  void clear_para();\n'
              '  static const int kParaFieldNumber = 3;\n'
              '  ::GraphSubst::Parameter* mutable_para(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter '
              '>*\n'
              '      mutable_para()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4181,
         lineno=445,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kParaFieldNumber',
         body='static const int kParaFieldNumber = 3;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4182,
         lineno=448,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '  const ::GraphSubst::Parameter& para(int index) const;\n'
              '  ::GraphSubst::Parameter* add_para();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Parameter >&\n'
              '      para() const;\n'
              '\n'
              '  // required int32 type = 1;\n'
              '  bool has_type() const;\n'
              '  void clear_type();\n'
              '  static const int kTypeFieldNumber = 1;\n'
              '  ::google::protobuf::int32 type() const;\n'
              '  void set_type(::google::protobuf::int32 value);\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Operator)\n'
              ' private:\n'
              '  void set_has_type();\n'
              '  void clear_has_t')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4183,
         lineno=457,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kTypeFieldNumber',
         body='static const int kTypeFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4184,
         lineno=464,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ype();\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor > '
              'input_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter '
              '> para_;\n'
              '  ::google::protobuf::int32 type_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '-------------------------------------------------------------------\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4185,
         lineno=466,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4186,
         lineno=467,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4187,
         lineno=468,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4188,
         lineno=469,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='input_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor > '
              'input_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4189,
         lineno=470,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='para_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter > '
              'para_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4190,
         lineno=471,
         tokens=9,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='type_',
         body='::google::protobuf::int32 type_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4191,
         lineno=475,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class MapOutput : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.MapOutput) '
              '*/ {\n'
              ' public:\n'
              '  MapOutput();\n'
              '  virtual ~MapOutput();\n'
              '\n'
              '  MapOutput(const MapOutput& from);\n'
              '\n'
              '  inline MapOutput& operator=(const MapOutput& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  MapOutput(MapOutput&& from) noexcept\n'
              '    : MapOutput() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline MapOutput& operator=(MapOutput&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4192,
         lineno=476,
         tokens=1180,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='MapOutput',
         body='class MapOutput : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.MapOutput) '
              '*/ {\n'
              ' public:\n'
              '  MapOutput();\n'
              '  virtual ~MapOutput();\n'
              '\n'
              '  MapOutput(const MapOutput& from);\n'
              '\n'
              '  inline MapOutput& operator=(const MapOutput& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  MapOutput(MapOutput&& from) noexcept\n'
              '    : MapOutput() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline MapOutput& operator=(MapOutput&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const MapOutput& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const MapOutput* internal_default_instance() {\n'
              '    return reinterpret_cast<const MapOutput*>(\n'
              '               &_MapOutput_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    3;\n'
              '\n'
              '  void Swap(MapOutput* other);\n'
              '  friend void swap(MapOutput& a, MapOutput& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline MapOutput* New() const final {\n'
              '    return CreateMaybeMessage<MapOutput>(NULL);\n'
              '  }\n'
              '\n'
              '  MapOutput* New(::google::protobuf::Arena* arena) const final '
              '{\n'
              '    return CreateMaybeMessage<MapOutput>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const MapOutput& from);\n'
              '  void MergeFrom(const MapOutput& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(MapOutput* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 srcOpId = 1;\n'
              '  bool has_srcopid() const;\n'
              '  void clear_srcopid();\n'
              '  static const int kSrcOpIdFieldNumber = 1;\n'
              '  ::google::protobuf::int32 srcopid() const;\n'
              '  void set_srcopid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  bool has_dstopid() const;\n'
              '  void clear_dstopid();\n'
              '  static const int kDstOpIdFieldNumber = 2;\n'
              '  ::google::protobuf::int32 dstopid() const;\n'
              '  void set_dstopid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 srcTsId = 3;\n'
              '  bool has_srctsid() const;\n'
              '  void clear_srctsid();\n'
              '  static const int kSrcTsIdFieldNumber = 3;\n'
              '  ::google::protobuf::int32 srctsid() const;\n'
              '  void set_srctsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  bool has_dsttsid() const;\n'
              '  void clear_dsttsid();\n'
              '  static const int kDstTsIdFieldNumber = 4;\n'
              '  ::google::protobuf::int32 dsttsid() const;\n'
              '  void set_dsttsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.MapOutput)\n'
              ' private:\n'
              '  void set_has_srcopid();\n'
              '  void clear_has_srcopid();\n'
              '  void set_has_dstopid();\n'
              '  void clear_has_dstopid();\n'
              '  void set_has_srctsid();\n'
              '  void clear_has_srctsid();\n'
              '  void set_has_dsttsid();\n'
              '  void clear_has_dsttsid();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t RequiredFieldsByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 srcopid_;\n'
              '  ::google::protobuf::int32 dstopid_;\n'
              '  ::google::protobuf::int32 srctsid_;\n'
              '  ::google::protobuf::int32 dsttsid_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4193,
         lineno=478,
         tokens=3,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MapOutput',
         body='MapOutput()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4194,
         lineno=481,
         tokens=8,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MapOutput',
         body='MapOutput(const MapOutput& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4195,
         lineno=488,
         tokens=27,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='MapOutput',
         body='MapOutput(MapOutput&& from) noexcept\n'
              '    : MapOutput() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4196,
         lineno=488,
         tokens=8,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='MapOutput',
         body='MapOutput(MapOutput&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4197,
         lineno=495,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const MapOutput& default_instance();\n'
              '\n'
              '  static void InitAsDefault')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4198,
         lineno=512,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Instance();  // FOR INTERNAL USE ONLY\n'
              '  static inline const MapOutput* internal_default_instance() {\n'
              '    return reinterpret_cast<const MapOutput*>(\n'
              '               &_MapOutput_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    3;\n'
              '\n'
              '  void Swap(MapOutput* other);\n'
              '  friend void swap(MapOutput& a, MapOutput& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline MapOutput* New() const final {\n'
              '    return CreateMaybeMessage<MapOutput>(NULL);\n'
              '  }\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4199,
         lineno=517,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    3;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4200,
         lineno=521,
         tokens=22,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(MapOutput& a, MapOutput& b) {\n    a.Swap(&b);\n  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4201,
         lineno=521,
         tokens=11,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(MapOutput& a, MapOutput& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4202,
         lineno=530,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  MapOutput* New(::google::protobuf::Arena* arena) const final '
              '{\n'
              '    return CreateMaybeMessage<MapOutput>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const MapOutput& from);\n'
              '  void MergeFrom(const MapOutput& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) fi')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4203,
         lineno=543,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nal;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(MapOutput* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtua')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4204,
         lineno=556,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // required int32 srcOpId = 1;\n'
              '  bool has_srcopid() const;\n'
              '  void clear_srcopid();\n'
              '  static const int kSrcOpIdFieldNumber = 1;\n'
              '  ::google::protobuf::int32 srcopid() const;\n'
              '  void set_srcopid(::google::protobuf')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4205,
         lineno=573,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kSrcOpIdFieldNumber',
         body='static const int kSrcOpIdFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4206,
         lineno=575,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::int32 value);\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  bool has_dstopid() const;\n'
              '  void clear_dstopid();\n'
              '  static const int kDstOpIdFieldNumber = 2;\n'
              '  ::google::protobuf::int32 dstopid() const;\n'
              '  void set_dstopid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4207,
         lineno=580,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kDstOpIdFieldNumber',
         body='static const int kDstOpIdFieldNumber = 2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4208,
         lineno=584,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='int32 srcTsId = 3;\n'
              '  bool has_srctsid() const;\n'
              '  void clear_srctsid();\n'
              '  static const int kSrcTsIdFieldNumber = 3;\n'
              '  ::google::protobuf::int32 srctsid() const;\n'
              '  void set_srctsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  bool has_d')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4209,
         lineno=587,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kSrcTsIdFieldNumber',
         body='static const int kSrcTsIdFieldNumber = 3;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4210,
         lineno=592,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sttsid() const;\n'
              '  void clear_dsttsid();\n'
              '  static const int kDstTsIdFieldNumber = 4;\n'
              '  ::google::protobuf::int32 dsttsid() const;\n'
              '  void set_dsttsid(::google::protobuf::int32 value);\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.MapOutput)\n'
              ' private:\n'
              '  ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4211,
         lineno=594,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kDstTsIdFieldNumber',
         body='static const int kDstTsIdFieldNumber = 4;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4212,
         lineno=600,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='void set_has_srcopid();\n'
              '  void clear_has_srcopid();\n'
              '  void set_has_dstopid();\n'
              '  void clear_has_dstopid();\n'
              '  void set_has_srctsid();\n'
              '  void clear_has_srctsid();\n'
              '  void set_has_dsttsid();\n'
              '  void clear_has_dsttsid();\n'
              '\n'
              '  // helper for ByteSizeLong()\n'
              '  size_t Requ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4213,
         lineno=610,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='iredFieldsByteSizeFallback() const;\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::int32 srcopid_;\n'
              '  ::google::protobuf::int32 dstopid_;\n'
              '  ::google::protobuf::int32 srctsid_;\n'
              '  ::google::protobuf::int32 dsttsid_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '-------------------------------------------------------------------\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4214,
         lineno=612,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4215,
         lineno=613,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4216,
         lineno=614,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4217,
         lineno=615,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srcopid_',
         body='::google::protobuf::int32 srcopid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4218,
         lineno=616,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='dstopid_',
         body='::google::protobuf::int32 dstopid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4219,
         lineno=617,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srctsid_',
         body='::google::protobuf::int32 srctsid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4220,
         lineno=618,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='dsttsid_',
         body='::google::protobuf::int32 dsttsid_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4221,
         lineno=622,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class Rule : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Rule) */ '
              '{\n'
              ' public:\n'
              '  Rule();\n'
              '  virtual ~Rule();\n'
              '\n'
              '  Rule(const Rule& from);\n'
              '\n'
              '  inline Rule& operator=(const Rule& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Rule(Rule&& from) noexcept\n'
              '    : Rule() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Rule& operator=(Rule&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4222,
         lineno=623,
         tokens=1203,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='Rule',
         body='class Rule : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.Rule) */ '
              '{\n'
              ' public:\n'
              '  Rule();\n'
              '  virtual ~Rule();\n'
              '\n'
              '  Rule(const Rule& from);\n'
              '\n'
              '  inline Rule& operator=(const Rule& from) {\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  Rule(Rule&& from) noexcept\n'
              '    : Rule() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline Rule& operator=(Rule&& from) noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Rule& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const Rule* internal_default_instance() {\n'
              '    return reinterpret_cast<const Rule*>(\n'
              '               &_Rule_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    4;\n'
              '\n'
              '  void Swap(Rule* other);\n'
              '  friend void swap(Rule& a, Rule& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Rule* New() const final {\n'
              '    return CreateMaybeMessage<Rule>(NULL);\n'
              '  }\n'
              '\n'
              '  Rule* New(::google::protobuf::Arena* arena) const final {\n'
              '    return CreateMaybeMessage<Rule>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Rule& from);\n'
              '  void MergeFrom(const Rule& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Rule* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  int srcop_size() const;\n'
              '  void clear_srcop();\n'
              '  static const int kSrcOpFieldNumber = 1;\n'
              '  ::GraphSubst::Operator* mutable_srcop(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '>*\n'
              '      mutable_srcop();\n'
              '  const ::GraphSubst::Operator& srcop(int index) const;\n'
              '  ::GraphSubst::Operator* add_srcop();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >&\n'
              '      srcop() const;\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  int dstop_size() const;\n'
              '  void clear_dstop();\n'
              '  static const int kDstOpFieldNumber = 2;\n'
              '  ::GraphSubst::Operator* mutable_dstop(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '>*\n'
              '      mutable_dstop();\n'
              '  const ::GraphSubst::Operator& dstop(int index) const;\n'
              '  ::GraphSubst::Operator* add_dstop();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >&\n'
              '      dstop() const;\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  int mappedoutput_size() const;\n'
              '  void clear_mappedoutput();\n'
              '  static const int kMappedOutputFieldNumber = 3;\n'
              '  ::GraphSubst::MapOutput* mutable_mappedoutput(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput '
              '>*\n'
              '      mutable_mappedoutput();\n'
              '  const ::GraphSubst::MapOutput& mappedoutput(int index) '
              'const;\n'
              '  ::GraphSubst::MapOutput* add_mappedoutput();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::MapOutput >&\n'
              '      mappedoutput() const;\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Rule)\n'
              ' private:\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '> srcop_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '> dstop_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput '
              '> mappedoutput_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4223,
         lineno=625,
         tokens=2,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Rule',
         body='Rule()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4224,
         lineno=628,
         tokens=6,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Rule',
         body='Rule(const Rule& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4225,
         lineno=635,
         tokens=25,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='Rule',
         body='Rule(Rule&& from) noexcept\n'
              '    : Rule() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4226,
         lineno=635,
         tokens=7,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='Rule',
         body='Rule(Rule&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4227,
         lineno=642,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const Rule& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4228,
         lineno=659,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  static inline const Rule* internal_default_instance() {\n'
              '    return reinterpret_cast<const Rule*>(\n'
              '               &_Rule_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    4;\n'
              '\n'
              '  void Swap(Rule* other);\n'
              '  friend void swap(Rule& a, Rule& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline Rule* New() const final {\n'
              '    return CreateMaybeMessage<Rule>(NULL);\n'
              '  }\n'
              '\n'
              '  Rule* New(::google::protobuf::Arena* arena) const final {\n'
              '    return CreateMaybeMessage<Rule>(arena);\n'
              '  }\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4229,
         lineno=664,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    4;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4230,
         lineno=668,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(Rule& a, Rule& b) {\n    a.Swap(&b);\n  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4231,
         lineno=668,
         tokens=10,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(Rule& a, Rule& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4232,
         lineno=681,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const Rule& from);\n'
              '  void MergeFrom(const Rule& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* InternalSerializeWithCac')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4233,
         lineno=693,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='hedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(Rule* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types ------------------')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4234,
         lineno=713,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='----------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  int srcop_size() const;\n'
              '  void clear_srcop();\n'
              '  static const int kSrcOpFieldNumber = 1;\n'
              '  ::GraphSubst::Operator* mutable_srcop(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '>*\n'
              '      mutable_srcop();\n'
              '  const ::GraphSubst::Operator& srcop(int index) const;\n'
              '  ::GraphSubst::Operator* add_srcop();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4235,
         lineno=720,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kSrcOpFieldNumber',
         body='static const int kSrcOpFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4236,
         lineno=726,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='&\n'
              '      srcop() const;\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  int dstop_size() const;\n'
              '  void clear_dstop();\n'
              '  static const int kDstOpFieldNumber = 2;\n'
              '  ::GraphSubst::Operator* mutable_dstop(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4237,
         lineno=732,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kDstOpFieldNumber',
         body='static const int kDstOpFieldNumber = 2;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4238,
         lineno=734,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='>*\n'
              '      mutable_dstop();\n'
              '  const ::GraphSubst::Operator& dstop(int index) const;\n'
              '  ::GraphSubst::Operator* add_dstop();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >&\n'
              '      dstop() const;\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  int ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4239,
         lineno=742,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mappedoutput_size() const;\n'
              '  void clear_mappedoutput();\n'
              '  static const int kMappedOutputFieldNumber = 3;\n'
              '  ::GraphSubst::MapOutput* mutable_mappedoutput(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput '
              '>*\n'
              '      mutable_mappedoutput();\n'
              '  const ::GraphSubst::MapOutput& mappedoutput(int index) '
              'const;\n'
              '  ::GraphSubst::MapOutput* add_mappedoutput();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::MapOutput >&\n'
              '      mappedoutput() const;\n'
              '\n'
              '  // @@protoc_insertion_point(class_scope:GraphSubst.Rule)\n'
              ' private:\n'
              '\n'
              '  ::g')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4240,
         lineno=744,
         tokens=12,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kMappedOutputFieldNumber',
         body='static const int kMappedOutputFieldNumber = 3;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4241,
         lineno=756,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='oogle::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '> srcop_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator '
              '> dstop_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput '
              '> mappedoutput_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '-------------------------------------------------------------------\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4242,
         lineno=756,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4243,
         lineno=757,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4244,
         lineno=758,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4245,
         lineno=759,
         tokens=19,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srcop_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator > '
              'srcop_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4246,
         lineno=760,
         tokens=19,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='dstop_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator > '
              'dstop_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4247,
         lineno=761,
         tokens=20,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mappedoutput_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput > '
              'mappedoutput_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4248,
         lineno=765,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class RuleCollection : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.RuleCollection) '
              '*/ {\n'
              ' public:\n'
              '  RuleCollection();\n'
              '  virtual ~RuleCollection();\n'
              '\n'
              '  RuleCollection(const RuleCollection& from);\n'
              '\n'
              '  inline RuleCollection& operator=(const RuleCollection& from) '
              '{\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  RuleCollection(RuleCollection&& from) noexcept\n'
              '    : RuleCollection() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline RuleCollection& operator=(RuleCollection&& from) '
              'noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4249,
         lineno=766,
         tokens=912,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='RuleCollection',
         body='class RuleCollection : public ::google::protobuf::Message /* '
              '@@protoc_insertion_point(class_definition:GraphSubst.RuleCollection) '
              '*/ {\n'
              ' public:\n'
              '  RuleCollection();\n'
              '  virtual ~RuleCollection();\n'
              '\n'
              '  RuleCollection(const RuleCollection& from);\n'
              '\n'
              '  inline RuleCollection& operator=(const RuleCollection& from) '
              '{\n'
              '    CopyFrom(from);\n'
              '    return *this;\n'
              '  }\n'
              '  #if LANG_CXX11\n'
              '  RuleCollection(RuleCollection&& from) noexcept\n'
              '    : RuleCollection() {\n'
              '    *this = ::std::move(from);\n'
              '  }\n'
              '\n'
              '  inline RuleCollection& operator=(RuleCollection&& from) '
              'noexcept {\n'
              '    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {\n'
              '      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const RuleCollection& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInstance();  // FOR INTERNAL USE '
              'ONLY\n'
              '  static inline const RuleCollection* '
              'internal_default_instance() {\n'
              '    return reinterpret_cast<const RuleCollection*>(\n'
              '               &_RuleCollection_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    5;\n'
              '\n'
              '  void Swap(RuleCollection* other);\n'
              '  friend void swap(RuleCollection& a, RuleCollection& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline RuleCollection* New() const final {\n'
              '    return CreateMaybeMessage<RuleCollection>(NULL);\n'
              '  }\n'
              '\n'
              '  RuleCollection* New(::google::protobuf::Arena* arena) const '
              'final {\n'
              '    return CreateMaybeMessage<RuleCollection>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const RuleCollection& from);\n'
              '  void MergeFrom(const RuleCollection& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::protobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(RuleCollection* other);\n'
              '  private:\n'
              '  inline ::google::protobuf::Arena* GetArenaNoVirtual() const '
              '{\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  int rule_size() const;\n'
              '  void clear_rule();\n'
              '  static const int kRuleFieldNumber = 1;\n'
              '  ::GraphSubst::Rule* mutable_rule(int index);\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule >*\n'
              '      mutable_rule();\n'
              '  const ::GraphSubst::Rule& rule(int index) const;\n'
              '  ::GraphSubst::Rule* add_rule();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Rule >&\n'
              '      rule() const;\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)\n'
              ' private:\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule > '
              'rule_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4250,
         lineno=768,
         tokens=3,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='RuleCollection',
         body='RuleCollection()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4251,
         lineno=771,
         tokens=8,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='RuleCollection',
         body='RuleCollection(const RuleCollection& from)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4252,
         lineno=778,
         tokens=28,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='RuleCollection',
         body='RuleCollection(RuleCollection&& from) noexcept\n'
              '    : RuleCollection() {\n'
              '    *this = ::std::move(from);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4253,
         lineno=778,
         tokens=9,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='RuleCollection',
         body='RuleCollection(RuleCollection&& from) noexcept')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4254,
         lineno=785,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (this != &from) InternalSwap(&from);\n'
              '    } else {\n'
              '      CopyFrom(from);\n'
              '    }\n'
              '    return *this;\n'
              '  }\n'
              '  #endif\n'
              '  inline const ::google::protobuf::UnknownFieldSet& '
              'unknown_fields() const {\n'
              '    return _internal_metadata_.unknown_fields();\n'
              '  }\n'
              '  inline ::google::protobuf::UnknownFieldSet* '
              'mutable_unknown_fields() {\n'
              '    return _internal_metadata_.mutable_unknown_fields();\n'
              '  }\n'
              '\n'
              '  static const ::google::protobuf::Descriptor* descriptor();\n'
              '  static const RuleCollection& default_instance();\n'
              '\n'
              '  static void InitAsDefaultInst')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4255,
         lineno=802,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ance();  // FOR INTERNAL USE ONLY\n'
              '  static inline const RuleCollection* '
              'internal_default_instance() {\n'
              '    return reinterpret_cast<const RuleCollection*>(\n'
              '               &_RuleCollection_default_instance_);\n'
              '  }\n'
              '  static constexpr int kIndexInFileMessages =\n'
              '    5;\n'
              '\n'
              '  void Swap(RuleCollection* other);\n'
              '  friend void swap(RuleCollection& a, RuleCollection& b) {\n'
              '    a.Swap(&b);\n'
              '  }\n'
              '\n'
              '  // implements Message '
              '----------------------------------------------\n'
              '\n'
              '  inline RuleCollection* New() const final {\n'
              '    return CreateMaybeMessage<')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4256,
         lineno=807,
         tokens=13,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kIndexInFileMessages',
         body='static constexpr int kIndexInFileMessages =\n    5;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4257,
         lineno=811,
         tokens=23,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='void swap(RuleCollection& a, RuleCollection& b) {\n'
              '    a.Swap(&b);\n'
              '  }')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4258,
         lineno=811,
         tokens=12,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='swap',
         body='swap(RuleCollection& a, RuleCollection& b)')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4259,
         lineno=818,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='RuleCollection>(NULL);\n'
              '  }\n'
              '\n'
              '  RuleCollection* New(::google::protobuf::Arena* arena) const '
              'final {\n'
              '    return CreateMaybeMessage<RuleCollection>(arena);\n'
              '  }\n'
              '  void CopyFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void MergeFrom(const ::google::protobuf::Message& from) '
              'final;\n'
              '  void CopyFrom(const RuleCollection& from);\n'
              '  void MergeFrom(const RuleCollection& from);\n'
              '  void Clear() final;\n'
              '  bool IsInitialized() const final;\n'
              '\n'
              '  size_t ByteSizeLong() const final;\n'
              '  bool MergePartialFromCodedStream(\n'
              '      ::google::pro')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4260,
         lineno=833,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tobuf::io::CodedInputStream* input) final;\n'
              '  void SerializeWithCachedSizes(\n'
              '      ::google::protobuf::io::CodedOutputStream* output) const '
              'final;\n'
              '  ::google::protobuf::uint8* '
              'InternalSerializeWithCachedSizesToArray(\n'
              '      bool deterministic, ::google::protobuf::uint8* target) '
              'const final;\n'
              '  int GetCachedSize() const final { return _cached_size_.Get(); '
              '}\n'
              '\n'
              '  private:\n'
              '  void SharedCtor();\n'
              '  void SharedDtor();\n'
              '  void SetCachedSize(int size) const final;\n'
              '  void InternalSwap(RuleCollection* other);\n'
              '  private:\n'
              '  inline ::google::')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4261,
         lineno=846,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protobuf::Arena* GetArenaNoVirtual() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  inline void* MaybeArenaPtr() const {\n'
              '    return NULL;\n'
              '  }\n'
              '  public:\n'
              '\n'
              '  ::google::protobuf::Metadata GetMetadata() const final;\n'
              '\n'
              '  // nested types '
              '----------------------------------------------------\n'
              '\n'
              '  // accessors '
              '-------------------------------------------------------\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  int rule_size() const;\n'
              '  void clear_rule();\n'
              '  static const int kRuleFieldNumber = 1;\n'
              '  ::GraphSubst::Rule* mutable_rule(int index);\n'
              '  ::google::')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4262,
         lineno=863,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='kRuleFieldNumber',
         body='static const int kRuleFieldNumber = 1;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4263,
         lineno=865,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protobuf::RepeatedPtrField< ::GraphSubst::Rule >*\n'
              '      mutable_rule();\n'
              '  const ::GraphSubst::Rule& rule(int index) const;\n'
              '  ::GraphSubst::Rule* add_rule();\n'
              '  const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Rule >&\n'
              '      rule() const;\n'
              '\n'
              '  // '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)\n'
              ' private:\n'
              '\n'
              '  ::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;\n'
              '  ::google::protobuf::internal::HasBits<1> _has_bits_;\n'
              '  mutable ::google::protobuf::internal::CachedSize '
              '_cached_size_;\n'
              '  ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4264,
         lineno=875,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_internal_metadata_',
         body='::google::protobuf::internal::InternalMetadataWithArena '
              '_internal_metadata_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4265,
         lineno=876,
         tokens=16,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_has_bits_',
         body='::google::protobuf::internal::HasBits<1> _has_bits_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4266,
         lineno=877,
         tokens=14,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='_cached_size_',
         body='mutable ::google::protobuf::internal::CachedSize _cached_size_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4267,
         lineno=878,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule > '
              'rule_;\n'
              '  friend struct ::protobuf_rules_2eproto::TableStruct;\n'
              '};\n'
              '// '
              '===================================================================\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              '#ifdef __GNUC__\n'
              '  #pragma GCC diagnostic push\n'
              '  #pragma GCC diagnostic ignored "-Wstrict-aliasing"\n'
              '#endif  // __GNUC__\n'
              '// Parameter\n'
              '\n'
              '// required int32 key = 1;\n'
              'inline bool Parameter::has_key() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}\n'
              'inline voi')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4268,
         lineno=878,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='rule_',
         body='::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule > '
              'rule_;')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4269,
         lineno=893,
         tokens=31,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::has_key',
         body='inline bool Parameter::has_key() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4270,
         lineno=896,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d Parameter::set_has_key() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}\n'
              'inline void Parameter::clear_has_key() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}\n'
              'inline void Parameter::clear_key() {\n'
              '  key_ = 0;\n'
              '  clear_has_key();\n'
              '}\n'
              'inline ::google::protobuf::int32 Parameter::key() const')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4271,
         lineno=896,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::set_has_key',
         body='inline void Parameter::set_has_key() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4272,
         lineno=899,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::clear_has_key',
         body='inline void Parameter::clear_has_key() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4273,
         lineno=902,
         tokens=21,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::clear_key',
         body='inline void Parameter::clear_key() {\n'
              '  key_ = 0;\n'
              '  clear_has_key();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4274,
         lineno=906,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Parameter.key)\n'
              '  return key_;\n'
              '}\n'
              'inline void Parameter::set_key(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_key();\n'
              '  key_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Parameter.key)\n'
              '}\n'
              '\n'
              '// require')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4275,
         lineno=906,
         tokens=36,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::key',
         body='inline ::google::protobuf::int32 Parameter::key() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Parameter.key)\n'
              '  return key_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4276,
         lineno=910,
         tokens=45,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::set_key',
         body='inline void Parameter::set_key(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_key();\n'
              '  key_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Parameter.key)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4277,
         lineno=916,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d int32 value = 2;\n'
              'inline bool Parameter::has_value() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}\n'
              'inline void Parameter::set_has_value() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}\n'
              'inline void Parameter::clear_has_value() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}\n'
              'i')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4278,
         lineno=917,
         tokens=31,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::has_value',
         body='inline bool Parameter::has_value() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4279,
         lineno=920,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::set_has_value',
         body='inline void Parameter::set_has_value() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4280,
         lineno=923,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::clear_has_value',
         body='inline void Parameter::clear_has_value() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4281,
         lineno=926,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nline void Parameter::clear_value() {\n'
              '  value_ = 0;\n'
              '  clear_has_value();\n'
              '}\n'
              'inline ::google::protobuf::int32 Parameter::value() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Parameter.value)\n'
              '  return value_;\n'
              '}\n'
              'inline void Parameter::set_value(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_value();\n'
              '  value_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Parameter.value)\n'
              '}\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// Tensor\n'
              '\n'
              '// required int32 opId = 1;\n'
              'inline bool Tensor')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4282,
         lineno=926,
         tokens=21,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::clear_value',
         body='inline void Parameter::clear_value() {\n'
              '  value_ = 0;\n'
              '  clear_has_value();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4283,
         lineno=930,
         tokens=36,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::value',
         body='inline ::google::protobuf::int32 Parameter::value() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Parameter.value)\n'
              '  return value_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4284,
         lineno=934,
         tokens=45,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Parameter::set_value',
         body='inline void Parameter::set_value(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_value();\n'
              '  value_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Parameter.value)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4285,
         lineno=945,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::has_opid() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}\n'
              'inline void Tensor::set_has_opid() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}\n'
              'inline void Tensor::clear_has_opid() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}\n'
              'inline void Tensor::clear_opid() {\n'
              '  opid_ = 0;\n'
              '  c')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4286,
         lineno=945,
         tokens=32,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::has_opid',
         body='inline bool Tensor::has_opid() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4287,
         lineno=948,
         tokens=27,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::set_has_opid',
         body='inline void Tensor::set_has_opid() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4288,
         lineno=951,
         tokens=27,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::clear_has_opid',
         body='inline void Tensor::clear_has_opid() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4289,
         lineno=954,
         tokens=24,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::clear_opid',
         body='inline void Tensor::clear_opid() {\n'
              '  opid_ = 0;\n'
              '  clear_has_opid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4290,
         lineno=956,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lear_has_opid();\n'
              '}\n'
              'inline ::google::protobuf::int32 Tensor::opid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Tensor.opId)\n'
              '  return opid_;\n'
              '}\n'
              'inline void Tensor::set_opid(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_opid();\n'
              '  opid_ = value;\n'
              '  // @@')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4291,
         lineno=958,
         tokens=39,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::opid',
         body='inline ::google::protobuf::int32 Tensor::opid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Tensor.opId)\n'
              '  return opid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4292,
         lineno=962,
         tokens=49,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::set_opid',
         body='inline void Tensor::set_opid(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_opid();\n'
              '  opid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Tensor.opId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4293,
         lineno=965,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protoc_insertion_point(field_set:GraphSubst.Tensor.opId)\n'
              '}\n'
              '\n'
              '// required int32 tsId = 2;\n'
              'inline bool Tensor::has_tsid() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}\n'
              'inline void Tensor::set_has_tsid() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}\n'
              'inline void Tensor:')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4294,
         lineno=969,
         tokens=32,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::has_tsid',
         body='inline bool Tensor::has_tsid() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4295,
         lineno=972,
         tokens=27,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::set_has_tsid',
         body='inline void Tensor::set_has_tsid() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4296,
         lineno=975,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=':clear_has_tsid() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}\n'
              'inline void Tensor::clear_tsid() {\n'
              '  tsid_ = 0;\n'
              '  clear_has_tsid();\n'
              '}\n'
              'inline ::google::protobuf::int32 Tensor::tsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Tensor.tsId)\n'
              '  return tsid_;\n'
              '}\n'
              'inline void Tensor::set_tsid(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_tsid();\n'
              '  tsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Tensor.tsId)\n'
              '}\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// Operator\n'
              '\n'
              '// required in')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4297,
         lineno=975,
         tokens=27,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::clear_has_tsid',
         body='inline void Tensor::clear_has_tsid() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4298,
         lineno=978,
         tokens=24,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::clear_tsid',
         body='inline void Tensor::clear_tsid() {\n'
              '  tsid_ = 0;\n'
              '  clear_has_tsid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4299,
         lineno=982,
         tokens=39,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::tsid',
         body='inline ::google::protobuf::int32 Tensor::tsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Tensor.tsId)\n'
              '  return tsid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4300,
         lineno=986,
         tokens=49,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Tensor::set_tsid',
         body='inline void Tensor::set_tsid(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_tsid();\n'
              '  tsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Tensor.tsId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4301,
         lineno=996,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t32 type = 1;\n'
              'inline bool Operator::has_type() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}\n'
              'inline void Operator::set_has_type() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}\n'
              'inline void Operator::clear_has_type() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}\n'
              'inline void ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4302,
         lineno=997,
         tokens=31,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::has_type',
         body='inline bool Operator::has_type() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4303,
         lineno=1000,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::set_has_type',
         body='inline void Operator::set_has_type() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4304,
         lineno=1003,
         tokens=26,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::clear_has_type',
         body='inline void Operator::clear_has_type() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4305,
         lineno=1006,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Operator::clear_type() {\n'
              '  type_ = 0;\n'
              '  clear_has_type();\n'
              '}\n'
              'inline ::google::protobuf::int32 Operator::type() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Operator.type)\n'
              '  return type_;\n'
              '}\n'
              'inline void Operator::set_type(::google::protobuf::int32 value')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4306,
         lineno=1006,
         tokens=21,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::clear_type',
         body='inline void Operator::clear_type() {\n'
              '  type_ = 0;\n'
              '  clear_has_type();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4307,
         lineno=1010,
         tokens=36,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::type',
         body='inline ::google::protobuf::int32 Operator::type() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Operator.type)\n'
              '  return type_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4308,
         lineno=1014,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=') {\n'
              '  set_has_type();\n'
              '  type_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Operator.type)\n'
              '}\n'
              '\n'
              '// repeated .GraphSubst.Tensor input = 2;\n'
              'inline int Operator::input_size() const {\n'
              '  return input_.size();\n'
              '}\n'
              'inline void Operator::clear_input() {\n'
              '  input_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::Tensor* Operator::mutable_input(int index) '
              '{\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.Operator.input)\n'
              '  return input_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Tensor >*\n'
              'Operator::mu')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4309,
         lineno=1014,
         tokens=45,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::set_type',
         body='inline void Operator::set_type(::google::protobuf::int32 value) '
              '{\n'
              '  set_has_type();\n'
              '  type_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.Operator.type)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4310,
         lineno=1021,
         tokens=16,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::input_size',
         body='inline int Operator::input_size() const {\n'
              '  return input_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4311,
         lineno=1024,
         tokens=14,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::clear_input',
         body='inline void Operator::clear_input() {\n  input_.Clear();\n}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4312,
         lineno=1032,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='table_input() {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.input)\n'
              '  return &input_;\n'
              '}\n'
              'inline const ::GraphSubst::Tensor& Operator::input(int index) '
              'const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Operator.input)\n'
              '  return input_.Get(index);\n'
              '}\n'
              'inline ::GraphSubst::Tensor* Operator::add_input() {\n'
              '  // '
              '@@protoc_insertion_point(field_add:GraphSubst.Operator.input)\n'
              '  return input_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Tensor >&\n'
              'Operator::input() const {\n'
              '  ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4313,
         lineno=1046,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='// '
              '@@protoc_insertion_point(field_list:GraphSubst.Operator.input)\n'
              '  return input_;\n'
              '}\n'
              '\n'
              '// repeated .GraphSubst.Parameter para = 3;\n'
              'inline int Operator::para_size() const {\n'
              '  return para_.size();\n'
              '}\n'
              'inline void Operator::clear_para() {\n'
              '  para_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::Parameter* Operator::mutable_para(int '
              'index) {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.Operator.para)\n'
              '  return para_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Parameter >*\n'
              'Operator::mutable_para() {\n'
              '  // @')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4314,
         lineno=1051,
         tokens=16,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::para_size',
         body='inline int Operator::para_size() const {\n'
              '  return para_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4315,
         lineno=1054,
         tokens=14,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Operator::clear_para',
         body='inline void Operator::clear_para() {\n  para_.Clear();\n}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4316,
         lineno=1063,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.para)\n'
              '  return &para_;\n'
              '}\n'
              'inline const ::GraphSubst::Parameter& Operator::para(int index) '
              'const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Operator.para)\n'
              '  return para_.Get(index);\n'
              '}\n'
              'inline ::GraphSubst::Parameter* Operator::add_para() {\n'
              '  // '
              '@@protoc_insertion_point(field_add:GraphSubst.Operator.para)\n'
              '  return para_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Parameter >&\n'
              'Operator::para() const {\n'
              '  // @@protoc_insertion_')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4317,
         lineno=1076,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='point(field_list:GraphSubst.Operator.para)\n'
              '  return para_;\n'
              '}\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// MapOutput\n'
              '\n'
              '// required int32 srcOpId = 1;\n'
              'inline bool MapOutput::has_srcopid() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4318,
         lineno=1085,
         tokens=34,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::has_srcopid',
         body='inline bool MapOutput::has_srcopid() const {\n'
              '  return (_has_bits_[0] & 0x00000001u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4319,
         lineno=1086,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='!= 0;\n'
              '}\n'
              'inline void MapOutput::set_has_srcopid() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}\n'
              'inline void MapOutput::clear_has_srcopid() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}\n'
              'inline void MapOutput::clear_srcopid() {\n'
              '  srcopid_ = 0;\n'
              '  clear_has_srcopid();\n'
              '}\n'
              'inline ::google::')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4320,
         lineno=1088,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_has_srcopid',
         body='inline void MapOutput::set_has_srcopid() {\n'
              '  _has_bits_[0] |= 0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4321,
         lineno=1091,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_has_srcopid',
         body='inline void MapOutput::clear_has_srcopid() {\n'
              '  _has_bits_[0] &= ~0x00000001u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4322,
         lineno=1094,
         tokens=28,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_srcopid',
         body='inline void MapOutput::clear_srcopid() {\n'
              '  srcopid_ = 0;\n'
              '  clear_has_srcopid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4323,
         lineno=1098,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='protobuf::int32 MapOutput::srcopid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcOpId)\n'
              '  return srcopid_;\n'
              '}\n'
              'inline void MapOutput::set_srcopid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_srcopid();\n'
              '  srcopid_ = value;\n'
              '  // @@protoc_in')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4324,
         lineno=1098,
         tokens=44,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::srcopid',
         body='inline ::google::protobuf::int32 MapOutput::srcopid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcOpId)\n'
              '  return srcopid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4325,
         lineno=1102,
         tokens=55,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_srcopid',
         body='inline void MapOutput::set_srcopid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_srcopid();\n'
              '  srcopid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcOpId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4326,
         lineno=1105,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='sertion_point(field_set:GraphSubst.MapOutput.srcOpId)\n'
              '}\n'
              '\n'
              '// required int32 dstOpId = 2;\n'
              'inline bool MapOutput::has_dstopid() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}\n'
              'inline void MapOutput::set_has_dstopid() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}\n'
              'inline ')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4327,
         lineno=1109,
         tokens=34,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::has_dstopid',
         body='inline bool MapOutput::has_dstopid() const {\n'
              '  return (_has_bits_[0] & 0x00000002u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4328,
         lineno=1112,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_has_dstopid',
         body='inline void MapOutput::set_has_dstopid() {\n'
              '  _has_bits_[0] |= 0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4329,
         lineno=1115,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='void MapOutput::clear_has_dstopid() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}\n'
              'inline void MapOutput::clear_dstopid() {\n'
              '  dstopid_ = 0;\n'
              '  clear_has_dstopid();\n'
              '}\n'
              'inline ::google::protobuf::int32 MapOutput::dstopid() const {\n'
              '  // @@protoc_insertion_point(field_get:GraphSu')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4330,
         lineno=1115,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_has_dstopid',
         body='inline void MapOutput::clear_has_dstopid() {\n'
              '  _has_bits_[0] &= ~0x00000002u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4331,
         lineno=1118,
         tokens=28,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_dstopid',
         body='inline void MapOutput::clear_dstopid() {\n'
              '  dstopid_ = 0;\n'
              '  clear_has_dstopid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4332,
         lineno=1122,
         tokens=44,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::dstopid',
         body='inline ::google::protobuf::int32 MapOutput::dstopid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstOpId)\n'
              '  return dstopid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4333,
         lineno=1123,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='bst.MapOutput.dstOpId)\n'
              '  return dstopid_;\n'
              '}\n'
              'inline void MapOutput::set_dstopid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_dstopid();\n'
              '  dstopid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstOpId)\n'
              '}\n'
              '\n'
              '// required int32 srcTsId = 3;\n'
              'inlin')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4334,
         lineno=1126,
         tokens=55,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_dstopid',
         body='inline void MapOutput::set_dstopid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_dstopid();\n'
              '  dstopid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstOpId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4335,
         lineno=1133,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e bool MapOutput::has_srctsid() const {\n'
              '  return (_has_bits_[0] & 0x00000004u) != 0;\n'
              '}\n'
              'inline void MapOutput::set_has_srctsid() {\n'
              '  _has_bits_[0] |= 0x00000004u;\n'
              '}\n'
              'inline void MapOutput::clear_has_srctsid() {\n'
              '  _has_bits_[0] &= ~0x00000004u;\n'
              '}\n'
              'inline void MapOutp')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4336,
         lineno=1133,
         tokens=34,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::has_srctsid',
         body='inline bool MapOutput::has_srctsid() const {\n'
              '  return (_has_bits_[0] & 0x00000004u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4337,
         lineno=1136,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_has_srctsid',
         body='inline void MapOutput::set_has_srctsid() {\n'
              '  _has_bits_[0] |= 0x00000004u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4338,
         lineno=1139,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_has_srctsid',
         body='inline void MapOutput::clear_has_srctsid() {\n'
              '  _has_bits_[0] &= ~0x00000004u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4339,
         lineno=1142,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ut::clear_srctsid() {\n'
              '  srctsid_ = 0;\n'
              '  clear_has_srctsid();\n'
              '}\n'
              'inline ::google::protobuf::int32 MapOutput::srctsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcTsId)\n'
              '  return srctsid_;\n'
              '}\n'
              'inline void MapOutput::set_srctsid(::google::pro')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4340,
         lineno=1142,
         tokens=28,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_srctsid',
         body='inline void MapOutput::clear_srctsid() {\n'
              '  srctsid_ = 0;\n'
              '  clear_has_srctsid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4341,
         lineno=1146,
         tokens=44,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::srctsid',
         body='inline ::google::protobuf::int32 MapOutput::srctsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcTsId)\n'
              '  return srctsid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4342,
         lineno=1150,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tobuf::int32 value) {\n'
              '  set_has_srctsid();\n'
              '  srctsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcTsId)\n'
              '}\n'
              '\n'
              '// required int32 dstTsId = 4;\n'
              'inline bool MapOutput::has_dsttsid() const {\n'
              '  return (_has_bits_[0] & 0x00000008u) != 0;\n'
              '}\n'
              'inlin')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4343,
         lineno=1150,
         tokens=55,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_srctsid',
         body='inline void MapOutput::set_srctsid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_srctsid();\n'
              '  srctsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcTsId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4344,
         lineno=1157,
         tokens=34,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::has_dsttsid',
         body='inline bool MapOutput::has_dsttsid() const {\n'
              '  return (_has_bits_[0] & 0x00000008u) != 0;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4345,
         lineno=1160,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e void MapOutput::set_has_dsttsid() {\n'
              '  _has_bits_[0] |= 0x00000008u;\n'
              '}\n'
              'inline void MapOutput::clear_has_dsttsid() {\n'
              '  _has_bits_[0] &= ~0x00000008u;\n'
              '}\n'
              'inline void MapOutput::clear_dsttsid() {\n'
              '  dsttsid_ = 0;\n'
              '  clear_has_dsttsid();\n'
              '}\n'
              'inline ::google::protobuf::int')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4346,
         lineno=1160,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_has_dsttsid',
         body='inline void MapOutput::set_has_dsttsid() {\n'
              '  _has_bits_[0] |= 0x00000008u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4347,
         lineno=1163,
         tokens=29,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_has_dsttsid',
         body='inline void MapOutput::clear_has_dsttsid() {\n'
              '  _has_bits_[0] &= ~0x00000008u;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4348,
         lineno=1166,
         tokens=28,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::clear_dsttsid',
         body='inline void MapOutput::clear_dsttsid() {\n'
              '  dsttsid_ = 0;\n'
              '  clear_has_dsttsid();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4349,
         lineno=1170,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='32 MapOutput::dsttsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstTsId)\n'
              '  return dsttsid_;\n'
              '}\n'
              'inline void MapOutput::set_dsttsid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_dsttsid();\n'
              '  dsttsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstTsId)\n'
              '}\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// Rule\n'
              '\n'
              '// repeated .GraphSubst.Operator srcOp = 1;\n'
              'inline int Rule::srcop_size() const {\n'
              '  return srcop_.size();\n'
              '}\n'
              'inline void Rule::clear_srcop()')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4350,
         lineno=1170,
         tokens=44,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::dsttsid',
         body='inline ::google::protobuf::int32 MapOutput::dsttsid() const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstTsId)\n'
              '  return dsttsid_;\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4351,
         lineno=1174,
         tokens=55,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='MapOutput::set_dsttsid',
         body='inline void MapOutput::set_dsttsid(::google::protobuf::int32 '
              'value) {\n'
              '  set_has_dsttsid();\n'
              '  dsttsid_ = value;\n'
              '  // '
              '@@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstTsId)\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4352,
         lineno=1185,
         tokens=18,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::srcop_size',
         body='inline int Rule::srcop_size() const {\n'
              '  return srcop_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4353,
         lineno=1188,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' {\n'
              '  srcop_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::Operator* Rule::mutable_srcop(int index) '
              '{\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.Rule.srcOp)\n'
              '  return srcop_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >*\n'
              'Rule::mutable_srcop() {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.srcOp)\n'
              '  return &srcop_;\n'
              '}\n'
              'inline const ::GraphSubst::Operator& Rule::srcop(int index) '
              'const {\n'
              '  // @@protoc_insertion_point(field_get:GraphSubst.Rule.srcOp)\n'
              '  return srcop_.Get(in')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4354,
         lineno=1188,
         tokens=16,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::clear_srcop',
         body='inline void Rule::clear_srcop() {\n  srcop_.Clear();\n}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4355,
         lineno=1202,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dex);\n'
              '}\n'
              'inline ::GraphSubst::Operator* Rule::add_srcop() {\n'
              '  // @@protoc_insertion_point(field_add:GraphSubst.Rule.srcOp)\n'
              '  return srcop_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >&\n'
              'Rule::srcop() const {\n'
              '  // '
              '@@protoc_insertion_point(field_list:GraphSubst.Rule.srcOp)\n'
              '  return srcop_;\n'
              '}\n'
              '\n'
              '// repeated .GraphSubst.Operator dstOp = 2;\n'
              'inline int Rule::dstop_size() const {\n'
              '  return dstop_.size();\n'
              '}\n'
              'inline void Rule::clear_dstop() {\n'
              '  dstop_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::Operator* Rule')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4356,
         lineno=1215,
         tokens=18,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::dstop_size',
         body='inline int Rule::dstop_size() const {\n'
              '  return dstop_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4357,
         lineno=1218,
         tokens=16,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::clear_dstop',
         body='inline void Rule::clear_dstop() {\n  dstop_.Clear();\n}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4358,
         lineno=1221,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='::mutable_dstop(int index) {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.Rule.dstOp)\n'
              '  return dstop_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >*\n'
              'Rule::mutable_dstop() {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.dstOp)\n'
              '  return &dstop_;\n'
              '}\n'
              'inline const ::GraphSubst::Operator& Rule::dstop(int index) '
              'const {\n'
              '  // @@protoc_insertion_point(field_get:GraphSubst.Rule.dstOp)\n'
              '  return dstop_.Get(index);\n'
              '}\n'
              'inline ::GraphSubst::Operator* Rule::add_dstop() {')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4359,
         lineno=1234,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  // @@protoc_insertion_point(field_add:GraphSubst.Rule.dstOp)\n'
              '  return dstop_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Operator >&\n'
              'Rule::dstop() const {\n'
              '  // '
              '@@protoc_insertion_point(field_list:GraphSubst.Rule.dstOp)\n'
              '  return dstop_;\n'
              '}\n'
              '\n'
              '// repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              'inline int Rule::mappedoutput_size() const {\n'
              '  return mappedoutput_.size();\n'
              '}\n'
              'inline void Rule::clear_mappedoutput() {\n'
              '  mappedoutput_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::MapOutput* Rule::mutable_mappedoutpu')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4360,
         lineno=1245,
         tokens=18,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::mappedoutput_size',
         body='inline int Rule::mappedoutput_size() const {\n'
              '  return mappedoutput_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4361,
         lineno=1248,
         tokens=16,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='Rule::clear_mappedoutput',
         body='inline void Rule::clear_mappedoutput() {\n'
              '  mappedoutput_.Clear();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4362,
         lineno=1251,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t(int index) {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.Rule.mappedOutput)\n'
              '  return mappedoutput_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::MapOutput >*\n'
              'Rule::mutable_mappedoutput() {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.mappedOutput)\n'
              '  return &mappedoutput_;\n'
              '}\n'
              'inline const ::GraphSubst::MapOutput& Rule::mappedoutput(int '
              'index) const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.Rule.mappedOutput)\n'
              '  return mappedoutput_.Get(index);\n'
              '}\n'
              'inline')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4363,
         lineno=1264,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' ::GraphSubst::MapOutput* Rule::add_mappedoutput() {\n'
              '  // '
              '@@protoc_insertion_point(field_add:GraphSubst.Rule.mappedOutput)\n'
              '  return mappedoutput_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::MapOutput >&\n'
              'Rule::mappedoutput() const {\n'
              '  // '
              '@@protoc_insertion_point(field_list:GraphSubst.Rule.mappedOutput)\n'
              '  return mappedoutput_;\n'
              '}\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// RuleCollection\n'
              '\n'
              '// repeated .GraphSubst.Rule rule = 1;\n'
              'inline int RuleCollection::rule_size(')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4364,
         lineno=1279,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=') const {\n'
              '  return rule_.size();\n'
              '}\n'
              'inline void RuleCollection::clear_rule() {\n'
              '  rule_.Clear();\n'
              '}\n'
              'inline ::GraphSubst::Rule* RuleCollection::mutable_rule(int '
              'index) {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable:GraphSubst.RuleCollection.rule)\n'
              '  return rule_.Mutable(index);\n'
              '}\n'
              'inline ::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule '
              '>*\n'
              'RuleCollection::mutable_rule() {\n'
              '  // '
              '@@protoc_insertion_point(field_mutable_list:GraphSubst.RuleCollection.rule)\n'
              '  return &rule_;\n'
              '}\n'
              'inline const ::GraphSubst::Rule& RuleCollection::rule')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4365,
         lineno=1279,
         tokens=17,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::rule_size',
         body='inline int RuleCollection::rule_size() const {\n'
              '  return rule_.size();\n'
              '}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4366,
         lineno=1282,
         tokens=15,
         depth=3,
         parent_id=None,
         category='method',
         summary=False,
         name='RuleCollection::clear_rule',
         body='inline void RuleCollection::clear_rule() {\n  rule_.Clear();\n}')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4367,
         lineno=1294,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(int index) const {\n'
              '  // '
              '@@protoc_insertion_point(field_get:GraphSubst.RuleCollection.rule)\n'
              '  return rule_.Get(index);\n'
              '}\n'
              'inline ::GraphSubst::Rule* RuleCollection::add_rule() {\n'
              '  // '
              '@@protoc_insertion_point(field_add:GraphSubst.RuleCollection.rule)\n'
              '  return rule_.Add();\n'
              '}\n'
              'inline const ::google::protobuf::RepeatedPtrField< '
              '::GraphSubst::Rule >&\n'
              'RuleCollection::rule() const {\n'
              '  // '
              '@@protoc_insertion_point(field_list:GraphSubst.RuleCollection.rule)\n'
              '  return rule_;\n'
              '}\n'
              '\n'
              '#ifdef __GNUC__\n'
              '  #pragma GCC diagnostic pop\n'
              '#endif  // __')

Fragment(document_cs='aa4c40361c2896de439e9801ab3d898f42e69db4dd45a083732dcce4815374c0',
         id=4368,
         lineno=1310,
         tokens=60,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='GNUC__\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '// '
              '-------------------------------------------------------------------\n'
              '\n'
              '\n'
              '// @@protoc_insertion_point(namespace_scope)\n'
              '\n'
              '}  // namespace GraphSubst\n'
              '\n'
              '// @@protoc_insertion_point(global_scope)\n'
              '\n'
              '#endif  // PROTOBUF_INCLUDED_rules_2eproto\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4369,
         lineno=1,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4370,
         lineno=1,
         tokens=93,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/pool2d_mkl.cc\n'
              '  Functions: create_net\n'
              '  Methods: Model::measure_pool2d_cost Pool2D::forward '
              'Pool2D::map Pool2D::unmap\n'
              '  Variables: inputMem mode padH\n'
              '  Using: dnnl taso\n'
              '  Usages: desc forward forward_inference map '
              'measure_pool2d_cost pooling_avg_exclude_padding pooling_max '
              'primitive_desc unmap\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4371,
         lineno=11,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(Pool2D* pool, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  int padH, padW;\n'
              '  pool->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memo')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4372,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4373,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4374,
         lineno=21,
         tokens=46,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Pool2D* pool, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr)')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4375,
         lineno=21,
         tokens=435,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Pool2D* pool, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  int padH, padW;\n'
              '  pool->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memory::dims kernelSize = { pool->kernelH, '
              'pool->kernelW };\n'
              '  const memory::dims strideSize = { pool->strideH, '
              'pool->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(pool->inputs[0]);\n'
              '  auto outputMemDesc = get_memory_desc(pool->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm mode;\n'
              '  switch (pool->type) {\n'
              '    case OP_POOL2D_MAX:\n'
              '      mode = algorithm::pooling_max;\n'
              '      break;\n'
              '    case OP_POOL2D_AVG:\n'
              '      mode = algorithm::pooling_avg_exclude_padding;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto poolOpDesc = pooling_forward::desc(\n'
              '      prop_kind::forward_inference, mode,\n'
              '      inputMemDesc, outputMemDesc,\n'
              '      strideSize, kernelSize, paddingSize, paddingSize);\n'
              '  auto poolPrimDesc = '
              'pooling_forward::primitive_desc(poolOpDesc, eng);\n'
              '  if (pool->activation != AC_MODE_NONE) {\n'
              '    auto poolAttr = get_activation_attr(pool->activation);\n'
              '    poolPrimDesc = pooling_forward::primitive_desc(poolOpDesc, '
              'poolAttr, eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(poolPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({pooling_forward(poolPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4376,
         lineno=25,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4377,
         lineno=28,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ry::dims kernelSize = { pool->kernelH, pool->kernelW };\n'
              '  const memory::dims strideSize = { pool->strideH, '
              'pool->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(pool->inputs[0]);\n'
              '  auto outputMemDesc = get_memory_desc(pool->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm mode')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4378,
         lineno=38,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '  switch (pool->type) {\n'
              '    case OP_POOL2D_MAX:\n'
              '      mode = algorithm::pooling_max;\n'
              '      break;\n'
              '    case OP_POOL2D_AVG:\n'
              '      mode = algorithm::pooling_avg_exclude_padding;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto poolOpDesc = pooling_forward::desc(\n'
              '      prop_kind::forward_inference, mode,\n'
              '      inputMemDesc, outputMemDesc,\n'
              '      strideSize, kernelSize, paddingSize, paddingSize);\n'
              '  auto poolPrimDesc = '
              'pooling_forward::primitive_desc(poolOpDesc, eng);\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4379,
         lineno=38,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='algorithm mode;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4380,
         lineno=54,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (pool->activation != AC_MODE_NONE) {\n'
              '    auto poolAttr = get_activation_attr(pool->activation);\n'
              '    poolPrimDesc = pooling_forward::primitive_desc(poolOpDesc, '
              'poolAttr, eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(poolPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({pooling_forward(poolPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n'
              '\n'
              'void Pool2D::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outp')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4381,
         lineno=66,
         tokens=100,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::map',
         body='void Pool2D::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4382,
         lineno=69,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='utSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void Pool2D::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Pool2D::forward(bool block)\n'
              '{\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4383,
         lineno=72,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4384,
         lineno=78,
         tokens=44,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::unmap',
         body='void Pool2D::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4385,
         lineno=87,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::forward',
         body='void Pool2D::forward(bool block)\n'
              '{\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4386,
         lineno=89,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_pool2d_cost(Pool2D* pool)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(pool, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, outputPtr);\n'
              '  int padH, padW;\n'
              '  pool->get_padding(&padH, &padW);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4387,
         lineno=93,
         tokens=345,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_pool2d_cost',
         body='void Model::measure_pool2d_cost(Pool2D* pool)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(pool, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, outputPtr);\n'
              '  int padH, padW;\n'
              '  pool->get_padding(&padH, &padW);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  pool->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d %d) '
              'p(%d %d) cost(%.4lf)\\n",\n'
              '           pool->inputs[0].dim[0], pool->inputs[0].dim[1],\n'
              '           pool->inputs[0].dim[2], pool->inputs[0].dim[3],\n'
              '           pool->kernelH, pool->kernelW,\n'
              '           pool->strideH, pool->strideW, padH, padW, '
              'pool->runtime);\n'
              '}')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4388,
         lineno=95,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4389,
         lineno=99,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='padH',
         body='int padH, padW;')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4390,
         lineno=107,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  pool->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n')

Fragment(document_cs='abdb6cb484622f37f989f1637b1032a9fc15e68810729013f3eee5d273c8c578',
         id=4391,
         lineno=119,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d %d) '
              'p(%d %d) cost(%.4lf)\\n",\n'
              '           pool->inputs[0].dim[0], pool->inputs[0].dim[1],\n'
              '           pool->inputs[0].dim[2], pool->inputs[0].dim[3],\n'
              '           pool->kernelH, pool->kernelW,\n'
              '           pool->strideH, pool->strideW, padH, padW, '
              'pool->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4392,
         lineno=1,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed o')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4393,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/element.cc\n'
              '  Functions: key\n'
              '  Methods: Element::Element Element::collect_costs '
              'Element::get_int_parameter Element::~Element '
              'ElementKey::ElementKey Graph::element Model::broadcastable '
              'Model::get_or_create_element\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Element ElementKey INVALID_OP NO_SPLIT broadcastable '
              'collect_costs element get_int_parameter get_or_create_element\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4394,
         lineno=10,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='n an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'bool Model::broadcastable(const Tensor& t1,\n'
              '                          const Tensor& t2)\n'
              '{\n'
              '  int num_dim = min(t1.numDim, t2.numDim);\n'
              '  for (int dim = 0; dim < num_dim; dim++) {\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4395,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4396,
         lineno=19,
         tokens=133,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::broadcastable',
         body='bool Model::broadcastable(const Tensor& t1,\n'
              '                          const Tensor& t2)\n'
              '{\n'
              '  int num_dim = min(t1.numDim, t2.numDim);\n'
              '  for (int dim = 0; dim < num_dim; dim++) {\n'
              '    if ((t1.dim[t1.numDim-1-dim] != 1)\n'
              '      &&(t2.dim[t2.numDim-1-dim] != 1)\n'
              '      &&(t1.dim[t1.numDim-1-dim] != t2.dim[t2.numDim-1-dim]))\n'
              '    {\n'
              '      return false;\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4397,
         lineno=24,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if ((t1.dim[t1.numDim-1-dim] != 1)\n'
              '      &&(t2.dim[t2.numDim-1-dim] != 1)\n'
              '      &&(t1.dim[t1.numDim-1-dim] != t2.dim[t2.numDim-1-dim]))\n'
              '    {\n'
              '      return false;\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::element(OpType type,\n'
              '                            const TensorHandle t1,\n'
              '                            const TensorHandle t2)\n'
              '{\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4398,
         lineno=34,
         tokens=146,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::element',
         body='TensorHandle Graph::element(OpType type,\n'
              '                            const TensorHandle t1,\n'
              '                            const TensorHandle t2)\n'
              '{\n'
              '  if (!model->broadcastable(*t1, *t2)) {\n'
              '    fprintf(stderr, "Error: inputs could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  Op op = model->get_or_create_element(type, *t1, *t2);\n'
              '  add_edge(t1->op, op, t1->idx, 0);\n'
              '  add_edge(t2->op, op, t2->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4399,
         lineno=38,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!model->broadcastable(*t1, *t2)) {\n'
              '    fprintf(stderr, "Error: inputs could not be broadcast '
              'together");\n'
              '    assert(false);\n'
              '    return NULL;\n'
              '  }\n'
              '  Op op = model->get_or_create_element(type, *t1, *t2);\n'
              '  add_edge(t1->op, op, t1->idx, 0);\n'
              '  add_edge(t2->op, op, t2->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_element(OpType type,\n'
              '                                const Tensor& t1,\n'
              '                                const Tensor& t2)\n'
              '{\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4400,
         lineno=51,
         tokens=164,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_element',
         body='Op Model::get_or_create_element(OpType type,\n'
              '                                const Tensor& t1,\n'
              '                                const Tensor& t2)\n'
              '{\n'
              '  if (!broadcastable(t1, t2)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  // key is (inputN, inputC, inputH, inputW, type)\n'
              '  ElementKey key(t1, t2, type);\n'
              '  Element* eleOp;\n'
              '  if (element.find(key) != element.end()) {\n'
              '    eleOp = element[key];\n'
              '  } else {\n'
              '    eleOp = new Element(this, type, t1, t2);\n'
              '    measure_element_cost(eleOp);\n'
              '    element[key] = eleOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = eleOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4401,
         lineno=55,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!broadcastable(t1, t2)) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  // key is (inputN, inputC, inputH, inputW, type)\n'
              '  ElementKey key(t1, t2, type);\n'
              '  Element* eleOp;\n'
              '  if (element.find(key) != element.end()) {\n'
              '    eleOp = element[key];\n'
              '  } else {\n'
              '    eleOp = new Element(this, type, t1, t2);\n'
              '    measure_element_cost(eleOp);\n'
              '    element[key] = eleOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = eleOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4402,
         lineno=59,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(t1, t2, type)')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4403,
         lineno=68,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4404,
         lineno=72,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'Element::Element(Model* _model, OpType _type,\n'
              '                 const Tensor& _t1,\n'
              '                 const Tensor& _t2)\n'
              ': OpBase(_t1, _t2, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  int num_dim = max(_t1.numDim, _t2.numDim);\n'
              '  outputs[0].numDim = num_dim;\n'
              '  int total = 1;\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4405,
         lineno=74,
         tokens=401,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::Element',
         body='Element::Element(Model* _model, OpType _type,\n'
              '                 const Tensor& _t1,\n'
              '                 const Tensor& _t2)\n'
              ': OpBase(_t1, _t2, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  int num_dim = max(_t1.numDim, _t2.numDim);\n'
              '  outputs[0].numDim = num_dim;\n'
              '  int total = 1;\n'
              '  for (int i = 0; i < num_dim; i++) {\n'
              '    int t1_idx = _t1.numDim-1-i;\n'
              '    int t2_idx = _t2.numDim-1-i;\n'
              '    int out_idx = num_dim-1-i;\n'
              '    int dim1 = 1, dim2 = 1;\n'
              '    if (t1_idx >= 0)\n'
              '      dim1 = _t1.dim[t1_idx];\n'
              '    if (t2_idx >= 0)\n'
              '      dim2 = _t2.dim[t2_idx];\n'
              '    outputs[0].dim[out_idx] = max(dim1, dim2);\n'
              '    outputs[0].stride[out_idx] = total;\n'
              '    total *= outputs[0].dim[out_idx];\n'
              '    outputs[0].split[out_idx] = SplitInfo::NO_SPLIT;\n'
              '    if (t1_idx >= 0 && _t1.dim[t1_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _t1.split[t1_idx];\n'
              '      if (t2_idx >= 0 && _t2.dim[t2_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_t2.split[t2_idx]);\n'
              '    } else if (t2_idx >= 0 && _t2.dim[t2_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _t2.split[t2_idx];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4406,
         lineno=83,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < num_dim; i++) {\n'
              '    int t1_idx = _t1.numDim-1-i;\n'
              '    int t2_idx = _t2.numDim-1-i;\n'
              '    int out_idx = num_dim-1-i;\n'
              '    int dim1 = 1, dim2 = 1;\n'
              '    if (t1_idx >= 0)\n'
              '      dim1 = _t1.dim[t1_idx];\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4407,
         lineno=90,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (t2_idx >= 0)\n'
              '      dim2 = _t2.dim[t2_idx];\n'
              '    outputs[0].dim[out_idx] = max(dim1, dim2);\n'
              '    outputs[0].stride[out_idx] = total;\n'
              '    total *= outputs[0].dim[out_idx];\n'
              '    outputs[0].split[out_idx] = SplitInfo::NO_SPLIT;\n'
              '    if (t1_idx >= 0 && _t1.dim[t1_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _t1.split[t1_idx];\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4408,
         lineno=98,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (t2_idx >= 0 && _t2.dim[t2_idx] > 1)\n'
              '        outputs[0].split[out_idx].combine(_t2.split[t2_idx]);\n'
              '    } else if (t2_idx >= 0 && _t2.dim[t2_idx] > 1) {\n'
              '      outputs[0].split[out_idx] = _t2.split[t2_idx];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Element::~Element(void)\n'
              '{}\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4409,
         lineno=107,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::~Element',
         body='Element::~Element(void)\n{}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4410,
         lineno=109,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'bool Element::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Element::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4411,
         lineno=110,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::get_int_parameter',
         body='bool Element::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4412,
         lineno=115,
         tokens=169,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::collect_costs',
         body='void Element::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Element]: cost(%.4lf) '
              'total_cost(%.4lf)\\n", runtime, exe_time);\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4413,
         lineno=119,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize;\n'
              '  mem_acc += inputSize * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Element]: cost(%.4lf) '
              'total_cost(%.4lf)\\n", ru')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4414,
         lineno=128,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ntime, exe_time);\n'
              '}\n'
              '\n'
              '// Key ordering: type, input\n'
              'ElementKey::ElementKey(const Tensor& t1,\n'
              '                       const Tensor& t2,\n'
              '                       OpType type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = type;\n'
              '  t1.serialize(keys, idx);\n'
              '  t2.serialize(keys, idx);\n')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4415,
         lineno=132,
         tokens=78,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ElementKey::ElementKey',
         body='ElementKey::ElementKey(const Tensor& t1,\n'
              '                       const Tensor& t2,\n'
              '                       OpType type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = type;\n'
              '  t1.serialize(keys, idx);\n'
              '  t2.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='ac2b967c9b6e4d63c37ae5d52d0460e0a3c96cc90e15305ad3c81ad380d7bf38',
         id=4416,
         lineno=140,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4417,
         lineno=1,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4418,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/where_kernel.cu\n'
              '  Methods: Model::measure_where_cost Where::forward Where::map '
              'Where::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_where_cost unmap\n')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4419,
         lineno=11,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Where::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void Where::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Where::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_where_cost(Where* where)\n'
              '{\n'
              '  where->runtime = 0;\n'
              '}\n')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4420,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4421,
         lineno=20,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::map',
         body='void Where::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4422,
         lineno=25,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::unmap',
         body='void Where::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4423,
         lineno=30,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::forward',
         body='void Where::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='ade463bb094fd8c98c0b155f9393b20e7e005f238d828e9ead9e50b574f2610d',
         id=4424,
         lineno=36,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_where_cost',
         body='void Model::measure_where_cost(Where* where)\n'
              '{\n'
              '  where->runtime = 0;\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4425,
         lineno=1,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing permissi')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4426,
         lineno=1,
         tokens=102,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/matmul_mkl.cc\n'
              '  Functions: create_net\n'
              '  Methods: Matmul::forward Matmul::map Matmul::set_layout '
              'Matmul::unmap Model::measure_matmul_cost\n'
              '  Variables: aMem params\n'
              '  Using: dnnl taso\n'
              '  Usages: BLASGEMMParams desc eltwise_logistic eltwise_relu '
              'eltwise_tanh forward forward_inference map measure_matmul_cost '
              'primitive_desc set_layout unmap\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4427,
         lineno=12,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(Matmul* mm, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    Matmul::BLASGEMMParams& params,')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4428,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4429,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4430,
         lineno=21,
         tokens=77,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Matmul* mm, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    Matmul::BLASGEMMParams& params,\n'
              '#endif\n'
              '    memory& aMem, memory& bMem, memory& cMem, void* aPtr, void* '
              'bPtr, void* cPtr)')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4431,
         lineno=21,
         tokens=1186,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Matmul* mm, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    Matmul::BLASGEMMParams& params,\n'
              '#endif\n'
              '    memory& aMem, memory& bMem, memory& cMem, void* aPtr, void* '
              'bPtr, void* cPtr) {\n'
              '  // dimensions.\n'
              '  int numDim = mm->outputs[0].numDim;\n'
              '  int m = mm->inputs[0].dim[numDim-2];\n'
              '  int n = mm->inputs[1].dim[numDim-1];\n'
              '  int k = mm->inputs[0].dim[numDim-1];\n'
              '  int b = 1;\n'
              '  if (numDim > 2) {\n'
              '    for (int i = 0; i < numDim - 2; i++) {\n'
              '      b *= mm->outputs[0].dim[i];\n'
              '      assert(mm->inputs[0].dim[i] == mm->outputs[0].dim[i]);\n'
              '      assert(mm->inputs[1].dim[i] == mm->outputs[0].dim[i]);\n'
              '    }\n'
              '  }\n'
              '  // data sizes.\n'
              '  const memory::dims aSize = { b, m, k };\n'
              '  const memory::dims bSize = { b, k, n };\n'
              '  const memory::dims cSize = { b, m, n };\n'
              '  const memory::dims aStride = { m * k, '
              'mm->inputs[0].stride[numDim-2], mm->inputs[0].stride[numDim-1] '
              '};\n'
              '  const memory::dims bStride = { k * n, '
              'mm->inputs[1].stride[numDim-2], mm->inputs[1].stride[numDim-1] '
              '};\n'
              '  const memory::dims cStride = { m * n, '
              'mm->outputs[0].stride[numDim-2], '
              'mm->outputs[0].stride[numDim-1] };\n'
              '  // data descriptors.\n'
              '  auto aMemDesc = memory::desc(aSize, DNNL_DEF_DTYPE, '
              'aStride);\n'
              '  auto bMemDesc = memory::desc(bSize, DNNL_DEF_DTYPE, '
              'bStride);\n'
              '  auto cMemDesc = memory::desc(cSize, DNNL_DEF_DTYPE, '
              'cStride);\n'
              '  // data memories.\n'
              '  aMem = memory(aMemDesc, eng, aPtr);\n'
              '  bMem = memory(bMemDesc, eng, bPtr);\n'
              '  cMem = memory(cMemDesc, eng, cPtr);\n'
              '#ifndef DNNL_NO_MATMUL\n'
              '  // operator primitives.\n'
              '  auto mmOpDesc = matmul::desc(aMemDesc, bMemDesc, cMemDesc);\n'
              '  auto mmPrimDesc = matmul::primitive_desc(mmOpDesc, eng);\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    auto mmAttr = get_activation_attr(mm->activation);\n'
              '    mmPrimDesc = matmul::primitive_desc(mmOpDesc, mmAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({matmul(mmPrimDesc),\n'
              '      {{DNNL_ARG_SRC, aMem}, {DNNL_ARG_WEIGHTS, bMem}, '
              '{DNNL_ARG_DST, cMem}}});\n'
              '#else  // DNNL_NO_MATMUL\n'
              '  // BLAS parameters.\n'
              '  params.batch = b;\n'
              '  params.m = m;\n'
              '  params.n = n;\n'
              '  params.k = k;\n'
              '  if (mm->inputs[0].stride[numDim-2] == 1) {\n'
              "    params.transA = 't';\n"
              '    params.lda = mm->inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1);\n'
              "    params.transA = 'n';\n"
              '    params.lda = mm->inputs[0].stride[numDim-2];\n'
              '  }\n'
              '  if (mm->inputs[1].stride[numDim-2] == 1) {\n'
              "    params.transB = 't';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1);\n'
              "    params.transB = 'n';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  assert(mm->outputs[0].stride[numDim-1] == 1);\n'
              '  params.ldc = mm->outputs[0].stride[numDim-2];\n'
              '  // activation primitive.\n'
              '  net.clear();\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '    float ops_alpha = 0.0f;  // relu negative slope\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (mm->activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        ops_algo = algorithm::eltwise_logistic;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        ops_algo = algorithm::eltwise_tanh;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '      default:\n'
              '        break;\n'
              '    }\n'
              '    auto actOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, cMemDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto actPrimDesc = '
              'eltwise_forward::primitive_desc(actOpDesc, eng);\n'
              '    net.push_back({eltwise_forward(actPrimDesc),\n'
              '      {{DNNL_ARG_SRC, cMem}, {DNNL_ARG_DST, cMem}}});\n'
              '  }\n'
              '#endif  // DNNL_NO_MATMUL\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4432,
         lineno=23,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '#endif\n'
              '    memory& aMem, memory& bMem, memory& cMem, void* aPtr, void* '
              'bPtr, void* cPtr) {\n'
              '  // dimensions.\n'
              '  int numDim = mm->outputs[0].numDim;\n'
              '  int m = mm->inputs[0].dim[numDim-2];\n'
              '  int n = mm->inputs[1].dim[numDim-1];\n'
              '  int k = mm->inputs[0].dim[numDim-1];\n'
              '  int b = 1;\n'
              '  if (numDim > 2) {\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4433,
         lineno=33,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim - 2; i++) {\n'
              '      b *= mm->outputs[0].dim[i];\n'
              '      assert(mm->inputs[0].dim[i] == mm->outputs[0].dim[i]);\n'
              '      assert(mm->inputs[1].dim[i] == mm->outputs[0].dim[i]);\n'
              '    }\n'
              '  }\n'
              '  // data sizes.\n'
              '  const memory::dims aSize = { b, m, k };\n'
              '  const memory::dims bSize = ')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4434,
         lineno=41,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='{ b, k, n };\n'
              '  const memory::dims cSize = { b, m, n };\n'
              '  const memory::dims aStride = { m * k, '
              'mm->inputs[0].stride[numDim-2], mm->inputs[0].stride[numDim-1] '
              '};\n'
              '  const memory::dims bStride = { k * n, '
              'mm->inputs[1].stride[numDim-2], mm->inputs[1].stride[numDim-1] '
              '};\n'
              '  const memory::dims cStride = ')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4435,
         lineno=45,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='{ m * n, mm->outputs[0].stride[numDim-2], '
              'mm->outputs[0].stride[numDim-1] };\n'
              '  // data descriptors.\n'
              '  auto aMemDesc = memory::desc(aSize, DNNL_DEF_DTYPE, '
              'aStride);\n'
              '  auto bMemDesc = memory::desc(bSize, DNNL_DEF_DTYPE, '
              'bStride);\n'
              '  auto cMemDesc = memory::desc(cSize, DNNL_DEF_DTYPE, '
              'cStride);\n'
              '  // d')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4436,
         lineno=50,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ata memories.\n'
              '  aMem = memory(aMemDesc, eng, aPtr);\n'
              '  bMem = memory(bMemDesc, eng, bPtr);\n'
              '  cMem = memory(cMemDesc, eng, cPtr);\n'
              '#ifndef DNNL_NO_MATMUL\n'
              '  // operator primitives.\n'
              '  auto mmOpDesc = matmul::desc(aMemDesc, bMemDesc, cMemDesc);\n'
              '  auto mmPrimDesc = matmul::primitive_desc(mmOpDesc, eng);\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4437,
         lineno=58,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->activation != AC_MODE_NONE) {\n'
              '    auto mmAttr = get_activation_attr(mm->activation);\n'
              '    mmPrimDesc = matmul::primitive_desc(mmOpDesc, mmAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({matmul(mmPrimDesc),\n'
              '      {{DNNL_ARG_SRC, aMem}, {DNNL_ARG_WEIGHTS, bMem}, '
              '{DNNL_ARG_DST, cMem}}});\n'
              '#else  // DNNL_NO_MATMUL\n'
              '  // BLAS parameters.\n'
              '  params.batch = b;\n'
              '  params.m = m;\n'
              '  params.n = n;\n'
              '  params.k = k;\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4438,
         lineno=72,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->inputs[0].stride[numDim-2] == 1) {\n'
              "    params.transA = 't';\n"
              '    params.lda = mm->inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1);\n'
              "    params.transA = 'n';\n"
              '    params.lda = mm->inputs[0].stride[numDim-2];\n'
              '  }\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4439,
         lineno=80,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->inputs[1].stride[numDim-2] == 1) {\n'
              "    params.transB = 't';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1);\n'
              "    params.transB = 'n';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  assert(mm->outputs[0].stride[numDim-1] == 1);\n'
              '  params.ldc = mm->outputs[0].stride[numDim-2];\n'
              '  // activation primitive.\n'
              '  net.clear();\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4440,
         lineno=92,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->activation != AC_MODE_NONE) {\n'
              '    algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '    float ops_alpha = 0.0f;  // relu negative slope\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (mm->activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        ops_algo = algorithm::eltwise_logistic;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        op')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4441,
         lineno=102,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s_algo = algorithm::eltwise_tanh;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '      default:\n'
              '        break;\n'
              '    }\n'
              '    auto actOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, cMemDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto actPrimDesc = '
              'eltwise_forward::primitive_desc(actOpDesc, eng);\n'
              '    net.push_back({eltwise_forward(actP')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4442,
         lineno=112,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rimDesc),\n'
              '      {{DNNL_ARG_SRC, cMem}, {DNNL_ARG_DST, cMem}}});\n'
              '  }\n'
              '#endif  // DNNL_NO_MATMUL\n'
              '}\n'
              '\n'
              'void Matmul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory aMem, bMem, cMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '#ifdef DNNL')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4443,
         lineno=118,
         tokens=125,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::map',
         body='void Matmul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory aMem, bMem, cMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '      params,\n'
              '#endif\n'
              '      aMem, bMem, cMem, inputs[0].data_ptr, inputs[1].data_ptr, '
              'outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4444,
         lineno=124,
         tokens=10,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='aMem',
         body='memory aMem, bMem, cMem;')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4445,
         lineno=126,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_NO_MATMUL\n'
              '      params,\n'
              '#endif\n'
              '      aMem, bMem, cMem, inputs[0].data_ptr, inputs[1].data_ptr, '
              'outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void Matmul::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Matmul::forward(bool block)\n'
              '{\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4446,
         lineno=132,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::unmap',
         body='void Matmul::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4447,
         lineno=141,
         tokens=202,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::forward',
         body='void Matmul::forward(bool block)\n'
              '{\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  for (int b = 0; b < params.batch; b++) {\n'
              '    CHECK_EQ(dnnl_success,\n'
              '        dnnl_sgemm(params.transA, params.transB,\n'
              '          params.m, params.n, params.k, alpha,\n'
              '          (DATATYPE*)inputs[0].data_ptr + b * params.m * '
              'params.k, params.lda,\n'
              '          (DATATYPE*)inputs[1].data_ptr + b * params.k * '
              'params.n, params.ldb, beta,\n'
              '          (DATATYPE*)outputs[0].data_ptr + b * params.m * '
              'params.n, params.ldc));\n'
              '  }\n'
              '#endif\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4448,
         lineno=146,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int b = 0; b < params.batch; b++) {\n'
              '    CHECK_EQ(dnnl_success,\n'
              '        dnnl_sgemm(params.transA, params.transB,\n'
              '          params.m, params.n, params.k, alpha,\n'
              '          (DATATYPE*)inputs[0].data_ptr + b * params.m * '
              'params.k, params.lda,\n'
              '          (DATATYPE*)inputs[1].data_ptr + b * params.k * '
              'params.n, params.ldb, beta,\n'
              '          (DATATYPE*)outputs[0].data_ptr + b * params.m * '
              'params.n, params.ldc));\n'
              '  }\n'
              '#endif\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4449,
         lineno=155,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Matmul::set_layout(void)\n'
              '{\n'
              '  // MKL uses row-major.\n'
              '  int numDim = outputs[0].numDim;\n'
              '  outputs[0].stride[numDim-1] = 1;\n'
              '  outputs[0].stride[numDim-2] = outputs[0].dim[numDim-1];\n'
              '  int size = outputs[0].dim[numDim-2] * '
              'outputs[0].dim[numDim-1];\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4450,
         lineno=159,
         tokens=144,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::set_layout',
         body='void Matmul::set_layout(void)\n'
              '{\n'
              '  // MKL uses row-major.\n'
              '  int numDim = outputs[0].numDim;\n'
              '  outputs[0].stride[numDim-1] = 1;\n'
              '  outputs[0].stride[numDim-2] = outputs[0].dim[numDim-1];\n'
              '  int size = outputs[0].dim[numDim-2] * '
              'outputs[0].dim[numDim-1];\n'
              '  for (int i = numDim-3; i >= 0; i--) {\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= outputs[0].dim[i];\n'
              '  }\n'
              '  assert(size == outputs[0].volume());\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4451,
         lineno=166,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = numDim-3; i >= 0; i--) {\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= outputs[0].dim[i];\n'
              '  }\n'
              '  assert(size == outputs[0].volume());\n'
              '}\n'
              '\n'
              'void Model::measure_matmul_cost(Matmul* mm)\n'
              '{\n'
              '  memory aMem, bMem, cMem;\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  Matmul::BLASGEMMParams params;\n'
              '#endif\n'
              '  create_net(mm, net, eng, ')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4452,
         lineno=173,
         tokens=476,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_matmul_cost',
         body='void Model::measure_matmul_cost(Matmul* mm)\n'
              '{\n'
              '  memory aMem, bMem, cMem;\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '  Matmul::BLASGEMMParams params;\n'
              '#endif\n'
              '  create_net(mm, net, eng, strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '      params,\n'
              '#endif\n'
              '      aMem, bMem, cMem, inputPtr, filterPtr, outputPtr);\n'
              '\n'
              '  assert(aMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(bMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(cMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n'
              '    for (int b = 0; b < params.batch; b++) {\n'
              '      CHECK_EQ(dnnl_success,\n'
              '          dnnl_sgemm(params.transA, params.transB,\n'
              '            params.m, params.n, params.k, alpha,\n'
              '            (DATATYPE*)inputPtr + b * params.m * params.k, '
              'params.lda,\n'
              '            (DATATYPE*)filterPtr + b * params.k * params.n, '
              'params.ldb, beta,\n'
              '            (DATATYPE*)outputPtr + b * params.m * params.n, '
              'params.ldc));\n'
              '    }\n'
              '#endif\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  mm->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Matmul]: %s %s acti(%d) cost(%.4lf)\\n",\n'
              '           mm->inputs[0].to_string("input").c_str(),\n'
              '           mm->inputs[1].to_string("weight").c_str(),\n'
              '           mm->activation, mm->runtime);\n'
              '}')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4453,
         lineno=175,
         tokens=10,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='aMem',
         body='memory aMem, bMem, cMem;')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4454,
         lineno=177,
         tokens=11,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='params',
         body='Matmul::BLASGEMMParams params;')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4455,
         lineno=179,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '      params,\n'
              '#endif\n'
              '      aMem, bMem, cMem, inputPtr, filterPtr, outputPtr);\n'
              '\n'
              '  assert(aMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(bMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(cMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4456,
         lineno=191,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    const float alpha = 1.0f;\n'
              '    const float beta = 0.0f;\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4457,
         lineno=198,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int b = 0; b < params.batch; b++) {\n'
              '      CHECK_EQ(dnnl_success,\n'
              '          dnnl_sgemm(params.transA, params.transB,\n'
              '            params.m, params.n, params.k, alpha,\n'
              '            (DATATYPE*)inputPtr + b * params.m * params.k, '
              'params.lda,\n'
              '            (DATATYPE*)filterPtr + b * params.k * params.n, '
              'params.ldb, beta,\n'
              '            (DATATYPE*)outputPtr + b * params.m * params.n, '
              'params.ldc));\n'
              '    }\n'
              '#endif\n')

Fragment(document_cs='ade62d5fa83d2a317504568c52b39f0319751c3bb21f331968d7dd73cdf2de4c',
         id=4458,
         lineno=207,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  mm->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Matmul]: %s %s acti(%d) cost(%.4lf)\\n",\n'
              '           mm->inputs[0].to_string("input").c_str(),\n'
              '           mm->inputs[1].to_string("weight").c_str(),\n'
              '           mm->activation, mm->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4459,
         lineno=1,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF AN')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4460,
         lineno=1,
         tokens=111,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/split.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::split Graph::split_equal '
              'Model::get_or_create_split Model::measure_split_cost '
              'Split::Split Split::collect_costs Split::forward '
              'Split::get_int_parameter Split::map Split::unmap Split::~Split '
              'SplitKey::SplitKey\n'
              '  Variables: curPos left ret sizes\n'
              '  Using: taso\n'
              '  Usages: NO_SPLIT Split SplitKey collect_costs forward '
              'get_int_parameter get_or_create_split map measure_split_cost '
              'split split_equal unmap\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4461,
         lineno=11,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='Y KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Graph::split(const TensorHandle _input, int _axis,\n'
              '                  const std::vector<int>& _sizes,\n'
              '                  TensorHandle* _outputs)\n'
              '{\n'
              '  Op op = model->get_or_create_split(*_input, _axis, _sizes);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4462,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4463,
         lineno=19,
         tokens=115,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::split',
         body='void Graph::split(const TensorHandle _input, int _axis,\n'
              '                  const std::vector<int>& _sizes,\n'
              '                  TensorHandle* _outputs)\n'
              '{\n'
              '  Op op = model->get_or_create_split(*_input, _axis, _sizes);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  for (size_t i = 0; i < _sizes.size(); i++) {\n'
              '    _outputs[i] = new Tensor(op.ptr->outputs[i]);\n'
              '    _outputs[i]->op = op;\n'
              '  }\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4464,
         lineno=25,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < _sizes.size(); i++) {\n'
              '    _outputs[i] = new Tensor(op.ptr->outputs[i]);\n'
              '    _outputs[i]->op = op;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Graph::split_equal(const TensorHandle _input, int _axis,\n'
              '                        int _num, TensorHandle* _outputs)\n'
              '{\n'
              '  // assert the dimension can be equally split\n'
              '  assert(_input->dim[_axis] % _num == 0);\n'
              '  std::vector<int> sizes;\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4465,
         lineno=31,
         tokens=106,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::split_equal',
         body='void Graph::split_equal(const TensorHandle _input, int _axis,\n'
              '                        int _num, TensorHandle* _outputs)\n'
              '{\n'
              '  // assert the dimension can be equally split\n'
              '  assert(_input->dim[_axis] % _num == 0);\n'
              '  std::vector<int> sizes;\n'
              '  for (int i = 0; i < _num; i++)\n'
              '    sizes.push_back(_input->dim[_axis] / _num);\n'
              '  split(_input, _axis, sizes, _outputs);\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4466,
         lineno=36,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='sizes',
         body='std::vector<int> sizes;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4467,
         lineno=37,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < _num; i++)\n'
              '    sizes.push_back(_input->dim[_axis] / _num);\n'
              '  split(_input, _axis, sizes, _outputs);\n'
              '}\n'
              '\n'
              '/*\n'
              'void Graph::split(Tensor _input, int axis, int _num,\n'
              '                  const int* _sizes, Tensor* outputs)\n'
              '{\n'
              '  int n = _num, sizes[MAX_NUM_OUTPUTS];\n'
              '  for (int i = 0; i < n; i++)\n'
              '    sizes[i] = _sizes[i];\n'
              '  Op op = model->get_or_create_split(_input, axis, n, sizes);\n'
              '  add_edge(_input.op, op, _input.idx, 0);\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4468,
         lineno=51,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < n; i++) {\n'
              '    outputs[i] = op.ptr->outputs[i];\n'
              '    outputs[i].op = op;\n'
              '  }\n'
              '}\n'
              '*/\n'
              '\n'
              '/*\n'
              'void Graph::split(Tensor _input, int axis, int _num, Tensor* '
              'outputs)\n'
              '{\n'
              '  int sizes[MAX_NUM_OUTPUTS];\n'
              '  SplitInfo parent = _input.split[axis], left, right;\n'
              '  int curPos, oldPos = _input.dim[axis];\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4469,
         lineno=64,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = _num - 1; i >= 0; i--) {\n'
              '    parent.divide(left, right, curPos);\n'
              '    sizes[i] = oldPos - curPos;\n'
              '    oldPos = curPos;\n'
              '    parent = left;\n'
              '  }\n'
              '  Graph::split(_input, axis, _num, sizes, outputs);\n'
              '}\n'
              '\n'
              'void Graph::split(Tensor _input, int axis, int size1, int '
              'size2, Tensor* outputs)\n'
              '{')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4470,
         lineno=74,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  int sizes[2];\n'
              '  sizes[0] = size1;\n'
              '  sizes[1] = size2;\n'
              '  Graph::split(_input, axis, 2, sizes, outputs);\n'
              '}\n'
              '*/\n'
              '\n'
              'Op Model::get_or_create_split(const Tensor& _input, int _axis,\n'
              '                              const std::vector<int>& _sizes)\n'
              '{\n'
              '  SplitKey key(_input, _axis,_sizes);\n'
              '  Split* splitOp;\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4471,
         lineno=82,
         tokens=127,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_split',
         body='Op Model::get_or_create_split(const Tensor& _input, int _axis,\n'
              '                              const std::vector<int>& _sizes)\n'
              '{\n'
              '  SplitKey key(_input, _axis,_sizes);\n'
              '  Split* splitOp;\n'
              '  if (split.find(key) != split.end()) {\n'
              '    splitOp = split[key];\n'
              '  } else {\n'
              '    splitOp = new Split(this, _input, _axis, _sizes);\n'
              '    measure_split_cost(splitOp);\n'
              '    split[key] = splitOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = splitOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4472,
         lineno=85,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _axis,_sizes)')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4473,
         lineno=87,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (split.find(key) != split.end()) {\n'
              '    splitOp = split[key];\n'
              '  } else {\n'
              '    splitOp = new Split(this, _input, _axis, _sizes);\n'
              '    measure_split_cost(splitOp);\n'
              '    split[key] = splitOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = splitOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_split(const Tensor& _input, int _axis, '
              'int _n)\n'
              '{\n'
              '  std::vector<int> sizes;\n'
              '  sizes.resize(_n);\n'
              '  SplitInfo parent = _input.split[_axis], left, right;\n'
              '  int curPos, oldPos = _input.dim[_axis];\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4474,
         lineno=94,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4475,
         lineno=100,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_split',
         body='Op Model::get_or_create_split(const Tensor& _input, int _axis, '
              'int _n)\n'
              '{\n'
              '  std::vector<int> sizes;\n'
              '  sizes.resize(_n);\n'
              '  SplitInfo parent = _input.split[_axis], left, right;\n'
              '  int curPos, oldPos = _input.dim[_axis];\n'
              '  for (int i = _n - 1; i > 0; i--) {\n'
              '    parent.divide(left, right, curPos);\n'
              '    sizes[i] = oldPos - curPos;\n'
              '    oldPos = curPos;\n'
              '    parent = left;\n'
              '  }\n'
              '  sizes[0] = oldPos;\n'
              '  Op ret = get_or_create_split(_input, _axis, sizes);\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4476,
         lineno=102,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='sizes',
         body='std::vector<int> sizes;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4477,
         lineno=104,
         tokens=14,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='left',
         body='SplitInfo parent = _input.split[_axis], left, right;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4478,
         lineno=105,
         tokens=13,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='curPos',
         body='int curPos, oldPos = _input.dim[_axis];')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4479,
         lineno=106,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = _n - 1; i > 0; i--) {\n'
              '    parent.divide(left, right, curPos);\n'
              '    sizes[i] = oldPos - curPos;\n'
              '    oldPos = curPos;\n'
              '    parent = left;\n'
              '  }\n'
              '  sizes[0] = oldPos;\n'
              '  Op ret = get_or_create_split(_input, _axis, sizes);\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Split::Split(Model* _model, const Tensor& _input,\n'
              '             ')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4480,
         lineno=117,
         tokens=427,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::Split',
         body='Split::Split(Model* _model, const Tensor& _input,\n'
              '             int _axis, const std::vector<int>& _sizes)\n'
              '  : OpBase(_input, model, OP_SPLIT), axis(_axis), '
              'sizes(_sizes)\n'
              '{\n'
              '  assert(_sizes.size() <= MAX_NUM_OUTPUTS);\n'
              '  numOutputs = _sizes.size();\n'
              '  SplitInfo parent = inputs[0].split[axis], left, right;\n'
              '  int oldPos = inputs[0].dim[axis], curPos;\n'
              '  bool misMatch = false;\n'
              '  for (int i = numOutputs - 1; i >= 0; i--) {\n'
              '    outputs[i].numDim = inputs[0].numDim;\n'
              '    for (int j = 0; j < inputs[0].numDim; j++)\n'
              '      if (j != axis) {\n'
              '        outputs[i].dim[j] = inputs[0].dim[j];\n'
              '        outputs[i].stride[j] = inputs[0].stride[j];\n'
              '        outputs[i].split[j] = inputs[0].split[j];\n'
              '      } else {\n'
              '        outputs[i].dim[j] = _sizes[i];\n'
              '        outputs[i].stride[j] = inputs[0].stride[j];\n'
              '        if (i > 0 && parent.num > 0) {\n'
              '          parent.divide(left, right, curPos);\n'
              '        } else {\n'
              '          curPos = 0;\n'
              '          right = parent;\n'
              '        }\n'
              '        if (oldPos - curPos == _sizes[i])\n'
              '          outputs[i].split[j] = right;\n'
              '        else {\n'
              '          misMatch = true;\n'
              '          outputs[i].split[j] = SplitInfo::NO_SPLIT;\n'
              '        }\n'
              '        oldPos = curPos;\n'
              '        parent = left;\n'
              '      }\n'
              '  }\n'
              '  if (misMatch) {\n'
              '    // Clear split info if mismatch\n'
              '    for (int i = numOutputs - 1; i >= 0; i--)\n'
              '      outputs[i].split[axis] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  for (int i = 0; i < numOutputs; i++)\n'
              '    outputs[i].idx = i;\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4481,
         lineno=118,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='int _axis, const std::vector<int>& _sizes)\n'
              '  : OpBase(_input, model, OP_SPLIT), axis(_axis), '
              'sizes(_sizes)\n'
              '{\n'
              '  assert(_sizes.size() <= MAX_NUM_OUTPUTS);\n'
              '  numOutputs = _sizes.size();\n'
              '  SplitInfo parent = inputs[0].split[axis], left, right;\n'
              '  int oldPos = inputs[0].dim[axis], curPos;\n'
              '  bool misMatch = false;\n'
              '  for (int i = numOutputs - 1; i >= 0; i--) {\n'
              '    outputs[i].numDim = inputs[0].numDim;\n'
              '    for (int j = 0; j < inputs[0].numDim; j++)\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4482,
         lineno=123,
         tokens=15,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='left',
         body='SplitInfo parent = inputs[0].split[axis], left, right;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4483,
         lineno=124,
         tokens=14,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='curPos',
         body='int oldPos = inputs[0].dim[axis], curPos;')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4484,
         lineno=129,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (j != axis) {\n'
              '        outputs[i].dim[j] = inputs[0].dim[j];\n'
              '        outputs[i].stride[j] = inputs[0].stride[j];\n'
              '        outputs[i].split[j] = inputs[0].split[j];\n'
              '      } else {\n'
              '        outputs[i].dim[j] = _sizes[i];\n'
              '        outputs[i].stride[j] = inputs[0].stride[j];\n'
              '        if (i > 0 && parent.num > 0) {\n'
              '          parent.divide(left, right, curPos);\n'
              '        } else {\n'
              '          curPos = 0;\n'
              '          right = parent;\n'
              '        }\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4485,
         lineno=142,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        if (oldPos - curPos == _sizes[i])\n'
              '          outputs[i].split[j] = right;\n'
              '        else {\n'
              '          misMatch = true;\n'
              '          outputs[i].split[j] = SplitInfo::NO_SPLIT;\n'
              '        }\n'
              '        oldPos = curPos;\n'
              '        parent = left;\n'
              '      }\n'
              '  }\n'
              '  if (misMatch) {\n'
              '    // Clear split info if mismatch\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4486,
         lineno=154,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = numOutputs - 1; i >= 0; i--)\n'
              '      outputs[i].split[axis] = SplitInfo::NO_SPLIT;\n'
              '  }\n'
              '  for (int i = 0; i < numOutputs; i++)\n'
              '    outputs[i].idx = i;\n'
              '}\n'
              '\n'
              'Split::~Split(void)\n'
              '{}\n'
              '\n'
              'bool Split::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_AXIS:\n'
              '      *value = axis;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Split::map(void)\n'
              '{\n'
              '  size_t offset = 0;\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4487,
         lineno=161,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::~Split',
         body='Split::~Split(void)\n{}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4488,
         lineno=164,
         tokens=55,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::get_int_parameter',
         body='bool Split::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_AXIS:\n'
              '      *value = axis;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4489,
         lineno=175,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::map',
         body='void Split::map(void)\n'
              '{\n'
              '  size_t offset = 0;\n'
              '  for (int i = 0; i < numOutputs; i++) {\n'
              '    outputs[i].data_ptr = (DATATYPE*)inputs[0].data_ptr + '
              'offset;\n'
              '    offset += outputs[i].dim[axis] * inputs[0].stride[axis];\n'
              '  }\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4490,
         lineno=178,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numOutputs; i++) {\n'
              '    outputs[i].data_ptr = (DATATYPE*)inputs[0].data_ptr + '
              'offset;\n'
              '    offset += outputs[i].dim[axis] * inputs[0].stride[axis];\n'
              '  }\n'
              '}\n'
              '\n'
              'void Split::unmap(void)\n'
              '{}\n'
              '\n'
              'void Split::forward(bool block)\n'
              '{}\n'
              '\n'
              'void Split::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4491,
         lineno=184,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::unmap',
         body='void Split::unmap(void)\n{}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4492,
         lineno=187,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::forward',
         body='void Split::forward(bool block)\n{}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4493,
         lineno=190,
         tokens=104,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Split::collect_costs',
         body='void Split::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += 0;\n'
              '  flops += 0;\n'
              '  mem_acc += 0;\n'
              '  num_kernels += 0;\n'
              '  printf("        cost[Split]: numOutputs(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         numOutputs, 0.0f, exe_time);\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4494,
         lineno=191,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += 0;\n'
              '  flops += 0;\n'
              '  mem_acc += 0;\n'
              '  num_kernels += 0;\n'
              '  printf("        cost[Split]: numOutputs(%d) cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         numOutputs, 0.0f, exe_time);\n'
              '}\n'
              '\n'
              'void Model::measure_split_cost(Split* split)\n'
              '{\n'
              '  // We assume split cost is zero\n'
              '  split->runtime = 0;\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4495,
         lineno=202,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_split_cost',
         body='void Model::measure_split_cost(Split* split)\n'
              '{\n'
              '  // We assume split cost is zero\n'
              '  split->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("        measure[split]: cost(%.4lf)\\n", '
              'split->runtime);\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4496,
         lineno=206,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("        measure[split]: cost(%.4lf)\\n", '
              'split->runtime);\n'
              '}\n'
              '\n'
              '// key ordering is:\n'
              '// axis, n, sizes[0], ..., sizes[n-1], input\n'
              'SplitKey::SplitKey(const Tensor& input, int _axis,\n'
              '                   const std::vector<int>& _sizes)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _axis;\n'
              '  keys[idx++] = _sizes.size();\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4497,
         lineno=212,
         tokens=107,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SplitKey::SplitKey',
         body='SplitKey::SplitKey(const Tensor& input, int _axis,\n'
              '                   const std::vector<int>& _sizes)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _axis;\n'
              '  keys[idx++] = _sizes.size();\n'
              '  for (size_t i = 0; i < _sizes.size(); i++)\n'
              '    keys[idx++] = _sizes[i];\n'
              '  input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4498,
         lineno=218,
         tokens=34,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < _sizes.size(); i++)\n'
              '    keys[idx++] = _sizes[i];\n'
              '  input.serialize(keys, idx);\n')

Fragment(document_cs='adea3a1bc6ca15972e900daf8cabb0e8166a218db4c3f37b58b6376ac7f32560',
         id=4499,
         lineno=221,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4500,
         lineno=1,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either ')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4501,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/shape_kernel.cu\n'
              '  Methods: Model::measure_shape_cost Shape::forward Shape::map '
              'Shape::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_shape_cost unmap\n')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4502,
         lineno=11,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Shape::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void Shape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Shape::forward(bool block)\n'
              '{\n')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4503,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4504,
         lineno=20,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::map',
         body='void Shape::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4505,
         lineno=26,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::unmap',
         body='void Shape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4506,
         lineno=31,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::forward',
         body='void Shape::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4507,
         lineno=33,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_shape_cost(Shape* shape)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  shape->runtime = 0;\n'
              '}\n')

Fragment(document_cs='b079fd0111a84d472421bc965ac79e1add8cf8ca7ec10e0405ef1cb410828a05',
         id=4508,
         lineno=37,
         tokens=31,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_shape_cost',
         body='void Model::measure_shape_cost(Shape* shape)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  shape->runtime = 0;\n'
              '}')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4509,
         lineno=1,
         tokens=149,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#######################################################\n'
              '# Enhanced version of find CUDA.\n'
              '#\n'
              '# Usage:\n'
              '#   find_cuda(${USE_CUDA})\n'
              '#\n'
              '# - When USE_CUDA=ON, use auto search\n'
              '# - When USE_CUDA=/path/to/cuda-path, use the cuda path\n'
              '#\n'
              '# Provide variables:\n'
              '#\n'
              '# - CUDA_FOUND\n'
              '# - CUDA_INCLUDE_DIRS\n'
              '# - CUDA_TOOLKIT_ROOT_DIR\n'
              '# - CUDA_CUDA_LIBRARY\n'
              '# - CUDA_CUDART_LIBRARY\n'
              '# - CUDA_NVRTC_LIBRARY\n'
              '# - CUDA_CUDNN_LIBRARY\n'
              '# - CUDA_CUBLAS_LIBRARY\n'
              '#\n'
              'macro(find_cuda use_cuda)\n'
              '  set(__use_cuda ${use_cuda})\n'
              '  if(__use_cuda STREQUAL "ON")\n'
              '    find_package(CUDA QUIET)\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4510,
         lineno=1,
         tokens=11,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /cmake/FindCUDA.cmake\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4511,
         lineno=25,
         tokens=148,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='  elseif(IS_DIRECTORY ${__use_cuda})\n'
              '    set(CUDA_TOOLKIT_ROOT_DIR ${__use_cuda})\n'
              '    message(STATUS "Custom CUDA_PATH=" '
              '${CUDA_TOOLKIT_ROOT_DIR})\n'
              '    set(CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_ROOT_DIR}/include)\n'
              '    set(CUDA_FOUND TRUE)\n'
              '    if(MSVC)\n'
              '      find_library(CUDA_CUDART_LIBRARY cudart\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n'
              '    else(MSVC)\n'
              '      find_library(CUDA_CUDART_LIBRARY cudart\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib)\n'
              '    endif(MSVC)\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4512,
         lineno=39,
         tokens=3,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='  endif()\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4513,
         lineno=40,
         tokens=150,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '  # additional libraries\n'
              '  if(CUDA_FOUND)\n'
              '    if(MSVC)\n'
              '      find_library(CUDA_CUDA_LIBRARY cuda\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n'
              '      find_library(CUDA_NVRTC_LIBRARY nvrtc\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n'
              '      find_library(CUDA_CUDNN_LIBRARY cudnn\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n'
              '      find_library(CUDA_CUBLAS_LIBRARY cublas\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4514,
         lineno=55,
         tokens=150,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n'
              '    else(MSVC)\n'
              '      find_library(_CUDA_CUDA_LIBRARY cuda\n'
              '        PATHS ${CUDA_TOOLKIT_ROOT_DIR}\n'
              '        PATH_SUFFIXES lib lib64 targets/x86_64-linux/lib '
              'targets/x86_64-linux/lib/stubs lib64/stubs\n'
              '        NO_DEFAULT_PATH)\n'
              '      if(_CUDA_CUDA_LIBRARY)\n'
              '        set(CUDA_CUDA_LIBRARY ${_CUDA_CUDA_LIBRARY})\n'
              '      endif()\n'
              '      find_library(CUDA_NVRTC_LIBRARY nvrtc\n'
              '        PATHS ${CUDA_TOOLKIT_ROOT_DIR}\n'
              '        PATH_SUFFIXES lib lib64 targets/x86_64-linux/lib '
              'targets/x86_64-linux/lib/stubs lib64/stubs '
              'lib/x86_64-linux-gnu\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4515,
         lineno=67,
         tokens=149,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='        NO_DEFAULT_PATH)\n'
              '      find_library(CUDA_CUDNN_LIBRARY cudnn\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib)\n'
              '      find_library(CUDA_CUBLAS_LIBRARY cublas\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib64\n'
              '        ${CUDA_TOOLKIT_ROOT_DIR}/lib)\n'
              '    endif(MSVC)\n'
              '    message(STATUS "Found CUDA_TOOLKIT_ROOT_DIR=" '
              '${CUDA_TOOLKIT_ROOT_DIR})\n'
              '    message(STATUS "Found CUDA_CUDA_LIBRARY=" '
              '${CUDA_CUDA_LIBRARY})\n'
              '    message(STATUS "Found CUDA_CUDART_LIBRARY=" '
              '${CUDA_CUDART_LIBRARY})\n'
              '    message(STATUS "Found CUDA_NVRTC_LIBRARY=" '
              '${CUDA_NVRTC_LIBRARY})\n')

Fragment(document_cs='b08d77acf46b447cbdb2eacd62007bca707877d228fe67e8efdc6c3aa960af86',
         id=4516,
         lineno=79,
         tokens=49,
         depth=3,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='    message(STATUS "Found CUDA_CUDNN_LIBRARY=" '
              '${CUDA_CUDNN_LIBRARY})\n'
              '    message(STATUS "Found CUDA_CUBLAS_LIBRARY=" '
              '${CUDA_CUBLAS_LIBRARY})\n'
              '  endif(CUDA_FOUND)\n'
              'endmacro(find_cuda)\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4517,
         lineno=1,
         tokens=133,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso\n'
              '\n'
              'def get_pads(kernel, padding):\n'
              '    if sum(padding) == 0 and sum(kernel) > 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads\n'
              '\n'
              'def conv2d(graph, v, out_channels, kernel=(1, 1), stride=(1, '
              '1), padding=(0, 0)):\n'
              '    w = graph.new_weight(dims=(out_channels, v.dim(1), '
              '*kernel))\n'
              '    v = graph.conv2d(input=v, weight=w, strides=stride, '
              'padding=get_pads(kernel, padding), activation="RELU")\n'
              '    return v\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4518,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4519,
         lineno=1,
         tokens=153,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/inceptionv3.py\n'
              '  Functions: conv2d get_pads inception_a inception_b '
              'inception_c inception_d inception_e inception_front '
              'inception_logits inception_v3 pool2d\n'
              '  Variables and usages: NotImplemented activation alpha '
              'avgpool2d batch_size budget channels_7x7 concat dims graph '
              'input kernel kernels maxpool2d new_graph new_input new_weight '
              'opt_graph optimize out_channels padding pads pool_features '
              'pool_type print run_time stride strides taso v1x1 v3x3 v3x3a '
              'v3x3b v3x3dbl v3x3dbla v3x3dblb v5x5 v7x7 v7x7dbl v7x7x3 v_pool '
              'weight\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4520,
         lineno=3,
         tokens=42,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_pads',
         body='def get_pads(kernel, padding):\n'
              '    if sum(padding) == 0 and sum(kernel) > 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4521,
         lineno=10,
         tokens=85,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='conv2d',
         body='def conv2d(graph, v, out_channels, kernel=(1, 1), stride=(1, '
              '1), padding=(0, 0)):\n'
              '    w = graph.new_weight(dims=(out_channels, v.dim(1), '
              '*kernel))\n'
              '    v = graph.conv2d(input=v, weight=w, strides=stride, '
              'padding=get_pads(kernel, padding), activation="RELU")\n'
              '    return v')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4522,
         lineno=14,
         tokens=33,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def pool2d(graph, v, pool_type, kernel=(1, 1), stride=(1, 1), '
              'padding=(0, 0)):\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4523,
         lineno=15,
         tokens=32,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d',
         body='def pool2d(graph, v, pool_type, kernel=(1, 1), stride=(1, 1), '
              'padding=(0, 0)):\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4524,
         lineno=16,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="    if pool_type == 'global_avg':\n"
              '        pads = "VALID"\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=[1, 1], padding=pads)\n'
              "    elif pool_type == 'avg':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              "    elif pool_type == 'max':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.maxpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              '    else:\n'
              '        raise NotImplemented\n'
              '    return x\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4525,
         lineno=16,
         tokens=133,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='pool2d',
         body="    if pool_type == 'global_avg':\n"
              '        pads = "VALID"\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=[1, 1], padding=pads)\n'
              "    elif pool_type == 'avg':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              "    elif pool_type == 'max':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.maxpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              '    else:\n'
              '        raise NotImplemented\n'
              '    return x')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4526,
         lineno=28,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='        \n'
              '\n'
              'def inception_front(graph, v):  # 3 x 299 x 299\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3), '
              'stride=(2, 2))  # 32 x 149 x 149\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3))  # 32 '
              'x 147 x 147\n'
              '    v = conv2d(graph, v, out_channels=64, kernel=(3, 3), '
              'padding=(1, 1))  # 64 x 147 x 147\n'
              '    v')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4527,
         lineno=30,
         tokens=135,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_front',
         body='def inception_front(graph, v):  # 3 x 299 x 299\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3), '
              'stride=(2, 2))  # 32 x 149 x 149\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3))  # 32 '
              'x 147 x 147\n'
              '    v = conv2d(graph, v, out_channels=64, kernel=(3, 3), '
              'padding=(1, 1))  # 64 x 147 x 147\n'
              '    v = po')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4528,
         lineno=34,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=" = pool2d(graph, v, pool_type='max', kernel=(3, 3), stride=(2, "
              '2))  # 64 x 73 x 73\n'
              '    v = conv2d(graph, v, 80, kernel=(1, 1))  # 80 x 73 x 73\n'
              '    v = conv2d(graph, v, out_channels=192, kernel=(3, 3))  # '
              '192 x 71 x 71\n'
              "    v = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))  # 192 x 35 x 35\n'
              '    return v\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4529,
         lineno=34,
         tokens=144,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_front',
         body="ol2d(graph, v, pool_type='max', kernel=(3, 3), stride=(2, 2))  "
              '# 64 x 73 x 73\n'
              '    v = conv2d(graph, v, 80, kernel=(1, 1))  # 80 x 73 x 73\n'
              '    v = conv2d(graph, v, out_channels=192, kernel=(3, 3))  # '
              '192 x 71 x 71\n'
              "    v = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))  # 192 x 35 x 35\n'
              '    return v')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4530,
         lineno=39,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_a(graph, v, pool_features):\n'
              '    v1x1 = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '\n'
              '    v5x5 = conv2d(graph, v, out_channels=48, kernel=(1, 1))\n'
              '    v5x5 = conv2d(graph, v5x5, out_channels=64, kernel=(5, 5), '
              'padding=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_chann')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4531,
         lineno=41,
         tokens=142,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_a',
         body='def inception_a(graph, v, pool_features):\n'
              '    v1x1 = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '\n'
              '    v5x5 = conv2d(graph, v, out_channels=48, kernel=(1, 1))\n'
              '    v5x5 = conv2d(graph, v5x5, out_channels=64, kernel=(5, 5), '
              'padding=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_chann')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4532,
         lineno=48,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='els=96, kernel=(3, 3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), padding=(1, 1))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=pool_features, '
              'kernel=(1, 1))\n'
              '    return graph.concat(1, [v1x1, v5x5, v3x3dbl, v_pool])\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4533,
         lineno=48,
         tokens=144,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_a',
         body='els=96, kernel=(3, 3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), padding=(1, 1))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=pool_features, '
              'kernel=(1, 1))\n'
              '    return graph.concat(1, [v1x1, v5x5, v3x3dbl, v_pool])')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4534,
         lineno=54,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_b(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, ')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4535,
         lineno=56,
         tokens=94,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_b',
         body='def inception_b(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4536,
         lineno=60,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v3x3dbl, v_pool]);\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4537,
         lineno=60,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_b',
         body='), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v3x3dbl, v_pool]);')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4538,
         lineno=65,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_c(graph, v, channels_7x7):\n'
              '    v1x1 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '\n'
              '    c7 = channels_7x7\n'
              '    v7x7 = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=c7, kernel=')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4539,
         lineno=67,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_c',
         body='def inception_c(graph, v, channels_7x7):\n'
              '    v1x1 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '\n'
              '    c7 = channels_7x7\n'
              '    v7x7 = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=c7, kernel=(1')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4540,
         lineno=72,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(1, 7), padding=(0, 3))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=192, kernel=(7, 1), '
              'padding=(3, 0))\n'
              '\n'
              '    v7x7dbl = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), paddin')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4541,
         lineno=72,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_c',
         body=', 7), padding=(0, 3))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=192, kernel=(7, 1), '
              'padding=(3, 0))\n'
              '\n'
              '    v7x7dbl = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4542,
         lineno=76,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='g=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(1, 7), padding=(0, 3))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=192, kernel=(')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4543,
         lineno=76,
         tokens=105,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_c',
         body='=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(1, 7), padding=(0, 3))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=192, kernel=(')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4544,
         lineno=79,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='1, 7), padding=(0, 3))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v7x7, v7x7dbl, v_pool])\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4545,
         lineno=79,
         tokens=100,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_c',
         body='1, 7), padding=(0, 3))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v7x7, v7x7dbl, v_pool])')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4546,
         lineno=84,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_d(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v3x3 = conv2d(graph, v3x3, out_channels=320, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v7x7x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(1, '
              '7), paddi')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4547,
         lineno=86,
         tokens=128,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_d',
         body='def inception_d(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v3x3 = conv2d(graph, v3x3, out_channels=320, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v7x7x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(1, '
              '7), paddin')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4548,
         lineno=91,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ng=(0, 3))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(7, '
              '1), padding=(3, 0))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(3, '
              '3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v7x7x3, v_pool])\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4549,
         lineno=91,
         tokens=138,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_d',
         body='g=(0, 3))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(7, '
              '1), padding=(3, 0))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(3, '
              '3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v7x7x3, v_pool])')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4550,
         lineno=97,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_e(graph, v):\n'
              '    v1x1 = conv2d(graph, v, out_channels=320, kernel=(1, 1))\n'
              '\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(1, 1))\n'
              '    v3x3a = conv2d(graph, v3x3, out_channels=384, kernel=(1, '
              '3), pa')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4551,
         lineno=99,
         tokens=87,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_e',
         body='def inception_e(graph, v):\n'
              '    v1x1 = conv2d(graph, v, out_channels=320, kernel=(1, 1))\n'
              '\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(1, 1))\n'
              '    v3x3a = conv2d(graph, v3x3, out_channels=384, kernel=(1, '
              '3), pad')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4552,
         lineno=103,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dding=(0, 1))\n'
              '    v3x3b = conv2d(graph, v3x3, out_channels=384, kernel=(3, '
              '1), padding=(1, 0))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=448, kernel=(1, '
              '1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=384, kerne')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4553,
         lineno=103,
         tokens=94,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_e',
         body='ding=(0, 1))\n'
              '    v3x3b = conv2d(graph, v3x3, out_channels=384, kernel=(3, '
              '1), padding=(1, 0))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=448, kernel=(1, '
              '1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=384, kerne')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4554,
         lineno=107,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='l=(3, 3), padding=(1, 1))\n'
              '    v3x3dbla = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(1, 3), padding=(0, 1))\n'
              '    v3x3dblb = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(3, 1), padding=(1, 0))\n'
              '\n'
              '    v_pool = pool2')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4555,
         lineno=107,
         tokens=96,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_e',
         body='l=(3, 3), padding=(1, 1))\n'
              '    v3x3dbla = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(1, 3), padding=(0, 1))\n'
              '    v3x3dblb = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(3, 1), padding=(1, 0))\n'
              '\n'
              '    v_pool = pool2')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4556,
         lineno=111,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body="d(graph, v, pool_type='avg', kernel=(3, 3), stride=(1, 1), "
              'padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v3x3a, v3x3b, v3x3dbla, '
              'v3x3dblb, v_pool])\n'
              '\n'
              '\n'
              'def inception_logits(graph, v):\n'
              "    return pool2d(graph, v, pool_type='global_avg')\n")

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4557,
         lineno=111,
         tokens=97,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_e',
         body="d(graph, v, pool_type='avg', kernel=(3, 3), stride=(1, 1), "
              'padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v3x3a, v3x3b, v3x3dbla, '
              'v3x3dblb, v_pool])')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4558,
         lineno=116,
         tokens=22,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_logits',
         body='def inception_logits(graph, v):\n'
              "    return pool2d(graph, v, pool_type='global_avg')")

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4559,
         lineno=118,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'def inception_v3(batch_size=1):\n'
              '    graph = taso.new_graph()\n'
              '    v = graph.new_input(dims=(batch_size, 3, 299, 299))\n'
              '    v = inception_front(graph, v)\n'
              '    v = inception_a(graph, v, 32)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_b(graph, v)\n'
              '    v = inception_c(graph, v, 128)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, ')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4560,
         lineno=120,
         tokens=92,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_v3',
         body='def inception_v3(batch_size=1):\n'
              '    graph = taso.new_graph()\n'
              '    v = graph.new_input(dims=(batch_size, 3, 299, 299))\n'
              '    v = inception_front(graph, v)\n'
              '    v = inception_a(graph, v, 32)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_b(graph, v)')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4561,
         lineno=127,
         tokens=88,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='inception_v3',
         body='\n'
              '    v = inception_c(graph, v, 128)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, v, 192)\n'
              '    v = inception_d(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_logits(graph, v)\n'
              '    return graph')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4562,
         lineno=130,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='v, 160)\n'
              '    v = inception_c(graph, v, 192)\n'
              '    v = inception_d(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_logits(graph, v)\n'
              '    return graph\n'
              '\n'
              'graph = inception_v3(batch_size=32)  # change batch_size from 4 '
              'to 8 would cause error.\n'
              'opt_graph = taso.optimize(graph, alpha=1.0, budget=30)\n'
              '\n'
              'print(graph.run_time())\n'
              'print(opt_graph.run_time())\n')

Fragment(document_cs='b24dba1f015a58a0b0289927829e2abee9f46779bd47812d9e7f4203ddfeac46',
         id=4563,
         lineno=138,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# change batch_size from 4 to 8 would cause error.')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4564,
         lineno=1,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed unde')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4565,
         lineno=1,
         tokens=93,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/transpose.cc\n'
              '  Functions: key permutation_to_index\n'
              '  Methods: Graph::transpose Model::get_or_create_transpose '
              'Transpose::Transpose Transpose::collect_costs '
              'Transpose::get_int_parameter Transpose::~Transpose '
              'TransposeKey::TransposeKey\n'
              '  Variables: permVec ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP Transpose TransposeKey collect_costs '
              'get_int_parameter get_or_create_transpose transpose\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4566,
         lineno=10,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r the License is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'int permutation_to_index(const std::vector<int>& perm)\n'
              '{\n'
              '  // check perm\n'
              '  for (size_t i = 0; i < perm.size(); i++) {\n'
              '    assert(perm[i] >= 0 && perm[i] < (int)perm.size());\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4567,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4568,
         lineno=19,
         tokens=12,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='permutation_to_index',
         body='permutation_to_index(const std::vector<int>& perm)')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4569,
         lineno=19,
         tokens=128,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='permutation_to_index',
         body='int permutation_to_index(const std::vector<int>& perm)\n'
              '{\n'
              '  // check perm\n'
              '  for (size_t i = 0; i < perm.size(); i++) {\n'
              '    assert(perm[i] >= 0 && perm[i] < (int)perm.size());\n'
              '    for (size_t j = i + 1; j < perm.size(); j++)\n'
              '      assert(perm[i] != perm[j]);\n'
              '  }\n'
              '  int idx = 0;\n'
              '  for (size_t i = 0; i < perm.size(); i++)\n'
              '    idx = idx * perm.size() + perm[i];\n'
              '  return idx;\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4570,
         lineno=24,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (size_t j = i + 1; j < perm.size(); j++)\n'
              '      assert(perm[i] != perm[j]);\n'
              '  }\n'
              '  int idx = 0;\n'
              '  for (size_t i = 0; i < perm.size(); i++)\n'
              '    idx = idx * perm.size() + perm[i];\n'
              '  return idx;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::transpose(const TensorHandle _input,\n'
              '                              const std::vector<int>& perm,\n'
              '                              bool _shuffle)\n'
              '{\n'
              '  Op op = model->get_or_create_transpose(*_input, perm, '
              '_shuffle);\n'
              '  assert(o')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4571,
         lineno=33,
         tokens=99,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::transpose',
         body='TensorHandle Graph::transpose(const TensorHandle _input,\n'
              '                              const std::vector<int>& perm,\n'
              '                              bool _shuffle)\n'
              '{\n'
              '  Op op = model->get_or_create_transpose(*_input, perm, '
              '_shuffle);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4572,
         lineno=38,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='p != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_transpose(Tensor _input, int permIdx,\n'
              '                                  bool _shuffle)\n'
              '{\n'
              '  int ndim = _input.numDim;\n'
              '  std::vector<int> permVec;\n'
              '  int permArray[MAX_DIM];\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4573,
         lineno=45,
         tokens=211,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_transpose',
         body='Op Model::get_or_create_transpose(Tensor _input, int permIdx,\n'
              '                                  bool _shuffle)\n'
              '{\n'
              '  int ndim = _input.numDim;\n'
              '  std::vector<int> permVec;\n'
              '  int permArray[MAX_DIM];\n'
              '  for (int i = ndim - 1; i >= 0; i--) {\n'
              '    permArray[i] = permIdx % ndim;\n'
              '    permIdx = permIdx / ndim;\n'
              '  }\n'
              '  if (permIdx != 0) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    for (int j = i + 1; j < ndim; j++)\n'
              '      if (permArray[i] == permArray[j]) {\n'
              '        return Op::INVALID_OP;\n'
              '      }\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    permVec.push_back(permArray[i]);\n'
              '  return get_or_create_transpose(_input, permVec, _shuffle);\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4574,
         lineno=49,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='permVec',
         body='std::vector<int> permVec;')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4575,
         lineno=51,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = ndim - 1; i >= 0; i--) {\n'
              '    permArray[i] = permIdx % ndim;\n'
              '    permIdx = permIdx / ndim;\n'
              '  }\n'
              '  if (permIdx != 0) {\n'
              '    return Op::INVALID_OP;\n'
              '  }\n'
              '  for (int i = 0; i < ndim; i++)\n'
              '    for (int j = i + 1; j < ndim; j++)\n'
              '      if (permArray[i] == permArray[j]) {\n'
              '        return Op::INVALID_OP;\n'
              '      }\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4576,
         lineno=63,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < ndim; i++)\n'
              '    permVec.push_back(permArray[i]);\n'
              '  return get_or_create_transpose(_input, permVec, _shuffle);\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_transpose(Tensor _input,\n'
              '                                  const std::vector<int>& '
              'perm,\n'
              '                                  bool _shuffle)\n'
              '{\n'
              '  TransposeKey key(_input, perm, _shuffle);\n'
              '  Transpose* transposeOp;\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4577,
         lineno=68,
         tokens=131,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_transpose',
         body='Op Model::get_or_create_transpose(Tensor _input,\n'
              '                                  const std::vector<int>& '
              'perm,\n'
              '                                  bool _shuffle)\n'
              '{\n'
              '  TransposeKey key(_input, perm, _shuffle);\n'
              '  Transpose* transposeOp;\n'
              '  if (transpose.find(key) != transpose.end()) {\n'
              '    transposeOp = transpose[key];\n'
              '  } else {\n'
              '    transposeOp = new Transpose(this, _input, perm, _shuffle);\n'
              '    measure_transpose_cost(transposeOp);\n'
              '    transpose[key] = transposeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = transposeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4578,
         lineno=72,
         tokens=9,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, perm, _shuffle)')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4579,
         lineno=74,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (transpose.find(key) != transpose.end()) {\n'
              '    transposeOp = transpose[key];\n'
              '  } else {\n'
              '    transposeOp = new Transpose(this, _input, perm, _shuffle);\n'
              '    measure_transpose_cost(transposeOp);\n'
              '    transpose[key] = transposeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = transposeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Transpose::Transpose(Model* _mod')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4580,
         lineno=81,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4581,
         lineno=87,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='el, Tensor _input,\n'
              '                     const std::vector<int>& _perm,\n'
              '                     bool _shuffle)\n'
              ': OpBase(_input, _model, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '{\n'
              '  assert(shuffle);\n'
              '  permIdx = permutation_to_index(_perm);\n'
              '  assert(_input.numDim == (int)_perm.size());\n'
              '  numOutputs = 1;\n'
              '  // set dims and strides\n'
              '  outputs[0].numDim = _input.numDim;\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4582,
         lineno=87,
         tokens=272,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::Transpose',
         body='Transpose::Transpose(Model* _model, Tensor _input,\n'
              '                     const std::vector<int>& _perm,\n'
              '                     bool _shuffle)\n'
              ': OpBase(_input, _model, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '{\n'
              '  assert(shuffle);\n'
              '  permIdx = permutation_to_index(_perm);\n'
              '  assert(_input.numDim == (int)_perm.size());\n'
              '  numOutputs = 1;\n'
              '  // set dims and strides\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  for (size_t i = 0; i < _perm.size(); i++) {\n'
              '    outputs[0].dim[i] = _input.dim[_perm[i]];\n'
              '    outputs[0].split[i] = _input.split[_perm[i]];\n'
              '  }\n'
              '  if (shuffle) {\n'
              '    int size = 1;\n'
              '    for (int i = _perm.size() - 1; i >= 0; i--) {\n'
              '      outputs[0].stride[i] = size;\n'
              '      size *= outputs[0].dim[i];\n'
              '    }\n'
              '    assert(size == outputs[0].volume());\n'
              '  } else {\n'
              '    for (size_t i = 0; i < _perm.size(); i++)\n'
              '      outputs[0].stride[i] = _input.stride[_perm[i]];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4583,
         lineno=98,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < _perm.size(); i++) {\n'
              '    outputs[0].dim[i] = _input.dim[_perm[i]];\n'
              '    outputs[0].split[i] = _input.split[_perm[i]];\n'
              '  }\n'
              '  if (shuffle) {\n'
              '    int size = 1;\n'
              '    for (int i = _perm.size() - 1; i >= 0; i--) {\n'
              '      outputs[0].stride[i] = size;\n'
              '      size *= outputs[0].dim[i];\n'
              '    }\n'
              '    assert(size == outputs[0].volume());\n'
              '  } else {\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4584,
         lineno=110,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (size_t i = 0; i < _perm.size(); i++)\n'
              '      outputs[0].stride[i] = _input.stride[_perm[i]];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Transpose::~Transpose(void)\n'
              '{}\n'
              '\n'
              'bool Transpose::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_NUMDIM:\n'
              '      *value = outputs[0].numDim;\n'
              '      return true;\n'
              '    case')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4585,
         lineno=116,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::~Transpose',
         body='Transpose::~Transpose(void)\n{}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4586,
         lineno=119,
         tokens=100,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::get_int_parameter',
         body='bool Transpose::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_NUMDIM:\n'
              '      *value = outputs[0].numDim;\n'
              '      return true;\n'
              '    case PM_PERM:\n'
              '      *value = permIdx;\n'
              '      return true;\n'
              '    case PM_OUTSHUFFLE:\n'
              '      *value = (int) shuffle;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4587,
         lineno=125,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' PM_PERM:\n'
              '      *value = permIdx;\n'
              '      return true;\n'
              '    case PM_OUTSHUFFLE:\n'
              '      *value = (int) shuffle;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Transpose::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4588,
         lineno=136,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::collect_costs',
         body='void Transpose::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  if (shuffle) {\n'
              '    exe_time += runtime;\n'
              '    flops += outputs[0].volume();\n'
              '    mem_acc += outputs[0].volume();\n'
              '    num_kernels += 1;\n'
              '  }\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4589,
         lineno=139,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (shuffle) {\n'
              '    exe_time += runtime;\n'
              '    flops += outputs[0].volume();\n'
              '    mem_acc += outputs[0].volume();\n'
              '    num_kernels += 1;\n'
              '  }\n'
              '}\n'
              '\n'
              'TransposeKey::TransposeKey(Tensor _input,\n'
              '                           const std::vector<int>& perm,\n'
              '                           bool _shuffle)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = permutation_to_index(perm);\n'
              '  keys[idx++] = (int) _shuffle;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4590,
         lineno=147,
         tokens=86,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TransposeKey::TransposeKey',
         body='TransposeKey::TransposeKey(Tensor _input,\n'
              '                           const std::vector<int>& perm,\n'
              '                           bool _shuffle)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = permutation_to_index(perm);\n'
              '  keys[idx++] = (int) _shuffle;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='b2bc93e0485fb6ac59d54d76a886111feea4ac3196be44bd77868f2f4d894489',
         id=4591,
         lineno=155,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4592,
         lineno=1,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' ')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4593,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/mul_mkl.cc\n'
              '  Methods: Model::measure_mul_cost Mul::forward Mul::map '
              'Mul::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_mul_cost unmap\n')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4594,
         lineno=13,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='* limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Mul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr ')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4595,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4596,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4597,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::map',
         body='void Mul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4598,
         lineno=25,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='= malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Mul::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Mul::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_mul_cost(Mul* m)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4599,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::unmap',
         body='void Mul::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4600,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Mul::forward',
         body='void Mul::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='b5156cb6b06b671dada061db9c72e813a15c5557e2ee7ecf3864e80761af0ea8',
         id=4601,
         lineno=42,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_mul_cost',
         body='void Model::measure_mul_cost(Mul* m)\n{\n  assert(false);\n}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4602,
         lineno=1,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing permissi')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4603,
         lineno=1,
         tokens=81,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/shape.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::shape Model::get_or_create_shape Shape::Shape '
              'Shape::collect_costs Shape::get_int_parameter Shape::~Shape '
              'ShapeKey::ShapeKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Shape ShapeKey collect_costs '
              'get_int_parameter get_or_create_shape shape\n')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4604,
         lineno=12,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::shape(const TensorHandle _input,\n'
              '                          OpType _type)\n'
              '{\n'
              '  Op op = model->get_or_create_shape(*_input, _type);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_shape(const Tensor& _input,\n'
              '                              OpType _type)\n'
              '{\n'
              '  ShapeKey key(_input, _type);\n'
              '  Shape* shapeOp;\n')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4605,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4606,
         lineno=19,
         tokens=88,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::shape',
         body='TensorHandle Graph::shape(const TensorHandle _input,\n'
              '                          OpType _type)\n'
              '{\n'
              '  Op op = model->get_or_create_shape(*_input, _type);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4607,
         lineno=30,
         tokens=114,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_shape',
         body='Op Model::get_or_create_shape(const Tensor& _input,\n'
              '                              OpType _type)\n'
              '{\n'
              '  ShapeKey key(_input, _type);\n'
              '  Shape* shapeOp;\n'
              '  if (shape.find(key) != shape.end()) {\n'
              '    shapeOp = shape[key];\n'
              '  } else {\n'
              '    shapeOp = new Shape(this, _input, _type);\n'
              '    measure_shape_cost(shapeOp);\n'
              '    shape[key] = shapeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = shapeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4608,
         lineno=33,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type)')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4609,
         lineno=35,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (shape.find(key) != shape.end()) {\n'
              '    shapeOp = shape[key];\n'
              '  } else {\n'
              '    shapeOp = new Shape(this, _input, _type);\n'
              '    measure_shape_cost(shapeOp);\n'
              '    shape[key] = shapeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = shapeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Shape::Shape(Model* _model, const Tensor& _input, OpType '
              '_type)\n'
              ': OpBase(_input, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 1;\n')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4610,
         lineno=42,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4611,
         lineno=48,
         tokens=169,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::Shape',
         body='Shape::Shape(Model* _model, const Tensor& _input, OpType '
              '_type)\n'
              ': OpBase(_input, _model, _type)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 1;\n'
              '  if (type == OP_SHAPE) {\n'
              '    outputs[0].dim[0] = _input.numDim;\n'
              '    outputs[0].split[0] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[0] = 1;\n'
              '  } else {\n'
              '    assert(type == OP_SIZE);\n'
              '    outputs[0].dim[0] = 1;\n'
              '    outputs[0].split[0] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[0] = 1;\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4612,
         lineno=53,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (type == OP_SHAPE) {\n'
              '    outputs[0].dim[0] = _input.numDim;\n'
              '    outputs[0].split[0] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[0] = 1;\n'
              '  } else {\n'
              '    assert(type == OP_SIZE);\n'
              '    outputs[0].dim[0] = 1;\n'
              '    outputs[0].split[0] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[0] = 1;\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Shape::~Shape(void)\n'
              '{}\n'
              '\n'
              'bool Shape::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4613,
         lineno=66,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::~Shape',
         body='Shape::~Shape(void)\n{}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4614,
         lineno=69,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::get_int_parameter',
         body='bool Shape::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4615,
         lineno=71,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Shape::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Shape]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'ShapeKey::ShapeKey(const Tensor& _input, OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4616,
         lineno=74,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::collect_costs',
         body='void Shape::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Shape]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4617,
         lineno=83,
         tokens=64,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ShapeKey::ShapeKey',
         body='ShapeKey::ShapeKey(const Tensor& _input, OpType _type)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='b7ef53b0e86d2747161f6f7e5417d77cfe87d559e2bf00c136779e528d18f769',
         id=4618,
         lineno=88,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4619,
         lineno=1,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limit')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4620,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/where_mkl.cc\n'
              '  Methods: Model::measure_where_cost Where::forward Where::map '
              'Where::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_where_cost unmap\n')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4621,
         lineno=13,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Where::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4622,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4623,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4624,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::map',
         body='void Where::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4625,
         lineno=25,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(outputSize));\n'
              '}\n'
              '\n'
              'void Where::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Where::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_where_cost(Where* where)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4626,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::unmap',
         body='void Where::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4627,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Where::forward',
         body='void Where::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='b8d4f01a114721c8d119c96b1abd575c644a413fde462a587bc9b821700308d4',
         id=4628,
         lineno=42,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_where_cost',
         body='void Model::measure_where_cost(Where* where)\n'
              '{\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4629,
         lineno=1,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4630,
         lineno=1,
         tokens=126,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /include/taso/substitution.h\n'
              '  Classes: DstOp GraphCompare GraphXfer OpX SrcOp\n'
              '  Structs: PMConstraint SubEdge SubEdgeCompare TNConstraint '
              'TensorX TensorXCompare\n'
              '  Enums: Compare\n'
              '  Macros: _SUBSTITUTION_H_\n'
              '  Functions: DstOp GraphXfer OpX PMConstraint SrcOp SubEdge '
              'TNConstraint TensorX\n'
              '  Fields: comp constraints dim1 dstOps idx inputs mapOp '
              'mappedInputs mappedOps mappedOutputs para para1 pmConstraints '
              'singlePara srcIdx srcOps tensorId tnConstraints type value\n'
              '  Namespaces: taso\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4631,
         lineno=10,
         tokens=146,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' License is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _SUBSTITUTION_H_\n'
              '#define _SUBSTITUTION_H_\n'
              '#include "taso/ops.h"\n'
              '#include "rules.pb.h"\n'
              '#include <queue>\n'
              'namespace taso {\n'
              '\n'
              'enum Compare {\n'
              '  COMPARE_EQ,\n'
              '  COMPARE_NE,\n'
              '  COMPARE_LT,\n'
              '  COMPARE_LE,\n'
              '  COMPARE_GT,\n'
              '  COMPARE_GE,\n'
              '};\n'
              '\n'
              'struct PMConstraint {\n'
              '  PMConstraint(Compare comp, PMParameter para, int value);\n'
              '  Compare comp;\n'
              '  PMParameter para;\n'
              '  int value;\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4632,
         lineno=17,
         tokens=7,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_SUBSTITUTION_H_',
         body='#define _SUBSTITUTION_H_')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4633,
         lineno=21,
         tokens=7,
         depth=1,
         parent_id=None,
         category='namespace',
         summary=False,
         name='taso',
         body="namespace b'taso' {...}")

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4634,
         lineno=23,
         tokens=34,
         depth=3,
         parent_id=None,
         category='enum',
         summary=False,
         name='Compare',
         body='enum Compare {\n'
              '  COMPARE_EQ,\n'
              '  COMPARE_NE,\n'
              '  COMPARE_LT,\n'
              '  COMPARE_LE,\n'
              '  COMPARE_GT,\n'
              '  COMPARE_GE,\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4635,
         lineno=32,
         tokens=32,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='PMConstraint',
         body='struct PMConstraint {\n'
              '  PMConstraint(Compare comp, PMParameter para, int value);\n'
              '  Compare comp;\n'
              '  PMParameter para;\n'
              '  int value;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4636,
         lineno=33,
         tokens=13,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='PMConstraint',
         body='PMConstraint(Compare comp, PMParameter para, int value)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4637,
         lineno=34,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='comp',
         body='Compare comp;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4638,
         lineno=35,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='para',
         body='PMParameter para;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4639,
         lineno=36,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='value',
         body='int value;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4640,
         lineno=38,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'struct TNConstraint {\n'
              '  TNConstraint(Compare comp, TNParameter para, DIMParameter '
              'dim, int value);\n'
              '  TNConstraint(Compare comp, TNParameter para1, DIMParameter '
              'dim1,\n'
              '               TNParameter para2, DIMParameter dim2);\n'
              '  bool singlePara;\n'
              '  Compare comp;\n'
              '  TNParameter para1, para2;\n'
              '  DIMParameter dim1, dim2;\n'
              '  int value;\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4641,
         lineno=39,
         tokens=82,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TNConstraint',
         body='struct TNConstraint {\n'
              '  TNConstraint(Compare comp, TNParameter para, DIMParameter '
              'dim, int value);\n'
              '  TNConstraint(Compare comp, TNParameter para1, DIMParameter '
              'dim1,\n'
              '               TNParameter para2, DIMParameter dim2);\n'
              '  bool singlePara;\n'
              '  Compare comp;\n'
              '  TNParameter para1, para2;\n'
              '  DIMParameter dim1, dim2;\n'
              '  int value;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4642,
         lineno=40,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TNConstraint',
         body='TNConstraint(Compare comp, TNParameter para, DIMParameter dim, '
              'int value)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4643,
         lineno=41,
         tokens=27,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TNConstraint',
         body='TNConstraint(Compare comp, TNParameter para1, DIMParameter '
              'dim1,\n'
              '               TNParameter para2, DIMParameter dim2)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4644,
         lineno=43,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='singlePara',
         body='bool singlePara;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4645,
         lineno=44,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='comp',
         body='Compare comp;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4646,
         lineno=45,
         tokens=8,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='para1',
         body='TNParameter para1, para2;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4647,
         lineno=46,
         tokens=8,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='dim1',
         body='DIMParameter dim1, dim2;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4648,
         lineno=47,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='value',
         body='int value;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4649,
         lineno=49,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class OpX;\n'
              'class GraphXfer;\n'
              'struct TensorX {\n'
              '  TensorX(void): op(NULL), idx(0) {}\n'
              '  TensorX(OpX* _op, int _idx): op(_op), idx(_idx) {}\n'
              '  Tensor to_tensor(const GraphXfer* xfer) const;\n'
              '  OpX* op;\n'
              '  int idx;\n'
              '};\n'
              '\n'
              'struct TensorXCompare {\n'
              '  bool operator()(const TensorX& a, const TensorX& b) const {\n'
              '    if (a.op != b.op) return a.op < b.op;\n'
              '    return a.idx < b.idx;\n'
              '  };\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4650,
         lineno=50,
         tokens=3,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OpX',
         body='class OpX')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4651,
         lineno=51,
         tokens=4,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='GraphXfer',
         body='class GraphXfer')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4652,
         lineno=52,
         tokens=64,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TensorX',
         body='struct TensorX {\n'
              '  TensorX(void): op(NULL), idx(0) {}\n'
              '  TensorX(OpX* _op, int _idx): op(_op), idx(_idx) {}\n'
              '  Tensor to_tensor(const GraphXfer* xfer) const;\n'
              '  OpX* op;\n'
              '  int idx;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4653,
         lineno=53,
         tokens=12,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='TensorX',
         body='TensorX(void): op(NULL), idx(0) {}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4654,
         lineno=53,
         tokens=4,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TensorX',
         body='TensorX(void)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4655,
         lineno=54,
         tokens=21,
         depth=5,
         parent_id=None,
         category='function',
         summary=False,
         name='TensorX',
         body='TensorX(OpX* _op, int _idx): op(_op), idx(_idx) {}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4656,
         lineno=54,
         tokens=12,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='TensorX',
         body='TensorX(OpX* _op, int _idx)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4657,
         lineno=57,
         tokens=3,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='idx',
         body='int idx;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4658,
         lineno=60,
         tokens=50,
         depth=3,
         parent_id=None,
         category='struct',
         summary=False,
         name='TensorXCompare',
         body='struct TensorXCompare {\n'
              '  bool operator()(const TensorX& a, const TensorX& b) const {\n'
              '    if (a.op != b.op) return a.op < b.op;\n'
              '    return a.idx < b.idx;\n'
              '  };\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4659,
         lineno=66,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class OpX {\n'
              'public:\n'
              '  OpX(const OpX& _op);\n'
              '  OpX(OpType _type, TensorX input0, int numOutputs = 1);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2);\n'
              '  Op')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4660,
         lineno=67,
         tokens=269,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='OpX',
         body='class OpX {\n'
              'public:\n'
              '  OpX(const OpX& _op);\n'
              '  OpX(OpType _type, TensorX input0, int numOutputs = 1);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2, TensorX input3);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2, TensorX input3, TensorX input4);\n'
              '  OpX(OpType _type, int n, TensorX* ins);\n'
              '  bool add_pm_constraint(Compare comp, PMParameter para, int '
              'value);\n'
              '  bool add_input_constraint(Compare, TNParameter, DIMParameter, '
              'int);\n'
              '  bool add_input_constraint(Compare, TNParameter, DIMParameter, '
              'TNParameter, DIMParameter);\n'
              '  bool get_pm_constraint(PMParameter para, int& value) const;\n'
              'public:\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  std::vector<TensorX> inputs, outputs;\n'
              '  std::vector<PMConstraint> pmConstraints;\n'
              '  std::vector<TNConstraint> tnConstraints;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4661,
         lineno=69,
         tokens=9,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(const OpX& _op)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4662,
         lineno=70,
         tokens=19,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, TensorX input0, int numOutputs = 1)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4663,
         lineno=71,
         tokens=17,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, TensorX input0, TensorX input1)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4664,
         lineno=72,
         tokens=22,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4665,
         lineno=73,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='X(OpType _type, TensorX input0, TensorX input1, TensorX input2, '
              'TensorX input3);\n'
              '  OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2, TensorX input3, TensorX input4);\n'
              '  OpX(OpType _type, int n, TensorX* ins);\n'
              '  b')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4666,
         lineno=73,
         tokens=27,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2, TensorX input3)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4667,
         lineno=74,
         tokens=32,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, TensorX input0, TensorX input1, TensorX '
              'input2, TensorX input3, TensorX input4)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4668,
         lineno=75,
         tokens=15,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='OpX',
         body='OpX(OpType _type, int n, TensorX* ins)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4669,
         lineno=76,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ool add_pm_constraint(Compare comp, PMParameter para, int '
              'value);\n'
              '  bool add_input_constraint(Compare, TNParameter, DIMParameter, '
              'int);\n'
              '  bool add_input_constraint(Compare, TNParameter, DIMParameter, '
              'TNParameter, DIMParameter);\n'
              '  bool get_pm_constraint(PMParameter para, int& value) const;\n'
              'public:\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  std::vector<TensorX> inputs, outputs;\n'
              '  std::vector<PMConstraint> pmConstraints;\n'
              '  std::vector<TNConstraint> tnConstraints;\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4670,
         lineno=81,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='type',
         body='OpType type;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4671,
         lineno=82,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mapOp',
         body='Op mapOp;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4672,
         lineno=83,
         tokens=11,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='inputs',
         body='std::vector<TensorX> inputs, outputs;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4673,
         lineno=84,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='pmConstraints',
         body='std::vector<PMConstraint> pmConstraints;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4674,
         lineno=85,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='tnConstraints',
         body='std::vector<TNConstraint> tnConstraints;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4675,
         lineno=87,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class DstOp;\n'
              'class SrcOp {\n'
              'public:\n'
              '  SrcOp(OpType _type);\n'
              '  bool add_constraint(Compare comp, PMParameter para, int '
              'value);\n'
              '  bool match(Op op);\n'
              'public:\n'
              '  std::vector<PMConstraint> constraints;\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  DstOp *mapInput, *mapOutput;\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4676,
         lineno=88,
         tokens=4,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='DstOp',
         body='class DstOp')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4677,
         lineno=89,
         tokens=70,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='SrcOp',
         body='class SrcOp {\n'
              'public:\n'
              '  SrcOp(OpType _type);\n'
              '  bool add_constraint(Compare comp, PMParameter para, int '
              'value);\n'
              '  bool match(Op op);\n'
              'public:\n'
              '  std::vector<PMConstraint> constraints;\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  DstOp *mapInput, *mapOutput;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4678,
         lineno=91,
         tokens=7,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SrcOp',
         body='SrcOp(OpType _type)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4679,
         lineno=95,
         tokens=9,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='constraints',
         body='std::vector<PMConstraint> constraints;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4680,
         lineno=96,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='type',
         body='OpType type;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4681,
         lineno=97,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mapOp',
         body='Op mapOp;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4682,
         lineno=100,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class DstOp {\n'
              'public:\n'
              '  DstOp(OpType _type);\n'
              '  DstOp(OpType _type, const SrcOp* op);\n'
              '  DstOp(OpType _type, const SrcOp* op1, const SrcOp* op2);\n'
              '  virtual Op create_operator(Model* model) = 0;\n'
              'public:\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  SrcOp *mapInput, *mapOutput;\n'
              '  SrcOp *srcOps[MAX_NUM_INPUTS];\n'
              '};\n'
              '\n'
              'template <typename OpType>\n'
              'struc')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4683,
         lineno=101,
         tokens=102,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='DstOp',
         body='class DstOp {\n'
              'public:\n'
              '  DstOp(OpType _type);\n'
              '  DstOp(OpType _type, const SrcOp* op);\n'
              '  DstOp(OpType _type, const SrcOp* op1, const SrcOp* op2);\n'
              '  virtual Op create_operator(Model* model) = 0;\n'
              'public:\n'
              '  OpType type;\n'
              '  Op mapOp;\n'
              '  SrcOp *mapInput, *mapOutput;\n'
              '  SrcOp *srcOps[MAX_NUM_INPUTS];\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4684,
         lineno=103,
         tokens=7,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='DstOp',
         body='DstOp(OpType _type)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4685,
         lineno=104,
         tokens=13,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='DstOp',
         body='DstOp(OpType _type, const SrcOp* op)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4686,
         lineno=105,
         tokens=21,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='DstOp',
         body='DstOp(OpType _type, const SrcOp* op1, const SrcOp* op2)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4687,
         lineno=108,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='type',
         body='OpType type;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4688,
         lineno=109,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mapOp',
         body='Op mapOp;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4689,
         lineno=115,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t SubEdge {\n'
              '  SubEdge(OpType* _srcOp, OpType* _dstOp, int _srcIdx, int '
              '_dstIdx)\n'
              '  : srcOp(_srcOp), dstOp(_dstOp), srcIdx(_srcIdx), '
              'dstIdx(_dstIdx) {}\n'
              '  int srcIdx, dstIdx;\n'
              '  OpType *srcOp, *dstOp;\n'
              '};\n'
              '\n'
              'template<typename OpType>\n'
              'struct SubEdgeCompare {\n'
              '  bool operator()(const SubEdge<OpType>& a, const '
              'SubEdge<OpType>& b) const {\n'
              '    if (a.srcOp != b.srcOp) return a.srcOp < b.srcOp;\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4690,
         lineno=115,
         tokens=78,
         depth=4,
         parent_id=None,
         category='struct',
         summary=False,
         name='SubEdge',
         body='struct SubEdge {\n'
              '  SubEdge(OpType* _srcOp, OpType* _dstOp, int _srcIdx, int '
              '_dstIdx)\n'
              '  : srcOp(_srcOp), dstOp(_dstOp), srcIdx(_srcIdx), '
              'dstIdx(_dstIdx) {}\n'
              '  int srcIdx, dstIdx;\n'
              '  OpType *srcOp, *dstOp;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4691,
         lineno=116,
         tokens=53,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='SubEdge',
         body='SubEdge(OpType* _srcOp, OpType* _dstOp, int _srcIdx, int '
              '_dstIdx)\n'
              '  : srcOp(_srcOp), dstOp(_dstOp), srcIdx(_srcIdx), '
              'dstIdx(_dstIdx) {}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4692,
         lineno=116,
         tokens=26,
         depth=7,
         parent_id=None,
         category='function',
         summary=False,
         name='SubEdge',
         body='SubEdge(OpType* _srcOp, OpType* _dstOp, int _srcIdx, int '
              '_dstIdx)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4693,
         lineno=118,
         tokens=7,
         depth=6,
         parent_id=None,
         category='field',
         summary=False,
         name='srcIdx',
         body='int srcIdx, dstIdx;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4694,
         lineno=123,
         tokens=116,
         depth=4,
         parent_id=None,
         category='struct',
         summary=False,
         name='SubEdgeCompare',
         body='struct SubEdgeCompare {\n'
              '  bool operator()(const SubEdge<OpType>& a, const '
              'SubEdge<OpType>& b) const {\n'
              '    if (a.srcOp != b.srcOp) return a.srcOp < b.srcOp;\n'
              '    if (a.dstOp != b.dstOp) return a.dstOp < b.dstOp;\n'
              '    if (a.srcIdx != b.srcIdx) return a.srcIdx < b.srcIdx;\n'
              '    if (a.dstIdx != b.dstIdx) return a.dstIdx < b.dstIdx;\n'
              '    return false;\n'
              '  };\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4695,
         lineno=126,
         tokens=67,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (a.dstOp != b.dstOp) return a.dstOp < b.dstOp;\n'
              '    if (a.srcIdx != b.srcIdx) return a.srcIdx < b.srcIdx;\n'
              '    if (a.dstIdx != b.dstIdx) return a.dstIdx < b.dstIdx;\n'
              '    return false;\n'
              '  };\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4696,
         lineno=132,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class GraphCompare {\n'
              'public:\n'
              '  bool operator() (Graph* lhs, Graph* rhs) {\n'
              '    return lhs->total_cost() > rhs->total_cost();\n'
              '  }\n'
              '};\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4697,
         lineno=133,
         tokens=36,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='GraphCompare',
         body='class GraphCompare {\n'
              'public:\n'
              '  bool operator() (Graph* lhs, Graph* rhs) {\n'
              '    return lhs->total_cost() > rhs->total_cost();\n'
              '  }\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4698,
         lineno=139,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'class GraphXfer {\n'
              'public:\n'
              '  GraphXfer(Model* _model);\n'
              '  static void load_graph_xfer_from_pb_file(Model* model,\n'
              '                                           '
              'std::vector<GraphXfer*>& xfers,\n'
              '                                           std::string '
              'filename);\n'
              '  TensorX new_tensor(void);\n'
              '  bool can_match(OpX* srcOp, Op op, Graph* graph);\n'
              '  void match(OpX* srcOp, Op op, Graph* graph);\n'
              '  void unmatch(OpX* srcOp, Op op, Graph* graph);\n'
              '  void create_operator_from_pb(const GraphSubst::Operator& '
              'pbOp,\n'
              '                               std::map<int, TensorX>& '
              'mappedInputs,\n'
              '                     ')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4699,
         lineno=140,
         tokens=1234,
         depth=3,
         parent_id=None,
         category='class',
         summary=False,
         name='GraphXfer',
         body='class GraphXfer {\n'
              'public:\n'
              '  GraphXfer(Model* _model);\n'
              '  static void load_graph_xfer_from_pb_file(Model* model,\n'
              '                                           '
              'std::vector<GraphXfer*>& xfers,\n'
              '                                           std::string '
              'filename);\n'
              '  TensorX new_tensor(void);\n'
              '  bool can_match(OpX* srcOp, Op op, Graph* graph);\n'
              '  void match(OpX* srcOp, Op op, Graph* graph);\n'
              '  void unmatch(OpX* srcOp, Op op, Graph* graph);\n'
              '  void create_operator_from_pb(const GraphSubst::Operator& '
              'pbOp,\n'
              '                               std::map<int, TensorX>& '
              'mappedInputs,\n'
              '                               bool isSrcOp = true);\n'
              '  OpX* create_activation(TensorX input, OpType type, bool '
              'isSrcOp = true);\n'
              '  OpX* create_conv2d(TensorX input, TensorX weight,\n'
              '                     //int kernelH, int kernelW,\n'
              '                     int strideH, int strideW,\n'
              '                     PaddingMode padding,\n'
              '                     ActiMode activation,\n'
              '                     bool isSrcOp = true);\n'
              '  OpX* create_batchnorm(TensorX input, TensorX scale, TensorX '
              'bias,\n'
              '                        TensorX mean, TensorX var, bool isSrcOp '
              '= true);\n'
              '  OpX* create_element(TensorX input0, TensorX input1,\n'
              '                      OpType type, bool isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm(TensorX conv_w, TensorX '
              'scale,\n'
              '                                  TensorX bias, TensorX mean, '
              'TensorX var,\n'
              '                                  bool isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm_alpha_var(TensorX conv_w, '
              'TensorX scale, \n'
              '                                            TensorX var, bool '
              'isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm_bias(TensorX scale,\n'
              '                                           TensorX bias, '
              'TensorX mean,\n'
              '                                           TensorX var, bool '
              'isSrcOp = true);\n'
              '  OpX* create_broadcast_add(TensorX data, TensorX bias, bool '
              'isSrcOp = true);\n'
              '  OpX* create_pool2d_avg(TensorX input, TensorX weight,\n'
              '                         //int kernelH, int kernelW,\n'
              '                         int strideH, int strideW,\n'
              '                         PaddingMode padding,\n'
              '                         ActiMode activation,\n'
              '                         bool isSrcOp = true);\n'
              '  OpX* create_matmul(TensorX input, TensorX weight,\n'
              '                     ActiMode activation, bool isSrcOp = '
              'true);\n'
              '  OpX* create_mul(TensorX x, TensorX y, bool isSrcOp = true);\n'
              '  OpX* create_transpose(TensorX input, int numDim, int* perm, '
              'int shuffle);\n'
              '  OpX* create_enlarge(TensorX w1, TensorX w2, bool isSrcOp = '
              'true);\n'
              '  OpX* create_merge_gconv(TensorX w, int count, bool isSrcOp = '
              'true);\n'
              '  OpX* create_concat(int axis, int numDim, TensorX in1, TensorX '
              'in2, bool isSrcOp = true);\n'
              '  OpX* create_concat(int axis, int numDim, int n, TensorX* ins, '
              'bool isSrcOp = true);\n'
              '  OpX* create_split(TensorX input, int axis, int n, bool '
              'isSrcOp = true);\n'
              '  void add_src_op(SrcOp* op);\n'
              '  void add_dst_op(DstOp* op);\n'
              '  void add_src_edge(SrcOp* src, SrcOp* tgt, int srcIdx = 0, int '
              'dstIdx = 0);\n'
              '  void add_dst_edge(DstOp* src, DstOp* tgt, int srcIdx = 0, int '
              'dstIdx = 0);\n'
              '  bool add_constraint(Compare comp, SrcOp* src, PMParameter '
              'srcPara,\n'
              '                      SrcOp* tgt, PMParameter dstPara);\n'
              '  bool map_input(SrcOp* src, DstOp* dst);\n'
              '  bool map_output(SrcOp* src, DstOp* dst);\n'
              '  bool map_output(TensorX src, TensorX dst);\n'
              '  void run(int depth, Graph* graph,\n'
              '           std::priority_queue<Graph*, std::vector<Graph*>, '
              'GraphCompare>&,\n'
              '           std::set<size_t>&, float threshold, int maxNumOps);\n'
              '  Graph* create_new_graph(Graph* graph);\n'
              '  bool create_new_operator(const OpX* opx, Op& op);\n'
              '\n'
              '  // built-in substitutions\n'
              '  static GraphXfer* create_conv_relu(Model* model, int strideH, '
              'int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_batch(Model* model, int '
              'strideH, int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_mul(Model* model, int strideH, '
              'int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_add(Model* model, int strideH, '
              'int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_enlarge_merge_convs(Model* model, '
              'ActiMode activation);\n'
              '  static GraphXfer* create_merge_group_convs(Model* model, int '
              'strideH, int strideW, ActiMode activation);\n'
              'public:\n'
              '  Model* model;\n'
              '  int tensorId;\n'
              '  //std::vector<TwoOpConstraint> constraints;\n'
              '  //std::map<SrcOp*, std::set<SubEdge<SrcOp>, '
              'SubEdgeCompare<SrcOp> > > srcInEdges, srcOutEdges;\n'
              '  //std::map<DstOp*, std::set<SubEdge<DstOp>, '
              'SubEdgeCompare<DstOp> > > dstInEdges, dstOutEdges;\n'
              '  std::map<Op, OpX*, OpCompare> mappedOps;\n'
              '  std::multimap<int, std::pair<Op, int> > mappedInputs;\n'
              '  std::map<TensorX, TensorX, TensorXCompare> mappedOutputs;\n'
              '  std::vector<OpX*> srcOps;\n'
              '  std::vector<OpX*> dstOps;\n'
              '}')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4700,
         lineno=142,
         tokens=8,
         depth=6,
         parent_id=None,
         category='function',
         summary=False,
         name='GraphXfer',
         body='GraphXfer(Model* _model)')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4701,
         lineno=152,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='          bool isSrcOp = true);\n'
              '  OpX* create_activation(TensorX input, OpType type, bool '
              'isSrcOp = true);\n'
              '  OpX* create_conv2d(TensorX input, TensorX weight,\n'
              '                     //int kernelH, int kernelW,\n'
              '                     int strideH, int strideW,\n'
              '                     PaddingMode padding,\n'
              '                     ActiMode activation,\n'
              '                     bool isSrcOp = true);\n'
              '  OpX* create_batchnorm(TensorX input, TensorX scale, TensorX '
              'bias,\n'
              '                        TensorX mean, TensorX var, bool isSrcOp '
              '= true);\n'
              '  OpX* create_element(TensorX input0, TensorX input1,\n'
              '       ')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4702,
         lineno=163,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='               OpType type, bool isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm(TensorX conv_w, TensorX '
              'scale,\n'
              '                                  TensorX bias, TensorX mean, '
              'TensorX var,\n'
              '                                  bool isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm_alpha_var(TensorX conv_w, '
              'TensorX scale, \n'
              '                                            TensorX var, bool '
              'isSrcOp = true);\n'
              '  OpX* create_fuse_conv_batchnorm_bias(TensorX scale,\n'
              '                                           TensorX bias, '
              'TensorX mean,\n'
              '                                           TensorX var, b')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4703,
         lineno=171,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ool isSrcOp = true);\n'
              '  OpX* create_broadcast_add(TensorX data, TensorX bias, bool '
              'isSrcOp = true);\n'
              '  OpX* create_pool2d_avg(TensorX input, TensorX weight,\n'
              '                         //int kernelH, int kernelW,\n'
              '                         int strideH, int strideW,\n'
              '                         PaddingMode padding,\n'
              '                         ActiMode activation,\n'
              '                         bool isSrcOp = true);\n'
              '  OpX* create_matmul(TensorX input, TensorX weight,\n'
              '                     ActiMode activation, bool isSrcOp = '
              'true);\n'
              '  OpX* create_mul(TensorX x, TensorX y, bool isSrcOp = true);\n'
              '  OpX* c')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4704,
         lineno=182,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='reate_transpose(TensorX input, int numDim, int* perm, int '
              'shuffle);\n'
              '  OpX* create_enlarge(TensorX w1, TensorX w2, bool isSrcOp = '
              'true);\n'
              '  OpX* create_merge_gconv(TensorX w, int count, bool isSrcOp = '
              'true);\n'
              '  OpX* create_concat(int axis, int numDim, TensorX in1, TensorX '
              'in2, bool isSrcOp = t')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4705,
         lineno=185,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rue);\n'
              '  OpX* create_concat(int axis, int numDim, int n, TensorX* ins, '
              'bool isSrcOp = true);\n'
              '  OpX* create_split(TensorX input, int axis, int n, bool '
              'isSrcOp = true);\n'
              '  void add_src_op(SrcOp* op);\n'
              '  void add_dst_op(DstOp* op);\n'
              '  void add_src_edge(SrcOp* src, SrcOp* tgt, int srcIdx = 0, int '
              'ds')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4706,
         lineno=190,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tIdx = 0);\n'
              '  void add_dst_edge(DstOp* src, DstOp* tgt, int srcIdx = 0, int '
              'dstIdx = 0);\n'
              '  bool add_constraint(Compare comp, SrcOp* src, PMParameter '
              'srcPara,\n'
              '                      SrcOp* tgt, PMParameter dstPara);\n'
              '  bool map_input(SrcOp* src, DstOp* dst);\n'
              '  bool map_output(SrcOp* src, DstOp* ')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4707,
         lineno=195,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='dst);\n'
              '  bool map_output(TensorX src, TensorX dst);\n'
              '  void run(int depth, Graph* graph,\n'
              '           std::priority_queue<Graph*, std::vector<Graph*>, '
              'GraphCompare>&,\n'
              '           std::set<size_t>&, float threshold, int maxNumOps);\n'
              '  Graph* create_new_graph(Graph* graph);\n'
              '  bool create_new_operato')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4708,
         lineno=201,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r(const OpX* opx, Op& op);\n'
              '\n'
              '  // built-in substitutions\n'
              '  static GraphXfer* create_conv_relu(Model* model, int strideH, '
              'int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_batch(Model* model, int '
              'strideH, int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_mul(M')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4709,
         lineno=206,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='odel* model, int strideH, int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_conv_add(Model* model, int strideH, '
              'int strideW, PaddingMode padding);\n'
              '  static GraphXfer* create_enlarge_merge_convs(Model* model, '
              'ActiMode activation);\n'
              '  static GraphXfer* create_merge_group_convs(Model')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4710,
         lineno=209,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='* model, int strideH, int strideW, ActiMode activation);\n'
              'public:\n'
              '  Model* model;\n'
              '  int tensorId;\n'
              '  //std::vector<TwoOpConstraint> constraints;\n'
              '  //std::map<SrcOp*, std::set<SubEdge<SrcOp>, '
              'SubEdgeCompare<SrcOp> > > srcInEdges, srcOutEdges;\n'
              '  //std::map<DstOp*, std::set<SubEdge<DstOp>, SubEdg')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4711,
         lineno=212,
         tokens=4,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='tensorId',
         body='int tensorId;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4712,
         lineno=215,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='eCompare<DstOp> > > dstInEdges, dstOutEdges;\n'
              '  std::map<Op, OpX*, OpCompare> mappedOps;\n'
              '  std::multimap<int, std::pair<Op, int> > mappedInputs;\n'
              '  std::map<TensorX, TensorX, TensorXCompare> mappedOutputs;\n'
              '  std::vector<OpX*> srcOps;\n'
              '  std::vector<OpX*> dstOps;\n'
              '};\n'
              '\n'
              '} // namespace XFlow\n'
              '#endif\n')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4713,
         lineno=216,
         tokens=15,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mappedOps',
         body='std::map<Op, OpX*, OpCompare> mappedOps;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4714,
         lineno=217,
         tokens=18,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mappedInputs',
         body='std::multimap<int, std::pair<Op, int> > mappedInputs;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4715,
         lineno=218,
         tokens=17,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='mappedOutputs',
         body='std::map<TensorX, TensorX, TensorXCompare> mappedOutputs;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4716,
         lineno=219,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='srcOps',
         body='std::vector<OpX*> srcOps;')

Fragment(document_cs='b9dd555bdca73f1b06c11c81fbf65909f4e0bdf4633bf06b5e4ca13d1790f26f',
         id=4717,
         lineno=220,
         tokens=10,
         depth=5,
         parent_id=None,
         category='field',
         summary=False,
         name='dstOps',
         body='std::vector<OpX*> dstOps;')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4718,
         lineno=1,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' *')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4719,
         lineno=1,
         tokens=92,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/unsqueeze.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::unsqueeze Model::get_or_create_unsqueeze '
              'Unsqueeze::Unsqueeze Unsqueeze::collect_costs '
              'Unsqueeze::get_int_parameter Unsqueeze::~Unsqueeze '
              'UnsqueezeKey::UnsqueezeKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: NO_SPLIT Unsqueeze UnsqueezeKey collect_costs '
              'get_int_parameter get_or_create_unsqueeze unsqueeze\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4720,
         lineno=13,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::unsqueeze(const TensorHandle input,\n'
              '                              const std::vector<int>& axes)\n'
              '{\n'
              '  Op op = model->get_or_create_unsqueeze(*input, axes);\n'
              '  add_edge(input->op, op, input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_unsqueeze(const Tensor& input,\n'
              '                                  const std::vector<int>& '
              'axes)\n'
              '{\n'
              '  UnsqueezeKey key(input, axes);\n'
              '  Unsqueeze* unsqzOp;\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4721,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4722,
         lineno=19,
         tokens=78,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::unsqueeze',
         body='TensorHandle Graph::unsqueeze(const TensorHandle input,\n'
              '                              const std::vector<int>& axes)\n'
              '{\n'
              '  Op op = model->get_or_create_unsqueeze(*input, axes);\n'
              '  add_edge(input->op, op, input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4723,
         lineno=29,
         tokens=133,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_unsqueeze',
         body='Op Model::get_or_create_unsqueeze(const Tensor& input,\n'
              '                                  const std::vector<int>& '
              'axes)\n'
              '{\n'
              '  UnsqueezeKey key(input, axes);\n'
              '  Unsqueeze* unsqzOp;\n'
              '  if (unsqueeze.find(key) != unsqueeze.end()) {\n'
              '    unsqzOp = unsqueeze[key];\n'
              '  } else {\n'
              '    unsqzOp = new Unsqueeze(this, input, axes);\n'
              '    measure_unsqueeze_cost(unsqzOp);\n'
              '    unsqueeze[key] = unsqzOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = unsqzOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4724,
         lineno=32,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(input, axes)')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4725,
         lineno=34,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (unsqueeze.find(key) != unsqueeze.end()) {\n'
              '    unsqzOp = unsqueeze[key];\n'
              '  } else {\n'
              '    unsqzOp = new Unsqueeze(this, input, axes);\n'
              '    measure_unsqueeze_cost(unsqzOp);\n'
              '    unsqueeze[key] = unsqzOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = unsq')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4726,
         lineno=41,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4727,
         lineno=43,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='zOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Unsqueeze::Unsqueeze(Model* _model, const Tensor& _input,\n'
              '                     const std::vector<int>& _axes)\n'
              ': OpBase(_input, _model, OP_UNSQUEEZE), axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim + axes.size();\n'
              '  int n = 0;\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4728,
         lineno=47,
         tokens=283,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::Unsqueeze',
         body='Unsqueeze::Unsqueeze(Model* _model, const Tensor& _input,\n'
              '                     const std::vector<int>& _axes)\n'
              ': OpBase(_input, _model, OP_UNSQUEEZE), axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim + axes.size();\n'
              '  int n = 0;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++) {\n'
              '    bool unsqueezed = false;\n'
              '    for (size_t j = 0; j < axes.size(); j++)\n'
              '      if (axes[j] == i)\n'
              '        unsqueezed = true;\n'
              '    if (unsqueezed) {\n'
              '      outputs[0].dim[i] = 1;\n'
              '      outputs[0].stride[i] = (i == outputs[0].numDim-1) ? 1 : '
              'outputs[0].stride[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    } else {\n'
              '      outputs[0].dim[i] = _input.dim[n];\n'
              '      outputs[0].stride[i] = _input.stride[n];\n'
              '      outputs[0].split[i] = _input.split[n];\n'
              '      n ++;\n'
              '    }\n'
              '  }\n'
              '  assert(n == _input.numDim);\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4729,
         lineno=54,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++) {\n'
              '    bool unsqueezed = false;\n'
              '    for (size_t j = 0; j < axes.size(); j++)\n'
              '      if (axes[j] == i)\n'
              '        unsqueezed = true;\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4730,
         lineno=59,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (unsqueezed) {\n'
              '      outputs[0].dim[i] = 1;\n'
              '      outputs[0].stride[i] = (i == outputs[0].numDim-1) ? 1 : '
              'outputs[0].stride[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    } else {\n'
              '      outputs[0].dim[i] = _input.dim[n];\n'
              '      outputs[0].stride[i] = _input.stride[n];\n'
              '      outputs[0].split[i] = _input.split[n];\n'
              '      n ++;\n'
              '    }\n'
              '  }\n'
              '  assert(n == _input.numDim);\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Unsq')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4731,
         lineno=74,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ueeze::~Unsqueeze(void)\n'
              '{}\n'
              '\n'
              'bool Unsqueeze::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Unsqueeze::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '}\n'
              '\n'
              'UnsqueezeKey::UnsqueezeKey(const Tensor& input, const '
              'std::vector<int>& axes)\n'
              '{\n'
              '  int idx = 0;\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4732,
         lineno=74,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::~Unsqueeze',
         body='Unsqueeze::~Unsqueeze(void)\n{}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4733,
         lineno=77,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::get_int_parameter',
         body='bool Unsqueeze::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4734,
         lineno=82,
         tokens=44,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::collect_costs',
         body='void Unsqueeze::collect_costs(float& exe_time, float& flops,\n'
              '                              float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4735,
         lineno=89,
         tokens=84,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='UnsqueezeKey::UnsqueezeKey',
         body='UnsqueezeKey::UnsqueezeKey(const Tensor& input, const '
              'std::vector<int>& axes)\n'
              '{\n'
              '  int idx = 0;\n'
              '  for (size_t i = 0; i < axes.size(); i++)\n'
              '    keys[idx++] = axes[i];\n'
              '  input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4736,
         lineno=92,
         tokens=32,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < axes.size(); i++)\n'
              '    keys[idx++] = axes[i];\n'
              '  input.serialize(keys, idx);\n')

Fragment(document_cs='ba1667c76b91b854d1a7462c4844ef8d566ee2480b43f01e38e4fd62aed683df',
         id=4737,
         lineno=95,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4738,
         lineno=1,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distri')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4739,
         lineno=1,
         tokens=61,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/unsqueeze_kernel.cu\n'
              '  Methods: Model::measure_unsqueeze_cost Unsqueeze::forward '
              'Unsqueeze::map Unsqueeze::unmap\n'
              '  Variables: milliseconds\n'
              '  Using: taso\n'
              '  Usages: forward map measure_unsqueeze_cost unmap\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4740,
         lineno=10,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='buted on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Unsqueeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4741,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4742,
         lineno=20,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::map',
         body='void Unsqueeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4743,
         lineno=24,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Unsqueeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Unsqueeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4744,
         lineno=29,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::unmap',
         body='void Unsqueeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4745,
         lineno=34,
         tokens=67,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Unsqueeze::forward',
         body='void Unsqueeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4746,
         lineno=38,
         tokens=46,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_unsqueeze_cost(Unsqueeze* unsqz)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4747,
         lineno=42,
         tokens=171,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_unsqueeze_cost',
         body='void Model::measure_unsqueeze_cost(Unsqueeze* unsqz)\n'
              '{\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  checkCUDA(cudaEventRecord(startEvent));\n'
              '  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    copy_kernel<<<GET_BLOCKS(unsqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputPtr, inputPtr, unsqz->outputs[0].volume());\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  unsqz->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", '
              'unsqz->runtime);\n'
              '}')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4748,
         lineno=46,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < REPEAT_TIMES; i++) {\n'
              '    copy_kernel<<<GET_BLOCKS(unsqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '        outputPtr, inputPtr, unsqz->outputs[0].volume());\n'
              '  }\n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  unsqz->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", '
              'unsqz->runtime);\n'
              '}\n')

Fragment(document_cs='bd72b6caf007138bdf51e0931cbc8dea5dcfb54f46131443177e3fe391b0be0d',
         id=4749,
         lineno=52,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4750,
         lineno=1,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * Se')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4751,
         lineno=1,
         tokens=62,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/merge_gconv_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP merge_gconv_kernel\n'
              '  Methods: MergeGConv::forward MergeGConv::map '
              'MergeGConv::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4752,
         lineno=12,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e the License for the specific language governing permissions '
              'and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void merge_gconv_kernel(DATATYPE* dst_ptr,\n'
              '                        const DATATYPE* src_ptr,\n'
              '                        int volume,\n'
              '                        int c_in_h_w,\n'
              '                        int c_out,\n'
              '                        int count)\n'
              '{\n'
              '  assert(c_out % count == 0);\n'
              '  CUDA_KERNEL_LOOP(i, volu')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4753,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4754,
         lineno=20,
         tokens=131,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='merge_gconv_kernel',
         body='__global__\n'
              'void merge_gconv_kernel(DATATYPE* dst_ptr,\n'
              '                        const DATATYPE* src_ptr,\n'
              '                        int volume,\n'
              '                        int c_in_h_w,\n'
              '                        int c_out,\n'
              '                        int count)\n'
              '{\n'
              '  assert(c_out % count == 0);\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int mod = i % c_in_h_w;\n'
              '    int div = i / c_in_h_w;\n'
              '    int dst_i = div * c_in_h_w * count + div / (c_out / count) '
              '* c_in_h_w + mod;\n'
              '    dst_ptr[dst_i] = src_ptr[i];\n'
              '  }\n'
              '}')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4755,
         lineno=21,
         tokens=39,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='merge_gconv_kernel',
         body='merge_gconv_kernel(DATATYPE* dst_ptr,\n'
              '                        const DATATYPE* src_ptr,\n'
              '                        int volume,\n'
              '                        int c_in_h_w,\n'
              '                        int c_out,\n'
              '                        int count)')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4756,
         lineno=29,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='me)\n'
              '  {\n'
              '    int mod = i % c_in_h_w;\n'
              '    int div = i / c_in_h_w;\n'
              '    int dst_i = div * c_in_h_w * count + div / (c_out / count) '
              '* c_in_h_w + mod;\n'
              '    dst_ptr[dst_i] = src_ptr[i];\n'
              '  }\n'
              '}\n'
              '\n'
              'void MergeGConv::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4757,
         lineno=29,
         tokens=75,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int mod = i % c_in_h_w;\n'
              '    int div = i / c_in_h_w;\n'
              '    int dst_i = div * c_in_h_w * count + div / (c_out / count) '
              '* c_in_h_w + mod;\n'
              '    dst_ptr[dst_i] = src_ptr[i];\n'
              '  }')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4758,
         lineno=29,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4759,
         lineno=38,
         tokens=44,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::map',
         body='void MergeGConv::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4760,
         lineno=40,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void MergeGConv::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void MergeGConv::forward(bool block)\n'
              '{\n'
              '  int c_out = inputs[0].dim[0]')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4761,
         lineno=44,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::unmap',
         body='void MergeGConv::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4762,
         lineno=49,
         tokens=198,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='MergeGConv::forward',
         body='void MergeGConv::forward(bool block)\n'
              '{\n'
              '  int c_out = inputs[0].dim[0];\n'
              '  int c_in_h_w = inputs[0].volume() / c_out;\n'
              '  assert(outputs[0].dim[1] % inputs[0].dim[1] == 0);\n'
              '  int count = outputs[0].dim[1] / inputs[0].dim[1];\n'
              '  assign_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, outputs[0].volume(), '
              '0.0f);\n'
              '  merge_gconv_kernel<<<GET_BLOCKS(inputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr,\n'
              '      inputs[0].volume(), c_in_h_w, c_out, count);\n'
              '\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4763,
         lineno=51,
         tokens=85,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=';\n'
              '  int c_in_h_w = inputs[0].volume() / c_out;\n'
              '  assert(outputs[0].dim[1] % inputs[0].dim[1] == 0);\n'
              '  int count = outputs[0].dim[1] / inputs[0].dim[1];\n'
              '  assign_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)ou')

Fragment(document_cs='bd737e823e025db88ccab4d8022b4d2f5807ed71e533b42022a38dfb9e4f6823',
         id=4764,
         lineno=56,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputs[0].data_ptr, outputs[0].volume(), 0.0f);\n'
              '  merge_gconv_kernel<<<GET_BLOCKS(inputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr,\n'
              '      inputs[0].volume(), c_in_h_w, c_out, count);\n'
              '\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4765,
         lineno=1,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' *')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4766,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/pad_mkl.cc\n'
              '  Methods: Model::measure_pad_cost Pad::forward Pad::map '
              'Pad::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_pad_cost unmap\n')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4767,
         lineno=13,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Pad::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr =')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4768,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4769,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4770,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::map',
         body='void Pad::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4771,
         lineno=25,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Pad::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Pad::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_pad_cost(Pad* pad)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4772,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::unmap',
         body='void Pad::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4773,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::forward',
         body='void Pad::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='bfe66d463059565c85b1054ec52dc72cab678c62aac127a81f38012bfd562315',
         id=4774,
         lineno=42,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_pad_cost',
         body='void Model::measure_pad_cost(Pad* pad)\n{\n  assert(false);\n}')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4775,
         lineno=1,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the Li')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4776,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/reshape_mkl.cc\n'
              '  Methods: Model::measure_reshape_cost Reshape::forward '
              'Reshape::map Reshape::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_reshape_cost unmap\n')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4777,
         lineno=12,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='cense for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Reshape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  assert(outputs[0].volume() == inputs[0].volume());\n'
              '  // for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}\n'
              '\n'
              'void Reshape::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '}\n'
              '\n'
              'void Reshape::forward(bool block)\n'
              '{\n')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4778,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4779,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4780,
         lineno=21,
         tokens=57,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::map',
         body='void Reshape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  assert(outputs[0].volume() == inputs[0].volume());\n'
              '  // for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4781,
         lineno=29,
         tokens=19,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::unmap',
         body='void Reshape::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '}')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4782,
         lineno=35,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reshape::forward',
         body='void Reshape::forward(bool block)\n'
              '{\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4783,
         lineno=37,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_reshape_cost(Reshape* reshape)\n'
              '{\n'
              '  // Reshape requires no kernel launch\n'
              '  reshape->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Reshape]: cost(%.4lf)\\n", '
              'reshape->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='c55b4e11986428dbe146eece299b1f47fff8e5f9e110e17959a0491d920dae07',
         id=4784,
         lineno=40,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_reshape_cost',
         body='void Model::measure_reshape_cost(Reshape* reshape)\n'
              '{\n'
              '  // Reshape requires no kernel launch\n'
              '  reshape->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Reshape]: cost(%.4lf)\\n", '
              'reshape->runtime);\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4785,
         lineno=1,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOU')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4786,
         lineno=1,
         tokens=72,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/matmul_kernel.cu\n'
              '  Methods: Matmul::forward Matmul::map Matmul::set_layout '
              'Matmul::unmap Model::measure_matmul_cost\n'
              '  Variables: lda milliseconds mode transA\n'
              '  Using: taso\n'
              '  Usages: forward map measure_matmul_cost set_layout unmap\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4787,
         lineno=11,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='T WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Matmul::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  helperSetTensorDescriptor(outputs[0], outputTensor);\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4788,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4789,
         lineno=20,
         tokens=231,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::map',
         body='void Matmul::map(void)\n'
              '{\n'
              '  // create descriptors\n'
              '  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));\n'
              '  helperSetTensorDescriptor(outputs[0], outputTensor);\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    cudnnActivationMode_t mode;\n'
              '    switch (activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '        mode = CUDNN_ACTIVATION_RELU;\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        mode = CUDNN_ACTIVATION_TANH;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4790,
         lineno=25,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    cudnnActivationMode_t mode;\n'
              '    switch (activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '        mode = CUDNN_ACTIVATION_RELU;\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        mode = CUDNN_ACTIVATION_TANH;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    chec')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4791,
         lineno=26,
         tokens=8,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnActivationMode_t mode;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4792,
         lineno=40,
         tokens=113,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='kCUDNN(cudnnCreateActivationDescriptor(&actiDesc));\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Matmul::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4793,
         lineno=49,
         tokens=63,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::unmap',
         body='void Matmul::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4794,
         lineno=52,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Matmul::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int numDim = outputs[0].numDim;\n'
              '  int m = inputs[0].dim[numDim-2];\n'
              '  int n = inputs[1].dim[numDim-1];\n'
              '  int k = inputs[0].dim[numDim-1];\n'
              '  cublasOperation_t transA, transB;\n'
              '  int lda, ldb, ldc;\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4795,
         lineno=58,
         tokens=625,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::forward',
         body='void Matmul::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int numDim = outputs[0].numDim;\n'
              '  int m = inputs[0].dim[numDim-2];\n'
              '  int n = inputs[1].dim[numDim-1];\n'
              '  int k = inputs[0].dim[numDim-1];\n'
              '  cublasOperation_t transA, transB;\n'
              '  int lda, ldb, ldc;\n'
              '  if (inputs[0].stride[numDim-2] == 1) {\n'
              '    transA = CUBLAS_OP_N;\n'
              '    lda = inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(inputs[0].stride[numDim-1] == 1);\n'
              '    transA = CUBLAS_OP_T;\n'
              '    lda = inputs[0].stride[numDim-2];\n'
              '  }\n'
              '  if (inputs[1].stride[numDim-2] == 1) {\n'
              '    transB = CUBLAS_OP_N;\n'
              '    ldb = inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(inputs[1].stride[numDim-1] == 1);\n'
              '    transB = CUBLAS_OP_T;\n'
              '    ldb = inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  ldc = outputs[0].stride[numDim-1];\n'
              '  if (numDim == 2) {\n'
              '    // Normal 2D Matmul\n'
              '    checkCUDA(cublasSgemm(model->blas, transA, transB,\n'
              '        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda,\n'
              '        (float*)inputs[1].data_ptr, ldb, &beta, '
              '(float*)outputs[0].data_ptr, ldc));\n'
              '  } else {\n'
              '    // Batched Matmul\n'
              '    int strideA = inputs[0].stride[numDim-3];\n'
              '    int strideB = inputs[1].stride[numDim-3];\n'
              '    int strideC = outputs[0].stride[numDim-3];\n'
              '    int batch = 1;\n'
              '    for (int i = 0; i < numDim-2; i++)\n'
              '      batch *= outputs[0].dim[i];\n'
              '    checkCUDA(cublasSgemmStridedBatched(model->blas, transA, '
              'transB,\n'
              '        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda, '
              'strideA,\n'
              '        (float*)inputs[1].data_ptr, ldb, strideB,\n'
              '        &beta, (float*)outputs[0].data_ptr, ldc, strideC, '
              'batch));\n'
              '  }\n'
              '  if (activation != AC_MODE_NONE)\n'
              '    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4796,
         lineno=66,
         tokens=11,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='transA',
         body='cublasOperation_t transA, transB;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4797,
         lineno=67,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='lda',
         body='int lda, ldb, ldc;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4798,
         lineno=68,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (inputs[0].stride[numDim-2] == 1) {\n'
              '    transA = CUBLAS_OP_N;\n'
              '    lda = inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(inputs[0].stride[numDim-1] == 1);\n'
              '    transA = CUBLAS_OP_T;\n'
              '    lda = inputs[0].stride[numDim-2];\n'
              '  }\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4799,
         lineno=76,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (inputs[1].stride[numDim-2] == 1) {\n'
              '    transB = CUBLAS_OP_N;\n'
              '    ldb = inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(inputs[1].stride[numDim-1] == 1);\n'
              '    transB = CUBLAS_OP_T;\n'
              '    ldb = inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  ldc = outputs[0].stride[numDim-1];\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4800,
         lineno=85,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (numDim == 2) {\n'
              '    // Normal 2D Matmul\n'
              '    checkCUDA(cublasSgemm(model->blas, transA, transB,\n'
              '        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda,\n'
              '        (float*)inputs[1].data_ptr, ldb, &beta, (float*)ou')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4801,
         lineno=89,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tputs[0].data_ptr, ldc));\n'
              '  } else {\n'
              '    // Batched Matmul\n'
              '    int strideA = inputs[0].stride[numDim-3];\n'
              '    int strideB = inputs[1].stride[numDim-3];\n'
              '    int strideC = outputs[0].stride[numDim-3];\n'
              '    int batch = 1;\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4802,
         lineno=96,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < numDim-2; i++)\n'
              '      batch *= outputs[0].dim[i];\n'
              '    checkCUDA(cublasSgemmStridedBatched(model->blas, transA, '
              'transB,\n'
              '        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda, '
              'strideA,\n'
              '        (float*)inputs[1].data_ptr, ldb, strideB,\n'
              '        &beta, (float*)outputs[0].data_ptr, ldc, strideC, '
              'batch));\n'
              '  }\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4803,
         lineno=103,
         tokens=56,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (activation != AC_MODE_NONE)\n'
              '    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '        &alpha, outputTensor, outputs[0].data_ptr,\n'
              '        &beta, outputTensor, outputs[0].data_ptr));\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4804,
         lineno=107,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Matmul::set_layout(void)\n'
              '{\n'
              '  // CuBLAS uses column-major.\n'
              '  int numDim = outputs[0].numDim;\n'
              '  outputs[0].stride[numDim-2] = 1;\n'
              '  outputs[0].stride[numDim-1] = outputs[0].dim[numDim-2];\n'
              '  int size = outputs[0].dim[numDim-2] * '
              'outputs[0].dim[numDim-1];\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4805,
         lineno=111,
         tokens=145,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Matmul::set_layout',
         body='void Matmul::set_layout(void)\n'
              '{\n'
              '  // CuBLAS uses column-major.\n'
              '  int numDim = outputs[0].numDim;\n'
              '  outputs[0].stride[numDim-2] = 1;\n'
              '  outputs[0].stride[numDim-1] = outputs[0].dim[numDim-2];\n'
              '  int size = outputs[0].dim[numDim-2] * '
              'outputs[0].dim[numDim-1];\n'
              '  for (int i = numDim-3; i >= 0; i--) {\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= outputs[0].dim[i];\n'
              '  }\n'
              '  assert(size == outputs[0].volume());\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4806,
         lineno=118,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = numDim-3; i >= 0; i--) {\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= outputs[0].dim[i];\n'
              '  }\n'
              '  assert(size == outputs[0].volume());\n'
              '}\n'
              '\n'
              'void Model::measure_matmul_cost(Matmul* mm)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4807,
         lineno=125,
         tokens=982,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_matmul_cost',
         body='void Model::measure_matmul_cost(Matmul* mm)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  int numDim = mm->outputs[0].numDim;\n'
              '  int m = mm->inputs[0].dim[numDim-2];\n'
              '  int n = mm->inputs[1].dim[numDim-1];\n'
              '  int k = mm->inputs[0].dim[numDim-1];\n'
              '  cublasOperation_t transA, transB;\n'
              '  int lda, ldb, ldc;\n'
              '  if (mm->inputs[0].stride[numDim-2] == 1 && '
              'mm->inputs[0].stride[numDim-1] >= m) {\n'
              '    transA = CUBLAS_OP_N;\n'
              '    lda = mm->inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1 && '
              'mm->inputs[0].stride[numDim-2] >= k);\n'
              '    transA = CUBLAS_OP_T;\n'
              '    lda = mm->inputs[0].stride[numDim-2];\n'
              '  }\n'
              '  if (mm->inputs[1].stride[numDim-2] == 1 && '
              'mm->inputs[1].stride[numDim-1] >= k) {\n'
              '    transB = CUBLAS_OP_N;\n'
              '    ldb = mm->inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1 && '
              'mm->inputs[1].stride[numDim-2] >= n);\n'
              '    transB = CUBLAS_OP_T;\n'
              '    ldb = mm->inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  ldc = mm->outputs[0].stride[numDim-1];\n'
              '\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    cudnnActivationMode_t mode;\n'
              '    switch (mm->activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '        mode = CUDNN_ACTIVATION_RELU;\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        mode = CUDNN_ACTIVATION_TANH;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  helperSetTensorDescriptor(mm->outputs[0], outputTensor);\n'
              '\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES)\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n'
              '    if (numDim == 2) {\n'
              '      // Normal 2D Matmul\n'
              '      checkCUDA(cublasSgemm(blas, transA, transB,\n'
              '          m, n, k, &alpha, inputPtr, lda,\n'
              '          filterPtr, ldb, &beta, outputPtr, ldc));\n'
              '    } else {\n'
              '      // Batched Matmul\n'
              '      int strideA = mm->inputs[0].stride[numDim-3];\n'
              '      int strideB = mm->inputs[1].stride[numDim-3];\n'
              '      int strideC = mm->outputs[0].stride[numDim-3];\n'
              '      int batch = 1;\n'
              '      for (int i = 0; i < numDim-2; i++)\n'
              '        batch *= mm->outputs[0].dim[i];\n'
              '      checkCUDA(cublasSgemmStridedBatched(blas, transA, '
              'transB,\n'
              '          m, n, k, &alpha, inputPtr, lda, strideA,\n'
              '          filterPtr, ldb, strideB,\n'
              '          &beta, outputPtr, ldc, strideC, batch));\n'
              '    }\n'
              '    if (mm->activation != AC_MODE_NONE)\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, outputTensor, outputPtr,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '  } \n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  mm->runtime = milliseconds / REPEAT_TIMES;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Matmul]: %s %s acti(%d) cost(%.4lf)\\n",\n'
              '           mm->inputs[0].to_string("input").c_str(),\n'
              '           mm->inputs[1].to_string("weight").c_str(),\n'
              '           mm->activation, mm->runtime);\n'
              '}')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4808,
         lineno=128,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' float beta = 0.0f;\n'
              '  int numDim = mm->outputs[0].numDim;\n'
              '  int m = mm->inputs[0].dim[numDim-2];\n'
              '  int n = mm->inputs[1].dim[numDim-1];\n'
              '  int k = mm->inputs[0].dim[numDim-1];\n'
              '  cublasOperation_t transA, transB;\n'
              '  int lda, ldb, ldc;\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4809,
         lineno=133,
         tokens=11,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='transA',
         body='cublasOperation_t transA, transB;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4810,
         lineno=134,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='lda',
         body='int lda, ldb, ldc;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4811,
         lineno=135,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->inputs[0].stride[numDim-2] == 1 && '
              'mm->inputs[0].stride[numDim-1] >= m) {\n'
              '    transA = CUBLAS_OP_N;\n'
              '    lda = mm->inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1 && '
              'mm->inputs[0].stride[numDim-2] >= k);\n'
              '    transA = CUBLAS_OP_T;\n'
              '    lda = mm->inputs[0].stride[numDim-2];\n'
              '  }\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4812,
         lineno=143,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (mm->inputs[1].stride[numDim-2] == 1 && '
              'mm->inputs[1].stride[numDim-1] >= k) {\n'
              '    transB = CUBLAS_OP_N;\n'
              '    ldb = mm->inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1 && '
              'mm->inputs[1].stride[numDim-2] >= n);\n'
              '    transB = CUBLAS_OP_T;\n'
              '    ldb = mm->inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  ldc = mm->outputs[0].stride[numDim-1];\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4813,
         lineno=152,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    cudnnActivationMode_t mode;\n'
              '    switch (mm->activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        mode = CUDNN_ACTIVATION_SIGMOID;\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '        mode = CUDNN_ACTIVATION_RELU;\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '    ')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4814,
         lineno=154,
         tokens=8,
         depth=4,
         parent_id=None,
         category='variable',
         summary=False,
         name='mode',
         body='cudnnActivationMode_t mode;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4815,
         lineno=163,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    mode = CUDNN_ACTIVATION_TANH;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,\n'
              '        CUDNN_NOT_PROPAGATE_NAN, 0.0));\n'
              '  }\n'
              '  helperSetTensorDescriptor(mm->outputs[0], outputTensor);\n'
              '\n'
              '  checkCUDA(cudaDeviceSynchronize());\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES)\n'
              '      checkCUDA(cudaEventRecord(startEvent));\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4816,
         lineno=177,
         tokens=135,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (numDim == 2) {\n'
              '      // Normal 2D Matmul\n'
              '      checkCUDA(cublasSgemm(blas, transA, transB,\n'
              '          m, n, k, &alpha, inputPtr, lda,\n'
              '          filterPtr, ldb, &beta, outputPtr, ldc));\n'
              '    } else {\n'
              '      // Batched Matmul\n'
              '      int strideA = mm->inputs[0].stride[numDim-3];\n'
              '      int strideB = mm->inputs[1].stride[numDim-3];\n'
              '      int strideC = mm->outputs[0].stride[numDim-3];\n'
              '      int batch = 1;\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4817,
         lineno=188,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      for (int i = 0; i < numDim-2; i++)\n'
              '        batch *= mm->outputs[0].dim[i];\n'
              '      checkCUDA(cublasSgemmStridedBatched(blas, transA, '
              'transB,\n'
              '          m, n, k, &alpha, inputPtr, lda, strideA,\n'
              '          filterPtr, ldb, strideB,\n'
              '          &beta, outputPtr, ldc, strideC, batch));\n'
              '    }\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4818,
         lineno=195,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (mm->activation != AC_MODE_NONE)\n'
              '      checkCUDNN(cudnnActivationForward(dnn, actiDesc,\n'
              '          &alpha, outputTensor, outputPtr,\n'
              '          &beta, outputTensor, outputPtr));\n'
              '  } \n'
              '  checkCUDA(cudaEventRecord(endEvent));\n'
              '  checkCUDA(cudaEventSynchronize(endEvent));\n'
              '  float milliseconds;\n'
              '  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);\n'
              '  mm->runtime = milliseconds / REPEAT_TIMES;\n')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4819,
         lineno=202,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='milliseconds',
         body='float milliseconds;')

Fragment(document_cs='c6b9c5584decdc3a17776598c5ab9d42492d1670f1b6803159dde9a33a700086',
         id=4820,
         lineno=205,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Matmul]: %s %s acti(%d) cost(%.4lf)\\n",\n'
              '           mm->inputs[0].to_string("input").c_str(),\n'
              '           mm->inputs[1].to_string("weight").c_str(),\n'
              '           mm->activation, mm->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4821,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='                                 Apache License\n'
              '                           Version 2.0, January 2004\n'
              '                        http://www.apache.org/licenses/\n'
              '\n'
              '   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND '
              'DISTRIBUTION\n'
              '\n'
              '   1. Definitions.\n'
              '\n'
              '      "License" shall mean the terms and conditions for use, '
              'reproduction,\n'
              '      and distribution as defined by Sections 1 through 9 of '
              'this document.\n'
              '\n'
              '      "Licensor" shall mean the copyright owner or entity '
              'authorized by\n'
              '      the copyright owner that is granting the License.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4822,
         lineno=1,
         tokens=5,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='File: /LICENSE\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4823,
         lineno=14,
         tokens=135,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      "Legal Entity" shall mean the union of the acting entity '
              'and all\n'
              '      other entities that control, are controlled by, or are '
              'under common\n'
              '      control with that entity. For the purposes of this '
              'definition,\n'
              '      "control" means (i) the power, direct or indirect, to '
              'cause the\n'
              '      direction or management of such entity, whether by '
              'contract or\n'
              '      otherwise, or (ii) ownership of fifty percent (50%) or '
              'more of the\n'
              '      outstanding shares, or (iii) beneficial ownership of such '
              'entity.\n'
              '\n'
              '      "You" (or "Your") shall mean an individual or Legal '
              'Entity\n'
              '      exercising permissions granted by this License.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4824,
         lineno=25,
         tokens=134,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      "Source" form shall mean the preferred form for making '
              'modifications,\n'
              '      including but not limited to software source code, '
              'documentation\n'
              '      source, and configuration files.\n'
              '\n'
              '      "Object" form shall mean any form resulting from '
              'mechanical\n'
              '      transformation or translation of a Source form, including '
              'but\n'
              '      not limited to compiled object code, generated '
              'documentation,\n'
              '      and conversions to other media types.\n'
              '\n'
              '      "Work" shall mean the work of authorship, whether in '
              'Source or\n'
              '      Object form, made available under the License, as '
              'indicated by a\n'
              '      copyright notice that is included in or attached to the '
              'work\n'
              '      (an example is provided in the Appendix below).\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4825,
         lineno=39,
         tokens=111,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      "Derivative Works" shall mean any work, whether in Source '
              'or Object\n'
              '      form, that is based on (or derived from) the Work and for '
              'which the\n'
              '      editorial revisions, annotations, elaborations, or other '
              'modifications\n'
              '      represent, as a whole, an original work of authorship. '
              'For the purposes\n'
              '      of this License, Derivative Works shall not include works '
              'that remain\n'
              '      separable from, or merely link (or bind by name) to the '
              'interfaces of,\n'
              '      the Work and Derivative Works thereof.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4826,
         lineno=47,
         tokens=79,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      "Contribution" shall mean any work of authorship, '
              'including\n'
              '      the original version of the Work and any modifications or '
              'additions\n'
              '      to that Work or Derivative Works thereof, that is '
              'intentionally\n'
              '      submitted to Licensor for inclusion in the Work by the '
              'copyright owner\n'
              '      or by an individual or Legal Entity authorized to submit '
              'on behalf of\n'
              '      the copyright owner. ')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4827,
         lineno=53,
         tokens=108,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='For the purposes of this definition, "submitted"\n'
              '      means any form of electronic, verbal, or written '
              'communication sent\n'
              '      to the Licensor or its representatives, including but not '
              'limited to\n'
              '      communication on electronic mailing lists, source code '
              'control systems,\n'
              '      and issue tracking systems that are managed by, or on '
              'behalf of, the\n'
              '      Licensor for the purpose of discussing and improving the '
              'Work, but\n'
              '      excluding communication that is conspicuously marked or '
              'otherwise\n'
              '      designated in writing by the copyright owner as "Not a '
              'Contribution."\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4828,
         lineno=61,
         tokens=135,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      "Contributor" shall mean Licensor and any individual or '
              'Legal Entity\n'
              '      on behalf of whom a Contribution has been received by '
              'Licensor and\n'
              '      subsequently incorporated within the Work.\n'
              '\n'
              '   2. Grant of Copyright License. Subject to the terms and '
              'conditions of\n'
              '      this License, each Contributor hereby grants to You a '
              'perpetual,\n'
              '      worldwide, non-exclusive, no-charge, royalty-free, '
              'irrevocable\n'
              '      copyright license to reproduce, prepare Derivative Works '
              'of,\n'
              '      publicly display, publicly perform, sublicense, and '
              'distribute the\n'
              '      Work and such Derivative Works in Source or Object form.\n'
              '\n'
              '   3. Grant of Patent License. ')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4829,
         lineno=73,
         tokens=125,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Subject to the terms and conditions of\n'
              '      this License, each Contributor hereby grants to You a '
              'perpetual,\n'
              '      worldwide, non-exclusive, no-charge, royalty-free, '
              'irrevocable\n'
              '      (except as stated in this section) patent license to '
              'make, have made,\n'
              '      use, offer to sell, sell, import, and otherwise transfer '
              'the Work,\n'
              '      where such license applies only to those patent claims '
              'licensable\n'
              '      by such Contributor that are necessarily infringed by '
              'their\n'
              '      Contribution(s) alone or by combination of their '
              'Contribution(s)\n'
              '      with the Work to which such Contribution(s) was '
              'submitted. ')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4830,
         lineno=81,
         tokens=76,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='If You\n'
              '      institute patent litigation against any entity (including '
              'a\n'
              '      cross-claim or counterclaim in a lawsuit) alleging that '
              'the Work\n'
              '      or a Contribution incorporated within the Work '
              'constitutes direct\n'
              '      or contributory patent infringement, then any patent '
              'licenses\n'
              '      granted to You under this License for that Work shall '
              'terminate\n'
              '      as of the date such litigation is filed.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4831,
         lineno=88,
         tokens=103,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   4. Redistribution. You may reproduce and distribute copies '
              'of the\n'
              '      Work or Derivative Works thereof in any medium, with or '
              'without\n'
              '      modifications, and in Source or Object form, provided '
              'that You\n'
              '      meet the following conditions:\n'
              '\n'
              '      (a) You must give any other recipients of the Work or\n'
              '          Derivative Works a copy of this License; and\n'
              '\n'
              '      (b) You must cause any modified files to carry prominent '
              'notices\n'
              '          stating that You changed the files; and\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4832,
         lineno=99,
         tokens=147,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      (c) You must retain, in the Source form of any Derivative '
              'Works\n'
              '          that You distribute, all copyright, patent, '
              'trademark, and\n'
              '          attribution notices from the Source form of the '
              'Work,\n'
              '          excluding those notices that do not pertain to any '
              'part of\n'
              '          the Derivative Works; and\n'
              '\n'
              '      (d) If the Work includes a "NOTICE" text file as part of '
              'its\n'
              '          distribution, then any Derivative Works that You '
              'distribute must\n'
              '          include a readable copy of the attribution notices '
              'contained\n'
              '          within such NOTICE file, excluding those notices that '
              'do not\n'
              '          pertain to any part of the Derivative Works, in at '
              'least one\n'
              '          of the following places: ')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4833,
         lineno=111,
         tokens=132,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='within a NOTICE text file distributed\n'
              '          as part of the Derivative Works; within the Source '
              'form or\n'
              '          documentation, if provided along with the Derivative '
              'Works; or,\n'
              '          within a display generated by the Derivative Works, '
              'if and\n'
              '          wherever such third-party notices normally appear. '
              'The contents\n'
              '          of the NOTICE file are for informational purposes '
              'only and\n'
              '          do not modify the License. You may add Your own '
              'attribution\n'
              '          notices within Derivative Works that You distribute, '
              'alongside\n'
              '          or as an addendum to the NOTICE text from the Work, '
              'provided\n'
              '          that such additional attribution notices cannot be '
              'construed\n'
              '          as modifying the License.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4834,
         lineno=122,
         tokens=75,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '      You may add Your own copyright statement to Your '
              'modifications and\n'
              '      may provide additional or different license terms and '
              'conditions\n'
              '      for use, reproduction, or distribution of Your '
              'modifications, or\n'
              '      for any such Derivative Works as a whole, provided Your '
              'use,\n'
              '      reproduction, and distribution of the Work otherwise '
              'complies with\n'
              '      the conditions stated in this License.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4835,
         lineno=129,
         tokens=88,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   5. Submission of Contributions. Unless You explicitly state '
              'otherwise,\n'
              '      any Contribution intentionally submitted for inclusion in '
              'the Work\n'
              '      by You to the Licensor shall be under the terms and '
              'conditions of\n'
              '      this License, without any additional terms or '
              'conditions.\n'
              '      Notwithstanding the above, nothing herein shall supersede '
              'or modify\n'
              '      the terms of any separate license agreement you may have '
              'executed\n'
              '      with Licensor regarding such Contributions.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4836,
         lineno=137,
         tokens=63,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   6. Trademarks. This License does not grant permission to use '
              'the trade\n'
              '      names, trademarks, service marks, or product names of the '
              'Licensor,\n'
              '      except as required for reasonable and customary use in '
              'describing the\n'
              '      origin of the Work and reproducing the content of the '
              'NOTICE file.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4837,
         lineno=142,
         tokens=134,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   7. Disclaimer of Warranty. Unless required by applicable law '
              'or\n'
              '      agreed to in writing, Licensor provides the Work (and '
              'each\n'
              '      Contributor provides its Contributions) on an "AS IS" '
              'BASIS,\n'
              '      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either '
              'express or\n'
              '      implied, including, without limitation, any warranties or '
              'conditions\n'
              '      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS '
              'FOR A\n'
              '      PARTICULAR PURPOSE. You are solely responsible for '
              'determining the\n'
              '      appropriateness of using or redistributing the Work and '
              'assume any\n'
              '      risks associated with Your exercise of permissions under '
              'this License.\n'
              '\n'
              '   8. Limitation of Liability. ')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4838,
         lineno=153,
         tokens=147,
         depth=2,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='In no event and under no legal theory,\n'
              '      whether in tort (including negligence), contract, or '
              'otherwise,\n'
              '      unless required by applicable law (such as deliberate and '
              'grossly\n'
              '      negligent acts) or agreed to in writing, shall any '
              'Contributor be\n'
              '      liable to You for damages, including any direct, '
              'indirect, special,\n'
              '      incidental, or consequential damages of any character '
              'arising as a\n'
              '      result of this License or out of the use or inability to '
              'use the\n'
              '      Work (including but not limited to damages for loss of '
              'goodwill,\n'
              '      work stoppage, computer failure or malfunction, or any '
              'and all\n'
              '      other commercial damages or losses), even if such '
              'Contributor\n'
              '      has been advised of the possibility of such damages.\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4839,
         lineno=164,
         tokens=148,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   9. Accepting Warranty or Additional Liability. While '
              'redistributing\n'
              '      the Work or Derivative Works thereof, You may choose to '
              'offer,\n'
              '      and charge a fee for, acceptance of support, warranty, '
              'indemnity,\n'
              '      or other liability obligations and/or rights consistent '
              'with this\n'
              '      License. However, in accepting such obligations, You may '
              'act only\n'
              '      on Your own behalf and on Your sole responsibility, not '
              'on behalf\n'
              '      of any other Contributor, and only if You agree to '
              'indemnify,\n'
              '      defend, and hold each Contributor harmless for any '
              'liability\n'
              '      incurred by, or claims asserted against, such Contributor '
              'by reason\n'
              '      of your accepting any such warranty or additional '
              'liability.\n'
              '\n'
              '   END OF TERMS AND CONDITIONS\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4840,
         lineno=177,
         tokens=130,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   APPENDIX: How to apply the Apache License to your work.\n'
              '\n'
              '      To apply the Apache License to your work, attach the '
              'following\n'
              '      boilerplate notice, with the fields enclosed by brackets '
              '"[]"\n'
              "      replaced with your own identifying information. (Don't "
              'include\n'
              '      the brackets!)  The text should be enclosed in the '
              'appropriate\n'
              '      comment syntax for the file format. We also recommend '
              'that a\n'
              '      file or class name and description of purpose be included '
              'on the\n'
              '      same "printed page" as the copyright notice for easier\n'
              '      identification within third-party archives.\n'
              '\n'
              '   Copyright [yyyy] [name of copyright owner]\n')

Fragment(document_cs='c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4',
         id=4841,
         lineno=190,
         tokens=117,
         depth=1,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='\n'
              '   Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '   you may not use this file except in compliance with the '
              'License.\n'
              '   You may obtain a copy of the License at\n'
              '\n'
              '       http://www.apache.org/licenses/LICENSE-2.0\n'
              '\n'
              '   Unless required by applicable law or agreed to in writing, '
              'software\n'
              '   distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '   See the License for the specific language governing '
              'permissions and\n'
              '   limitations under the License.\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4842,
         lineno=1,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Graph::topk(c')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4843,
         lineno=1,
         tokens=95,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/topk.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::topk Model::get_or_create_topk TopK::TopK '
              'TopK::collect_costs TopK::get_int_parameter TopK::~TopK '
              'TopKKey::TopKKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT TopK TopKKey collect_costs '
              'get_int_parameter get_or_create_topk topk\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4844,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4845,
         lineno=19,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='onst TensorHandle _input,\n'
              '                 int _axis, int _numk,\n'
              '                 bool _largest, bool _sorted,\n'
              '                 Tensor* outputs)\n'
              '{\n'
              '  Op op = model->get_or_create_topk(*_input, _numk, _axis, '
              '_largest, _sorted);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  outputs[0] = op.ptr->o')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4846,
         lineno=19,
         tokens=138,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::topk',
         body='void Graph::topk(const TensorHandle _input,\n'
              '                 int _axis, int _numk,\n'
              '                 bool _largest, bool _sorted,\n'
              '                 Tensor* outputs)\n'
              '{\n'
              '  Op op = model->get_or_create_topk(*_input, _numk, _axis, '
              '_largest, _sorted);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  outputs[0] = op.ptr->outputs[0];\n'
              '  outputs[0].op = op;\n'
              '  outputs[1] = op.ptr->outputs[1];\n'
              '  outputs[1].op = op;\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4847,
         lineno=27,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='utputs[0];\n'
              '  outputs[0].op = op;\n'
              '  outputs[1] = op.ptr->outputs[1];\n'
              '  outputs[1].op = op;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_topk(const Tensor& _input,\n'
              '                             int _axis, int _numk,\n'
              '                             bool _largest, bool _sorted)\n'
              '{\n'
              '  TopKKey key(_input, _axis, _numk, _largest, _sorted);\n'
              '  TopK* topkOp;\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4848,
         lineno=33,
         tokens=165,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_topk',
         body='Op Model::get_or_create_topk(const Tensor& _input,\n'
              '                             int _axis, int _numk,\n'
              '                             bool _largest, bool _sorted)\n'
              '{\n'
              '  TopKKey key(_input, _axis, _numk, _largest, _sorted);\n'
              '  TopK* topkOp;\n'
              '  if (topk.find(key) != topk.end()) {\n'
              '    topkOp = topk[key];\n'
              '  } else {\n'
              '    topkOp = new TopK(this, _input, _axis, _numk, _largest, '
              '_sorted);\n'
              '    measure_topk_cost(topkOp);\n'
              '    topk[key] = topkOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = topkOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4849,
         lineno=37,
         tokens=18,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _axis, _numk, _largest, _sorted)')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4850,
         lineno=39,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (topk.find(key) != topk.end()) {\n'
              '    topkOp = topk[key];\n'
              '  } else {\n'
              '    topkOp = new TopK(this, _input, _axis, _numk, _largest, '
              '_sorted);\n'
              '    measure_topk_cost(topkOp);\n'
              '    topk[key] = topkOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  r')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4851,
         lineno=46,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4852,
         lineno=48,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='et.ptr = topkOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'TopK::TopK(Model* _model, const Tensor& _input,\n'
              '           int _axis, int _numk, bool _largest, bool _sorted)\n'
              ': OpBase(_input, _model, OP_TOPK), axis(_axis),\n'
              '  largest(_largest), sorted(_sorted)\n'
              '{\n'
              '  numOutputs = 2;\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4853,
         lineno=52,
         tokens=208,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::TopK',
         body='TopK::TopK(Model* _model, const Tensor& _input,\n'
              '           int _axis, int _numk, bool _largest, bool _sorted)\n'
              ': OpBase(_input, _model, OP_TOPK), axis(_axis),\n'
              '  largest(_largest), sorted(_sorted)\n'
              '{\n'
              '  numOutputs = 2;\n'
              '  for (int i = 0; i < 2; i++) {\n'
              '    outputs[i].numDim = _input.numDim;\n'
              '    int total = 1;\n'
              '    for (int j = _input.numDim-1; j >= 0; j--) {\n'
              '      if (j != axis)\n'
              '        outputs[i].dim[j] = _input.dim[j];\n'
              '      else\n'
              '        outputs[i].dim[j] = _numk;\n'
              '      outputs[i].stride[j] = total;\n'
              '      total *= outputs[i].dim[j];\n'
              '      outputs[i].split[j] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    outputs[i].idx = i;\n'
              '  }\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4854,
         lineno=58,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 2; i++) {\n'
              '    outputs[i].numDim = _input.numDim;\n'
              '    int total = 1;\n'
              '    for (int j = _input.numDim-1; j >= 0; j--) {\n'
              '      if (j != axis)\n'
              '        outputs[i].dim[j] = _input.dim[j];\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4855,
         lineno=64,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      else\n'
              '        outputs[i].dim[j] = _numk;\n'
              '      outputs[i].stride[j] = total;\n'
              '      total *= outputs[i].dim[j];\n'
              '      outputs[i].split[j] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    outputs[i].idx = i;\n'
              '  }\n'
              '}\n'
              '\n'
              'TopK::~TopK(void)\n'
              '{}\n'
              '\n'
              'bool TopK::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void TopK::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, i')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4856,
         lineno=74,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::~TopK',
         body='TopK::~TopK(void)\n{}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4857,
         lineno=77,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::get_int_parameter',
         body='bool TopK::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4858,
         lineno=82,
         tokens=74,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::collect_costs',
         body='void TopK::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[TopK]: cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4859,
         lineno=83,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nt& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[TopK]: cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'TopKKey::TopKKey(const Tensor& _input,\n'
              '                 int _axis, int _numk,\n'
              '                 bool _largest, bool _sorted)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _axis;\n'
              '  keys[idx++] = _numk;\n'
              '  keys[idx++] = (int)_largest;\n'
              '  keys[idx++] = (int)_sorted;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4860,
         lineno=91,
         tokens=111,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopKKey::TopKKey',
         body='TopKKey::TopKKey(const Tensor& _input,\n'
              '                 int _axis, int _numk,\n'
              '                 bool _largest, bool _sorted)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _axis;\n'
              '  keys[idx++] = _numk;\n'
              '  keys[idx++] = (int)_largest;\n'
              '  keys[idx++] = (int)_sorted;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='c73744fe90dbd94787cc5d96388b148baf0458bb17e0deed0b5288b5a7634040',
         id=4861,
         lineno=101,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4862,
         lineno=1,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * li')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4863,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/topk_mkl.cc\n'
              '  Methods: Model::measure_topk_cost TopK::forward TopK::map '
              'TopK::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_topk_cost unmap\n')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4864,
         lineno=13,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='mitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void TopK::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = mal')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4865,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4866,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4867,
         lineno=21,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::map',
         body='void TopK::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4868,
         lineno=25,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='loc(outputSize));\n'
              '}\n'
              '\n'
              'void TopK::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void TopK::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_topk_cost(TopK* topk)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4869,
         lineno=28,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::unmap',
         body='void TopK::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4870,
         lineno=37,
         tokens=14,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='TopK::forward',
         body='void TopK::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='c840e2eacd9c1a24661ca044df53ef1ca2bd292507dbb9b565a351ff0d90bbf0',
         id=4871,
         lineno=42,
         tokens=20,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_topk_cost',
         body='void Model::measure_topk_cost(TopK* topk)\n'
              '{\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4872,
         lineno=1,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitati')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4873,
         lineno=1,
         tokens=92,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/broadcast_add.cc\n'
              '  Functions: key\n'
              '  Methods: BroadcastAdd::BroadcastAdd '
              'BroadcastAdd::collect_costs BroadcastAdd::get_int_parameter '
              'BroadcastAdd::~BroadcastAdd BroadcastAddKey::BroadcastAddKey '
              'Graph::broadcast_add Model::get_or_create_broadcast_add\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: BroadcastAdd BroadcastAddKey broadcast_add '
              'collect_costs get_int_parameter get_or_create_broadcast_add\n')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4874,
         lineno=13,
         tokens=63,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ons under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::broadcast_add(const TensorHandle _data,\n'
              '                                        const TensorHandle '
              '_bias)\n'
              '{\n'
              '  Op op = model->get_or_create_broadcast_add(*_data, *_bias);\n'
              '  add_edge(_data->')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4875,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4876,
         lineno=19,
         tokens=100,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::broadcast_add',
         body='TensorHandle Graph::broadcast_add(const TensorHandle _data,\n'
              '                                        const TensorHandle '
              '_bias)\n'
              '{\n'
              '  Op op = model->get_or_create_broadcast_add(*_data, *_bias);\n'
              '  add_edge(_data->op, op, _data->idx, 0);\n'
              '  add_edge(_bias->op, op, _bias->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4877,
         lineno=23,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='op, op, _data->idx, 0);\n'
              '  add_edge(_bias->op, op, _bias->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_broadcast_add(const Tensor& _data, '
              'const Tensor& _bias)\n'
              '{\n'
              '  BroadcastAddKey key(_data);\n'
              '  BroadcastAdd* newop;\n')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4878,
         lineno=30,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_broadcast_add',
         body='Op Model::get_or_create_broadcast_add(const Tensor& _data, '
              'const Tensor& _bias)\n'
              '{\n'
              '  BroadcastAddKey key(_data);\n'
              '  BroadcastAdd* newop;\n'
              '  if (broadcast_add.find(key) != broadcast_add.end()) {\n'
              '    newop = broadcast_add[key];\n'
              '  } else {\n'
              '    newop = new BroadcastAdd(this, _data, _bias);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    newop->runtime = 0.0f;\n'
              '    broadcast_add[key] = newop;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = newop;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4879,
         lineno=32,
         tokens=4,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_data)')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4880,
         lineno=34,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (broadcast_add.find(key) != broadcast_add.end()) {\n'
              '    newop = broadcast_add[key];\n'
              '  } else {\n'
              '    newop = new BroadcastAdd(this, _data, _bias);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    newop->runtime = 0.0f;\n'
              '    broadcast_add[key] = newop;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4881,
         lineno=43,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4882,
         lineno=44,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_id ++;\n'
              '  ret.ptr = newop;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'BroadcastAdd::BroadcastAdd(Model* _model, const Tensor& _data, '
              'const Tensor& _bias)\n'
              ': OpBase(_data, _bias, _model, OP_BROADCAST_ADD)\n'
              '{\n'
              '  assert(_data.numDim == 4);\n'
              '  assert(_bias.numDim == 1);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _data;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'BroadcastAdd::~BroadcastAdd(void)\n'
              '{}\n'
              '\n'
              'bool Broadc')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4883,
         lineno=49,
         tokens=87,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::BroadcastAdd',
         body='BroadcastAdd::BroadcastAdd(Model* _model, const Tensor& _data, '
              'const Tensor& _bias)\n'
              ': OpBase(_data, _bias, _model, OP_BROADCAST_ADD)\n'
              '{\n'
              '  assert(_data.numDim == 4);\n'
              '  assert(_bias.numDim == 1);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _data;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4884,
         lineno=59,
         tokens=8,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::~BroadcastAdd',
         body='BroadcastAdd::~BroadcastAdd(void)\n{}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4885,
         lineno=62,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='astAdd::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void BroadcastAdd::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4886,
         lineno=62,
         tokens=30,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::get_int_parameter',
         body='bool BroadcastAdd::get_int_parameter(PMParameter para, int* '
              'value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4887,
         lineno=67,
         tokens=146,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::collect_costs',
         body='void BroadcastAdd::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[BroadcastAdd]: i(%d %d %d %d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4888,
         lineno=73,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[BroadcastAdd]: i(%d %d %d %d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (_conv_w)\n'
              'BroadcastAddKey::BroadcastAddKey(const Tensor& _data)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _data.serialize(keys, idx);\n')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4889,
         lineno=81,
         tokens=53,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAddKey::BroadcastAddKey',
         body='BroadcastAddKey::BroadcastAddKey(const Tensor& _data)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _data.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='c916799aeb168a8d02ddcabff3cec5709340f0cae1414d31fd787c4b0d9302d4',
         id=4890,
         lineno=85,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4891,
         lineno=1,
         tokens=21,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import tensorflow as tf\n'
              'import numpy as np\n'
              '\n'
              'def make_activation(input, actimode, name):\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4892,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4893,
         lineno=1,
         tokens=119,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /tensorflow_py/shared_functions.py\n'
              '  Functions: make_activation make_avgpool2d make_conv2d '
              'make_matmul make_maxpool2d make_seperable_conv2d\n'
              '  Variables and usages: actimode avg_pool constant conv2d '
              'conv_name data_format depthwise_filter_shape dp_filter dtype '
              'filter_shape float32 input input_tensor kernels matmul max_pool '
              'name numpy out_channels padding pointwise_filter_shape print '
              'pw_filter random random_sample relu relu_name separable_conv2d '
              'shape sigmoid sigmoid_name strides tanh tanh_name tensorflow '
              'value weight weight_shape weights weights_name\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4894,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4895,
         lineno=4,
         tokens=11,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_activation',
         body='def make_activation(input, actimode, name):\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4896,
         lineno=5,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if actimode == "NONE":\n'
              '        return input\n'
              '    elif actimode == "RELU":\n'
              '        relu_name = name + "_relu"\n'
              '        relu = tf.nn.relu(input, name=relu_name)\n'
              '        return relu\n'
              '    elif actimode == "SIGMOID":\n'
              '        sigmoid_name = name + "_sigmoid"\n'
              '        sigmoid = tf.nn.sigmoid(input, name=sigmoid_name)\n'
              '        return sigmoid\n'
              '    elif actimode == "TANH":\n'
              '        tanh_name = name + "_tanh"\n'
              '        tanh = tf.nn.tanh(input, name=tanh_name)\n'
              '        return tanh\n'
              '    else:\n'
              '        print("Unknown Actimode")\n'
              '        assert(0)\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4897,
         lineno=5,
         tokens=144,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_activation',
         body='    if actimode == "NONE":\n'
              '        return input\n'
              '    elif actimode == "RELU":\n'
              '        relu_name = name + "_relu"\n'
              '        relu = tf.nn.relu(input, name=relu_name)\n'
              '        return relu\n'
              '    elif actimode == "SIGMOID":\n'
              '        sigmoid_name = name + "_sigmoid"\n'
              '        sigmoid = tf.nn.sigmoid(input, name=sigmoid_name)\n'
              '        return sigmoid\n'
              '    elif actimode == "TANH":\n'
              '        tanh_name = name + "_tanh"\n'
              '        tanh = tf.nn.tanh(input, name=tanh_name)\n'
              '        return tanh\n'
              '    else:\n'
              '        print("Unknown Actimode")\n'
              '        assert(0)')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4898,
         lineno=22,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def make_conv2d(input_tensor, filter_shape, strides, padding, '
              'actimode, name):\n'
              '    weights_name = name + "_weights"\n'
              '    conv_name = name + "_conv2d"\n'
              '    weights = '
              'tf.constant(np.random.random_sample(filter_shape), '
              'name=weights_name, dtype=tf.float32)\n'
              '    conv2d = tf.nn.conv2d(input_tensor, weights, strides, '
              'padding, data_format="NCHW", name=conv_name)\n'
              '    return make_activation(conv2d, actimode, name)\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4899,
         lineno=23,
         tokens=108,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_conv2d',
         body='def make_conv2d(input_tensor, filter_shape, strides, padding, '
              'actimode, name):\n'
              '    weights_name = name + "_weights"\n'
              '    conv_name = name + "_conv2d"\n'
              '    weights = '
              'tf.constant(np.random.random_sample(filter_shape), '
              'name=weights_name, dtype=tf.float32)\n'
              '    conv2d = tf.nn.conv2d(input_tensor, weights, strides, '
              'padding, data_format="NCHW", name=conv_name)\n'
              '    return make_activation(conv2d, actimode, name)')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4900,
         lineno=29,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def make_seperable_conv2d(input_tensor, out_channels, kernels, '
              'strides, padding, actimode="NONE", name="seperable_conv2d"):\n'
              '    '
              'depthwise_filter_shape=(kernels[0],kernels[1],input_tensor.shape[1].value,1)\n'
              '    '
              'pointwise_filter_shape=(1,1,input_tensor.shape[1].value,out_channels)\n'
              '    dp_filter = '
              'tf.constant(np.random.random_sample(depthwise_fil')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4901,
         lineno=30,
         tokens=93,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_seperable_conv2d',
         body='def make_seperable_conv2d(input_tensor, out_channels, kernels, '
              'strides, padding, actimode="NONE", name="seperable_conv2d"):\n'
              '    '
              'depthwise_filter_shape=(kernels[0],kernels[1],input_tensor.shape[1].value,1)\n'
              '    '
              'pointwise_filter_shape=(1,1,input_tensor.shape[1].value,out_channels)\n'
              '    dp_filter = '
              'tf.constant(np.random.random_sample(depthwise_fil')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4902,
         lineno=33,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ter_shape), name=name+"_dp_filter", dtype=tf.float32)\n'
              '    pw_filter = '
              'tf.constant(np.random.random_sample(pointwise_filter_shape), '
              'name=name+"_pw_filter", dtype=tf.float32)\n'
              '    conv2d = tf.nn.separable_conv2d(input_tensor, dp_filter, '
              'pw_filter, strides, padding, data_format="NCHW", name=name)\n'
              '    return make_activation(conv2d, actimode, name)\n'
              '\n'
              'def make_avgpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.avg_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4903,
         lineno=33,
         tokens=89,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_seperable_conv2d',
         body='ter_shape), name=name+"_dp_filter", dtype=tf.float32)\n'
              '    pw_filter = '
              'tf.constant(np.random.random_sample(pointwise_filter_shape), '
              'name=name+"_pw_filter", dtype=tf.float32)\n'
              '    conv2d = tf.nn.separable_conv2d(input_tensor, dp_filter, '
              'pw_filter, strides, padding, data_format="NCHW", name=name)\n'
              '    return make_activation(conv2d, actimode, name)')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4904,
         lineno=38,
         tokens=37,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_avgpool2d',
         body='def make_avgpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.avg_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4905,
         lineno=40,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def make_maxpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.max_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")\n'
              '\n'
              'def make_matmul(input_tensor, out_channels):\n'
              '    weight_shape = (input_tensor.shape[1].value, out_channels)\n'
              '    weight = tf.constant(np.random.random_sample(weight_shape), '
              'dtype=tf.float32)\n'
              '    return tf.matmul(input_tensor, weight)\n')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4906,
         lineno=41,
         tokens=37,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_maxpool2d',
         body='def make_maxpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.max_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")')

Fragment(document_cs='c9c5aa947edc4c91bf87684e886326303d354b485bf00257c6b1cb7fca5e6191',
         id=4907,
         lineno=44,
         tokens=52,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='make_matmul',
         body='def make_matmul(input_tensor, out_channels):\n'
              '    weight_shape = (input_tensor.shape[1].value, out_channels)\n'
              '    weight = tf.constant(np.random.random_sample(weight_shape), '
              'dtype=tf.float32)\n'
              '    return tf.matmul(input_tensor, weight)')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4908,
         lineno=1,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an ')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4909,
         lineno=1,
         tokens=58,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/example_utils.h\n'
              '  Macros: _CPP_EXAMPLES_EXAMPLE_UTILS_H_\n'
              '  Functions: dims2size new_input new_random_data '
              'new_random_weight new_weight\n'
              '  Variables: dist\n'
              '  Using: taso\n'
              '  Usages: accumulate generate\n')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4910,
         lineno=10,
         tokens=90,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='"AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EXAMPLES_EXAMPLE_UTILS_H_\n'
              '#define _CPP_EXAMPLES_EXAMPLE_UTILS_H_\n'
              '\n'
              '#include <algorithm>\n'
              '#include <cstddef>\n'
              '#include <functional>\n'
              '#include <random>\n'
              '#include <vector>\n'
              '#include "taso/ops.h"\n')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4911,
         lineno=17,
         tokens=11,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_EXAMPLE_UTILS_H_',
         body='#define _CPP_EXAMPLES_EXAMPLE_UTILS_H_')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4912,
         lineno=25,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'using namespace taso;\n'
              '\n'
              'DATATYPE* new_random_data(size_t size) {\n'
              '  // Random generator.\n'
              '  static std::random_device r;\n'
              '  static std::default_random_engine e(r());\n'
              '  static std::uniform_real_distribution<DATATYPE> dist;\n'
              '  auto gen = [&]() { return dist(e); };\n'
              '\n'
              '  auto data = new DATATYPE[size];\n'
              '  std::generate(data, data + size, gen);\n'
              '  return data;\n'
              '}\n'
              '\n'
              'size_t dims2size(const std::vector<int>& dims) {\n'
              '  return std::accumulate(dims.begin(), dims.end(), 1, '
              'std::multiplies')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4913,
         lineno=26,
         tokens=5,
         depth=1,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4914,
         lineno=28,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='new_random_data',
         body='new_random_data(size_t size)')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4915,
         lineno=32,
         tokens=12,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='dist',
         body='static std::uniform_real_distribution<DATATYPE> dist;')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4916,
         lineno=40,
         tokens=11,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='dims2size',
         body='dims2size(const std::vector<int>& dims)')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4917,
         lineno=40,
         tokens=37,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='dims2size',
         body='size_t dims2size(const std::vector<int>& dims) {\n'
              '  return std::accumulate(dims.begin(), dims.end(), 1, '
              'std::multiplies<size_t>());\n'
              '}')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4918,
         lineno=41,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='<size_t>());\n'
              '}\n'
              '\n'
              'inline TensorHandle new_input(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return graph->new_input(dims.size(), dims.data());\n'
              '}\n'
              '\n'
              'inline TensorHandle new_weight(Graph* graph, const '
              'std::vector<int>& dims, const DATATYPE* data) {\n'
              '  return graph->new_weight(dims.size(), dims.data(), data);\n'
              '}\n'
              '\n'
              'inline TensorHandle new_random_weight(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return new_weight(graph, dims, '
              'new_random_data(dims2size(dims)));\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4919,
         lineno=44,
         tokens=32,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='new_input',
         body='inline TensorHandle new_input(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return graph->new_input(dims.size(), dims.data());\n'
              '}')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4920,
         lineno=44,
         tokens=14,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='new_input',
         body='new_input(Graph* graph, const std::vector<int>& dims)')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4921,
         lineno=48,
         tokens=40,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='new_weight',
         body='inline TensorHandle new_weight(Graph* graph, const '
              'std::vector<int>& dims, const DATATYPE* data) {\n'
              '  return graph->new_weight(dims.size(), dims.data(), data);\n'
              '}')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4922,
         lineno=48,
         tokens=20,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='new_weight',
         body='new_weight(Graph* graph, const std::vector<int>& dims, const '
              'DATATYPE* data)')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4923,
         lineno=52,
         tokens=38,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='new_random_weight',
         body='inline TensorHandle new_random_weight(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return new_weight(graph, dims, '
              'new_random_data(dims2size(dims)));\n'
              '}')

Fragment(document_cs='c9e0c08fade72ae524f7b6d358e57c309632e71c46472c2d153aa67cf6eb12e5',
         id=4924,
         lineno=52,
         tokens=15,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='new_random_weight',
         body='new_random_weight(Graph* graph, const std::vector<int>& dims)')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4925,
         lineno=1,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIE')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4926,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/shape_mkl.cc\n'
              '  Methods: Model::measure_shape_cost Shape::forward Shape::map '
              'Shape::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_shape_cost unmap\n')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4927,
         lineno=11,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='S OR CONDITIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Shape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '\n'
              '  if (type == OP_SHAPE) {\n'
              '    assert(outputs[0].volume() == inputs[0].numDim);\n')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4928,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4929,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4930,
         lineno=21,
         tokens=161,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::map',
         body='void Shape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '\n'
              '  if (type == OP_SHAPE) {\n'
              '    assert(outputs[0].volume() == inputs[0].numDim);\n'
              '    for (int i = 0; i < inputs[0].numDim; i++) {\n'
              '      ((DATATYPE*)outputs[0].data_ptr)[i] = inputs[0].dim[i];\n'
              '    }\n'
              '  } else {\n'
              '    assert(type == OP_SIZE);\n'
              '    assert(outputs[0].volume() == 1);\n'
              '    *((DATATYPE*)outputs[0].data_ptr) = inputs[0].volume();\n'
              '  }\n'
              '}')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4931,
         lineno=29,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = 0; i < inputs[0].numDim; i++) {\n'
              '      ((DATATYPE*)outputs[0].data_ptr)[i] = inputs[0].dim[i];\n'
              '    }\n'
              '  } else {\n'
              '    assert(type == OP_SIZE);\n'
              '    assert(outputs[0].volume() == 1);\n'
              '    *((DATATYPE*)outputs[0].data_ptr) = inputs[0].volume();\n'
              '  }\n'
              '}\n'
              '\n'
              'void Shape::unmap(void)\n'
              '{\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Shape::forward(bool block)\n'
              '{\n')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4932,
         lineno=39,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::unmap',
         body='void Shape::unmap(void)\n'
              '{\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4933,
         lineno=46,
         tokens=20,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Shape::forward',
         body='void Shape::forward(bool block)\n'
              '{\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4934,
         lineno=48,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_shape_cost(Shape* shape)\n'
              '{\n'
              '  // assume the cost is zero for now\n'
              '  shape->runtime = 0;\n'
              '}\n'
              '\n')

Fragment(document_cs='cb0a0b245c1402d36276cb3efbd661db4091fd307a9c0d4f4e31296da67eb208',
         id=4935,
         lineno=51,
         tokens=31,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_shape_cost',
         body='void Model::measure_shape_cost(Shape* shape)\n'
              '{\n'
              '  // assume the cost is zero for now\n'
              '  shape->runtime = 0;\n'
              '}')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4936,
         lineno=1,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import taso as ts\n'
              'import onnx\n'
              '\n'
              'def squeeze(graph, out_channels, input):\n'
              '    weight = graph.new_weight(dims=(out_channels, input.dim(1), '
              '1, 1))\n'
              '    return graph.conv2d(input=input, weight=weight,\n'
              '                        strides=(1, 1), padding="SAME",\n'
              '                        activation="RELU")\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4937,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4938,
         lineno=1,
         tokens=85,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/nasnet_a.py\n'
              '  Functions: fit normal_cell reduction_cell seperable_conv '
              'squeeze\n'
              '  Variables and usages: activation alpha append avgpool2d '
              'budget check_model checker concat conv2d current dims '
              'export_onnx format graph input kernels maxpool2d new_graph '
              'new_input new_weight onnx onnx_model optimize out_channels '
              'outputs padding prev range save strides taso weight weight1 '
              'weight2\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4939,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4940,
         lineno=4,
         tokens=63,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='squeeze',
         body='def squeeze(graph, out_channels, input):\n'
              '    weight = graph.new_weight(dims=(out_channels, input.dim(1), '
              '1, 1))\n'
              '    return graph.conv2d(input=input, weight=weight,\n'
              '                        strides=(1, 1), padding="SAME",\n'
              '                        activation="RELU")')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4941,
         lineno=9,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def fit(graph, current, input):\n'
              '    if input.dim(2) == current.dim(2):\n'
              '        return squeeze(graph, current.dim(1), input)\n'
              '    else:\n'
              '        weight = graph.new_weight(dims=(current.dim(1), '
              'input.dim(1), 3, 3))\n'
              '        return graph.conv2d(input=input, weight=weight, '
              'strides=(2, 2), padding="SAME", activation="RELU")\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4942,
         lineno=10,
         tokens=90,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fit',
         body='def fit(graph, current, input):\n'
              '    if input.dim(2) == current.dim(2):\n'
              '        return squeeze(graph, current.dim(1), input)\n'
              '    else:\n'
              '        weight = graph.new_weight(dims=(current.dim(1), '
              'input.dim(1), 3, 3))\n'
              '        return graph.conv2d(input=input, weight=weight, '
              'strides=(2, 2), padding="SAME", activation="RELU")')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4943,
         lineno=16,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def seperable_conv(graph, input, out_channels, kernels, '
              'strides, padding, activation = "NONE"):\n'
              '    assert input.dim(1) % out_channels == 0, "input.dim(1)={}, '
              'out_channels={}".format(input.dim(1), out_channels)\n'
              '    weight1 = graph.new_weight(dims=(out_channels, input.dim(1) '
              '// out_chan')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4944,
         lineno=17,
         tokens=77,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='seperable_conv',
         body='def seperable_conv(graph, input, out_channels, kernels, '
              'strides, padding, activation = "NONE"):\n'
              '    assert input.dim(1) % out_channels == 0, "input.dim(1)={}, '
              'out_channels={}".format(input.dim(1), out_channels)\n'
              '    weight1 = graph.new_weight(dims=(out_channels, input.dim(1) '
              '// out_chan')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4945,
         lineno=18,
         tokens=9,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='input.dim(1)={}, out_channels={}')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4946,
         lineno=19,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nels, kernels[0], kernels[1]))\n'
              '    t = graph.conv2d(input=input, weight=weight1, '
              'strides=strides, padding=padding)\n'
              '    weight2 = graph.new_weight(dims=(out_channels, t.dim(1), 1, '
              '1))\n'
              '    return graph.conv2d(input=t, weight=weight2, strides=(1, '
              '1), padding="SAME", activation=activation)\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4947,
         lineno=19,
         tokens=86,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='seperable_conv',
         body='nels, kernels[0], kernels[1]))\n'
              '    t = graph.conv2d(input=input, weight=weight1, '
              'strides=strides, padding=padding)\n'
              '    weight2 = graph.new_weight(dims=(out_channels, t.dim(1), 1, '
              '1))\n'
              '    return graph.conv2d(input=t, weight=weight2, strides=(1, '
              '1), padding="SAME", activation=activation)')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4948,
         lineno=23,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def normal_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4949,
         lineno=24,
         tokens=81,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='def normal_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.a')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4950,
         lineno=31,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=cur, ')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4951,
         lineno=31,
         tokens=82,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='ppend(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=cur, k')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4952,
         lineno=35,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, out_channels')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4953,
         lineno=35,
         tokens=92,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='ernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, out_channels')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4954,
         lineno=39,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    assert len(ts) == 10, "Expected 10 tensors, got '
              '{}".format(len(ts))\n'
              '    outputs = list()\n'
              '    for i in range(5):\n'
              '        outputs.append(graph.add(ts[2*i], ts[2*i+1]))\n'
              '    return graph.concat(1, outputs)\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4955,
         lineno=39,
         tokens=115,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='normal_cell',
         body='=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    assert len(ts) == 10, "Expected 10 tensors, got '
              '{}".format(len(ts))\n'
              '    outputs = list()\n'
              '    for i in range(5):\n'
              '        outputs.append(graph.add(ts[2*i], ts[2*i+1]))\n'
              '    return graph.concat(1, outputs)')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4956,
         lineno=43,
         tokens=7,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Expected 10 tensors, got {}')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4957,
         lineno=48,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'def reduction_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(t')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4958,
         lineno=49,
         tokens=96,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='def reduction_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channe')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4959,
         lineno=56,
         tokens=107,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='ls,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[0], ts[1]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[2], ts[3')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4960,
         lineno=58,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s[0], ts[1]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[2], ts[3]))\n'
              '    ts.append(graph.avgpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(5')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4961,
         lineno=62,
         tokens=108,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body=']))\n'
              '    ts.append(graph.avgpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[4], ts[5]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4962,
         lineno=65,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[4], ts[5]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=outputs[0], '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[6], ts[7]))\n'
              '    ts.append(graph.avgpool2d(input=outputs[0], kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(outpu')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4963,
         lineno=68,
         tokens=106,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='reduction_cell',
         body='(seperable_conv(graph, input=outputs[0], '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[6], ts[7]))\n'
              '    ts.append(graph.avgpool2d(input=outputs[0], kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(graph.add(ts[8], ts[9]))\n'
              '    return graph.concat(1, outputs)')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4964,
         lineno=72,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ts[1])\n'
              '    outputs.append(graph.add(ts[8], ts[9]))\n'
              '    return graph.concat(1, outputs)\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,3,224,224))\n'
              'weight = graph.new_weight(dims=(64,3,7,7))\n'
              'input = graph.conv2d(input=input, weight=weight, '
              'strides=(2,2),\n'
              '                 padding="SAME", activation="RELU")\n'
              'input = graph.maxpool2d(input=input, kernels=(3,3), '
              'strides=(2,2), padding="SAME")\n'
              '\n'
              'out_channels = 128\n'
              'for i in range(3):\n'
              '    prev = input\n'
              '    cur = input\n')

Fragment(document_cs='cd1262d28e79a6cde37d640281f25c5958f9a2f781d58b45bb99243dcf73e360',
         id=4965,
         lineno=87,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for j in range(5):\n'
              '        t = normal_cell(graph, prev, cur, out_channels)\n'
              '        prev = cur\n'
              '        cur = t\n'
              '    out_channels *= 2\n'
              '    input = reduction_cell(graph, prev, cur, out_channels)\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = ts.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "nasneta_taso.onnx")\n')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4966,
         lineno=1,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limit')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4967,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/slice_mkl.cc\n'
              '  Methods: Model::measure_slice_cost Slice::forward Slice::map '
              'Slice::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_slice_cost unmap\n')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4968,
         lineno=13,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Slice::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4969,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4970,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4971,
         lineno=21,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::map',
         body='void Slice::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4972,
         lineno=25,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(outputSize));\n'
              '}\n'
              '\n'
              'void Slice::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Slice::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n'
              'void Model::measure_slice_cost(Slice* slice)\n'
              '{\n'
              '  assert(false);\n'
              '}\n'
              '\n')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4973,
         lineno=28,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::unmap',
         body='void Slice::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4974,
         lineno=37,
         tokens=13,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::forward',
         body='void Slice::forward(bool block)\n{\n  assert(false);\n}')

Fragment(document_cs='cd2fe3d854d0b4c6053aa9c510128c698e67d212571576c5f56f753bf5c3d3c7',
         id=4975,
         lineno=42,
         tokens=17,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_slice_cost',
         body='void Model::measure_slice_cost(Slice* slice)\n'
              '{\n'
              '  assert(false);\n'
              '}')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4976,
         lineno=1,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIO')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4977,
         lineno=1,
         tokens=56,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/transpose_kernel.cu\n'
              '  Methods: Model::measure_transpose_cost Transpose::forward '
              'Transpose::map Transpose::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_transpose_cost unmap\n')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4978,
         lineno=11,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='NS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Transpose::map(void)\n'
              '{\n'
              '  //TODO: for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}\n'
              '\n'
              'void Transpose::unmap(void)\n'
              '{\n'
              '}\n'
              '\n'
              'void Transpose::forward(bool block)\n'
              '{\n')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4979,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4980,
         lineno=20,
         tokens=39,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::map',
         body='void Transpose::map(void)\n'
              '{\n'
              '  //TODO: for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4981,
         lineno=26,
         tokens=10,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::unmap',
         body='void Transpose::unmap(void)\n{\n}')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4982,
         lineno=30,
         tokens=23,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Transpose::forward',
         body='void Transpose::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4983,
         lineno=32,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_transpose_cost(Transpose* transpose)\n'
              '{\n'
              '  // Transpose requires no kernel launch\n'
              '  transpose->runtime = 0;\n'
              '}\n')

Fragment(document_cs='ceea6cb40e3cd6b6a2e9ce543411bc4d5a529d0b19e6af6c13f46a029269fc57',
         id=4984,
         lineno=36,
         tokens=31,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_transpose_cost',
         body='void Model::measure_transpose_cost(Transpose* transpose)\n'
              '{\n'
              '  // Transpose requires no kernel launch\n'
              '  transpose->runtime = 0;\n'
              '}')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4985,
         lineno=1,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the ')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4986,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/dnnl_helper.cc\n'
              '  Functions: assign_kernel copy_kernel get_activation_attr '
              'get_memory_desc\n'
              '  Variables: attr ops size stride\n'
              '  Using: taso\n'
              '  Usages: desc eltwise_logistic eltwise_relu eltwise_tanh\n')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4987,
         lineno=10,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='License is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void assign_kernel(DATATYPE* ptr, int size, DATATYPE value) {\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < size; i++) ptr[i] = value;\n'
              '}\n'
              '\n'
              'void copy_kernel(DATATYPE* dst, const DATATYPE* src, int size) '
              '{\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4988,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4989,
         lineno=19,
         tokens=44,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='void assign_kernel(DATATYPE* ptr, int size, DATATYPE value) {\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < size; i++) ptr[i] = value;\n'
              '}')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4990,
         lineno=19,
         tokens=15,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='assign_kernel',
         body='assign_kernel(DATATYPE* ptr, int size, DATATYPE value)')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4991,
         lineno=24,
         tokens=47,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='void copy_kernel(DATATYPE* dst, const DATATYPE* src, int size) '
              '{\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < size; i++) dst[i] = src[i];\n'
              '}')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4992,
         lineno=24,
         tokens=17,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='copy_kernel',
         body='copy_kernel(DATATYPE* dst, const DATATYPE* src, int size)')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4993,
         lineno=26,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < size; i++) dst[i] = src[i];\n'
              '}\n'
              '\n'
              'dnnl::primitive_attr get_activation_attr(ActiMode activation) '
              '{\n'
              '  dnnl::algorithm ops_algo = dnnl::algorithm::eltwise_relu;  // '
              'relu as default\n'
              '  const float ops_scale = 1.0f;\n'
              '  float ops_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha an')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4994,
         lineno=29,
         tokens=217,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_attr',
         body='dnnl::primitive_attr get_activation_attr(ActiMode activation) '
              '{\n'
              '  dnnl::algorithm ops_algo = dnnl::algorithm::eltwise_relu;  // '
              'relu as default\n'
              '  const float ops_scale = 1.0f;\n'
              '  float ops_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_RELU:\n'
              '    default:\n'
              '      break;\n'
              '  }\n'
              '  dnnl::post_ops ops;\n'
              '  ops.append_eltwise(ops_scale, ops_algo, ops_alpha, '
              'ops_beta);\n'
              '  dnnl::primitive_attr attr;\n'
              '  attr.set_post_ops(ops);\n'
              '  return attr;\n'
              '}')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4995,
         lineno=29,
         tokens=9,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_activation_attr',
         body='get_activation_attr(ActiMode activation)')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4996,
         lineno=37,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_RELU:\n'
              '    default:\n'
              '      break;\n'
              '  }\n'
              '  dnnl::post_ops ops;\n'
              '  ops.append_eltwise(ops_scale, ops_algo, ops_alpha, '
              'ops_beta);\n'
              '  dnnl::primitive_attr attr;\n'
              '  attr.set_post_ops(ops);\n'
              '  return attr;\n'
              '}\n'
              '\n'
              'dnnl::memory::desc get_memory_desc(const Tensor& t, int numDim) '
              '{\n')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4997,
         lineno=47,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ops',
         body='dnnl::post_ops ops;')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4998,
         lineno=49,
         tokens=8,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='attr',
         body='dnnl::primitive_attr attr;')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=4999,
         lineno=54,
         tokens=12,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='get_memory_desc',
         body='get_memory_desc(const Tensor& t, int numDim)')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=5000,
         lineno=54,
         tokens=195,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='get_memory_desc',
         body='dnnl::memory::desc get_memory_desc(const Tensor& t, int numDim) '
              '{\n'
              '  if (numDim <= 0) numDim = t.numDim;\n'
              '  assert(numDim >= t.numDim);\n'
              '  dnnl::memory::dims size;\n'
              '  dnnl::memory::dims stride;\n'
              '  // right-align the dimensions\n'
              '  for (int i = 0; i < numDim - t.numDim; i++) {\n'
              '    size.push_back(1);\n'
              '    stride.push_back(t.stride[0]);\n'
              '  }\n'
              '  for (int i = 0; i < t.numDim; i++) {\n'
              '    size.push_back(t.dim[i]);\n'
              '    stride.push_back(t.stride[i]);\n'
              '  }\n'
              '  assert(size.size() == (size_t)numDim);\n'
              '  assert(stride.size() == (size_t)numDim);\n'
              '  return dnnl::memory::desc(size, DNNL_DEF_DTYPE, stride);\n'
              '}')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=5001,
         lineno=55,
         tokens=52,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (numDim <= 0) numDim = t.numDim;\n'
              '  assert(numDim >= t.numDim);\n'
              '  dnnl::memory::dims size;\n'
              '  dnnl::memory::dims stride;\n'
              '  // right-align the dimensions\n')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=5002,
         lineno=57,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='size',
         body='dnnl::memory::dims size;')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=5003,
         lineno=58,
         tokens=9,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='stride',
         body='dnnl::memory::dims stride;')

Fragment(document_cs='cf6571ddedee458def98399d9672e84782e8c71cf08191b2667b48d83277e326',
         id=5004,
         lineno=60,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < numDim - t.numDim; i++) {\n'
              '    size.push_back(1);\n'
              '    stride.push_back(t.stride[0]);\n'
              '  }\n'
              '  for (int i = 0; i < t.numDim; i++) {\n'
              '    size.push_back(t.dim[i]);\n'
              '    stride.push_back(t.stride[i]);\n'
              '  }\n'
              '  assert(size.size() == (size_t)numDim);\n'
              '  assert(stride.size() == (size_t)numDim);\n'
              '  return dnnl::memory::desc(size, DNNL_DEF_DTYPE, stride);\n'
              '}\n'
              '\n')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5005,
         lineno=1,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific langua')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5006,
         lineno=1,
         tokens=79,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/cast.cc\n'
              '  Functions: key\n'
              '  Methods: Cast::Cast Cast::collect_costs '
              'Cast::get_int_parameter Cast::~Cast CastKey::CastKey '
              'Graph::cast Model::get_or_create_cast\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: Cast CastKey INVALID_OP cast collect_costs '
              'get_int_parameter get_or_create_cast\n')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5007,
         lineno=12,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ge governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::cast(const TensorHandle _input, DataType '
              '_datatype)\n'
              '{\n'
              '  Op op = model->get_or_create_cast(*_input, _datatype);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_cast(const Tensor& _input, DataType '
              '_datatype)\n'
              '{\n'
              '  CastKey key(_input, _datatype);\n'
              '  Cast* castOp;\n')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5008,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5009,
         lineno=19,
         tokens=86,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::cast',
         body='TensorHandle Graph::cast(const TensorHandle _input, DataType '
              '_datatype)\n'
              '{\n'
              '  Op op = model->get_or_create_cast(*_input, _datatype);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5010,
         lineno=29,
         tokens=113,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_cast',
         body='Op Model::get_or_create_cast(const Tensor& _input, DataType '
              '_datatype)\n'
              '{\n'
              '  CastKey key(_input, _datatype);\n'
              '  Cast* castOp;\n'
              '  if (cast.find(key) != cast.end()) {\n'
              '    castOp = cast[key];\n'
              '  } else {\n'
              '    castOp = new Cast(this, _input, _datatype);\n'
              '    measure_cast_cost(castOp);\n'
              '    cast[key] = castOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = castOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5011,
         lineno=31,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _datatype)')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5012,
         lineno=33,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (cast.find(key) != cast.end()) {\n'
              '    castOp = cast[key];\n'
              '  } else {\n'
              '    castOp = new Cast(this, _input, _datatype);\n'
              '    measure_cast_cost(castOp);\n'
              '    cast[key] = castOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = castOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5013,
         lineno=40,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5014,
         lineno=44,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'Cast::Cast(Model* _model, const Tensor& _input, DataType '
              '_datatype)\n'
              ': OpBase(_input, _model, OP_CAST)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Cast::~Cast(void)\n'
              '{}\n'
              '\n'
              'bool Cast::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  ret')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5015,
         lineno=46,
         tokens=58,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::Cast',
         body='Cast::Cast(Model* _model, const Tensor& _input, DataType '
              '_datatype)\n'
              ': OpBase(_input, _model, OP_CAST)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _input;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5016,
         lineno=54,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::~Cast',
         body='Cast::~Cast(void)\n{}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5017,
         lineno=57,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::get_int_parameter',
         body='bool Cast::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5018,
         lineno=59,
         tokens=148,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='urn OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Cast::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += inputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Cast]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'CastKey::CastKey(const Tensor& _input, DataType _datatype)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _datatype;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5019,
         lineno=62,
         tokens=97,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Cast::collect_costs',
         body='void Cast::collect_costs(float& exe_time, float& flops,\n'
              '                         float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += inputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Cast]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5020,
         lineno=74,
         tokens=63,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='CastKey::CastKey',
         body='CastKey::CastKey(const Tensor& _input, DataType _datatype)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _datatype;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='cfb7e102e3d4c2524726f6daee6706877ad4aa54e292eb6576f1d28a24d8c280',
         id=5021,
         lineno=79,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5022,
         lineno=1,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under t')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5023,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/nasrnn.h\n'
              '  Macros: NASRNN_HIDDEN_SIZE NASRNN_LENGTH '
              '_CPP_EXAMPLES_NASRNN_H_\n'
              '  Functions: combine nas_node nasrnn\n'
              '  Variables: midts\n')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5024,
         lineno=13,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='he License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EXAMPLES_NASRNN_H_\n'
              '#define _CPP_EXAMPLES_NASRNN_H_\n'
              '\n'
              '#include <vector>\n'
              '\n'
              '#define NASRNN_HIDDEN_SIZE 512\n'
              '#define NASRNN_LENGTH 5\n'
              '\n'
              'TensorHandle combine(Graph* graph, const TensorHandle x, const '
              'TensorHandle h) {\n'
              '  auto w1 = new_random_weight(graph, { NASRNN_HIDDEN_')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5025,
         lineno=17,
         tokens=12,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_NASRNN_H_',
         body='#define _CPP_EXAMPLES_NASRNN_H_')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5026,
         lineno=21,
         tokens=8,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='NASRNN_HIDDEN_SIZE',
         body='#define NASRNN_HIDDEN_SIZE 512')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5027,
         lineno=22,
         tokens=7,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='NASRNN_LENGTH',
         body='#define NASRNN_LENGTH 5')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5028,
         lineno=24,
         tokens=95,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='combine',
         body='TensorHandle combine(Graph* graph, const TensorHandle x, const '
              'TensorHandle h) {\n'
              '  auto w1 = new_random_weight(graph, { NASRNN_HIDDEN_SIZE, '
              'x->dim[1] });\n'
              '  auto w2 = new_random_weight(graph, { NASRNN_HIDDEN_SIZE, '
              'h->dim[1] });\n'
              '  return graph->element(OP_EW_ADD, graph->matmul(x, w1), '
              'graph->matmul(h, w2));\n'
              '}')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5029,
         lineno=24,
         tokens=15,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='combine',
         body='combine(Graph* graph, const TensorHandle x, const TensorHandle '
              'h)')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5030,
         lineno=25,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='SIZE, x->dim[1] });\n'
              '  auto w2 = new_random_weight(graph, { NASRNN_HIDDEN_SIZE, '
              'h->dim[1] });\n'
              '  return graph->element(OP_EW_ADD, graph->matmul(x, w1), '
              'graph->matmul(h, w2));\n'
              '}\n'
              '\n'
              'TensorHandle nas_node(Graph* graph, const TensorHandle inp, '
              'const TensorHandle x) {\n'
              '  std::vector<TensorHandle> ts;\n')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5031,
         lineno=30,
         tokens=282,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='TensorHandle nas_node(Graph* graph, const TensorHandle inp, '
              'const TensorHandle x) {\n'
              '  std::vector<TensorHandle> ts;\n'
              '  for (int i = 0; i < 8; i++)\n'
              '    ts.push_back(combine(graph, x, inp));\n'
              '  std::vector<TensorHandle> midts;\n'
              '  midts.push_back(graph->element(OP_EW_ADD, graph->relu(ts[0]), '
              'graph->sigmoid(ts[3])));\n'
              '  midts.push_back(graph->element(OP_EW_ADD, '
              'graph->sigmoid(ts[1]), graph->tanh(ts[2])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->sigmoid(ts[4]), graph->tanh(ts[5])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->sigmoid(ts[6]), graph->relu(ts[7])));\n'
              '  midts.push_back(graph->element(OP_EW_ADD, '
              'graph->sigmoid(midts[1]), graph->tanh(midts[2])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->tanh(midts[0]), graph->tanh(midts[3])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->tanh(midts[4]), graph->tanh(midts[5])));\n'
              '  return graph->tanh(midts[6]);\n'
              '}')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5032,
         lineno=30,
         tokens=16,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='nas_node',
         body='nas_node(Graph* graph, const TensorHandle inp, const '
              'TensorHandle x)')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5033,
         lineno=32,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 8; i++)\n'
              '    ts.push_back(combine(graph, x, inp));\n'
              '  std::vector<TensorHandle> midts;\n'
              '  midts.push_back(graph->element(OP_EW_ADD, graph->relu(ts[0]), '
              'graph->sigmoid(ts[3])));\n'
              '  midts.push_back(graph->element(OP_EW_ADD, '
              'graph->sigmoid(ts[1]), graph->tanh(ts[2])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->sigmoid(ts[4]), graph->tanh(ts[5])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->sigmoid(ts[6]), graph->relu')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5034,
         lineno=34,
         tokens=10,
         depth=3,
         parent_id=None,
         category='variable',
         summary=False,
         name='midts',
         body='std::vector<TensorHandle> midts;')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5035,
         lineno=38,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='(ts[7])));\n'
              '  midts.push_back(graph->element(OP_EW_ADD, '
              'graph->sigmoid(midts[1]), graph->tanh(midts[2])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->tanh(midts[0]), graph->tanh(midts[3])));\n'
              '  midts.push_back(graph->element(OP_EW_MUL, '
              'graph->tanh(midts[4]), graph->tanh(midts[5])));\n'
              '  return graph->tanh(midts[6]);\n'
              '}\n'
              '\n'
              'Graph* nasrnn(float alpha, int budget, bool printSubst = false) '
              '{\n'
              '  Graph *graph = new Graph();\n'
              '  std::vector<TensorHandle> xs;\n')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5036,
         lineno=45,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='nasrnn',
         body='nasrnn(float alpha, int budget, bool printSubst = false)')

Fragment(document_cs='d0bbfb61c2ab68e71cb413f09f01d51cfc90eea275f57de1873e4ea0c3117118',
         id=5037,
         lineno=48,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < NASRNN_LENGTH; i++) {\n'
              '    xs.push_back(new_input(graph, { 1, NASRNN_HIDDEN_SIZE }));\n'
              '  }\n'
              '  auto state = new_random_weight(graph, { 1, NASRNN_HIDDEN_SIZE '
              '});\n'
              '  for (int i = 0; i < NASRNN_LENGTH; i++) {\n'
              '    state = nas_node(graph, state, xs[i]);\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n'
              '\n'
              '#undef NASRNN_HIDDEN_SIZE\n'
              '#undef NASRNN_LENGTH\n'
              '\n'
              '#endif\n')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5038,
         lineno=1,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5039,
         lineno=1,
         tokens=67,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/fuse_conv_batchnorm_kernel.cu\n'
              '  Functions: CUDA_KERNEL_LOOP fuse_conv_batchnorm_kernel\n'
              '  Methods: FuseConvBatchNorm::forward FuseConvBatchNorm::map '
              'FuseConvBatchNorm::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5040,
         lineno=11,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              '__global__\n'
              'void fuse_conv_batchnorm_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* va')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5041,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5042,
         lineno=20,
         tokens=119,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_kernel',
         body='__global__\n'
              'void fuse_conv_batchnorm_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5043,
         lineno=21,
         tokens=42,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_kernel',
         body='fuse_conv_batchnorm_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5044,
         lineno=26,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::map(v')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5045,
         lineno=29,
         tokens=58,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5046,
         lineno=29,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='CUDA_KERNEL_LOOP',
         body='CUDA_KERNEL_LOOP(i, volume)')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5047,
         lineno=36,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='oid)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_p')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5048,
         lineno=36,
         tokens=57,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::map',
         body='void FuseConvBatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5049,
         lineno=43,
         tokens=24,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::unmap',
         body='void FuseConvBatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5050,
         lineno=45,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tr));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[4].data_ptr;\n'
              '  fuse_conv_batchnorm_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,\n'
              '      conv_w_ptr, scale_ptr, var_ptr);\n')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5051,
         lineno=48,
         tokens=161,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::forward',
         body='void FuseConvBatchNorm::forward(bool block)\n'
              '{\n'
              '  int c_out = outputs[0].dim[0];\n'
              '  int c_in_h_w = outputs[0].volume() / c_out;\n'
              '  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[4].data_ptr;\n'
              '  fuse_conv_batchnorm_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,\n'
              '      conv_w_ptr, scale_ptr, var_ptr);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='d425f2ad655ae4d2e07736e070cbc6da351cd2dba2648bf16bea41ad70fd7e73',
         id=5052,
         lineno=58,
         tokens=14,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n    checkCUDA(cudaDeviceSynchronize());\n}\n\n\n')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5053,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, ')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5054,
         lineno=1,
         tokens=124,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/fuse_conv_batchnorm.cc\n'
              '  Functions: key\n'
              '  Methods: FuseConvBatchNorm::FuseConvBatchNorm '
              'FuseConvBatchNorm::collect_costs '
              'FuseConvBatchNorm::get_int_parameter '
              'FuseConvBatchNorm::~FuseConvBatchNorm '
              'FuseConvBatchNormKey::FuseConvBatchNormKey '
              'Graph::fuse_conv_batchnorm '
              'Model::get_or_create_fuse_conv_batchnorm\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: FuseConvBatchNorm FuseConvBatchNormKey collect_costs '
              'fuse_conv_batchnorm get_int_parameter '
              'get_or_create_fuse_conv_batchnorm\n')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5055,
         lineno=11,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              '// Preproccessing weights to merge conv and batchnorm\n'
              'TensorHandle Graph::fuse_conv_batchnorm(const TensorHandle '
              '_conv_w,\n'
              '                                        const TensorHandle '
              '_scale,\n'
              '                                        const TensorHandle '
              '_bias,\n'
              '                ')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5056,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5057,
         lineno=20,
         tokens=194,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::fuse_conv_batchnorm',
         body='TensorHandle Graph::fuse_conv_batchnorm(const TensorHandle '
              '_conv_w,\n'
              '                                        const TensorHandle '
              '_scale,\n'
              '                                        const TensorHandle '
              '_bias,\n'
              '                                        const TensorHandle '
              '_mean,\n'
              '                                        const TensorHandle '
              '_var)\n'
              '{\n'
              '  Op op = model->get_or_create_fuse_conv_batchnorm(\n'
              '      *_conv_w, *_scale, *_bias, *_mean, *_var);\n'
              '  add_edge(_conv_w->op, op, _conv_w->idx, 0);\n'
              '  add_edge(_scale->op, op, _scale->idx, 1);\n'
              '  add_edge(_bias->op, op, _bias->idx, 2);\n'
              '  add_edge(_mean->op, op, _mean->idx, 3);\n'
              '  add_edge(_var->op, op, _var->idx, 4);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5058,
         lineno=23,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                        const TensorHandle _mean,\n'
              '                                        const TensorHandle '
              '_var)\n'
              '{\n'
              '  Op op = model->get_or_create_fuse_conv_batchnorm(\n'
              '      *_conv_w, *_scale, *_bias, *_mean, *_var);\n'
              '  add_edge(_conv_w->op, op, _conv_w->idx, 0);\n'
              '  add_edge(_scale->op, op, _scale->idx, 1);\n'
              '  add_edge(_bias->op, op, _bias->idx, 2);\n'
              '  add_edge(_mean->op, op, _mean->idx, 3);\n'
              '  add_edge(_var->op, op, _var->idx, 4);\n'
              '  TensorHandle t = ne')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5059,
         lineno=33,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='w Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_fuse_conv_batchnorm(const Tensor& '
              '_conv_w,\n'
              '                                            const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_bias,\n'
              '                                            const Tensor& '
              '_mean,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormKey key(_conv_w);\n'
              '  FuseConvBatchNorm* fuseOp;\n')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5060,
         lineno=38,
         tokens=201,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_fuse_conv_batchnorm',
         body='Op Model::get_or_create_fuse_conv_batchnorm(const Tensor& '
              '_conv_w,\n'
              '                                            const Tensor& '
              '_scale,\n'
              '                                            const Tensor& '
              '_bias,\n'
              '                                            const Tensor& '
              '_mean,\n'
              '                                            const Tensor& '
              '_var)\n'
              '{\n'
              '  FuseConvBatchNormKey key(_conv_w);\n'
              '  FuseConvBatchNorm* fuseOp;\n'
              '  if (fuse_conv_batchnorm.find(key) != '
              'fuse_conv_batchnorm.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNorm(this, _conv_w, _scale, '
              '_bias, _mean, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5061,
         lineno=44,
         tokens=5,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_conv_w)')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5062,
         lineno=46,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (fuse_conv_batchnorm.find(key) != '
              'fuse_conv_batchnorm.end()) {\n'
              '    fuseOp = fuse_conv_batchnorm[key];\n'
              '  } else {\n'
              '    fuseOp = new FuseConvBatchNorm(this, _conv_w, _scale, '
              '_bias, _mean, _var);\n'
              '    //Assign a zero cost since it can be preprocessed\n'
              '    // measure_fuse_conv_batchnorm_cost(fuseOp);\n'
              '    fuseOp->runtime = 0.0f;\n'
              '    fuse_conv_batchnorm[key] = fuseOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = fuseOp;\n'
              '  retu')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5063,
         lineno=55,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5064,
         lineno=58,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rn ret;\n'
              '}\n'
              '\n'
              'FuseConvBatchNorm::FuseConvBatchNorm(Model* _model,\n'
              '                                     const Tensor& _conv_w,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _bias,\n'
              '                                     const Tensor& _mean,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_conv_w, _scale, _bias, _mean, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM)\n'
              '{\n'
              '  asse')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5065,
         lineno=61,
         tokens=120,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::FuseConvBatchNorm',
         body='FuseConvBatchNorm::FuseConvBatchNorm(Model* _model,\n'
              '                                     const Tensor& _conv_w,\n'
              '                                     const Tensor& _scale,\n'
              '                                     const Tensor& _bias,\n'
              '                                     const Tensor& _mean,\n'
              '                                     const Tensor& _var)\n'
              ': OpBase(_conv_w, _scale, _bias, _mean, _var, _model, '
              'OP_FUSE_CONV_BATCHNORM)\n'
              '{\n'
              '  assert(_conv_w.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _conv_w;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5066,
         lineno=69,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rt(_conv_w.numDim == 4);\n'
              '  numOutputs = 1;\n'
              '  outputs[0] = _conv_w;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'FuseConvBatchNorm::~FuseConvBatchNorm(void)\n'
              '{}\n'
              '\n'
              'bool FuseConvBatchNorm::get_int_parameter(PMParameter para, '
              'int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void FuseConvBatchNorm::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += ')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5067,
         lineno=75,
         tokens=12,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::~FuseConvBatchNorm',
         body='FuseConvBatchNorm::~FuseConvBatchNorm(void)\n{}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5068,
         lineno=78,
         tokens=32,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::get_int_parameter',
         body='bool FuseConvBatchNorm::get_int_parameter(PMParameter para, '
              'int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5069,
         lineno=83,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNorm::collect_costs',
         body='void FuseConvBatchNorm::collect_costs(float& exe_time, float& '
              'flops,\n'
              '                                      float& mem_acc, int& '
              'num_kernels)\n'
              '{\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5070,
         lineno=87,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='runtime;\n'
              '  flops += outputs[0].volume();\n'
              '  mem_acc += outputs[0].volume() * 2;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[FuseConvBatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '          inputs[0].dim[0], i')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5071,
         lineno=92,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nputs[0].dim[1], inputs[0].dim[2], inputs[0].dim[3],\n'
              '          runtime, exe_time);\n'
              '}\n'
              '\n'
              '// key is (_conv_w)\n'
              'FuseConvBatchNormKey::FuseConvBatchNormKey(const Tensor& '
              '_conv_w)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _conv_w.serialize(keys, idx);\n')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5072,
         lineno=97,
         tokens=59,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormKey::FuseConvBatchNormKey',
         body='FuseConvBatchNormKey::FuseConvBatchNormKey(const Tensor& '
              '_conv_w)\n'
              '{\n'
              '  int idx = 0;\n'
              '  _conv_w.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='d48ca9d16571794b413fd89e212ae3f0b7b2ecd894fb22bd9dc4512aeb0539fe',
         id=5073,
         lineno=101,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5074,
         lineno=1,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expres')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5075,
         lineno=1,
         tokens=99,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/batchnorm_mkl.cc\n'
              '  Functions: create_net\n'
              '  Methods: BatchNorm::forward BatchNorm::get_min_epsilon '
              'BatchNorm::map BatchNorm::unmap Model::measure_batchnorm_cost\n'
              '  Variables: inputMem\n'
              '  Using: dnnl taso\n'
              '  Usages: copy desc fill forward forward_inference '
              'forward_training get_min_epsilon map measure_batchnorm_cost nc '
              'primitive_desc unmap use_global_stats use_scale_shift x\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5076,
         lineno=11,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='s or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(BatchNorm* bn, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& meanMem, '
              'memory& varMem, memory& scaleShiftMem,\n'
              '    void* inputPtr, void* outputPtr, void* meanPtr, void* '
              'varPtr, void* biasPtr')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5077,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5078,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5079,
         lineno=21,
         tokens=81,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(BatchNorm* bn, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    memory& inputMem, memory& outputMem, memory& meanMem, '
              'memory& varMem, memory& scaleShiftMem,\n'
              '    void* inputPtr, void* outputPtr, void* meanPtr, void* '
              'varPtr, void* biasPtr,\n'
              '    bool isTraining)')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5080,
         lineno=21,
         tokens=607,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(BatchNorm* bn, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& meanMem, '
              'memory& varMem, memory& scaleShiftMem,\n'
              '    void* inputPtr, void* outputPtr, void* meanPtr, void* '
              'varPtr, void* biasPtr,\n'
              '    bool isTraining) {\n'
              '  const float eps = epsilon;\n'
              '  // dimensions.\n'
              '  int inputC = bn->inputs[0].dim[1];\n'
              '  // data sizes.\n'
              '  const memory::dims statSize = { inputC };\n'
              '  const memory::dims scaleShiftSize = { 2, inputC };\n'
              '  // data descriptors.\n'
              '  auto dataMemDesc = get_memory_desc(bn->inputs[0]);\n'
              '  auto statMemDesc = memory::desc(statSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  auto scaleShiftMemDesc = memory::desc(scaleShiftSize, '
              'DNNL_DEF_DTYPE, memory::format_tag::nc);\n'
              '  // data memories.\n'
              '  inputMem = memory(dataMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(dataMemDesc, eng, outputPtr);\n'
              '  scaleShiftMem = memory(scaleShiftMemDesc, eng, biasPtr);\n'
              '  meanMem = memory(statMemDesc, eng, meanPtr);\n'
              '  varMem = memory(statMemDesc, eng, varPtr);\n'
              '  // operator primitives.\n'
              '  normalization_flags flags = '
              'normalization_flags::use_scale_shift | '
              'normalization_flags::use_global_stats;\n'
              '  prop_kind prop = prop_kind::forward_inference;\n'
              '#ifdef DO_TRAINING\n'
              '  if (isTraining) {\n'
              '    flags = normalization_flags::use_scale_shift;\n'
              '    prop = prop_kind::forward_training;\n'
              '    std::fill((DATATYPE*)biasPtr, (DATATYPE*)biasPtr + 2 * '
              'inputC, 0.5);\n'
              '    std::fill((DATATYPE*)meanPtr, (DATATYPE*)meanPtr + inputC, '
              '0.5);\n'
              '    std::fill((DATATYPE*)varPtr, (DATATYPE*)varPtr + inputC, '
              '0.5);\n'
              '  } else {\n'
              '    flags |= normalization_flags::use_global_stats;\n'
              '  }\n'
              '#endif\n'
              '  auto bnOpDesc = batch_normalization_forward::desc(\n'
              '      prop, dataMemDesc, eps, flags);\n'
              '  auto bnPrimDesc = '
              'batch_normalization_forward::primitive_desc(bnOpDesc, eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(bnPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({batch_normalization_forward(bnPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_MEAN, meanMem},\n'
              '      {DNNL_ARG_VARIANCE, varMem},\n'
              '      {DNNL_ARG_SCALE_SHIFT, scaleShiftMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5081,
         lineno=23,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=',\n'
              '    bool isTraining) {\n'
              '  const float eps = epsilon;\n'
              '  // dimensions.\n'
              '  int inputC = bn->inputs[0].dim[1];\n'
              '  // data sizes.\n'
              '  const memory::dims statSize = { inputC };\n'
              '  const memory::dims scaleShiftSize = { 2, inputC };\n'
              '  // data descriptors.\n'
              '  auto dataMemDesc = get_memory_desc(bn->inputs[0]);\n'
              '  auto statMemDesc = memory::desc(statSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  auto scaleShiftMemDesc = memory::desc(scaleShiftSize, '
              'DNNL_DEF_DTYPE, memory::format_tag::nc')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5082,
         lineno=34,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=');\n'
              '  // data memories.\n'
              '  inputMem = memory(dataMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(dataMemDesc, eng, outputPtr);\n'
              '  scaleShiftMem = memory(scaleShiftMemDesc, eng, biasPtr);\n'
              '  meanMem = memory(statMemDesc, eng, meanPtr);\n'
              '  varMem = memory(statMemDesc, eng, varPtr);\n'
              '  // operator primitives.\n'
              '  normalization_flags flags = '
              'normalization_flags::use_scale_shift | '
              'normalization_flags::use_global_stats;\n'
              '  prop_kind prop = prop_kind::forward_inference;\n'
              '#ifdef DO_TRAINING\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5083,
         lineno=45,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (isTraining) {\n'
              '    flags = normalization_flags::use_scale_shift;\n'
              '    prop = prop_kind::forward_training;\n'
              '    std::fill((DATATYPE*)biasPtr, (DATATYPE*)biasPtr + 2 * '
              'inputC, 0.5);\n'
              '    std::fill((DATATYPE*)meanPtr, (DATATYPE*)meanPtr + inputC, '
              '0.5);\n'
              '    st')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5084,
         lineno=50,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d::fill((DATATYPE*)varPtr, (DATATYPE*)varPtr + inputC, 0.5);\n'
              '  } else {\n'
              '    flags |= normalization_flags::use_global_stats;\n'
              '  }\n'
              '#endif\n'
              '  auto bnOpDesc = batch_normalization_forward::desc(\n'
              '      prop, dataMemDesc, eps, flags);\n'
              '  auto bnPrimDesc = batch_normali')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5085,
         lineno=57,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='zation_forward::primitive_desc(bnOpDesc, eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(bnPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({batch_normalization_forward(bnPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_MEAN, meanMem},\n'
              '      {DNNL_ARG_VARIANCE, varMem},\n'
              '      {DNNL_ARG_SCALE_SHIFT, scaleShiftMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n'
              '\n'
              'float BatchNorm::get_min_epsilon(void)\n'
              '{\n'
              '  return BN_MIN_EPSILON;\n'
              '}\n'
              '\n'
              'void BatchNorm::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              ' ')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5086,
         lineno=69,
         tokens=18,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::get_min_epsilon',
         body='float BatchNorm::get_min_epsilon(void)\n'
              '{\n'
              '  return BN_MIN_EPSILON;\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5087,
         lineno=74,
         tokens=168,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::map',
         body='void BatchNorm::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  CHECK_NE(nullptr, scaleShiftPtr = malloc(outputs[0].dim[1] * '
              '2));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem, meanMem, varMem, scaleShiftMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr,\n'
              '      inputs[3].data_ptr,\n'
              '      inputs[4].data_ptr,\n'
              '      scaleShiftPtr,\n'
              '      model->isTraining);\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5088,
         lineno=77,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  CHECK_NE(nullptr, scaleShiftPtr = malloc(outputs[0].dim[1] * '
              '2));\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem, meanMem, varMem, scaleShiftMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr,\n'
              '      inputs[3].data_ptr,\n'
              '      inputs[4].data_ptr,\n'
              '      scaleShiftPtr,\n'
              '      model')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5089,
         lineno=81,
         tokens=17,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5090,
         lineno=88,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='->isTraining);\n'
              '}\n'
              '\n'
              'void BatchNorm::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  free(scaleShiftPtr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '  scaleShiftPtr = nullptr;\n'
              '}\n'
              '\n'
              'void BatchNorm::forward(bool block)\n'
              '{\n'
              '  s')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5091,
         lineno=91,
         tokens=56,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::unmap',
         body='void BatchNorm::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  free(scaleShiftPtr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '  scaleShiftPtr = nullptr;\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5092,
         lineno=102,
         tokens=133,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BatchNorm::forward',
         body='void BatchNorm::forward(bool block)\n'
              '{\n'
              '  std::copy((DATATYPE*)inputs[1].data_ptr, '
              '(DATATYPE*)inputs[1].data_ptr + outputs[0].dim[1], '
              '(DATATYPE*)scaleShiftPtr);\n'
              '  std::copy((DATATYPE*)inputs[2].data_ptr, '
              '(DATATYPE*)inputs[2].data_ptr + outputs[0].dim[1], '
              '(DATATYPE*)scaleShiftPtr + outputs[0].dim[1]);\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5093,
         lineno=104,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='td::copy((DATATYPE*)inputs[1].data_ptr, '
              '(DATATYPE*)inputs[1].data_ptr + outputs[0].dim[1], '
              '(DATATYPE*)scaleShiftPtr);\n'
              '  std::copy((DATATYPE*)inputs[2].data_ptr, '
              '(DATATYPE*)inputs[2].data_ptr + outputs[0].dim[1], '
              '(DATATYPE*)scaleShiftPtr + outputs[0].dim[1]);\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5094,
         lineno=107,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_batchnorm_cost(BatchNorm* bn)\n'
              '{\n'
              '  memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;\n'
              '  create_net(bn, net, eng, strm,\n'
              '      inputMem, outputMem, meanMem, varMem, scaleShiftMem,\n'
              '      inputPtr, outputPtr, runningMean, runningVar, biasPtr,\n'
              '      isTraining);\n'
              '\n'
              '  assert(i')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5095,
         lineno=110,
         tokens=358,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_batchnorm_cost',
         body='void Model::measure_batchnorm_cost(BatchNorm* bn)\n'
              '{\n'
              '  memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;\n'
              '  create_net(bn, net, eng, strm,\n'
              '      inputMem, outputMem, meanMem, varMem, scaleShiftMem,\n'
              '      inputPtr, outputPtr, runningMean, runningVar, biasPtr,\n'
              '      isTraining);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(meanMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(varMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(scaleShiftMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  bn->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[BatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf)\\n",\n'
              '           bn->inputs[0].dim[0], bn->inputs[0].dim[1], '
              'bn->inputs[0].dim[2],\n'
              '           bn->inputs[0].dim[3], bn->runtime);\n'
              '}')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5096,
         lineno=112,
         tokens=17,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem, meanMem, varMem, scaleShiftMem;')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5097,
         lineno=118,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(meanMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(varMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(scaleShiftMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5098,
         lineno=126,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n')

Fragment(document_cs='dcf930ee8744b77ca57b1491f7fba5f6ba53d7bae085d7948ef4f34719095591',
         id=5099,
         lineno=130,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  bn->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[BatchNorm]: i(%d %d %d %d) '
              'cost(%.4lf)\\n",\n'
              '           bn->inputs[0].dim[0], bn->inputs[0].dim[1], '
              'bn->inputs[0].dim[2],\n'
              '           bn->inputs[0].dim[3], bn->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5100,
         lineno=1,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing pe')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5101,
         lineno=1,
         tokens=83,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/activation_mkl.cc\n'
              '  Functions: create_net\n'
              '  Methods: Activation::forward Activation::map '
              'Activation::unmap Model::measure_activation_cost\n'
              '  Variables: inputMem\n'
              '  Using: dnnl taso\n'
              '  Usages: desc eltwise_logistic eltwise_relu eltwise_tanh '
              'forward forward_inference map measure_activation_cost '
              'primitive_desc unmap\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5102,
         lineno=12,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rmissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'static void create_net(Activation* act, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(act->inputs[0].volume() == act->outputs[0].volume());\n'
              '  // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '  '
              'assert(act->outputs[0].has_same_shape_stride_split(act->inputs[0]));\n'
              '  // data descri')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5103,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5104,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5105,
         lineno=21,
         tokens=402,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Activation* act, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(act->inputs[0].volume() == act->outputs[0].volume());\n'
              '  // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '  '
              'assert(act->outputs[0].has_same_shape_stride_split(act->inputs[0]));\n'
              '  // data descriptors.\n'
              '  auto memDesc = get_memory_desc(act->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(memDesc, eng, inputPtr);\n'
              '  outputMem = memory(memDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '  float ops_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (act->type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto actOpDesc = eltwise_forward::desc(\n'
              '      prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '  auto actPrimDesc = eltwise_forward::primitive_desc(actOpDesc, '
              'eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({eltwise_forward(actPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5106,
         lineno=21,
         tokens=44,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Activation* act, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr)')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5107,
         lineno=28,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ptors.\n'
              '  auto memDesc = get_memory_desc(act->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(memDesc, eng, inputPtr);\n'
              '  outputMem = memory(memDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '  float o')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5108,
         lineno=35,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ps_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (act->type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case OP_')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5109,
         lineno=45,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto actOpDesc = eltwise_forward::desc(\n'
              '      prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '  auto actPrimDesc = eltwise_forward::primitive_desc(actOpDesc, '
              'eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({eltwise_forward(actPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n'
              '\n'
              'void Activation::map(void)\n'
              '{\n'
              '  // allocate tensors\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5110,
         lineno=62,
         tokens=126,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::map',
         body='void Activation::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  if (!inPlace) {\n'
              '    size_t outputSize = sizeof(DATATYPE) * inputs[0].volume();\n'
              '    CHECK_NE(nullptr, outputs[0].data_ptr = '
              'malloc(outputSize));\n'
              '  } else {\n'
              '    outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '  }\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5111,
         lineno=65,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!inPlace) {\n'
              '    size_t outputSize = sizeof(DATATYPE) * inputs[0].volume();\n'
              '    CHECK_NE(nullptr, outputs[0].data_ptr = '
              'malloc(outputSize));\n'
              '  } else {\n'
              '    outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '  }\n'
              '  // create primitives.\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      inputMem, outputMem,\n'
              '      inputs[0].data_ptr, outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void Activation::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5112,
         lineno=72,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5113,
         lineno=78,
         tokens=51,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::unmap',
         body='void Activation::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  if (!inPlace) {\n'
              '    free(outputs[0].data_ptr);\n'
              '    outputs[0].data_ptr = nullptr;\n'
              '  }\n'
              '}')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5114,
         lineno=83,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!inPlace) {\n'
              '    free(outputs[0].data_ptr);\n'
              '    outputs[0].data_ptr = nullptr;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Activation::forward(bool block)\n'
              '{\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5115,
         lineno=89,
         tokens=40,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Activation::forward',
         body='void Activation::forward(bool block)\n'
              '{\n'
              '  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5116,
         lineno=91,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (auto& p : net) p.first.execute(model->strm, p.second);\n'
              '  if (block) model->strm.wait();\n'
              '}\n'
              '\n'
              'void Model::measure_activation_cost(Activation* act)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(act, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, act->inPlace ? inputPtr : outputPtr);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5117,
         lineno=95,
         tokens=288,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_activation_cost',
         body='void Model::measure_activation_cost(Activation* act)\n'
              '{\n'
              '  memory inputMem, outputMem;\n'
              '  create_net(act, net, eng, strm,\n'
              '      inputMem, outputMem,\n'
              '      inputPtr, act->inPlace ? inputPtr : outputPtr);\n'
              '\n'
              '  assert(inputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '  assert(outputMem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  act->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Activation]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           act->inputs[0].dim[0], act->inputs[0].dim[1], '
              'act->inputs[0].dim[2],\n'
              '           act->inputs[0].dim[3], act->type, act->runtime);\n'
              '}')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5118,
         lineno=97,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='inputMem',
         body='memory inputMem, outputMem;')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5119,
         lineno=107,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n')

Fragment(document_cs='dd4da97101406d9ad0a9ecc3620ac20d23803bd73c1d578979b4412338b49692',
         id=5120,
         lineno=111,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (auto& p : net) {\n'
              '      p.first.execute(strm, p.second);\n'
              '    }\n'
              '    strm.wait();\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  act->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Activation]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           act->inputs[0].dim[0], act->inputs[0].dim[1], '
              'act->inputs[0].dim[2],\n'
              '           act->inputs[0].dim[3], act->type, act->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5121,
         lineno=1,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the Lice')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5122,
         lineno=1,
         tokens=83,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/element_mkl.cc\n'
              '  Functions: create_net elementwise_kernel\n'
              '  Methods: Element::forward Element::map Element::unmap '
              'Element::use_kernel Model::measure_element_cost\n'
              '  Variables: in0Mem\n'
              '  Using: dnnl taso\n'
              '  Usages: binary_add binary_mul desc forward map '
              'measure_element_cost primitive_desc unmap use_kernel\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5123,
         lineno=12,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nse for the specific language governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void elementwise_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty, const Tensor& tz,\n'
              '    const DATATYPE* x, const DATATYPE* y, DATATYPE* z) {\n'
              '  int numDim = tz.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(ty.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5124,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5125,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5126,
         lineno=21,
         tokens=561,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='elementwise_kernel',
         body='void elementwise_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty, const Tensor& tz,\n'
              '    const DATATYPE* x, const DATATYPE* y, DATATYPE* z) {\n'
              '  int numDim = tz.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(ty.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n'
              '  for (int zid = 0; zid < volume; zid++) {\n'
              '    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (zid / tz.stride[d]) % tz.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n'
              '    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '    int yid = 0;\n'
              '    diff = numDim - ty.numDim;\n'
              '    for (int d = 0; d < ty.numDim; d++) {\n'
              '      yid += ty.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '        z[zid] = x[xid] + y[yid];\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        z[zid] = x[xid] * y[yid];\n'
              '        break;\n'
              '      case OP_EW_SUB:\n'
              '        z[zid] = x[xid] - y[yid];\n'
              '        break;\n'
              '      case OP_EW_DIV:\n'
              '        z[zid] = x[xid] / y[yid];\n'
              '        break;\n'
              '      case OP_EW_EQUAL:\n'
              '        z[zid] = (x[xid] == y[yid]);\n'
              '        break;\n'
              '      case OP_EW_GREATER:\n'
              '        z[zid] = (x[xid] > y[yid]);\n'
              '        break;\n'
              '      case OP_EW_LESS:\n'
              '        z[zid] = (x[xid] < y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        z[zid] = (x[xid] > y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        z[zid] = (x[xid] < y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_PRELU:\n'
              '        z[zid] = (x[xid] >= 0 ? x[xid] : y[yid] * x[xid]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5127,
         lineno=21,
         tokens=44,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='elementwise_kernel',
         body='elementwise_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty, const Tensor& tz,\n'
              '    const DATATYPE* x, const DATATYPE* y, DATATYPE* z)')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5128,
         lineno=30,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int zid = 0; zid < volume; zid++) {\n'
              '    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (zid / tz.stride[d]) % tz.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n'
              '    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '    int yid = 0;\n'
              '    diff = numDim - ty.numDim;\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5129,
         lineno=41,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int d = 0; d < ty.numDim; d++) {\n'
              '      yid += ty.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '        z[zid] = x[xid] + y[yid];\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        z[zid] = x[xid] * y[yid];\n'
              '        break;\n'
              '      case OP_EW_SUB:\n'
              '        z[zid] = ')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5130,
         lineno=53,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='x[xid] - y[yid];\n'
              '        break;\n'
              '      case OP_EW_DIV:\n'
              '        z[zid] = x[xid] / y[yid];\n'
              '        break;\n'
              '      case OP_EW_EQUAL:\n'
              '        z[zid] = (x[xid] == y[yid]);\n'
              '        break;\n'
              '      case OP_EW_GREATER:\n'
              '        z[zid] = (x[xid] > y[yid]);\n'
              '        break;\n'
              '      case OP_EW_LESS:\n'
              '        z[zid]')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5131,
         lineno=65,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' = (x[xid] < y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        z[zid] = (x[xid] > y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        z[zid] = (x[xid] < y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_PRELU:\n'
              '        z[zid] = (x[xid] >= 0 ? x[xid] : y[yid] * x[x')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5132,
         lineno=74,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='id]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}\n'
              '\n'
              'bool Element::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '\n'
              '  // dnnl::binary requires the same layout between output and '
              'inputs[0].\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5133,
         lineno=82,
         tokens=84,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::use_kernel',
         body='bool Element::use_kernel(void) const\n'
              '{\n'
              '  switch (type) {\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '      break;\n'
              '    default:\n'
              '      return false;\n'
              '  }\n'
              '\n'
              '  // dnnl::binary requires the same layout between output and '
              'inputs[0].\n'
              '  if (!outputs[0].has_same_shape_stride_split(inputs[0])) '
              'return false;\n'
              '\n'
              '  return true;\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5134,
         lineno=93,
         tokens=142,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (!outputs[0].has_same_shape_stride_split(inputs[0])) '
              'return false;\n'
              '\n'
              '  return true;\n'
              '}\n'
              '\n'
              'static void create_net(Element* ele, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& in0Mem, memory& in1Mem, memory& outputMem,\n'
              '    void* in0Ptr, void* in1Ptr, void* outputPtr\n'
              '    ) {\n'
              '  // dimensions.\n'
              '  assert(ele->inputs[0].volume() == ele->outputs[0].volume());\n'
              '  assert(ele->inputs[1].volume() == ele->outputs[0].volume());\n'
              '  int numDim = ele->outputs[0].numDim;\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5135,
         lineno=98,
         tokens=59,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='create_net(Element* ele, DNNLNet& net, engine& eng, stream& '
              'strm,\n'
              '    memory& in0Mem, memory& in1Mem, memory& outputMem,\n'
              '    void* in0Ptr, void* in1Ptr, void* outputPtr\n'
              '    )')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5136,
         lineno=98,
         tokens=408,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='create_net',
         body='static void create_net(Element* ele, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& in0Mem, memory& in1Mem, memory& outputMem,\n'
              '    void* in0Ptr, void* in1Ptr, void* outputPtr\n'
              '    ) {\n'
              '  // dimensions.\n'
              '  assert(ele->inputs[0].volume() == ele->outputs[0].volume());\n'
              '  assert(ele->inputs[1].volume() == ele->outputs[0].volume());\n'
              '  int numDim = ele->outputs[0].numDim;\n'
              '  if (ele->use_kernel()) {\n'
              '    // data descriptors.\n'
              '    auto in0MemDesc = get_memory_desc(ele->inputs[0], numDim);\n'
              '    auto in1MemDesc = get_memory_desc(ele->inputs[1], numDim);\n'
              '    auto outputMemDesc = get_memory_desc(ele->outputs[0], '
              'numDim);\n'
              '    // data memories.\n'
              '    in0Mem = memory(in0MemDesc, eng, in0Ptr);\n'
              '    in1Mem = memory(in1MemDesc, eng, in1Ptr);\n'
              '    outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo = algorithm::binary_add;\n'
              '    if (ele->type == OP_EW_MUL) ops_algo = '
              'algorithm::binary_mul;\n'
              '    else assert(ele->type == OP_EW_ADD);\n'
              '    auto eleOpDesc = binary::desc(ops_algo, in0MemDesc, '
              'in1MemDesc, outputMemDesc);\n'
              '    auto elePrimDesc = binary::primitive_desc(eleOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({binary(elePrimDesc),\n'
              '        {{DNNL_ARG_SRC_0, in0Mem},\n'
              '        {DNNL_ARG_SRC_1, in1Mem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5137,
         lineno=106,
         tokens=138,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (ele->use_kernel()) {\n'
              '    // data descriptors.\n'
              '    auto in0MemDesc = get_memory_desc(ele->inputs[0], numDim);\n'
              '    auto in1MemDesc = get_memory_desc(ele->inputs[1], numDim);\n'
              '    auto outputMemDesc = get_memory_desc(ele->outputs[0], '
              'numDim);\n'
              '    // data memories.\n'
              '    in0Mem = memory(in0MemDesc, eng, in0Ptr);\n'
              '    in1Mem = memory(in1MemDesc, eng, in1Ptr);\n'
              '    outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo = algorithm::binary_add;\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5138,
         lineno=117,
         tokens=20,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (ele->type == OP_EW_MUL) ops_algo = '
              'algorithm::binary_mul;\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5139,
         lineno=118,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    else assert(ele->type == OP_EW_ADD);\n'
              '    auto eleOpDesc = binary::desc(ops_algo, in0MemDesc, '
              'in1MemDesc, outputMemDesc);\n'
              '    auto elePrimDesc = binary::primitive_desc(eleOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({binary(elePrimDesc),\n'
              '        {{DNNL_ARG_SRC_0, in0Mem},\n'
              '        {DNNL_ARG_SRC_1, in1Mem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}\n'
              '\n'
              'void Element::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5140,
         lineno=132,
         tokens=115,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::map',
         body='void Element::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory in0Mem, in1Mem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      in0Mem, in1Mem, outputMem,\n'
              '      inputs[0].data_ptr, inputs[1].data_ptr, '
              'outputs[0].data_ptr);\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5141,
         lineno=135,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '  // create primitives.\n'
              '  memory in0Mem, in1Mem, outputMem;\n'
              '  create_net(this, net, model->eng, model->strm,\n'
              '      in0Mem, in1Mem, outputMem,\n'
              '      inputs[0].data_ptr, inputs[1].data_ptr, '
              'outputs[0].data_ptr);\n'
              '}\n'
              '\n'
              'void Element::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Element::forward(bool block)\n'
              '{\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5142,
         lineno=138,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='in0Mem',
         body='memory in0Mem, in1Mem, outputMem;')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5143,
         lineno=144,
         tokens=42,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::unmap',
         body='void Element::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5144,
         lineno=153,
         tokens=114,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Element::forward',
         body='void Element::forward(bool block)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    for (auto& p : net) p.first.execute(model->strm, '
              'p.second);\n'
              '    if (block) model->strm.wait();\n'
              '  } else {\n'
              '    elementwise_kernel(outputs[0].volume(), type,\n'
              '        inputs[0], inputs[1], outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr,\n'
              '        (DATATYPE*)inputs[1].data_ptr,\n'
              '        (DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5145,
         lineno=155,
         tokens=27,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (use_kernel()) {\n'
              '    for (auto& p : net) p.first.execute(model->strm, '
              'p.second);\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5146,
         lineno=157,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (block) model->strm.wait();\n'
              '  } else {\n'
              '    elementwise_kernel(outputs[0].volume(), type,\n'
              '        inputs[0], inputs[1], outputs[0],\n'
              '        (DATATYPE*)inputs[0].data_ptr,\n'
              '        (DATATYPE*)inputs[1].data_ptr,\n'
              '        (DATATYPE*)outputs[0].data_ptr);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Model::measure_element_cost(Element* ele)\n'
              '{\n'
              '  memory in0Mem, in1Mem, outputMem;\n'
              '  create_net(ele, net, eng, strm,\n'
              '      in0Mem, in1Mem, outputMem,\n'
              '      inputPtr, biasPtr, outputPtr);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5147,
         lineno=167,
         tokens=429,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_element_cost',
         body='void Model::measure_element_cost(Element* ele)\n'
              '{\n'
              '  memory in0Mem, in1Mem, outputMem;\n'
              '  create_net(ele, net, eng, strm,\n'
              '      in0Mem, in1Mem, outputMem,\n'
              '      inputPtr, biasPtr, outputPtr);\n'
              '\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  if (ele->use_kernel()) {\n'
              '    assert(in0Mem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(in1Mem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(outputMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n'
              '\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      for (auto& p : net) {\n'
              '        p.first.execute(strm, p.second);\n'
              '      }\n'
              '      strm.wait();\n'
              '    }\n'
              '  } else {\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      elementwise_kernel(ele->outputs[0].volume(), ele->type,\n'
              '          ele->inputs[0], ele->inputs[1], ele->outputs[0],\n'
              '          (DATATYPE*)inputPtr,\n'
              '          (DATATYPE*)biasPtr,\n'
              '          (DATATYPE*)outputPtr);\n'
              '    }\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  ele->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '           ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '}')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5148,
         lineno=169,
         tokens=12,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='in0Mem',
         body='memory in0Mem, in1Mem, outputMem;')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5149,
         lineno=176,
         tokens=59,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (ele->use_kernel()) {\n'
              '    assert(in0Mem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(in1Mem.get_desc().get_size() <= MAX_TENSOR_SIZE);\n'
              '    assert(outputMem.get_desc().get_size() <= '
              'MAX_TENSOR_SIZE);\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5150,
         lineno=180,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      for (auto& p : net) {\n'
              '        p.first.execute(strm, p.second);\n'
              '      }\n'
              '      strm.wait();\n'
              '    }\n'
              '  } else {\n'
              '    for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5151,
         lineno=192,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (i == WARMUP_TIMES) {\n'
              '        beg = microsecond_timer();\n'
              '      }\n'
              '      elementwise_kernel(ele->outputs[0].volume(), ele->type,\n'
              '          ele->inputs[0], ele->inputs[1], ele->outputs[0],\n'
              '          (DATATYPE*)inputPtr,\n'
              '          (DATATYPE*)biasPtr,\n'
              '          (DATATYPE*)outputPtr);\n'
              '    }\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  ele->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n')

Fragment(document_cs='dea2abc68bb665dfa523bee940f2c5a8c1ce5a2e3e3ce88671dc78e2e91a0ce6',
         id=5152,
         lineno=205,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (print_cost)\n'
              '    printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",\n'
              '           ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],\n'
              '           ele->inputs[0].dim[3], ele->type, ele->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5153,
         lineno=1,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import xflow\n'
              'import onnx\n'
              '\n'
              'graph = xflow.new_graph()\n'
              'input = graph.new_input(dims=(1,256,28,28))\n'
              'input = graph.maxpool2d(input=input, kernels=(1,1), '
              'strides=(1,1), padding="SAME")\n'
              'weight1 = graph.new_weight(dims=(256,8,3,3))\n'
              '#weight2 = graph.new_weight(dims=(256,16,3,3))\n'
              '#weight3 = graph.new_weight(dims=(256,32,')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5154,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5155,
         lineno=1,
         tokens=54,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /python/sample.py\n'
              '  Variables and usages: activation alpha budget check_model '
              'checker conv2d dims export_onnx graph input kernels maxpool2d '
              'new_graph new_input new_weight onnx onnx_model optimize padding '
              'save strides weight weight1 xflow\n')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5156,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5157,
         lineno=8,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight2 = graph.new_weight(dims=(256,16,3,3))')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5158,
         lineno=9,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3,3))\n'
              '#weight4 = graph.new_weight(dims=(256,64,3,3))\n'
              '#weight5 = graph.new_weight(dims=(256,128,3,3))\n'
              '#weight6 = graph.new_weight(dims=(256,256,3,3))\n'
              't1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding=')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5159,
         lineno=9,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight3 = graph.new_weight(dims=(256,32,3,3))')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5160,
         lineno=10,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight4 = graph.new_weight(dims=(256,64,3,3))')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5161,
         lineno=11,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight5 = graph.new_weight(dims=(256,128,3,3))')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5162,
         lineno=12,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight6 = graph.new_weight(dims=(256,256,3,3))')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5163,
         lineno=14,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='"SAME", activation="RELU")\n'
              '#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU"')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5164,
         lineno=14,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5165,
         lineno=15,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5166,
         lineno=16,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5167,
         lineno=17,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=')\n'
              '#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '\n'
              'new_graph = xflow.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = xflow.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, '
              '"/home/ubuntu/ONNXModel/inception_v2/model_xflow.onnx")\n')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5168,
         lineno=17,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5169,
         lineno=18,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='e55837ea66f29226d812421914919f9c30feb3aeb5b1ba29e08585b10c7c9089',
         id=5170,
         lineno=23,
         tokens=15,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='/home/ubuntu/ONNXModel/inception_v2/model_xflow.onnx')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5171,
         lineno=1,
         tokens=129,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import xflow\n'
              'import onnx\n'
              '\n'
              '# 1. evaluate the performance by just considering substitution '
              'optimizations\n'
              'print("Measuring the performance of graph substitution '
              'optimizations (average of 1000 runs)")\n'
              "graph = xflow.load('bert_graphs/bert_subst_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#2. evaluate the performance by just performing data layout '
              'optimizations\n'
              'print("Measuring the performance of data layout '
              'optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_layout_nw.onnx')\n"
              'print("XFlow: end-to-end inferen')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5172,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5173,
         lineno=1,
         tokens=26,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/eval_joint.py\n'
              '  Variables and usages: format graph load onnx print run_time '
              'xflow\n')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5174,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5175,
         lineno=4,
         tokens=12,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# 1. evaluate the performance by just considering substitution '
              'optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5176,
         lineno=5,
         tokens=16,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring the performance of graph substitution optimizations '
              '(average of 1000 runs)')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5177,
         lineno=6,
         tokens=11,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='bert_graphs/bert_subst_nw.onnx')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5178,
         lineno=7,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='XFlow: end-to-end inference time = {}ms')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5179,
         lineno=10,
         tokens=12,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#2. evaluate the performance by just performing data layout '
              'optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5180,
         lineno=11,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring the performance of data layout optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5181,
         lineno=12,
         tokens=10,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='bert_graphs/bert_layout_nw.onnx')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5182,
         lineno=13,
         tokens=131,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ce time = {}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#3. evaluate the performance by sequential optimizations\n'
              'print("Measuring the performance of sequential optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_sequential_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#4. evaluate the performance by joint optimizations\n'
              'print("Measuring the performance of joint optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_xflow_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5183,
         lineno=13,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='XFlow: end-to-end inference time = {}ms')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5184,
         lineno=16,
         tokens=9,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#3. evaluate the performance by sequential optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5185,
         lineno=17,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring the performance of sequential optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5186,
         lineno=18,
         tokens=11,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='bert_graphs/bert_sequential_nw.onnx')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5187,
         lineno=19,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='XFlow: end-to-end inference time = {}ms')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5188,
         lineno=22,
         tokens=9,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#4. evaluate the performance by joint optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5189,
         lineno=23,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Measuring the performance of joint optimizations')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5190,
         lineno=24,
         tokens=11,
         depth=5,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='bert_graphs/bert_xflow_nw.onnx')

Fragment(document_cs='eca4f80b0ed26e7243622a0f2cf42d6e01c739bab6ebba4a1ede1b031c5cf61e',
         id=5191,
         lineno=25,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='XFlow: end-to-end inference time = {}ms')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5192,
         lineno=1,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5193,
         lineno=1,
         tokens=127,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/reduce.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::reduce Graph::reduce_argmax '
              'Graph::reduce_argmin Graph::reduce_max Graph::reduce_mean '
              'Graph::reduce_min Graph::reduce_prod Graph::reduce_sum '
              'Model::get_or_create_reduce Reduce::Reduce '
              'Reduce::collect_costs Reduce::get_int_parameter Reduce::~Reduce '
              'ReduceKey::ReduceKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Reduce ReduceKey collect_costs '
              'get_int_parameter get_or_create_reduce reduce reduce_argmax '
              'reduce_argmin reduce_max reduce_mean reduce_min reduce_prod '
              'reduce_sum\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5194,
         lineno=16,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::reduce_argmax(const TensorHandle _input,\n'
              '                                  const std::vector<int>& '
              'axes,\n'
              '                                  bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_ARGMAX, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_argmin(const TensorHandle _input,\n'
              '                                  const std::vector<int>& '
              'axes,\n'
              '                                  bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_ARGMIN, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_max(const TensorHandle _input,\n'
              '                               const std::vector<int>')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5195,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5196,
         lineno=19,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_argmax',
         body='TensorHandle Graph::reduce_argmax(const TensorHandle _input,\n'
              '                                  const std::vector<int>& '
              'axes,\n'
              '                                  bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_ARGMAX, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5197,
         lineno=26,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_argmin',
         body='TensorHandle Graph::reduce_argmin(const TensorHandle _input,\n'
              '                                  const std::vector<int>& '
              'axes,\n'
              '                                  bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_ARGMIN, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5198,
         lineno=33,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_max',
         body='TensorHandle Graph::reduce_max(const TensorHandle _input,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MAX, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5199,
         lineno=34,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MAX, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_mean(const TensorHandle _input,\n'
              '                                const std::vector<int>& axes,\n'
              '                                bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MEAN, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_min(const TensorHandle _input,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MIN, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_prod(const Te')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5200,
         lineno=40,
         tokens=46,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_mean',
         body='TensorHandle Graph::reduce_mean(const TensorHandle _input,\n'
              '                                const std::vector<int>& axes,\n'
              '                                bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MEAN, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5201,
         lineno=47,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_min',
         body='TensorHandle Graph::reduce_min(const TensorHandle _input,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_MIN, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5202,
         lineno=54,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nsorHandle _input,\n'
              '                                const std::vector<int>& axes,\n'
              '                                bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_PROD, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce_sum(const TensorHandle _input,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_SUM, axes, keepdims);\n'
              '}\n'
              '\n'
              'TensorHandle Graph::reduce(const TensorHandle _input,\n'
              '                           OpType _type,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims)\n'
              '{\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5203,
         lineno=54,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_prod',
         body='TensorHandle Graph::reduce_prod(const TensorHandle _input,\n'
              '                                const std::vector<int>& axes,\n'
              '                                bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_PROD, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5204,
         lineno=61,
         tokens=45,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce_sum',
         body='TensorHandle Graph::reduce_sum(const TensorHandle _input,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  return reduce(_input, OP_REDUCE_SUM, axes, keepdims);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5205,
         lineno=68,
         tokens=150,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::reduce',
         body='TensorHandle Graph::reduce(const TensorHandle _input,\n'
              '                           OpType _type,\n'
              '                           const std::vector<int>& axes,\n'
              '                           bool keepdims)\n'
              '{\n'
              '  for (size_t i = 0; i < axes.size(); i++) {\n'
              '    assert(axes[i] >= 0);\n'
              '    assert(axes[i] < _input->numDim);\n'
              '  }\n'
              '  Op op = model->get_or_create_reduce(*_input, _type, axes, '
              'keepdims);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5206,
         lineno=73,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < axes.size(); i++) {\n'
              '    assert(axes[i] >= 0);\n'
              '    assert(axes[i] < _input->numDim);\n'
              '  }\n'
              '  Op op = model->get_or_create_reduce(*_input, _type, axes, '
              'keepdims);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5207,
         lineno=80,
         tokens=68,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=']);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_reduce(const Tensor& _input,\n'
              '                               OpType _type,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  ReduceKey key(_input, _type, axes, keepdims);\n'
              '  Reduce* reduceOp;\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5208,
         lineno=85,
         tokens=139,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_reduce',
         body='Op Model::get_or_create_reduce(const Tensor& _input,\n'
              '                               OpType _type,\n'
              '                               const std::vector<int>& axes,\n'
              '                               bool keepdims)\n'
              '{\n'
              '  ReduceKey key(_input, _type, axes, keepdims);\n'
              '  Reduce* reduceOp;\n'
              '  if (reduce.find(key) != reduce.end()) {\n'
              '    reduceOp = reduce[key];\n'
              '  } else {\n'
              '    reduceOp = new Reduce(this, _input, _type, axes, '
              'keepdims);\n'
              '    measure_reduce_cost(reduceOp);\n'
              '    reduce[key] = reduceOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = reduceOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5209,
         lineno=90,
         tokens=12,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type, axes, keepdims)')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5210,
         lineno=92,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (reduce.find(key) != reduce.end()) {\n'
              '    reduceOp = reduce[key];\n'
              '  } else {\n'
              '    reduceOp = new Reduce(this, _input, _type, axes, '
              'keepdims);\n'
              '    measure_reduce_cost(reduceOp);\n'
              '    reduce[key] = reduceOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = reduceOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Redu')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5211,
         lineno=99,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5212,
         lineno=105,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ce::Reduce(Model* _model, const Tensor& _input, OpType _type,\n'
              '               const std::vector<int>& _axes, bool _keepdims)\n'
              ': OpBase(_input, _model, _type), keepdims(_keepdims), '
              'axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  // Reduce currently only support the defacult layout\n'
              '  assert(_input.default_layout());\n'
              '  if (keepdims) {\n'
              '    outputs[0].numDim = _input.numDim;\n'
              '    int cnt = 1;\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5213,
         lineno=105,
         tokens=457,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::Reduce',
         body='Reduce::Reduce(Model* _model, const Tensor& _input, OpType '
              '_type,\n'
              '               const std::vector<int>& _axes, bool _keepdims)\n'
              ': OpBase(_input, _model, _type), keepdims(_keepdims), '
              'axes(_axes)\n'
              '{\n'
              '  numOutputs = 1;\n'
              '  // Reduce currently only support the defacult layout\n'
              '  assert(_input.default_layout());\n'
              '  if (keepdims) {\n'
              '    outputs[0].numDim = _input.numDim;\n'
              '    int cnt = 1;\n'
              '    for (int i = outputs[0].numDim-1; i >= 0; i--) {\n'
              '      bool reduced = false;\n'
              '      for (size_t j = 0; j < axes.size(); j++)\n'
              '        if (axes[j] == i)\n'
              '          reduced = true;\n'
              '      outputs[0].stride[i] = cnt;\n'
              '      if (reduced) {\n'
              '        outputs[0].dim[i] = 1;\n'
              '        outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      } else {\n'
              '        outputs[0].dim[i] = _input.dim[i];\n'
              '        outputs[0].split[i] = _input.split[i];\n'
              '      }\n'
              '      cnt = cnt * outputs[0].dim[i];\n'
              '    }\n'
              '  } else {\n'
              '    outputs[0].numDim = _input.numDim-axes.size();\n'
              '    int cnt = 1, dim = outputs[0].numDim-1;\n'
              '    for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '      bool reduced = false;\n'
              '      for (size_t j = 0; j < axes.size(); j++)\n'
              '        if (axes[j] == i)\n'
              '          reduced = true;\n'
              '      if (reduced)\n'
              '        continue;\n'
              '      outputs[0].stride[dim] = cnt;\n'
              '      outputs[0].dim[dim] = _input.dim[i];\n'
              '      outputs[0].split[dim] = _input.split[i];\n'
              '      cnt = cnt * outputs[0].dim[dim];\n'
              '      dim = dim - 1;\n'
              '    }\n'
              '    // Cannot have duplicated reduce axes\n'
              '    assert(dim == -1);\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5214,
         lineno=115,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = outputs[0].numDim-1; i >= 0; i--) {\n'
              '      bool reduced = false;\n'
              '      for (size_t j = 0; j < axes.size(); j++)\n'
              '        if (axes[j] == i)\n'
              '          reduced = true;\n'
              '      outputs[0].stride[i] = cnt;\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5215,
         lineno=121,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (reduced) {\n'
              '        outputs[0].dim[i] = 1;\n'
              '        outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      } else {\n'
              '        outputs[0].dim[i] = _input.dim[i];\n'
              '        outputs[0].split[i] = _input.split[i];\n'
              '      }\n'
              '      cnt = cnt * outputs[0].dim[i];\n'
              '    }\n'
              '  } else {\n'
              '    outputs[0].numDim = _input.numDim-axes.size();\n'
              '    int cnt = 1, dim = outputs[0].numDim-1;\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5216,
         lineno=133,
         tokens=139,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '      bool reduced = false;\n'
              '      for (size_t j = 0; j < axes.size(); j++)\n'
              '        if (axes[j] == i)\n'
              '          reduced = true;\n'
              '      if (reduced)\n'
              '        continue;\n'
              '      outputs[0].stride[dim] = cnt;\n'
              '      outputs[0].dim[dim] = _input.dim[i];\n'
              '      outputs[0].split[dim] = _input.split[i];\n'
              '      cnt = cnt * outputs[0].dim[dim];\n'
              '      dim = dim - 1;\n'
              '    }\n'
              '    // Cannot have duplicated reduce axes\n'
              '    assert(dim')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5217,
         lineno=147,
         tokens=81,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' == -1);\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Reduce::~Reduce(void)\n'
              '{}\n'
              '\n'
              'bool Reduce::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_KEEP_DIMS:\n'
              '      *value = keepdims;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5218,
         lineno=152,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::~Reduce',
         body='Reduce::~Reduce(void)\n{}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5219,
         lineno=155,
         tokens=58,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::get_int_parameter',
         body='bool Reduce::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_KEEP_DIMS:\n'
              '      *value = keepdims;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5220,
         lineno=166,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='void Reduce::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  flops += inputs[0].volume();\n'
              '  mem_acc += inputs[0].volume() + outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Reduce]: cost(')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5221,
         lineno=166,
         tokens=99,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Reduce::collect_costs',
         body='void Reduce::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '  flops += inputs[0].volume();\n'
              '  mem_acc += inputs[0].volume() + outputs[0].volume();\n'
              '  num_kernels += 1;\n'
              '  printf("      cost[Reduce]: cost(%.4lf) '
              'total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5222,
         lineno=173,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='%.4lf) total_cost(%.4lf)\\n",\n'
              '         runtime, exe_time);\n'
              '}\n'
              '\n'
              'ReduceKey::ReduceKey(const Tensor& _input, OpType _type,\n'
              '                     const std::vector<int>& axes, bool '
              'keepdims)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  keys[idx++] = (int)(keepdims);\n'
              '  keys[idx++] = axes.size();\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5223,
         lineno=177,
         tokens=121,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ReduceKey::ReduceKey',
         body='ReduceKey::ReduceKey(const Tensor& _input, OpType _type,\n'
              '                     const std::vector<int>& axes, bool '
              'keepdims)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _type;\n'
              '  keys[idx++] = (int)(keepdims);\n'
              '  keys[idx++] = axes.size();\n'
              '  for (size_t j = 0; j < axes.size(); j++)\n'
              '    keys[idx++] = axes[j];\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5224,
         lineno=184,
         tokens=33,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t j = 0; j < axes.size(); j++)\n'
              '    keys[idx++] = axes[j];\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='edf3bb84f00c165585e9d0e547d599604d9a749c5821070e88ae6fe15a5fd7da',
         id=5225,
         lineno=187,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n'
              '\n')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5226,
         lineno=1,
         tokens=101,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS ')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5227,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/pad_kernel.cu\n'
              '  Methods: Model::measure_pad_cost Pad::forward Pad::map '
              'Pad::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_pad_cost unmap\n')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5228,
         lineno=11,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Pad::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n'
              '\n'
              'void Pad::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Pad::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_pad_cost(Pad* pad)\n'
              '{\n'
              '  pad->runtime = 0;\n'
              '}\n')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5229,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5230,
         lineno=20,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::map',
         body='void Pad::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5231,
         lineno=25,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::unmap',
         body='void Pad::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5232,
         lineno=30,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pad::forward',
         body='void Pad::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='ee8cbf67fbc5afacaaeab44d624e0353ef1f42bccff5c9404c94840aea087d5d',
         id=5233,
         lineno=36,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_pad_cost',
         body='void Model::measure_pad_cost(Pad* pad)\n'
              '{\n'
              '  pad->runtime = 0;\n'
              '}')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5234,
         lineno=1,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or ')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5235,
         lineno=1,
         tokens=51,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/cudnn/slice_kernel.cu\n'
              '  Methods: Model::measure_slice_cost Slice::forward Slice::map '
              'Slice::unmap\n'
              '  Using: taso\n'
              '  Usages: forward map measure_slice_cost unmap\n')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5236,
         lineno=11,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n'
              '\n'
              'void Slice::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n'
              '\n'
              'void Slice::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n'
              '\n'
              'void Slice::forward(bool block)\n'
              '{\n')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5237,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5238,
         lineno=20,
         tokens=47,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::map',
         body='void Slice::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5239,
         lineno=27,
         tokens=21,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::unmap',
         body='void Slice::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5240,
         lineno=32,
         tokens=22,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::forward',
         body='void Slice::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5241,
         lineno=34,
         tokens=47,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n'
              'void Model::measure_slice_cost(Slice* slice)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  slice->runtime = 0;\n'
              '}\n')

Fragment(document_cs='eea8360583b7c8ff27b854a95c1e3f2c3a072b82d3b862f61dad7cd77d3f07fb',
         id=5242,
         lineno=38,
         tokens=33,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_slice_cost',
         body='void Model::measure_slice_cost(Slice* slice)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  slice->runtime = 0;\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5243,
         lineno=1,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed unde')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5244,
         lineno=1,
         tokens=81,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/slice.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::slice Model::get_or_create_slice Slice::Slice '
              'Slice::collect_costs Slice::get_int_parameter Slice::~Slice '
              'SliceKey::SliceKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Slice SliceKey collect_costs '
              'get_int_parameter get_or_create_slice slice\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5245,
         lineno=10,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='r the License is distributed on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::slice(const TensorHandle _input,\n'
              '                     ')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5246,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5247,
         lineno=19,
         tokens=122,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::slice',
         body='TensorHandle Graph::slice(const TensorHandle _input,\n'
              '                          const std::vector<int>& _start,\n'
              '                          const std::vector<int>& _end,\n'
              '                          const std::vector<int>& _axes,\n'
              '                          const std::vector<int>& _steps)\n'
              '{\n'
              '  Op op = model->get_or_create_slice(*_input, _start, _end, '
              '_axes, _steps);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5248,
         lineno=20,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='     const std::vector<int>& _start,\n'
              '                          const std::vector<int>& _end,\n'
              '                          const std::vector<int>& _axes,\n'
              '                          const std::vector<int>& _steps)\n'
              '{\n'
              '  Op op = model->get_or_create_slice(*_input, _start, _end, '
              '_axes, _steps);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new T')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5249,
         lineno=27,
         tokens=110,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_slice(const Tensor& _input,\n'
              '                              const std::vector<int>& _start,\n'
              '                              const std::vector<int>& _end,\n'
              '                              const std::vector<int>& _axes,\n'
              '                              const std::vector<int>& _steps)\n'
              '{\n'
              '  if (_start.size() != _end.size())\n'
              '    return Op::INVALID_OP;\n'
              '  if (_start.size() != _axes.size())\n'
              '    return Op::INVALID_OP;\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5250,
         lineno=32,
         tokens=220,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_slice',
         body='Op Model::get_or_create_slice(const Tensor& _input,\n'
              '                              const std::vector<int>& _start,\n'
              '                              const std::vector<int>& _end,\n'
              '                              const std::vector<int>& _axes,\n'
              '                              const std::vector<int>& _steps)\n'
              '{\n'
              '  if (_start.size() != _end.size())\n'
              '    return Op::INVALID_OP;\n'
              '  if (_start.size() != _axes.size())\n'
              '    return Op::INVALID_OP;\n'
              '  if (_start.size() != _steps.size())\n'
              '    return Op::INVALID_OP;\n'
              '  SliceKey key(_input, _start, _end, _axes, _steps);\n'
              '  Slice* sliceOp;\n'
              '  if (slice.find(key) != slice.end()) {\n'
              '    sliceOp = slice[key];\n'
              '  } else {\n'
              '    sliceOp = new Slice(this, _input, _start, _end, _axes, '
              '_steps);\n'
              '    measure_slice_cost(sliceOp);\n'
              '    slice[key] = sliceOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = sliceOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5251,
         lineno=42,
         tokens=43,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (_start.size() != _steps.size())\n'
              '    return Op::INVALID_OP;\n'
              '  SliceKey key(_input, _start, _end, _axes, _steps);\n'
              '  Slice* sliceOp;\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5252,
         lineno=44,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _start, _end, _axes, _steps)')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5253,
         lineno=46,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (slice.find(key) != slice.end()) {\n'
              '    sliceOp = slice[key];\n'
              '  } else {\n'
              '    sliceOp = new Slice(this, _input, _start, _end, _axes, '
              '_steps);\n'
              '    measure_slice_cost(sliceOp);\n'
              '    slice[key] = sliceOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = sliceOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Slice::Slice(Model* _model, const Tensor& _input,\n'
              '             const std::vector<int>& _start,\n'
              '             const std::vector<int>& _end,\n'
              '             const std:')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5254,
         lineno=53,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5255,
         lineno=59,
         tokens=409,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::Slice',
         body='Slice::Slice(Model* _model, const Tensor& _input,\n'
              '             const std::vector<int>& _start,\n'
              '             const std::vector<int>& _end,\n'
              '             const std::vector<int>& _axes,\n'
              '             const std::vector<int>& _steps)\n'
              ': OpBase(_input, _model, OP_SLICE),\n'
              '  start(_start), end(_end), axes(_axes), steps(_steps)\n'
              '{\n'
              '  assert(_start.size() == _end.size());\n'
              '  assert(_start.size() == _axes.size());\n'
              '  assert(_start.size() == _steps.size());\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  // Currently assume the input tensor has the default layout\n'
              '  assert(_input.default_layout());\n'
              '  int total = 1;\n'
              '  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    int idx = -1;\n'
              '    for (size_t j = 0; j < _start.size(); j++)\n'
              '      if (_axes[j] == i) {\n'
              '        idx = j;\n'
              '        break;\n'
              '      }\n'
              '    if (idx == -1) {\n'
              '      outputs[0].dim[i] = _input.dim[i];\n'
              '      outputs[0].split[i] = _input.split[i];\n'
              '      outputs[0].stride[i] = total;\n'
              '      total *= outputs[0].dim[i];\n'
              '    } else {\n'
              '      int start_pos = min(_start[idx], _input.dim[i]);\n'
              '      int end_pos = min(_end[idx], _input.dim[i]);\n'
              '      int dim_size = (end_pos - start_pos - 1) / _steps[idx] + '
              '1;\n'
              '      outputs[0].dim[i] = dim_size;\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      outputs[0].stride[i] = total;\n'
              '      total *= outputs[0].dim[i];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5256,
         lineno=62,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=':vector<int>& _axes,\n'
              '             const std::vector<int>& _steps)\n'
              ': OpBase(_input, _model, OP_SLICE),\n'
              '  start(_start), end(_end), axes(_axes), steps(_steps)\n'
              '{\n'
              '  assert(_start.size() == _end.size());\n'
              '  assert(_start.size() == _axes.size());\n'
              '  assert(_start.size() == _steps.size());\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  // Currently assume the input tensor has the default layout\n'
              '  assert(_input.default_layout());\n'
              '  int total = 1;\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5257,
         lineno=75,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    int idx = -1;\n'
              '    for (size_t j = 0; j < _start.size(); j++)\n'
              '      if (_axes[j] == i) {\n'
              '        idx = j;\n'
              '        break;\n'
              '      }\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5258,
         lineno=82,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    if (idx == -1) {\n'
              '      outputs[0].dim[i] = _input.dim[i];\n'
              '      outputs[0].split[i] = _input.split[i];\n'
              '      outputs[0].stride[i] = total;\n'
              '      total *= outputs[0].dim[i];\n'
              '    } else {\n'
              '      int start_pos = min(_start[idx], _input.dim[i]);\n'
              '      int end_pos = min(_end[idx], _')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5259,
         lineno=89,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='input.dim[i]);\n'
              '      int dim_size = (end_pos - start_pos - 1) / _steps[idx] + '
              '1;\n'
              '      outputs[0].dim[i] = dim_size;\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      outputs[0].stride[i] = total;\n'
              '      total *= outputs[0].dim[i];\n'
              '    }\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Slice::~Sl')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5260,
         lineno=100,
         tokens=136,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ice(void)\n'
              '{}\n'
              '\n'
              'bool Slice::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}\n'
              '\n'
              'void Slice::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}\n'
              '\n'
              'SliceKey::SliceKey(const Tensor& _input,\n'
              '                   const std::vector<int>& _start,\n'
              '                   const std::vector<int>& _end,\n'
              '                   const std::vector<int>& _axes,\n'
              '                   const std::vector<int>& _steps)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _start.size();\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5261,
         lineno=100,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::~Slice',
         body='Slice::~Slice(void)\n{}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5262,
         lineno=103,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::get_int_parameter',
         body='bool Slice::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5263,
         lineno=108,
         tokens=35,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Slice::collect_costs',
         body='void Slice::collect_costs(float& exe_time, float& flops,\n'
              '                          float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5264,
         lineno=114,
         tokens=208,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='SliceKey::SliceKey',
         body='SliceKey::SliceKey(const Tensor& _input,\n'
              '                   const std::vector<int>& _start,\n'
              '                   const std::vector<int>& _end,\n'
              '                   const std::vector<int>& _axes,\n'
              '                   const std::vector<int>& _steps)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _start.size();\n'
              '  for (size_t i = 0; i < _start.size(); i++)\n'
              '    keys[idx++] = _start[i];\n'
              '  for (size_t i = 0; i < _end.size(); i++)\n'
              '    keys[idx++] = _end[i];\n'
              '  for (size_t i = 0; i < _axes.size(); i++)\n'
              '    keys[idx++] = _axes[i];\n'
              '  for (size_t i = 0; i < _steps.size(); i++)\n'
              '    keys[idx++] = _steps[i];\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5265,
         lineno=122,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < _start.size(); i++)\n'
              '    keys[idx++] = _start[i];\n'
              '  for (size_t i = 0; i < _end.size(); i++)\n'
              '    keys[idx++] = _end[i];\n'
              '  for (size_t i = 0; i < _axes.size(); i++)\n'
              '    keys[idx++] = _axes[i];\n'
              '  for (size_t i = 0; i < _steps.size(); i++)\n'
              '    keys[idx++] = _steps[i];\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='eedfdb9f97df2b34959445413e8949d630547a20c4498f8617b9e4a39326c8b6',
         id=5266,
         lineno=131,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5267,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDI')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5268,
         lineno=1,
         tokens=73,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/fuse_conv_batchnorm_bias_mkl.cc\n'
              '  Functions: fuse_conv_batchnorm_bias_kernel\n'
              '  Methods: FuseConvBatchNormBias::forward '
              'FuseConvBatchNormBias::map FuseConvBatchNormBias::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map sqrt unmap\n')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5269,
         lineno=11,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='TIONS OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void fuse_conv_batchnorm_bias_kernel(int volume, DATATYPE* '
              'dst_ptr,\n'
              '    const DATATYPE* scale, const DATATYPE* beta,\n'
              '    const DATATYPE* mean, const DATATYPE* var) {\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5270,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5271,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5272,
         lineno=21,
         tokens=41,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_bias_kernel',
         body='fuse_conv_batchnorm_bias_kernel(int volume, DATATYPE* dst_ptr,\n'
              '    const DATATYPE* scale, const DATATYPE* beta,\n'
              '    const DATATYPE* mean, const DATATYPE* var)')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5273,
         lineno=21,
         tokens=97,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='fuse_conv_batchnorm_bias_kernel',
         body='void fuse_conv_batchnorm_bias_kernel(int volume, DATATYPE* '
              'dst_ptr,\n'
              '    const DATATYPE* scale, const DATATYPE* beta,\n'
              '    const DATATYPE* mean, const DATATYPE* var) {\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / '
              'std::sqrt(var[i] + BN_MIN_EPSILON);\n'
              '  }\n'
              '}')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5274,
         lineno=25,
         tokens=93,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < volume; i++) {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / '
              'std::sqrt(var[i] + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 1);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim ')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5275,
         lineno=30,
         tokens=99,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::map',
         body='void FuseConvBatchNormBias::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 1);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  assert(inputs[3].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5276,
         lineno=34,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='== 1);\n'
              '  assert(inputs[3].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.c')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5277,
         lineno=41,
         tokens=46,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::unmap',
         body='void FuseConvBatchNormBias::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5278,
         lineno=44,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='lear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void FuseConvBatchNormBias::forward(bool block)\n'
              '{\n'
              '  int volume = outputs[0].volume();\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* beta_ptr = (DAT')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5279,
         lineno=50,
         tokens=128,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='FuseConvBatchNormBias::forward',
         body='void FuseConvBatchNormBias::forward(bool block)\n'
              '{\n'
              '  int volume = outputs[0].volume();\n'
              '  DATATYPE* scale_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* beta_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* mean_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[3].data_ptr;\n'
              '  fuse_conv_batchnorm_bias_kernel(volume,\n'
              '      (DATATYPE*)outputs[0].data_ptr, scale_ptr, beta_ptr, '
              'mean_ptr, var_ptr);\n'
              '}')

Fragment(document_cs='efec7d794503ddcbbd56d69d9e75023b2a79000861acf227b0e0bea85920d56c',
         id=5280,
         lineno=54,
         tokens=79,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ATYPE*) inputs[1].data_ptr;\n'
              '  DATATYPE* mean_ptr = (DATATYPE*) inputs[2].data_ptr;\n'
              '  DATATYPE* var_ptr = (DATATYPE*) inputs[3].data_ptr;\n'
              '  fuse_conv_batchnorm_bias_kernel(volume,\n'
              '      (DATATYPE*)outputs[0].data_ptr, scale_ptr, beta_ptr, '
              'mean_ptr, var_ptr);\n'
              '}\n'
              '\n')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5281,
         lineno=1,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#ifndef _CPP_EXAMPLES_RESNE')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5282,
         lineno=1,
         tokens=34,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/resnext50.h\n'
              '  Macros: _CPP_EXAMPLES_RESNEXT50_H_\n'
              '  Functions: resnext50 resnext_block\n')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5283,
         lineno=16,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='XT50_H_\n'
              '#define _CPP_EXAMPLES_RESNEXT50_H_\n'
              '\n'
              'TensorHandle resnext_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels, int groups) '
              '{\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAME, ')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5284,
         lineno=17,
         tokens=11,
         depth=1,
         parent_id=None,
         category='macro',
         summary=False,
         name='_CPP_EXAMPLES_RESNEXT50_H_',
         body='#define _CPP_EXAMPLES_RESNEXT50_H_')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5285,
         lineno=19,
         tokens=310,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='TensorHandle resnext_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels, int groups) '
              '{\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAME, AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1] / '
              'groups, 3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 2 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n'
              '  if (strideH > 1 || inp->dim[1] != 2 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 2 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return graph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5286,
         lineno=19,
         tokens=27,
         depth=2,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext_block',
         body='resnext_block(Graph* graph, const TensorHandle input, int '
              'strideH, int strideW, int outChannels, int groups)')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5287,
         lineno=22,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1] / '
              'groups, 3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 2 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5288,
         lineno=28,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (strideH > 1 || inp->dim[1] != 2 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 2 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return graph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}\n'
              '\n'
              'Graph* resnext50(float alpha, int bud')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5289,
         lineno=35,
         tokens=125,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='get, bool printSubst = false) {\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { 1, 3, 224, 224 });\n'
              '  auto weight = new_random_weight(graph, { 64, 3, 7, 7 });\n'
              '  auto t = graph->conv2d(inp, weight, 2, 2, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  t = graph->pool2d_max(t, 3, 3, 2, 2, PD_MODE_SAME);\n'
              '  int stride = 1;\n')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5290,
         lineno=35,
         tokens=16,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='resnext50',
         body='resnext50(float alpha, int budget, bool printSubst = false)')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5291,
         lineno=42,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 3; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 128, 32);\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 4; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 256, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 6; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 512, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n')

Fragment(document_cs='f23dc460eb49c3ecc0297f92154c0a3bf75e3ad45ebba36781c6b2ed34b30d52',
         id=5292,
         lineno=56,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < 3; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 1024, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n'
              '\n'
              '#endif\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5293,
         lineno=1,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific la')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5294,
         lineno=1,
         tokens=134,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/pool2d.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::pool2d_avg Graph::pool2d_max '
              'Model::get_or_create_pool2d Pool2D::Pool2D '
              'Pool2D::collect_costs Pool2D::get_int_parameter '
              'Pool2D::get_padding Pool2D::~Pool2D Pool2DKey::Pool2DKey\n'
              '  Variables: outputH ret totalPadH\n'
              '  Using: taso\n'
              '  Usages: NO_SPLIT Pool2D Pool2DKey collect_costs '
              'get_int_parameter get_or_create_pool2d get_padding pool2d_avg '
              'pool2d_max\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5295,
         lineno=12,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='nguage governing permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::pool2d_max(const TensorHandle _input,\n'
              '                               int _kernelH, int _kernelW,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n'
              '  int num = _input->dim[1] * _kernelH * _kernelW;\n'
              '  DATATYPE* data_ptr = (DATATYPE*) malloc(num * '
              'sizeof(DATATYPE));\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5296,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5297,
         lineno=19,
         tokens=421,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::pool2d_max',
         body='TensorHandle Graph::pool2d_max(const TensorHandle _input,\n'
              '                               int _kernelH, int _kernelW,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n'
              '  int num = _input->dim[1] * _kernelH * _kernelW;\n'
              '  DATATYPE* data_ptr = (DATATYPE*) malloc(num * '
              'sizeof(DATATYPE));\n'
              '  for (int i = 0; i < num; i++)\n'
              '    data_ptr[i] = 1.0f / (_kernelH * _kernelW);\n'
              '  const int dims[4] = {_input->dim[1], 1, _kernelH, _kernelW};\n'
              '  TensorHandle weight = new_weight(4, dims, data_ptr);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _input.dim[1];\n'
              '  weight.dim[1] = 1;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  Op op = model->get_or_create_pool2d(\n'
              '              *_input, *weight, OP_POOL2D_MAX, _kernelH, '
              '_kernelW,\n'
              '              _strideH, _strideW, _padding, _activation);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(weight->op, op, weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5298,
         lineno=27,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < num; i++)\n'
              '    data_ptr[i] = 1.0f / (_kernelH * _kernelW);\n'
              '  const int dims[4] = {_input->dim[1], 1, _kernelH, _kernelW};\n'
              '  TensorHandle weight = new_weight(4, dims, data_ptr);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _input.dim[1];\n'
              '  weight.dim[1] = 1;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weigh')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5299,
         lineno=37,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  Op op = model->get_or_create_pool2d(\n'
              '              *_')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5300,
         lineno=47,
         tokens=109,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='input, *weight, OP_POOL2D_MAX, _kernelH, _kernelW,\n'
              '              _strideH, _strideW, _padding, _activation);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(weight->op, op, weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'TensorHandle Graph::pool2d_avg(const TensorHandle _input,\n'
              '    ')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5301,
         lineno=56,
         tokens=422,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::pool2d_avg',
         body='TensorHandle Graph::pool2d_avg(const TensorHandle _input,\n'
              '                               int _kernelH, int _kernelW,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n'
              '  int num = _input->dim[1] * _kernelH * _kernelW;\n'
              '  DATATYPE* data_ptr = (DATATYPE*) malloc(num * '
              'sizeof(DATATYPE));\n'
              '  for (int i = 0; i < num; i++)\n'
              '    data_ptr[i] = 1.0f / (_kernelH * _kernelW);\n'
              '  const int dims[4] = {_input->dim[1], 1, _kernelH, _kernelW};\n'
              '  TensorHandle weight = new_weight(4, dims, data_ptr);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _input.dim[1];\n'
              '  weight.dim[1] = 1;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.stride[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  Op op = model->get_or_create_pool2d(\n'
              '              *_input, *weight, OP_POOL2D_AVG, _kernelH, '
              '_kernelW,\n'
              '              _strideH, _strideW, _padding, _activation);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(weight->op, op, weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5302,
         lineno=57,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='                           int _kernelH, int _kernelW,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '{\n'
              '  int num = _input->dim[1] * _kernelH * _kernelW;\n'
              '  DATATYPE* data_ptr = (DATATYPE*) malloc(num * '
              'sizeof(DATATYPE));\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5303,
         lineno=64,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < num; i++)\n'
              '    data_ptr[i] = 1.0f / (_kernelH * _kernelW);\n'
              '  const int dims[4] = {_input->dim[1], 1, _kernelH, _kernelW};\n'
              '  TensorHandle weight = new_weight(4, dims, data_ptr);\n'
              '/*\n'
              '  weight.numDim = 4;\n'
              '  weight.dim[0] = _input.dim[1];\n'
              '  weight.dim[1] = 1;\n'
              '  weight.dim[2] = _kernelH;\n'
              '  weight.dim[3] = _kernelW;\n'
              '  weight.stride[3] = 1;\n'
              '  weight.stride[2] = weight.strid')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5304,
         lineno=75,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='e[3] * weight.dim[3];\n'
              '  weight.stride[1] = weight.stride[2] * weight.dim[2];\n'
              '  weight.stride[0] = weight.stride[1] * weight.dim[1];\n'
              '  weight.op.guid = GUID_WEIGHT;\n'
              '  weight.op.ptr = NULL;\n'
              '  weight.idx = 0;\n'
              '  weight = noop(weight);\n'
              '*/\n'
              '  Op op = model->get_or_create_pool2d(\n'
              '              *_input, *weight, OP_POOL2D_AVG, _kernelH, '
              '_kernelW,\n'
              '              _strideH, _strideW, _padding, _activ')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5305,
         lineno=85,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ation);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  add_edge(weight->op, op, weight->idx, 1);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_pool2d(Tensor _input, Tensor _weight,\n'
              '                               OpType _type,\n'
              '                               int _kernelH, int _kernelW,\n'
              '                               int _strideH, in')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5306,
         lineno=93,
         tokens=259,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_pool2d',
         body='Op Model::get_or_create_pool2d(Tensor _input, Tensor _weight,\n'
              '                               OpType _type,\n'
              '                               int _kernelH, int _kernelW,\n'
              '                               int _strideH, int _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '\n'
              '{\n'
              '  // keys are (inputN, inputC, inputH, inputW, kernelH, '
              'kernelW,              \n'
              '  //           strideH, strideW, padding, activation, _type)\n'
              '  Pool2DKey key(_input, _type, _kernelH, _kernelW, _strideH, '
              '_strideW,\n'
              '                _padding, _activation);\n'
              '  Pool2D* poolOp;\n'
              '  if (pool2d.find(key) != pool2d.end()) {\n'
              '    poolOp = pool2d[key];\n'
              '  } else {\n'
              '    poolOp = new Pool2D(this, _input, _weight, _type, _kernelH, '
              '_kernelW,\n'
              '                        _strideH, _strideW, _padding, '
              '_activation);\n'
              '    measure_pool2d_cost(poolOp);\n'
              '    pool2d[key] = poolOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = poolOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5307,
         lineno=96,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='t _strideW,\n'
              '                               PaddingMode _padding,\n'
              '                               ActiMode _activation)\n'
              '\n'
              '{\n'
              '  // keys are (inputN, inputC, inputH, inputW, kernelH, '
              'kernelW,              \n'
              '  //           strideH, strideW, padding, activation, _type)\n'
              '  Pool2DKey key(_input, _type, _kernelH, _kernelW, _strideH, '
              '_strideW,\n'
              '                _padding, _activation);\n'
              '  Pool2D* poolOp;\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5308,
         lineno=103,
         tokens=30,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _type, _kernelH, _kernelW, _strideH, _strideW,\n'
              '                _padding, _activation)')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5309,
         lineno=106,
         tokens=126,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (pool2d.find(key) != pool2d.end()) {\n'
              '    poolOp = pool2d[key];\n'
              '  } else {\n'
              '    poolOp = new Pool2D(this, _input, _weight, _type, _kernelH, '
              '_kernelW,\n'
              '                        _strideH, _strideW, _padding, '
              '_activation);\n'
              '    measure_pool2d_cost(poolOp);\n'
              '    pool2d[key] = poolOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = poolOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Pool2D::Pool2D(Model* _')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5310,
         lineno=114,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5311,
         lineno=120,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='model, Tensor _input,\n'
              '               Tensor _weight, OpType _type,\n'
              '               int _kernelH, int _kernelW,\n'
              '               int _strideH, int _strideW,\n'
              '               PaddingMode _padding,\n'
              '               ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, _type),\n'
              '  kernelH(_kernelH), kernelW(_kernelW),\n'
              '  strideH(_strideH), strideW(_strideW), \n'
              '  padding(_padding), activation(_activa')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5312,
         lineno=120,
         tokens=650,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::Pool2D',
         body='Pool2D::Pool2D(Model* _model, Tensor _input,\n'
              '               Tensor _weight, OpType _type,\n'
              '               int _kernelH, int _kernelW,\n'
              '               int _strideH, int _strideW,\n'
              '               PaddingMode _padding,\n'
              '               ActiMode _activation)\n'
              ': OpBase(_input, _weight, _model, _type),\n'
              '  kernelH(_kernelH), kernelW(_kernelW),\n'
              '  strideH(_strideH), strideW(_strideW), \n'
              '  padding(_padding), activation(_activation)\n'
              '{\n'
              '  assert(type == OP_POOL2D_MAX || type == OP_POOL2D_AVG);\n'
              '  assert(_input.numDim == 4);\n'
              '  //int inputC = _input.dim[1];\n'
              '  int inputH = _input.dim[2];\n'
              '  int inputW = _input.dim[3];\n'
              '  int outputH, outputW;\n'
              '  switch (padding)\n'
              '  {\n'
              '    case PD_MODE_SAME:\n'
              '      outputH = (inputH + strideH - 1) / strideH;\n'
              '      outputW = (inputW + strideW - 1) / strideW;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      outputH = (inputH - kernelH) / strideH + 1;\n'
              '      outputW = (inputW - kernelW) / strideW + 1;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  //int outputH = 1 + (inputH + 2 * padH - kernelH) / strideH;\n'
              '  //int outputW = 1 + (inputW + 2 * padW - kernelW) / strideW;\n'
              '  //printf("k(%d %d) padding(%d) s(%d %d) o(%d %d)\\n",\n'
              '  //       kernelH, kernelW, padding, strideH, strideW, '
              'outputH, outputW);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 4;\n'
              '  outputs[0].dim[0] = _input.dim[0];\n'
              '  outputs[0].dim[1] = _input.dim[1];\n'
              '  outputs[0].dim[2] = outputH;\n'
              '  outputs[0].dim[3] = outputW;\n'
              '  // Set strides\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].dim[3] * '
              'outputs[0].stride[3];\n'
              '  outputs[0].stride[1] = outputs[0].dim[2] * '
              'outputs[0].stride[2];\n'
              '  outputs[0].stride[0] = outputs[0].dim[1] * '
              'outputs[0].stride[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _input.split[0];\n'
              '  outputs[0].split[1] = _input.split[1];\n'
              '  outputs[0].split[2] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].split[3] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5313,
         lineno=129,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='tion)\n'
              '{\n'
              '  assert(type == OP_POOL2D_MAX || type == OP_POOL2D_AVG);\n'
              '  assert(_input.numDim == 4);\n'
              '  //int inputC = _input.dim[1];\n'
              '  int inputH = _input.dim[2];\n'
              '  int inputW = _input.dim[3];\n'
              '  int outputH, outputW;\n'
              '  switch (padding)\n'
              '  {\n'
              '    case PD_MODE_SAME:\n'
              '      outputH = (inputH + strideH - 1) / strideH;\n'
              '      outputW = (inputW + strideW - 1) / strideW;\n'
              '      break;\n'
              '    case PD_MODE_')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5314,
         lineno=136,
         tokens=7,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='outputH',
         body='int outputH, outputW;')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5315,
         lineno=143,
         tokens=145,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='VALID:\n'
              '      outputH = (inputH - kernelH) / strideH + 1;\n'
              '      outputW = (inputW - kernelW) / strideW + 1;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  //int outputH = 1 + (inputH + 2 * padH - kernelH) / strideH;\n'
              '  //int outputW = 1 + (inputW + 2 * padW - kernelW) / strideW;\n'
              '  //printf("k(%d %d) padding(%d) s(%d %d) o(%d %d)\\n",\n'
              '  //       kernelH, kernelW, padding, strideH, str')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5316,
         lineno=153,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ideW, outputH, outputW);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = 4;\n'
              '  outputs[0].dim[0] = _input.dim[0];\n'
              '  outputs[0].dim[1] = _input.dim[1];\n'
              '  outputs[0].dim[2] = outputH;\n'
              '  outputs[0].dim[3] =')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5317,
         lineno=159,
         tokens=77,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' outputW;\n'
              '  // Set strides\n'
              '  outputs[0].stride[3] = 1;\n'
              '  outputs[0].stride[2] = outputs[0].dim[3] * '
              'outputs[0].stride[3];\n'
              '  outputs[0].stride[1] = outputs[0].dim[2] * '
              'outputs[0].stride[2];\n'
              '  out')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5318,
         lineno=164,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='puts[0].stride[0] = outputs[0].dim[1] * outputs[0].stride[1];\n'
              '  // Set SplitInfo\n'
              '  outputs[0].split[0] = _input.split[0];\n'
              '  outputs[0].split[1] = _input.split[1];\n'
              '  outputs[0].split[2] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].split[3] = SplitInfo::NO_SPLIT;\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Pool2D::~Pool2D(void)\n'
              '{\n'
              '}\n'
              '\n'
              'bool Pool2D::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '   ')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5319,
         lineno=173,
         tokens=11,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::~Pool2D',
         body='Pool2D::~Pool2D(void)\n{\n}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5320,
         lineno=177,
         tokens=143,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::get_int_parameter',
         body='bool Pool2D::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  switch (para) {\n'
              '    case PM_KERNEL_H:\n'
              '      *value = kernelH;\n'
              '      return true;\n'
              '    case PM_KERNEL_W:\n'
              '      *value = kernelW;\n'
              '      return true;\n'
              '    case PM_STRIDE_H:\n'
              '      *value = strideH;\n'
              '      return true;\n'
              '    case PM_STRIDE_W:\n'
              '      *value = strideW;\n'
              '      return true;\n'
              '    case PM_PAD:\n'
              '      *value = padding;\n'
              '      return true;\n'
              '    case PM_ACTI:\n'
              '      *value = activation;\n'
              '      return true;\n'
              '    default:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5321,
         lineno=180,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body=' case PM_KERNEL_H:\n'
              '      *value = kernelH;\n'
              '      return true;\n'
              '    case PM_KERNEL_W:\n'
              '      *value = kernelW;\n'
              '      return true;\n'
              '    case PM_STRIDE_H:\n'
              '      *value = strideH;\n'
              '      return true;\n'
              '    case PM_STRIDE_W:\n'
              '      *value = strideW;\n'
              '      return true;\n'
              '    case PM_PAD:\n'
              '      *value = padding;\n'
              '      return true;\n'
              '    case PM_ACTI:\n'
              '      *value = activation;\n'
              '      return true;\n'
              '    def')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5322,
         lineno=198,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ault:\n'
              '      return OpBase::get_int_parameter(para, value);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Pool2D::get_padding(int* padH, int* padW) {\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  // TODO eliminate duplicated code with conv2d version\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5323,
         lineno=203,
         tokens=278,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::get_padding',
         body='void Pool2D::get_padding(int* padH, int* padW) {\n'
              '  int inputH = inputs[0].dim[2];\n'
              '  int inputW = inputs[0].dim[3];\n'
              '  // TODO eliminate duplicated code with conv2d version\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution\n'
              '  switch (padding) {\n'
              '    case PD_MODE_SAME:\n'
              '      int totalPadH, totalPadW;\n'
              '      if (inputH % strideH == 0)\n'
              '        totalPadH = max(kernelH - strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % strideH), 0);\n'
              '      if (inputW % strideW == 0)\n'
              '        totalPadW = max(kernelW - strideW, 0);\n'
              '      else\n'
              '        totalPadW = max(kernelW - (inputW % strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      *padH = (totalPadH + 1) / 2;\n'
              '      *padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      *padH = 0;\n'
              '      *padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5324,
         lineno=210,
         tokens=9,
         depth=5,
         parent_id=None,
         category='variable',
         summary=False,
         name='totalPadH',
         body='int totalPadH, totalPadW;')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5325,
         lineno=211,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      if (inputH % strideH == 0)\n'
              '        totalPadH = max(kernelH - strideH, 0);\n'
              '      else\n'
              '        totalPadH = max(kernelH - (inputH % strideH), 0);\n'
              '      if (inputW % strideW == 0)\n'
              '        totalPadW = max(kernelW - strideW, 0);\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5326,
         lineno=217,
         tokens=147,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='      else\n'
              '        totalPadW = max(kernelW - (inputW % strideW), 0);\n'
              '      // assert same padding on both sides\n'
              '      *padH = (totalPadH + 1) / 2;\n'
              '      *padW = (totalPadW + 1) / 2;\n'
              '      break;\n'
              '    case PD_MODE_VALID:\n'
              '      *padH = 0;\n'
              '      *padW = 0;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Pool2D::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5327,
         lineno=232,
         tokens=244,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2D::collect_costs',
         body='void Pool2D::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  int outputSize = 1, inputSize = 1;\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize * kernelH * kernelW;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d '
              '%d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '         kernelH, kernelW, strideH, strideW, runtime, '
              'exe_time);\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5328,
         lineno=236,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  for (int i = 0; i < inputs[0].numDim; i++)\n'
              '    inputSize *= inputs[0].dim[i];\n'
              '  // cost metrics\n'
              '  exe_time += runtime;\n'
              '  flops += outputSize * kernelH * kernelW;\n'
              '  mem_acc += inputSize;\n'
              '  num_kernels += 1;\n'
              '  printf("        cost[Pool2D]: i(%d %d %')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5329,
         lineno=245,
         tokens=97,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='d %d) k(%d %d) s(%d %d) cost(%.4lf) total_cost(%.4lf)\\n",\n'
              '         inputs[0].dim[0], inputs[0].dim[1], inputs[0].dim[2], '
              'inputs[0].dim[3],\n'
              '         kernelH, kernelW, strideH, strideW, runtime, '
              'exe_time);\n'
              '}\n'
              '\n'
              '// keys are (kernelH, kernelW, strideH, st')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5330,
         lineno=250,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='rideW, padding, activation, _type,\n'
              '//           input)\n'
              'Pool2DKey::Pool2DKey(Tensor _input, OpType _type,\n'
              '                     int _kernelH, int _kernelW, int _strideH, '
              'int _strideW,\n'
              '                     PaddingMode _padding,\n'
              '                     ActiMode _activation)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _kernelH;\n'
              '  keys[idx++] = _kernelW;\n'
              '  keys[idx++] = _strideH;\n'
              '  keys[idx++] = _strideW;\n'
              '  keys[idx++] = _padding;\n'
              '  keys[idx++] = _activation;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5331,
         lineno=252,
         tokens=153,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Pool2DKey::Pool2DKey',
         body='Pool2DKey::Pool2DKey(Tensor _input, OpType _type,\n'
              '                     int _kernelH, int _kernelW, int _strideH, '
              'int _strideW,\n'
              '                     PaddingMode _padding,\n'
              '                     ActiMode _activation)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _kernelH;\n'
              '  keys[idx++] = _kernelW;\n'
              '  keys[idx++] = _strideH;\n'
              '  keys[idx++] = _strideW;\n'
              '  keys[idx++] = _padding;\n'
              '  keys[idx++] = _activation;\n'
              '  keys[idx++] = _type;\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}')

Fragment(document_cs='f35896d0fbd7dfb45787fb74fead7622174aceca44fb60b02bf16bb41a8f52d0',
         id=5332,
         lineno=266,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(KEY_LENGTH == idx);\n'
              '}\n'
              '\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5333,
         lineno=1,
         tokens=120,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing permi')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5334,
         lineno=1,
         tokens=81,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/core/resize.cc\n'
              '  Functions: key\n'
              '  Methods: Graph::resize Model::get_or_create_resize '
              'Resize::Resize Resize::collect_costs Resize::get_int_parameter '
              'Resize::~Resize ResizeKey::ResizeKey\n'
              '  Variables: ret\n'
              '  Using: taso\n'
              '  Usages: INVALID_OP NO_SPLIT Resize ResizeKey collect_costs '
              'get_int_parameter get_or_create_resize resize\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5335,
         lineno=12,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ssions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              'using namespace taso;\n'
              '\n'
              'TensorHandle Graph::resize(const TensorHandle _input,\n'
              '                           const std::vector<int>& _shape)\n'
              '{\n'
              '  Op op = model->get_or_create_resize(*_input, _shape);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}\n'
              '\n'
              'Op Model::get_or_create_resize(const Tensor& _input,\n'
              '                               const std::vector<int>& _shape)\n'
              '{\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5336,
         lineno=17,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5337,
         lineno=19,
         tokens=92,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Graph::resize',
         body='TensorHandle Graph::resize(const TensorHandle _input,\n'
              '                           const std::vector<int>& _shape)\n'
              '{\n'
              '  Op op = model->get_or_create_resize(*_input, _shape);\n'
              '  assert(op != Op::INVALID_OP);\n'
              '  add_edge(_input->op, op, _input->idx, 0);\n'
              '  TensorHandle t = new Tensor(op.ptr->outputs[0]);\n'
              '  t->op = op;\n'
              '  return t;\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5338,
         lineno=30,
         tokens=140,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::get_or_create_resize',
         body='Op Model::get_or_create_resize(const Tensor& _input,\n'
              '                               const std::vector<int>& _shape)\n'
              '{\n'
              '  if ((int)_shape.size() != _input.numDim)\n'
              '    return Op::INVALID_OP;\n'
              '  ResizeKey key(_input, _shape);\n'
              '  Resize* resizeOp;\n'
              '  if (resize.find(key) != resize.end()) {\n'
              '    resizeOp = resize[key];\n'
              '  } else {\n'
              '    resizeOp = new Resize(this, _input, _shape);\n'
              '    measure_resize_cost(resizeOp);\n'
              '    resize[key] = resizeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = resizeOp;\n'
              '  return ret;\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5339,
         lineno=33,
         tokens=128,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if ((int)_shape.size() != _input.numDim)\n'
              '    return Op::INVALID_OP;\n'
              '  ResizeKey key(_input, _shape);\n'
              '  Resize* resizeOp;\n'
              '  if (resize.find(key) != resize.end()) {\n'
              '    resizeOp = resize[key];\n'
              '  } else {\n'
              '    resizeOp = new Resize(this, _input, _shape);\n'
              '    measure_resize_cost(resizeOp);\n'
              '    resize[key] = resizeOp;\n'
              '  }\n'
              '  Op ret;\n'
              '  ret.guid = global_unique_id ++;\n'
              '  ret.ptr = resizeOp;\n'
              '  return ret;\n'
              '}\n'
              '\n'
              'Resize::Resize(Model* _model, const Tensor& ')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5340,
         lineno=35,
         tokens=7,
         depth=3,
         parent_id=None,
         category='function',
         summary=False,
         name='key',
         body='key(_input, _shape)')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5341,
         lineno=44,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='ret',
         body='Op ret;')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5342,
         lineno=50,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='_input,\n'
              '               const std::vector<int>& _shape)\n'
              ': OpBase(_input, _model, OP_RESIZE), shape(_shape)\n'
              '{\n'
              '  assert((int)_shape.size() == _input.numDim);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  // Currently assume the input tensor has the default layout\n'
              '  assert(_input.default_layout());\n'
              '  int total = 1;\n'
              '  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _shape[i];\n'
              '    if (_shape[i] == _input.dim[i])\n'
              '      outputs[0].split[i] = _input.split[i];\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5343,
         lineno=50,
         tokens=214,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::Resize',
         body='Resize::Resize(Model* _model, const Tensor& _input,\n'
              '               const std::vector<int>& _shape)\n'
              ': OpBase(_input, _model, OP_RESIZE), shape(_shape)\n'
              '{\n'
              '  assert((int)_shape.size() == _input.numDim);\n'
              '  numOutputs = 1;\n'
              '  outputs[0].numDim = _input.numDim;\n'
              '  // Currently assume the input tensor has the default layout\n'
              '  assert(_input.default_layout());\n'
              '  int total = 1;\n'
              '  for (int i = _input.numDim-1; i >= 0; i--) {\n'
              '    outputs[0].dim[i] = _shape[i];\n'
              '    if (_shape[i] == _input.dim[i])\n'
              '      outputs[0].split[i] = _input.split[i];\n'
              '    else\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[i] = total;\n'
              '    total *= outputs[0].dim[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5344,
         lineno=64,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='    else\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].stride[i] = total;\n'
              '    total *= outputs[0].dim[i];\n'
              '  }\n'
              '  outputs[0].idx = 0;\n'
              '}\n'
              '\n'
              'Resize::~Resize(void)\n'
              '{}\n'
              '\n'
              'bool Resize::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5345,
         lineno=72,
         tokens=6,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::~Resize',
         body='Resize::~Resize(void)\n{}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5346,
         lineno=75,
         tokens=29,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::get_int_parameter',
         body='bool Resize::get_int_parameter(PMParameter para, int* value)\n'
              '{\n'
              '  return OpBase::get_int_parameter(para, value);\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5347,
         lineno=78,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '\n'
              'void Resize::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}\n'
              '\n'
              'ResizeKey::ResizeKey(const Tensor& _input,\n'
              '                     const std::vector<int>& _shape)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _shape.size();\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5348,
         lineno=80,
         tokens=35,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Resize::collect_costs',
         body='void Resize::collect_costs(float& exe_time, float& flops,\n'
              '                           float& mem_acc, int& num_kernels)\n'
              '{\n'
              '  exe_time += runtime;\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5349,
         lineno=86,
         tokens=97,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='ResizeKey::ResizeKey',
         body='ResizeKey::ResizeKey(const Tensor& _input,\n'
              '                     const std::vector<int>& _shape)\n'
              '{\n'
              '  int idx = 0;\n'
              '  keys[idx++] = _shape.size();\n'
              '  for (size_t i = 0; i < _shape.size(); i++)\n'
              '    keys[idx++] = _shape[i];\n'
              '  _input.serialize(keys, idx);\n'
              '  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5350,
         lineno=91,
         tokens=35,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (size_t i = 0; i < _shape.size(); i++)\n'
              '    keys[idx++] = _shape[i];\n'
              '  _input.serialize(keys, idx);\n')

Fragment(document_cs='f53fe32ff921657468905c9e3cb442f4f157fd2c32cecf09436d99a3f257ed23',
         id=5351,
         lineno=94,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  while (idx < KEY_LENGTH)\n'
              '    keys[idx++] = 0;\n'
              '  assert(idx == KEY_LENGTH);\n'
              '}\n')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5352,
         lineno=1,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distr')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5353,
         lineno=1,
         tokens=49,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /cpp_examples/dnn.cc\n'
              '  Enums: DNNModel\n'
              '  Functions: main name2model parse_args\n'
              '  Variables: alpha budget exportFileName\n'
              '  Using: taso\n'
              '  Usages: atof atoi string\n')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5354,
         lineno=10,
         tokens=144,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ibuted on an "AS IS" BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "example_utils.h"\n'
              '#include "bert.h"\n'
              '#include "nasnet_a.h"\n'
              '#include "nasrnn.h"\n'
              '#include "resnet50.h"\n'
              '#include "resnext50.h"\n'
              '#include <cstring>\n'
              '\n'
              'using namespace taso;\n'
              '\n'
              'enum DNNModel {\n'
              '  None,\n'
              '  BERT,\n'
              '  NASNETA,\n'
              '  NASRNN,\n'
              '  Resnet50,\n'
              '  Resnext50,\n'
              '};\n'
              '\n'
              'DNNModel name2model(std::string name) {\n')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5355,
         lineno=25,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5356,
         lineno=27,
         tokens=33,
         depth=0,
         parent_id=None,
         category='enum',
         summary=False,
         name='DNNModel',
         body='enum DNNModel {\n'
              '  None,\n'
              '  BERT,\n'
              '  NASNETA,\n'
              '  NASRNN,\n'
              '  Resnet50,\n'
              '  Resnext50,\n'
              '}')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5357,
         lineno=36,
         tokens=89,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='name2model',
         body='DNNModel name2model(std::string name) {\n'
              '  if (name == "bert") return BERT;\n'
              '  if (name == "nasnet-a") return NASNETA;\n'
              '  if (name == "nasrnn") return NASRNN;\n'
              '  if (name == "resnet50") return Resnet50;\n'
              '  if (name == "resnext50") return Resnext50;\n'
              '  return None;\n'
              '}')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5358,
         lineno=36,
         tokens=8,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='name2model',
         body='name2model(std::string name)')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5359,
         lineno=37,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (name == "bert") return BERT;\n'
              '  if (name == "nasnet-a") return NASNETA;\n'
              '  if (name == "nasrnn") return NASRNN;\n'
              '  if (name == "resnet50") return Resnet50;\n'
              '  if (name == "resnext50") return Resnext50;\n'
              '  return None;\n'
              '}\n'
              '\n'
              'void parse_args(float& alpha,\n'
              '                int& budget,\n'
              '                std::string& exportFileName,\n'
              '                DNNModel& dnnModel,\n'
              '                int argc, char **argv) {\n'
              '  alpha = 1.05;\n'
              '  budget = 300;\n'
              '  exportFileName = "";\n'
              '  dnnModel = None;\n')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5360,
         lineno=45,
         tokens=230,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='parse_args',
         body='void parse_args(float& alpha,\n'
              '                int& budget,\n'
              '                std::string& exportFileName,\n'
              '                DNNModel& dnnModel,\n'
              '                int argc, char **argv) {\n'
              '  alpha = 1.05;\n'
              '  budget = 300;\n'
              '  exportFileName = "";\n'
              '  dnnModel = None;\n'
              '  for (int i = 1; i < argc; i++) {\n'
              '    if (!strcmp(argv[i], "--alpha")) {\n'
              '      alpha = std::atof(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--budget")) {\n'
              '      budget = std::atoi(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--export")) {\n'
              '      exportFileName = argv[++i];\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--dnn")) {\n'
              '      dnnModel = name2model(std::string(argv[++i]));\n'
              '      continue;\n'
              '    }\n'
              '    fprintf(stderr, "Found unknown option!!\\n");\n'
              '    assert(false);\n'
              '  }\n'
              '  if (dnnModel == None) fprintf(stderr, "Must specify a DNN '
              'model!\\n");\n'
              '}')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5361,
         lineno=45,
         tokens=36,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='parse_args',
         body='parse_args(float& alpha,\n'
              '                int& budget,\n'
              '                std::string& exportFileName,\n'
              '                DNNModel& dnnModel,\n'
              '                int argc, char **argv)')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5362,
         lineno=54,
         tokens=143,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 1; i < argc; i++) {\n'
              '    if (!strcmp(argv[i], "--alpha")) {\n'
              '      alpha = std::atof(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--budget")) {\n'
              '      budget = std::atoi(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--export")) {\n'
              '      exportFileName = argv[++i];\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--dnn")) {\n'
              '      dnnModel = name2model(std::string(argv[++i]));\n'
              '      continue;\n'
              '    }\n'
              '    fprintf(stderr, "Found unknown option!!\\n");\n'
              '    assert(false);\n'
              '  }\n')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5363,
         lineno=74,
         tokens=117,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  if (dnnModel == None) fprintf(stderr, "Must specify a DNN '
              'model!\\n");\n'
              '}\n'
              '\n'
              'int main(int argc, char **argv) {\n'
              '  int budget;\n'
              '  float alpha;\n'
              '  std::string exportFileName;\n'
              '  DNNModel dnn = None;\n'
              '  parse_args(alpha, budget, exportFileName, dnn, argc, argv);\n'
              '  printf("DNN Model %d, alpha = %.4lf, budget = %d\\n", dnn, '
              'alpha, budget);\n'
              '\n'
              '  Graph* graph = nullptr;\n'
              '  switch (dnn) {\n'
              '    ')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5364,
         lineno=77,
         tokens=216,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='int main(int argc, char **argv) {\n'
              '  int budget;\n'
              '  float alpha;\n'
              '  std::string exportFileName;\n'
              '  DNNModel dnn = None;\n'
              '  parse_args(alpha, budget, exportFileName, dnn, argc, argv);\n'
              '  printf("DNN Model %d, alpha = %.4lf, budget = %d\\n", dnn, '
              'alpha, budget);\n'
              '\n'
              '  Graph* graph = nullptr;\n'
              '  switch (dnn) {\n'
              '    case BERT:\n'
              '      graph = bert(alpha, budget);\n'
              '      break;\n'
              '    case NASNETA:\n'
              '      graph = nasnet_a(alpha, budget);\n'
              '      break;\n'
              '    case NASRNN:\n'
              '      graph = nasrnn(alpha, budget);\n'
              '      break;\n'
              '    case Resnet50:\n'
              '      graph = resnet50(alpha, budget);\n'
              '      break;\n'
              '    case Resnext50:\n'
              '      graph = resnext50(alpha, budget);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  if (!exportFileName.empty()) '
              'graph->export_to_file(exportFileName);\n'
              '  return 0;\n'
              '}')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5365,
         lineno=77,
         tokens=8,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='main',
         body='main(int argc, char **argv)')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5366,
         lineno=78,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='budget',
         body='int budget;')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5367,
         lineno=79,
         tokens=3,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='alpha',
         body='float alpha;')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5368,
         lineno=80,
         tokens=6,
         depth=2,
         parent_id=None,
         category='variable',
         summary=False,
         name='exportFileName',
         body='std::string exportFileName;')

Fragment(document_cs='f812e2adc794bb827f91eda4404522223e8f4befa5a43b7ce802d3bf5e18c78a',
         id=5369,
         lineno=87,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='case BERT:\n'
              '      graph = bert(alpha, budget);\n'
              '      break;\n'
              '    case NASNETA:\n'
              '      graph = nasnet_a(alpha, budget);\n'
              '      break;\n'
              '    case NASRNN:\n'
              '      graph = nasrnn(alpha, budget);\n'
              '      break;\n'
              '    case Resnet50:\n'
              '      graph = resnet50(alpha, budget);\n'
              '      break;\n'
              '    case Resnext50:\n'
              '      graph = resnext50(alpha, budget);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  if (!exportFileName.empty()) '
              'graph->export_to_file(exportFileName);\n'
              '  return 0;\n'
              '}\n')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5370,
         lineno=1,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5371,
         lineno=1,
         tokens=59,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/squeeze_mkl.cc\n'
              '  Methods: Model::measure_squeeze_cost Squeeze::forward '
              'Squeeze::map Squeeze::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map measure_squeeze_cost unmap\n')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5372,
         lineno=16,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void Squeeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void Squeeze::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.cl')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5373,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5374,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5375,
         lineno=21,
         tokens=48,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::map',
         body='void Squeeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5376,
         lineno=28,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::unmap',
         body='void Squeeze::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5377,
         lineno=31,
         tokens=95,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void Squeeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume());\n'
              '}\n'
              '\n'
              'void Model::measure_squeeze_cost(Squeeze* sqz)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5378,
         lineno=37,
         tokens=41,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Squeeze::forward',
         body='void Squeeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel((DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume());\n'
              '}')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5379,
         lineno=42,
         tokens=151,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='Model::measure_squeeze_cost',
         body='void Model::measure_squeeze_cost(Squeeze* sqz)\n'
              '{\n'
              '  // measure.\n'
              '  uint64_t beg = 0;\n'
              '  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    copy_kernel(outputPtr, inputPtr, '
              'sqz->outputs[0].volume());\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  sqz->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeze]: cost(%.4lf)\\n", '
              'sqz->runtime);\n'
              '}')

Fragment(document_cs='fc5570110f8b322786617e9a7f1bb26c36755341ffcf165e5b805112efc17103',
         id=5380,
         lineno=46,
         tokens=124,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {\n'
              '    if (i == WARMUP_TIMES) {\n'
              '      beg = microsecond_timer();\n'
              '    }\n'
              '    copy_kernel(outputPtr, inputPtr, '
              'sqz->outputs[0].volume());\n'
              '  }\n'
              '  auto end = microsecond_timer();\n'
              '\n'
              '  sqz->runtime = (end - beg) / 1.e3 / REPEAT_TIMES;  // '
              'milliseconds\n'
              '  if (print_cost)\n'
              '    printf("  measure[Squeeze]: cost(%.4lf)\\n", '
              'sqz->runtime);\n'
              '}\n'
              '\n')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5381,
         lineno=1,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='import xflow\n'
              '\n'
              'graph = xflow.new_graph()\n'
              'input = graph.new_input(dims=(1,512,28,28))\n'
              'input = graph.maxpool2d(input=input, kernels=(1,1), '
              'strides=(1,1), padding="SAME")\n'
              '# Printing the performance of different multi-branch '
              'convolutions\n'
              'graph.print_measurements()\n'
              'i = 1\n'
              'while i <= 32:\n'
              '    print("Num. Convs Per Grop = {}".format(i))\n'
              '    weig')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5382,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         summary=False,
         name='',
         body='import')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5383,
         lineno=1,
         tokens=44,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='Python: /examples/eval_groups.py\n'
              '  Variables and usages: activation conv2d dims format graph '
              'input kernels maxpool2d new_graph new_input new_weight padding '
              'print print_measurements strides weight xflow\n')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5384,
         lineno=6,
         tokens=11,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='# Printing the performance of different multi-branch '
              'convolutions')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5385,
         lineno=10,
         tokens=9,
         depth=8,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='Num. Convs Per Grop = {}')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5386,
         lineno=11,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ht = graph.new_weight(dims=(512,512//i,3,3))\n'
              '    t = '
              'graph.conv2d(input=input,weight=weight,strides=(1,1),padding="SAME", '
              'activation="RELU")\n'
              '    i *= 2\n'
              '\n'
              '#weight1 = graph.new_weight(dims=(256,8,3,3))\n'
              '#t1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight2 = graph.new_weight(dims=(256,16,3,')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5387,
         lineno=15,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight1 = graph.new_weight(dims=(256,8,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5388,
         lineno=16,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5389,
         lineno=17,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='3))\n'
              '#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight3 = graph.new_weight(dims=(256,32,3,3))\n'
              '#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight4 = graph.new_weight(dims=(256,64,3,3))\n'
              '#t4 = graph.conv2d(input=input,weight=weight4,s')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5390,
         lineno=17,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight2 = graph.new_weight(dims=(256,16,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5391,
         lineno=18,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5392,
         lineno=19,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight3 = graph.new_weight(dims=(256,32,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5393,
         lineno=20,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5394,
         lineno=21,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight4 = graph.new_weight(dims=(256,64,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5395,
         lineno=22,
         tokens=114,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='trides=(1,1), padding="SAME", activation="RELU")\n'
              '#weight5 = graph.new_weight(dims=(256,128,3,3))\n'
              '#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight6 = graph.new_weight(dims=(256,256,3,3))\n'
              '#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '\n')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5396,
         lineno=22,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5397,
         lineno=23,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight5 = graph.new_weight(dims=(256,128,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5398,
         lineno=24,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5399,
         lineno=25,
         tokens=18,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#weight6 = graph.new_weight(dims=(256,256,3,3))')

Fragment(document_cs='fc9409f820eb42d98b106c6ef711b2146e94a8e42c53471b1c2ab4a3219025d2',
         id=5400,
         lineno=26,
         tokens=31,
         depth=0,
         parent_id=None,
         category='documentation',
         summary=False,
         name='',
         body='#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5401,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='/* Copyright 2020 Stanford, Tsinghua\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS ')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5402,
         lineno=1,
         tokens=57,
         depth=0,
         parent_id=None,
         category='summary',
         summary=True,
         name='',
         body='C++: /src/dnnl/broadcast_add_mkl.cc\n'
              '  Functions: broadcast_add_kernel\n'
              '  Methods: BroadcastAdd::forward BroadcastAdd::map '
              'BroadcastAdd::unmap\n'
              '  Using: dnnl taso\n'
              '  Usages: forward map unmap\n')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5403,
         lineno=11,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='OF ANY KIND, either express or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n'
              '\n'
              '#include "taso/ops.h"\n'
              '#include "taso/dnnl_helper.h"\n'
              'using namespace taso;\n'
              'using namespace dnnl;\n'
              '\n'
              'void broadcast_add_kernel(int batch, int channel, int '
              'h_w_size,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* _data, const DATATYPE* '
              '_bias) {\n'
              '  int volume = batch * channel * h_w_size;\n'
              '#pragma omp parallel for\n')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5404,
         lineno=18,
         tokens=5,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='taso',
         body='using namespace taso;')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5405,
         lineno=19,
         tokens=6,
         depth=0,
         parent_id=None,
         category='using',
         summary=False,
         name='dnnl',
         body='using namespace dnnl;')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5406,
         lineno=21,
         tokens=35,
         depth=1,
         parent_id=None,
         category='function',
         summary=False,
         name='broadcast_add_kernel',
         body='broadcast_add_kernel(int batch, int channel, int h_w_size,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* _data, const DATATYPE* '
              '_bias)')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5407,
         lineno=21,
         tokens=100,
         depth=0,
         parent_id=None,
         category='function',
         summary=False,
         name='broadcast_add_kernel',
         body='void broadcast_add_kernel(int batch, int channel, int '
              'h_w_size,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* _data, const DATATYPE* '
              '_bias) {\n'
              '  int volume = batch * channel * h_w_size;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5408,
         lineno=25,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='  for (int i = 0; i < volume; i++) {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}\n'
              '\n'
              'void BroadcastAdd::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}\n'
              '\n'
              'void BroadcastAdd::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tens')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5409,
         lineno=31,
         tokens=72,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::map',
         body='void BroadcastAdd::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
              '}')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5410,
         lineno=40,
         tokens=43,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::unmap',
         body='void BroadcastAdd::unmap(void)\n'
              '{\n'
              '  // clear primitives\n'
              '  net.clear();\n'
              '  // free tensors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5411,
         lineno=44,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         summary=False,
         name='',
         body='ors\n'
              '  free(outputs[0].data_ptr);\n'
              '  outputs[0].data_ptr = nullptr;\n'
              '}\n'
              '\n'
              'void BroadcastAdd::forward(bool block)\n'
              '{\n'
              '  int batch = outputs[0].dim[0];\n'
              '  int channel = outputs[0].dim[1];\n'
              '  int h_w_size = outputs[0].dim[2] * outputs[0].dim[3];\n'
              '  DATATYPE* _data_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* _bias_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  broadcast_add_kernel(batch, channel, h_w_size,\n'
              '      (DATATYPE*)outputs[0].data_ptr, _data_ptr, _bias_ptr);\n'
              '}\n'
              '\n')

Fragment(document_cs='feabc389be71b9dc72683a902a43fec97321c91ac341081bdbb87802c4458534',
         id=5412,
         lineno=49,
         tokens=127,
         depth=0,
         parent_id=None,
         category='method',
         summary=False,
         name='BroadcastAdd::forward',
         body='void BroadcastAdd::forward(bool block)\n'
              '{\n'
              '  int batch = outputs[0].dim[0];\n'
              '  int channel = outputs[0].dim[1];\n'
              '  int h_w_size = outputs[0].dim[2] * outputs[0].dim[3];\n'
              '  DATATYPE* _data_ptr = (DATATYPE*) inputs[0].data_ptr;\n'
              '  DATATYPE* _bias_ptr = (DATATYPE*) inputs[1].data_ptr;\n'
              '  broadcast_add_kernel(batch, channel, h_w_size,\n'
              '      (DATATYPE*)outputs[0].data_ptr, _data_ptr, _bias_ptr);\n'
              '}')