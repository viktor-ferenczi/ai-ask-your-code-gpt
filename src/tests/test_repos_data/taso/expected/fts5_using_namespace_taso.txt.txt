Hit(uuid='NORMALIZED',
    path='/src/cudnn/ops_cudnn.cu',
    lineno=16,
    depth=0,
    type='module',
    name='',
    text='#include "taso/ops.h"\n'
         '#include "taso/cuda_helper.h"\n'
         'using namespace taso;\n'
         '\n'
         'Model::Model()\n'
         ': isTraining(false), print_cost(false)\n'
         '{\n'
         '  //int* a = (int*) malloc(sizeof(int) * 8);\n'
         '  checkCUDA(cudaSetDevice(0));\n'
         '  checkCUDNN(cudnnCreate(&dnn));\n'
         '  checkCUDA(cublasCreate(&blas));\n'
         '  workSpaceSize = WOR',
    score=1.0)

Hit(uuid='NORMALIZED',
    path='/src/cudnn/squeeze_kernel.cu',
    lineno=10,
    depth=0,
    type='module',
    name='',
    text='ibuted on an "AS IS" BASIS,\n'
         ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
         'implied.\n'
         ' * See the License for the specific language governing permissions '
         'and\n'
         ' * limitations under the License.\n'
         ' */\n'
         '\n'
         '#include "taso/ops.h"\n'
         '#include "taso/cuda_helper.h"\n'
         'using namespace taso;\n'
         '\n'
         'void Squeeze::map(void)\n'
         '{\n'
         '  // allocate tensors\n'
         '  size_t outputSize = sizeof(DATATYPE);\n',
    score=0.9946524064171123)

Hit(uuid='NORMALIZED',
    path='/src/cudnn/squeeze_kernel.cu',
    lineno=18,
    depth=0,
    type='using',
    name='taso',
    text='using namespace taso;',
    score=0.9893048128342246)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/merge_gconv_mkl.cc',
    lineno=11,
    depth=0,
    type='module',
    name='',
    text='ES OR CONDITIONS OF ANY KIND, either express or implied.\n'
         ' * See the License for the specific language governing permissions '
         'and\n'
         ' * limitations under the License.\n'
         ' */\n'
         '\n'
         '#include "taso/ops.h"\n'
         '#include "taso/dnnl_helper.h"\n'
         'using namespace taso;\n'
         'using namespace dnnl;\n'
         '\n'
         'void merge_gconv_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, '
         'int volume,\n'
         '    int cInHW, int cOut, int count) {\n'
         '  assert(cOut % count == 0);\n'
         '#pragma omp parallel for\n',
    score=0.983957219251337)

Hit(uuid='NORMALIZED',
    path='/src/cudnn/ops_cudnn.cu',
    lineno=18,
    depth=0,
    type='using',
    name='taso',
    text='using namespace taso;',
    score=0.9786096256684492)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/merge_gconv_mkl.cc',
    lineno=18,
    depth=0,
    type='using',
    name='taso',
    text='using namespace taso;',
    score=0.9732620320855615)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/cast_mkl.cc',
    lineno=12,
    depth=0,
    type='module',
    name='',
    text='c language governing permissions and\n'
         ' * limitations under the License.\n'
         ' */\n'
         '\n'
         '#include "taso/ops.h"\n'
         '#include "taso/dnnl_helper.h"\n'
         'using namespace taso;\n'
         'using namespace dnnl;\n'
         '\n'
         'void Cast::map(void)\n'
         '{\n'
         '  // allocate tensors\n'
         '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
         '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
         '}\n'
         '\n'
         'void Cast::unmap(void)\n'
         '{\n'
         '  // clear primitives\n'
         '  net.clear();\n'
         '  // free tensors\n'
         '  free(outputs[0].data_ptr);\n'
         '  outputs[0].data_ptr = nullptr;\n'
         '}\n'
         '\n'
         'void Cast::forward(bool block)\n'
         '{\n',
    score=0.9679144385026738)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/cast_mkl.cc',
    lineno=18,
    depth=0,
    type='using',
    name='taso',
    text='using namespace taso;',
    score=0.9625668449197861)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/constant_mkl.cc',
    lineno=12,
    depth=0,
    type='module',
    name='',
    text='icense for the specific language governing permissions and\n'
         ' * limitations under the License.\n'
         ' */\n'
         '\n'
         '#include "taso/ops.h"\n'
         '#include "taso/dnnl_helper.h"\n'
         'using namespace taso;\n'
         '\n'
         'void Constant::map(void)\n'
         '{\n'
         '  // allocate tensors\n'
         '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
         '  CHECK_NE(nullptr, outputs[0].data_ptr = malloc(outputSize));\n'
         '}\n'
         '\n'
         'void Constant::unmap(void)\n'
         '{\n'
         '  // free tensors\n'
         '  free(outputs[0].data_ptr);\n'
         '  outputs[0].data_ptr = nullptr;\n'
         '}\n'
         '\n'
         'void Constant::forward(bool block)\n'
         '{\n'
         '}\n'
         '\n',
    score=0.9572192513368984)

Hit(uuid='NORMALIZED',
    path='/src/dnnl/constant_mkl.cc',
    lineno=18,
    depth=0,
    type='using',
    name='taso',
    text='using namespace taso;',
    score=0.9518716577540107)