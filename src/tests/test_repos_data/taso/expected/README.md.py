[Hit(uuid='0',
     path='/README.md',
     lineno=1,
     depth=1,
     type='documentation',
     name='',
     text='# TASO: The Tensor Algebra SuperOptimizer for Deep Learning\n'
          '\n'
          'TASO optimizes the computation graphs of DNN models using '
          'automatically generated and verified graph transformations.\n'
          'For an arbitrary DNN model, TASO uses the auto-generated graph '
          'transformations to build a large search space of potential '
          'computation graphs that are equivalent to the original DNN model.\n'
          'TASO employs a cost-based search algorithm to explore the space, '
          'and automatically discovers highly optimized computation graphs.\n'
          'TASO outperforms the graph optimizers in existing deep learning '
          'frameworks by [up to '
          '3x](http://theory.stanford.edu/~aiken/publications/papers/sosp19.pdf).\n'
          '<div align="center">\n'
          '  <img '
          'src="https://github.com/jiazhihao/TASO/blob/master/figures/inference.png">\n'
          '  End-to-end inference performance comparison on a NVIDIA V100 '
          'GPU.\n'
          '</div>\n'
          '\n'
          '## Install TASO\n'
          '\n'
          'See [instructions](INSTALL.md) to install TASO from source.\n'
          'We also provide prebuilt [docker '
          'images](https://github.com/jiazhihao/TASO/blob/master/INSTALL.md) '
          'with all dependencies pre-installed.\n'
          '\n'
          '## Use TASO\n'
          '\n'
          'TASO can directly optimize any pre-trained DNN models in '
          '[ONNX](https://onnx.ai), '
          '[TensorFlow](https://www.tensorflow.org/guide/saved_model), and '
          '[PyTorch](https://pytorch.org/docs/stable/onnx.html) graph '
          'formats.\n'
          'TASO also provides a Python interface for optimizing arbitrary DNN '
          'architectures.\n'
          'TASO supports exporting the optimized computation graphs to ONNX, '
          'which can be directly used as inputs by most existing deep learning '
          'frameworks.\n'
          '\n'
          '### Optimize ONNX Models\n'
          '\n'
          'TASO can directly optimize pre-trained ONNX models, and this can be '
          'done in just a few lines of Python code.\n'
          'The following code snippet shows how to load a pre-trained DNN '
          'model from ONNX, optimize the model, and save the optimized model '
          'into a ONNX file.\n'
          '```python\n'
          'import taso\n'
          'import onnx\n'
          '\n'
          'old_model = taso.load_onnx("/path/to/load/onnx/model")\n'
          'taso_graph = taso.optimize(old_model)\n'
          'new_model = taso.export_onnx(taso_graph)\n'
          'onnx.save(new_model, "/path/to/save/new/onnx/model")\n'
          '```\n'
          'The optimized model has the same accuracy as the original and can '
          'be directly used by existing deep learning frameworks.\n'
          'Some original and TASO-optimized ONNX files are available in the '
          '`onnx` folder.\n'
          '<!-- The following figure shows the end-to-end inference '
          'performance comparison on a NVIDIA V100 GPU. -->\n'
          '\n'
          '### Optimize TensorFlow Models\n'
          '\n'
          'TASO can optimize TensorFlow models by converting the model to ONNX '
          'using [tf2onnx](https://github.com/onnx/tensorflow-onnx).\n'
          '\n'
          '* First, install `tf2onnx` from PyPi as follows or [from '
          'source](https://github.com/onnx/tensorflow-onnx).\n'
          '```\n'
          'pip install -U tf2onnx\n'
          '```\n'
          '\n'
          '* Second, convert a TensorFlow model to ONNX using `tf2onnx`.\n'
          '```\n'
          'python -m tf2onnx.convert \\\n'
          '       --saved-model /path/to/tensorflow/saved/model \\\n'
          '       --output /path/to/onnx/model/file\n'
          '```\n'
          '\n'
          '* Third, use TASO to optimize the model in ONNX by following the '
          '[above '
          'instructions](https://github.com/jiazhihao/TASO#optimize-onnx-models).\n'
          '\n'
          '### Optimize PyTorch Models\n'
          '\n'
          'PyTorch has built-in support for ONNX as a part of the '
          '[torch.onnx](https://pytorch.org/docs/master/onnx.html) package.\n'
          'TASO can directly optimize PyTorch models in the ONNX format.\n'
          '\n'
          '### Optimize Arbitrary DNN Models using the Python Interface\n'
          '\n'
          'TASO can also optimize arbitrary DNN architectures using the TASO '
          'Python interface. \n'
          'The following code snippet builds the left-most DNN graph depicted '
          'in the figure. TASO automatically performs a series of non-trivial '
          'transformations, and eventually discovers the right-most DNN graph, '
          'which is 1.3x faster on a V100 GPU. More DNN examples are available '
          'in the `examples` folder.\n'
          '\n'
          '<div align="center">\n'
          '  <img '
          'src="https://github.com/jiazhihao/TASO/blob/master/figures/graph_subst.png">\n'
          '</div>\n'
          '\n'
          '```python\n'
          'import taso\n'
          'import onnx\n'
          '\n'
          '#Build DNN model\n'
          'graph = taso.new_graph()\n'
          'input = graph.new_input(dims=(1,128,56,56))\n'
          'w1 = graph.new_weight(dims=(128,128,3,3))\n'
          'w2 = graph.new_weight(dims=(128,128,1,1))\n'
          'w3 = graph.new_weight(dims=(128,128,3,3))\n'
          'left = graph.conv2d(input=input, weight=w1, strides=(1,1), '
          'padding="SAME", activation="RELU")\n'
          'left = graph.conv2d(input=left, weight=w3, strides=(1,1), '
          'padding="SAME")\n'
          'right = graph.conv2d(input=input, weight=w2, strides=(1,1), '
          'padding="SAME", activation="RELU")\n'
          'output = graph.add(left, right)\n'
          'output = graph.relu(output)\n'
          '\n'
          '#Optimize DNN model\n'
          'new_graph = taso.optimize(graph)\n'
          'onnx_model = taso.export_onnx(new_graph)\n'
          'onnx.save(onnx_model, "/path/to/save/new/onnx/model")\n'
          '```\n'
          '\n'
          '## Publication\n'
          '* Zhihao Jia, Oded Padon, James Thomas, Todd Warszawski, Matei '
          'Zaharia, and Alex Aiken. [TASO: Optimizing Deep Learning '
          'Computation with Automated Generation of Graph '
          'Substitutions](https://cs.stanford.edu/~zhihao/papers/sosp19.pdf). '
          'In Proceedings of the Symposium on Operating Systems Principles '
          '(SOSP), Ontario, Canada, October 2019.\n'
          '\n'
          '* Zhihao Jia, James Thomas, Todd Warszawski, Mingyu Gao, Matei '
          'Zaharia, and Alex Aiken. [Optimizing DNN Computation with Relaxed '
          'Graph '
          'Substitutions](https://theory.stanford.edu/~aiken/publications/papers/sysml19b.pdf). '
          'In Proceedings of the Conference on Systems and Machine Learning '
          '(SysML), Palo Alto, CA, April 2019.\n'
          '\n',
     tokens=1311,
     score=1.0)]